
Harsh Acceleration Braking Tilt and Rash Turn Sensing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e20c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0800e2c8  0800e2c8  0001e2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800fd00  0800fd00  0001fd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800fd04  0800fd04  0001fd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000000  0800fd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003e0  200001f8  0800fefc  000201f8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200005d8  0800fefc  000205d8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00036469  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000644b  00000000  00000000  00056685  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c5c5  00000000  00000000  0005cad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010f8  00000000  00000000  00069098  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002550  00000000  00000000  0006a190  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000de29  00000000  00000000  0006c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000059b5  00000000  00000000  0007a509  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007febe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003c44  00000000  00000000  0007ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f8 	.word	0x200001f8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e2b0 	.word	0x0800e2b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001fc 	.word	0x200001fc
 8000100:	0800e2b0 	.word	0x0800e2b0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fcc5 	bl	8001ddc <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc1f 	bl	8001ca0 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fcb7 	bl	8001ddc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcad 	bl	8001ddc <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc3f 	bl	8001d14 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fc35 	bl	8001d14 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb91 	bl	8000be8 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb23 	bl	8000b1c <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb83 	bl	8000be8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb79 	bl	8000be8 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb2f 	bl	8000b68 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fb25 	bl	8000b68 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_d2uiz>:
 800052c:	b570      	push	{r4, r5, r6, lr}
 800052e:	2200      	movs	r2, #0
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <__aeabi_d2uiz+0x38>)
 8000532:	0004      	movs	r4, r0
 8000534:	000d      	movs	r5, r1
 8000536:	f7ff ffb5 	bl	80004a4 <__aeabi_dcmpge>
 800053a:	2800      	cmp	r0, #0
 800053c:	d104      	bne.n	8000548 <__aeabi_d2uiz+0x1c>
 800053e:	0020      	movs	r0, r4
 8000540:	0029      	movs	r1, r5
 8000542:	f002 fa63 	bl	8002a0c <__aeabi_d2iz>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <__aeabi_d2uiz+0x38>)
 800054a:	2200      	movs	r2, #0
 800054c:	0020      	movs	r0, r4
 800054e:	0029      	movs	r1, r5
 8000550:	f001 ff26 	bl	80023a0 <__aeabi_dsub>
 8000554:	f002 fa5a 	bl	8002a0c <__aeabi_d2iz>
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	061b      	lsls	r3, r3, #24
 800055c:	469c      	mov	ip, r3
 800055e:	4460      	add	r0, ip
 8000560:	e7f1      	b.n	8000546 <__aeabi_d2uiz+0x1a>
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	41e00000 	.word	0x41e00000

08000568 <__aeabi_fadd>:
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	46c6      	mov	lr, r8
 800056c:	024e      	lsls	r6, r1, #9
 800056e:	0247      	lsls	r7, r0, #9
 8000570:	0a76      	lsrs	r6, r6, #9
 8000572:	0a7b      	lsrs	r3, r7, #9
 8000574:	0044      	lsls	r4, r0, #1
 8000576:	0fc5      	lsrs	r5, r0, #31
 8000578:	00f7      	lsls	r7, r6, #3
 800057a:	0048      	lsls	r0, r1, #1
 800057c:	4698      	mov	r8, r3
 800057e:	b500      	push	{lr}
 8000580:	0e24      	lsrs	r4, r4, #24
 8000582:	002a      	movs	r2, r5
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	0e00      	lsrs	r0, r0, #24
 8000588:	0fc9      	lsrs	r1, r1, #31
 800058a:	46bc      	mov	ip, r7
 800058c:	428d      	cmp	r5, r1
 800058e:	d067      	beq.n	8000660 <__aeabi_fadd+0xf8>
 8000590:	1a22      	subs	r2, r4, r0
 8000592:	2a00      	cmp	r2, #0
 8000594:	dc00      	bgt.n	8000598 <__aeabi_fadd+0x30>
 8000596:	e0a5      	b.n	80006e4 <__aeabi_fadd+0x17c>
 8000598:	2800      	cmp	r0, #0
 800059a:	d13a      	bne.n	8000612 <__aeabi_fadd+0xaa>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0x3a>
 80005a0:	e093      	b.n	80006ca <__aeabi_fadd+0x162>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2900      	cmp	r1, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_fadd+0x42>
 80005a8:	e0bc      	b.n	8000724 <__aeabi_fadd+0x1bc>
 80005aa:	2401      	movs	r4, #1
 80005ac:	1bdb      	subs	r3, r3, r7
 80005ae:	015a      	lsls	r2, r3, #5
 80005b0:	d546      	bpl.n	8000640 <__aeabi_fadd+0xd8>
 80005b2:	019b      	lsls	r3, r3, #6
 80005b4:	099e      	lsrs	r6, r3, #6
 80005b6:	0030      	movs	r0, r6
 80005b8:	f002 fb7a 	bl	8002cb0 <__clzsi2>
 80005bc:	3805      	subs	r0, #5
 80005be:	4086      	lsls	r6, r0
 80005c0:	4284      	cmp	r4, r0
 80005c2:	dd00      	ble.n	80005c6 <__aeabi_fadd+0x5e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_fadd+0x19a>
 80005c6:	1b04      	subs	r4, r0, r4
 80005c8:	0032      	movs	r2, r6
 80005ca:	2020      	movs	r0, #32
 80005cc:	3401      	adds	r4, #1
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	1b04      	subs	r4, r0, r4
 80005d2:	40a6      	lsls	r6, r4
 80005d4:	0033      	movs	r3, r6
 80005d6:	1e5e      	subs	r6, r3, #1
 80005d8:	41b3      	sbcs	r3, r6
 80005da:	2400      	movs	r4, #0
 80005dc:	4313      	orrs	r3, r2
 80005de:	075a      	lsls	r2, r3, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fadd+0x84>
 80005e2:	220f      	movs	r2, #15
 80005e4:	401a      	ands	r2, r3
 80005e6:	2a04      	cmp	r2, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x84>
 80005ea:	3304      	adds	r3, #4
 80005ec:	015a      	lsls	r2, r3, #5
 80005ee:	d529      	bpl.n	8000644 <__aeabi_fadd+0xdc>
 80005f0:	3401      	adds	r4, #1
 80005f2:	2cff      	cmp	r4, #255	; 0xff
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x90>
 80005f6:	e081      	b.n	80006fc <__aeabi_fadd+0x194>
 80005f8:	002a      	movs	r2, r5
 80005fa:	019b      	lsls	r3, r3, #6
 80005fc:	0a5b      	lsrs	r3, r3, #9
 80005fe:	b2e4      	uxtb	r4, r4
 8000600:	025b      	lsls	r3, r3, #9
 8000602:	05e4      	lsls	r4, r4, #23
 8000604:	0a58      	lsrs	r0, r3, #9
 8000606:	07d2      	lsls	r2, r2, #31
 8000608:	4320      	orrs	r0, r4
 800060a:	4310      	orrs	r0, r2
 800060c:	bc04      	pop	{r2}
 800060e:	4690      	mov	r8, r2
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	2cff      	cmp	r4, #255	; 0xff
 8000614:	d0e3      	beq.n	80005de <__aeabi_fadd+0x76>
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	0038      	movs	r0, r7
 800061a:	04c9      	lsls	r1, r1, #19
 800061c:	4308      	orrs	r0, r1
 800061e:	4684      	mov	ip, r0
 8000620:	2a1b      	cmp	r2, #27
 8000622:	dd00      	ble.n	8000626 <__aeabi_fadd+0xbe>
 8000624:	e082      	b.n	800072c <__aeabi_fadd+0x1c4>
 8000626:	2020      	movs	r0, #32
 8000628:	4661      	mov	r1, ip
 800062a:	40d1      	lsrs	r1, r2
 800062c:	1a82      	subs	r2, r0, r2
 800062e:	4660      	mov	r0, ip
 8000630:	4090      	lsls	r0, r2
 8000632:	0002      	movs	r2, r0
 8000634:	1e50      	subs	r0, r2, #1
 8000636:	4182      	sbcs	r2, r0
 8000638:	430a      	orrs	r2, r1
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	015a      	lsls	r2, r3, #5
 800063e:	d4b8      	bmi.n	80005b2 <__aeabi_fadd+0x4a>
 8000640:	075a      	lsls	r2, r3, #29
 8000642:	d1ce      	bne.n	80005e2 <__aeabi_fadd+0x7a>
 8000644:	08de      	lsrs	r6, r3, #3
 8000646:	002a      	movs	r2, r5
 8000648:	2cff      	cmp	r4, #255	; 0xff
 800064a:	d13a      	bne.n	80006c2 <__aeabi_fadd+0x15a>
 800064c:	2e00      	cmp	r6, #0
 800064e:	d100      	bne.n	8000652 <__aeabi_fadd+0xea>
 8000650:	e0ae      	b.n	80007b0 <__aeabi_fadd+0x248>
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	03db      	lsls	r3, r3, #15
 8000656:	4333      	orrs	r3, r6
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	0a5b      	lsrs	r3, r3, #9
 800065c:	24ff      	movs	r4, #255	; 0xff
 800065e:	e7cf      	b.n	8000600 <__aeabi_fadd+0x98>
 8000660:	1a21      	subs	r1, r4, r0
 8000662:	2900      	cmp	r1, #0
 8000664:	dd52      	ble.n	800070c <__aeabi_fadd+0x1a4>
 8000666:	2800      	cmp	r0, #0
 8000668:	d031      	beq.n	80006ce <__aeabi_fadd+0x166>
 800066a:	2cff      	cmp	r4, #255	; 0xff
 800066c:	d0b7      	beq.n	80005de <__aeabi_fadd+0x76>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	003e      	movs	r6, r7
 8000672:	04c0      	lsls	r0, r0, #19
 8000674:	4306      	orrs	r6, r0
 8000676:	46b4      	mov	ip, r6
 8000678:	291b      	cmp	r1, #27
 800067a:	dd00      	ble.n	800067e <__aeabi_fadd+0x116>
 800067c:	e0aa      	b.n	80007d4 <__aeabi_fadd+0x26c>
 800067e:	2620      	movs	r6, #32
 8000680:	4660      	mov	r0, ip
 8000682:	40c8      	lsrs	r0, r1
 8000684:	1a71      	subs	r1, r6, r1
 8000686:	4666      	mov	r6, ip
 8000688:	408e      	lsls	r6, r1
 800068a:	0031      	movs	r1, r6
 800068c:	1e4e      	subs	r6, r1, #1
 800068e:	41b1      	sbcs	r1, r6
 8000690:	4301      	orrs	r1, r0
 8000692:	185b      	adds	r3, r3, r1
 8000694:	0159      	lsls	r1, r3, #5
 8000696:	d5d3      	bpl.n	8000640 <__aeabi_fadd+0xd8>
 8000698:	3401      	adds	r4, #1
 800069a:	2cff      	cmp	r4, #255	; 0xff
 800069c:	d100      	bne.n	80006a0 <__aeabi_fadd+0x138>
 800069e:	e087      	b.n	80007b0 <__aeabi_fadd+0x248>
 80006a0:	2201      	movs	r2, #1
 80006a2:	4978      	ldr	r1, [pc, #480]	; (8000884 <__aeabi_fadd+0x31c>)
 80006a4:	401a      	ands	r2, r3
 80006a6:	085b      	lsrs	r3, r3, #1
 80006a8:	400b      	ands	r3, r1
 80006aa:	4313      	orrs	r3, r2
 80006ac:	e797      	b.n	80005de <__aeabi_fadd+0x76>
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fadd+0x14c>
 80006b2:	e0a7      	b.n	8000804 <__aeabi_fadd+0x29c>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0x152>
 80006b8:	e0b6      	b.n	8000828 <__aeabi_fadd+0x2c0>
 80006ba:	1e3b      	subs	r3, r7, #0
 80006bc:	d162      	bne.n	8000784 <__aeabi_fadd+0x21c>
 80006be:	2600      	movs	r6, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	0273      	lsls	r3, r6, #9
 80006c4:	0a5b      	lsrs	r3, r3, #9
 80006c6:	b2e4      	uxtb	r4, r4
 80006c8:	e79a      	b.n	8000600 <__aeabi_fadd+0x98>
 80006ca:	0014      	movs	r4, r2
 80006cc:	e787      	b.n	80005de <__aeabi_fadd+0x76>
 80006ce:	2f00      	cmp	r7, #0
 80006d0:	d04d      	beq.n	800076e <__aeabi_fadd+0x206>
 80006d2:	1e48      	subs	r0, r1, #1
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d157      	bne.n	8000788 <__aeabi_fadd+0x220>
 80006d8:	4463      	add	r3, ip
 80006da:	2401      	movs	r4, #1
 80006dc:	015a      	lsls	r2, r3, #5
 80006de:	d5af      	bpl.n	8000640 <__aeabi_fadd+0xd8>
 80006e0:	2402      	movs	r4, #2
 80006e2:	e7dd      	b.n	80006a0 <__aeabi_fadd+0x138>
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d124      	bne.n	8000732 <__aeabi_fadd+0x1ca>
 80006e8:	1c62      	adds	r2, r4, #1
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	2a01      	cmp	r2, #1
 80006ee:	ddde      	ble.n	80006ae <__aeabi_fadd+0x146>
 80006f0:	1bde      	subs	r6, r3, r7
 80006f2:	0172      	lsls	r2, r6, #5
 80006f4:	d535      	bpl.n	8000762 <__aeabi_fadd+0x1fa>
 80006f6:	1afe      	subs	r6, r7, r3
 80006f8:	000d      	movs	r5, r1
 80006fa:	e75c      	b.n	80005b6 <__aeabi_fadd+0x4e>
 80006fc:	002a      	movs	r2, r5
 80006fe:	2300      	movs	r3, #0
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x98>
 8000702:	0033      	movs	r3, r6
 8000704:	4a60      	ldr	r2, [pc, #384]	; (8000888 <__aeabi_fadd+0x320>)
 8000706:	1a24      	subs	r4, r4, r0
 8000708:	4013      	ands	r3, r2
 800070a:	e768      	b.n	80005de <__aeabi_fadd+0x76>
 800070c:	2900      	cmp	r1, #0
 800070e:	d163      	bne.n	80007d8 <__aeabi_fadd+0x270>
 8000710:	1c61      	adds	r1, r4, #1
 8000712:	b2c8      	uxtb	r0, r1
 8000714:	2801      	cmp	r0, #1
 8000716:	dd4e      	ble.n	80007b6 <__aeabi_fadd+0x24e>
 8000718:	29ff      	cmp	r1, #255	; 0xff
 800071a:	d049      	beq.n	80007b0 <__aeabi_fadd+0x248>
 800071c:	4463      	add	r3, ip
 800071e:	085b      	lsrs	r3, r3, #1
 8000720:	000c      	movs	r4, r1
 8000722:	e75c      	b.n	80005de <__aeabi_fadd+0x76>
 8000724:	2aff      	cmp	r2, #255	; 0xff
 8000726:	d041      	beq.n	80007ac <__aeabi_fadd+0x244>
 8000728:	000a      	movs	r2, r1
 800072a:	e779      	b.n	8000620 <__aeabi_fadd+0xb8>
 800072c:	2201      	movs	r2, #1
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	e784      	b.n	800063c <__aeabi_fadd+0xd4>
 8000732:	2c00      	cmp	r4, #0
 8000734:	d01d      	beq.n	8000772 <__aeabi_fadd+0x20a>
 8000736:	28ff      	cmp	r0, #255	; 0xff
 8000738:	d022      	beq.n	8000780 <__aeabi_fadd+0x218>
 800073a:	2480      	movs	r4, #128	; 0x80
 800073c:	04e4      	lsls	r4, r4, #19
 800073e:	4252      	negs	r2, r2
 8000740:	4323      	orrs	r3, r4
 8000742:	2a1b      	cmp	r2, #27
 8000744:	dd00      	ble.n	8000748 <__aeabi_fadd+0x1e0>
 8000746:	e08a      	b.n	800085e <__aeabi_fadd+0x2f6>
 8000748:	001c      	movs	r4, r3
 800074a:	2520      	movs	r5, #32
 800074c:	40d4      	lsrs	r4, r2
 800074e:	1aaa      	subs	r2, r5, r2
 8000750:	4093      	lsls	r3, r2
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	4323      	orrs	r3, r4
 8000758:	4662      	mov	r2, ip
 800075a:	0004      	movs	r4, r0
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	000d      	movs	r5, r1
 8000760:	e725      	b.n	80005ae <__aeabi_fadd+0x46>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x200>
 8000766:	e726      	b.n	80005b6 <__aeabi_fadd+0x4e>
 8000768:	2200      	movs	r2, #0
 800076a:	2400      	movs	r4, #0
 800076c:	e7a9      	b.n	80006c2 <__aeabi_fadd+0x15a>
 800076e:	000c      	movs	r4, r1
 8000770:	e735      	b.n	80005de <__aeabi_fadd+0x76>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d04d      	beq.n	8000812 <__aeabi_fadd+0x2aa>
 8000776:	43d2      	mvns	r2, r2
 8000778:	2a00      	cmp	r2, #0
 800077a:	d0ed      	beq.n	8000758 <__aeabi_fadd+0x1f0>
 800077c:	28ff      	cmp	r0, #255	; 0xff
 800077e:	d1e0      	bne.n	8000742 <__aeabi_fadd+0x1da>
 8000780:	4663      	mov	r3, ip
 8000782:	24ff      	movs	r4, #255	; 0xff
 8000784:	000d      	movs	r5, r1
 8000786:	e72a      	b.n	80005de <__aeabi_fadd+0x76>
 8000788:	29ff      	cmp	r1, #255	; 0xff
 800078a:	d00f      	beq.n	80007ac <__aeabi_fadd+0x244>
 800078c:	0001      	movs	r1, r0
 800078e:	e773      	b.n	8000678 <__aeabi_fadd+0x110>
 8000790:	2b00      	cmp	r3, #0
 8000792:	d061      	beq.n	8000858 <__aeabi_fadd+0x2f0>
 8000794:	24ff      	movs	r4, #255	; 0xff
 8000796:	2f00      	cmp	r7, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x234>
 800079a:	e720      	b.n	80005de <__aeabi_fadd+0x76>
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	4641      	mov	r1, r8
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4211      	tst	r1, r2
 80007a4:	d002      	beq.n	80007ac <__aeabi_fadd+0x244>
 80007a6:	4216      	tst	r6, r2
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x244>
 80007aa:	003b      	movs	r3, r7
 80007ac:	24ff      	movs	r4, #255	; 0xff
 80007ae:	e716      	b.n	80005de <__aeabi_fadd+0x76>
 80007b0:	24ff      	movs	r4, #255	; 0xff
 80007b2:	2300      	movs	r3, #0
 80007b4:	e724      	b.n	8000600 <__aeabi_fadd+0x98>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d1ea      	bne.n	8000790 <__aeabi_fadd+0x228>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d058      	beq.n	8000870 <__aeabi_fadd+0x308>
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fadd+0x25c>
 80007c2:	e70c      	b.n	80005de <__aeabi_fadd+0x76>
 80007c4:	4463      	add	r3, ip
 80007c6:	015a      	lsls	r2, r3, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x264>
 80007ca:	e739      	b.n	8000640 <__aeabi_fadd+0xd8>
 80007cc:	4a2e      	ldr	r2, [pc, #184]	; (8000888 <__aeabi_fadd+0x320>)
 80007ce:	000c      	movs	r4, r1
 80007d0:	4013      	ands	r3, r2
 80007d2:	e704      	b.n	80005de <__aeabi_fadd+0x76>
 80007d4:	2101      	movs	r1, #1
 80007d6:	e75c      	b.n	8000692 <__aeabi_fadd+0x12a>
 80007d8:	2c00      	cmp	r4, #0
 80007da:	d11e      	bne.n	800081a <__aeabi_fadd+0x2b2>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d040      	beq.n	8000862 <__aeabi_fadd+0x2fa>
 80007e0:	43c9      	mvns	r1, r1
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d00b      	beq.n	80007fe <__aeabi_fadd+0x296>
 80007e6:	28ff      	cmp	r0, #255	; 0xff
 80007e8:	d036      	beq.n	8000858 <__aeabi_fadd+0x2f0>
 80007ea:	291b      	cmp	r1, #27
 80007ec:	dc47      	bgt.n	800087e <__aeabi_fadd+0x316>
 80007ee:	001c      	movs	r4, r3
 80007f0:	2620      	movs	r6, #32
 80007f2:	40cc      	lsrs	r4, r1
 80007f4:	1a71      	subs	r1, r6, r1
 80007f6:	408b      	lsls	r3, r1
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4323      	orrs	r3, r4
 80007fe:	4463      	add	r3, ip
 8000800:	0004      	movs	r4, r0
 8000802:	e747      	b.n	8000694 <__aeabi_fadd+0x12c>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d118      	bne.n	800083a <__aeabi_fadd+0x2d2>
 8000808:	1e3b      	subs	r3, r7, #0
 800080a:	d02d      	beq.n	8000868 <__aeabi_fadd+0x300>
 800080c:	000d      	movs	r5, r1
 800080e:	24ff      	movs	r4, #255	; 0xff
 8000810:	e6e5      	b.n	80005de <__aeabi_fadd+0x76>
 8000812:	003b      	movs	r3, r7
 8000814:	0004      	movs	r4, r0
 8000816:	000d      	movs	r5, r1
 8000818:	e6e1      	b.n	80005de <__aeabi_fadd+0x76>
 800081a:	28ff      	cmp	r0, #255	; 0xff
 800081c:	d01c      	beq.n	8000858 <__aeabi_fadd+0x2f0>
 800081e:	2480      	movs	r4, #128	; 0x80
 8000820:	04e4      	lsls	r4, r4, #19
 8000822:	4249      	negs	r1, r1
 8000824:	4323      	orrs	r3, r4
 8000826:	e7e0      	b.n	80007ea <__aeabi_fadd+0x282>
 8000828:	2f00      	cmp	r7, #0
 800082a:	d100      	bne.n	800082e <__aeabi_fadd+0x2c6>
 800082c:	e6d7      	b.n	80005de <__aeabi_fadd+0x76>
 800082e:	1bde      	subs	r6, r3, r7
 8000830:	0172      	lsls	r2, r6, #5
 8000832:	d51f      	bpl.n	8000874 <__aeabi_fadd+0x30c>
 8000834:	1afb      	subs	r3, r7, r3
 8000836:	000d      	movs	r5, r1
 8000838:	e6d1      	b.n	80005de <__aeabi_fadd+0x76>
 800083a:	24ff      	movs	r4, #255	; 0xff
 800083c:	2f00      	cmp	r7, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2da>
 8000840:	e6cd      	b.n	80005de <__aeabi_fadd+0x76>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	4640      	mov	r0, r8
 8000846:	03d2      	lsls	r2, r2, #15
 8000848:	4210      	tst	r0, r2
 800084a:	d0af      	beq.n	80007ac <__aeabi_fadd+0x244>
 800084c:	4216      	tst	r6, r2
 800084e:	d1ad      	bne.n	80007ac <__aeabi_fadd+0x244>
 8000850:	003b      	movs	r3, r7
 8000852:	000d      	movs	r5, r1
 8000854:	24ff      	movs	r4, #255	; 0xff
 8000856:	e6c2      	b.n	80005de <__aeabi_fadd+0x76>
 8000858:	4663      	mov	r3, ip
 800085a:	24ff      	movs	r4, #255	; 0xff
 800085c:	e6bf      	b.n	80005de <__aeabi_fadd+0x76>
 800085e:	2301      	movs	r3, #1
 8000860:	e77a      	b.n	8000758 <__aeabi_fadd+0x1f0>
 8000862:	003b      	movs	r3, r7
 8000864:	0004      	movs	r4, r0
 8000866:	e6ba      	b.n	80005de <__aeabi_fadd+0x76>
 8000868:	2680      	movs	r6, #128	; 0x80
 800086a:	2200      	movs	r2, #0
 800086c:	03f6      	lsls	r6, r6, #15
 800086e:	e6f0      	b.n	8000652 <__aeabi_fadd+0xea>
 8000870:	003b      	movs	r3, r7
 8000872:	e6b4      	b.n	80005de <__aeabi_fadd+0x76>
 8000874:	1e33      	subs	r3, r6, #0
 8000876:	d000      	beq.n	800087a <__aeabi_fadd+0x312>
 8000878:	e6e2      	b.n	8000640 <__aeabi_fadd+0xd8>
 800087a:	2200      	movs	r2, #0
 800087c:	e721      	b.n	80006c2 <__aeabi_fadd+0x15a>
 800087e:	2301      	movs	r3, #1
 8000880:	e7bd      	b.n	80007fe <__aeabi_fadd+0x296>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	7dffffff 	.word	0x7dffffff
 8000888:	fbffffff 	.word	0xfbffffff

0800088c <__aeabi_fdiv>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	4657      	mov	r7, sl
 8000890:	464e      	mov	r6, r9
 8000892:	46de      	mov	lr, fp
 8000894:	4645      	mov	r5, r8
 8000896:	b5e0      	push	{r5, r6, r7, lr}
 8000898:	0244      	lsls	r4, r0, #9
 800089a:	0043      	lsls	r3, r0, #1
 800089c:	0fc6      	lsrs	r6, r0, #31
 800089e:	b083      	sub	sp, #12
 80008a0:	1c0f      	adds	r7, r1, #0
 80008a2:	0a64      	lsrs	r4, r4, #9
 80008a4:	0e1b      	lsrs	r3, r3, #24
 80008a6:	46b2      	mov	sl, r6
 80008a8:	d053      	beq.n	8000952 <__aeabi_fdiv+0xc6>
 80008aa:	2bff      	cmp	r3, #255	; 0xff
 80008ac:	d027      	beq.n	80008fe <__aeabi_fdiv+0x72>
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	00e4      	lsls	r4, r4, #3
 80008b2:	04d2      	lsls	r2, r2, #19
 80008b4:	4314      	orrs	r4, r2
 80008b6:	227f      	movs	r2, #127	; 0x7f
 80008b8:	4252      	negs	r2, r2
 80008ba:	4690      	mov	r8, r2
 80008bc:	4498      	add	r8, r3
 80008be:	2300      	movs	r3, #0
 80008c0:	4699      	mov	r9, r3
 80008c2:	469b      	mov	fp, r3
 80008c4:	027d      	lsls	r5, r7, #9
 80008c6:	0078      	lsls	r0, r7, #1
 80008c8:	0ffb      	lsrs	r3, r7, #31
 80008ca:	0a6d      	lsrs	r5, r5, #9
 80008cc:	0e00      	lsrs	r0, r0, #24
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	d024      	beq.n	800091c <__aeabi_fdiv+0x90>
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d046      	beq.n	8000964 <__aeabi_fdiv+0xd8>
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	2100      	movs	r1, #0
 80008da:	00ed      	lsls	r5, r5, #3
 80008dc:	04db      	lsls	r3, r3, #19
 80008de:	431d      	orrs	r5, r3
 80008e0:	387f      	subs	r0, #127	; 0x7f
 80008e2:	4647      	mov	r7, r8
 80008e4:	1a38      	subs	r0, r7, r0
 80008e6:	464f      	mov	r7, r9
 80008e8:	430f      	orrs	r7, r1
 80008ea:	00bf      	lsls	r7, r7, #2
 80008ec:	46b9      	mov	r9, r7
 80008ee:	0033      	movs	r3, r6
 80008f0:	9a00      	ldr	r2, [sp, #0]
 80008f2:	4f87      	ldr	r7, [pc, #540]	; (8000b10 <__aeabi_fdiv+0x284>)
 80008f4:	4053      	eors	r3, r2
 80008f6:	464a      	mov	r2, r9
 80008f8:	58ba      	ldr	r2, [r7, r2]
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	4697      	mov	pc, r2
 80008fe:	2c00      	cmp	r4, #0
 8000900:	d14e      	bne.n	80009a0 <__aeabi_fdiv+0x114>
 8000902:	2308      	movs	r3, #8
 8000904:	4699      	mov	r9, r3
 8000906:	33f7      	adds	r3, #247	; 0xf7
 8000908:	4698      	mov	r8, r3
 800090a:	3bfd      	subs	r3, #253	; 0xfd
 800090c:	469b      	mov	fp, r3
 800090e:	027d      	lsls	r5, r7, #9
 8000910:	0078      	lsls	r0, r7, #1
 8000912:	0ffb      	lsrs	r3, r7, #31
 8000914:	0a6d      	lsrs	r5, r5, #9
 8000916:	0e00      	lsrs	r0, r0, #24
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	d1da      	bne.n	80008d2 <__aeabi_fdiv+0x46>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d126      	bne.n	800096e <__aeabi_fdiv+0xe2>
 8000920:	2000      	movs	r0, #0
 8000922:	2101      	movs	r1, #1
 8000924:	0033      	movs	r3, r6
 8000926:	9a00      	ldr	r2, [sp, #0]
 8000928:	4f7a      	ldr	r7, [pc, #488]	; (8000b14 <__aeabi_fdiv+0x288>)
 800092a:	4053      	eors	r3, r2
 800092c:	4642      	mov	r2, r8
 800092e:	1a10      	subs	r0, r2, r0
 8000930:	464a      	mov	r2, r9
 8000932:	430a      	orrs	r2, r1
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	58ba      	ldr	r2, [r7, r2]
 8000938:	001d      	movs	r5, r3
 800093a:	4697      	mov	pc, r2
 800093c:	9b00      	ldr	r3, [sp, #0]
 800093e:	002c      	movs	r4, r5
 8000940:	469a      	mov	sl, r3
 8000942:	468b      	mov	fp, r1
 8000944:	465b      	mov	r3, fp
 8000946:	2b02      	cmp	r3, #2
 8000948:	d131      	bne.n	80009ae <__aeabi_fdiv+0x122>
 800094a:	4653      	mov	r3, sl
 800094c:	21ff      	movs	r1, #255	; 0xff
 800094e:	2400      	movs	r4, #0
 8000950:	e038      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000952:	2c00      	cmp	r4, #0
 8000954:	d117      	bne.n	8000986 <__aeabi_fdiv+0xfa>
 8000956:	2304      	movs	r3, #4
 8000958:	4699      	mov	r9, r3
 800095a:	2300      	movs	r3, #0
 800095c:	4698      	mov	r8, r3
 800095e:	3301      	adds	r3, #1
 8000960:	469b      	mov	fp, r3
 8000962:	e7af      	b.n	80008c4 <__aeabi_fdiv+0x38>
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	2d00      	cmp	r5, #0
 8000968:	d10b      	bne.n	8000982 <__aeabi_fdiv+0xf6>
 800096a:	2102      	movs	r1, #2
 800096c:	e7da      	b.n	8000924 <__aeabi_fdiv+0x98>
 800096e:	0028      	movs	r0, r5
 8000970:	f002 f99e 	bl	8002cb0 <__clzsi2>
 8000974:	1f43      	subs	r3, r0, #5
 8000976:	409d      	lsls	r5, r3
 8000978:	2376      	movs	r3, #118	; 0x76
 800097a:	425b      	negs	r3, r3
 800097c:	1a18      	subs	r0, r3, r0
 800097e:	2100      	movs	r1, #0
 8000980:	e7af      	b.n	80008e2 <__aeabi_fdiv+0x56>
 8000982:	2103      	movs	r1, #3
 8000984:	e7ad      	b.n	80008e2 <__aeabi_fdiv+0x56>
 8000986:	0020      	movs	r0, r4
 8000988:	f002 f992 	bl	8002cb0 <__clzsi2>
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409c      	lsls	r4, r3
 8000990:	2376      	movs	r3, #118	; 0x76
 8000992:	425b      	negs	r3, r3
 8000994:	1a1b      	subs	r3, r3, r0
 8000996:	4698      	mov	r8, r3
 8000998:	2300      	movs	r3, #0
 800099a:	4699      	mov	r9, r3
 800099c:	469b      	mov	fp, r3
 800099e:	e791      	b.n	80008c4 <__aeabi_fdiv+0x38>
 80009a0:	230c      	movs	r3, #12
 80009a2:	4699      	mov	r9, r3
 80009a4:	33f3      	adds	r3, #243	; 0xf3
 80009a6:	4698      	mov	r8, r3
 80009a8:	3bfc      	subs	r3, #252	; 0xfc
 80009aa:	469b      	mov	fp, r3
 80009ac:	e78a      	b.n	80008c4 <__aeabi_fdiv+0x38>
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fdiv+0x128>
 80009b2:	e0a5      	b.n	8000b00 <__aeabi_fdiv+0x274>
 80009b4:	4655      	mov	r5, sl
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d000      	beq.n	80009bc <__aeabi_fdiv+0x130>
 80009ba:	e081      	b.n	8000ac0 <__aeabi_fdiv+0x234>
 80009bc:	2301      	movs	r3, #1
 80009be:	2100      	movs	r1, #0
 80009c0:	2400      	movs	r4, #0
 80009c2:	402b      	ands	r3, r5
 80009c4:	0264      	lsls	r4, r4, #9
 80009c6:	05c9      	lsls	r1, r1, #23
 80009c8:	0a60      	lsrs	r0, r4, #9
 80009ca:	07db      	lsls	r3, r3, #31
 80009cc:	4308      	orrs	r0, r1
 80009ce:	4318      	orrs	r0, r3
 80009d0:	b003      	add	sp, #12
 80009d2:	bc3c      	pop	{r2, r3, r4, r5}
 80009d4:	4690      	mov	r8, r2
 80009d6:	4699      	mov	r9, r3
 80009d8:	46a2      	mov	sl, r4
 80009da:	46ab      	mov	fp, r5
 80009dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009de:	2480      	movs	r4, #128	; 0x80
 80009e0:	2300      	movs	r3, #0
 80009e2:	03e4      	lsls	r4, r4, #15
 80009e4:	21ff      	movs	r1, #255	; 0xff
 80009e6:	e7ed      	b.n	80009c4 <__aeabi_fdiv+0x138>
 80009e8:	21ff      	movs	r1, #255	; 0xff
 80009ea:	2400      	movs	r4, #0
 80009ec:	e7ea      	b.n	80009c4 <__aeabi_fdiv+0x138>
 80009ee:	2301      	movs	r3, #1
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	291b      	cmp	r1, #27
 80009f4:	dd66      	ble.n	8000ac4 <__aeabi_fdiv+0x238>
 80009f6:	9a01      	ldr	r2, [sp, #4]
 80009f8:	4013      	ands	r3, r2
 80009fa:	2100      	movs	r1, #0
 80009fc:	2400      	movs	r4, #0
 80009fe:	e7e1      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	03db      	lsls	r3, r3, #15
 8000a04:	421c      	tst	r4, r3
 8000a06:	d038      	beq.n	8000a7a <__aeabi_fdiv+0x1ee>
 8000a08:	421d      	tst	r5, r3
 8000a0a:	d051      	beq.n	8000ab0 <__aeabi_fdiv+0x224>
 8000a0c:	431c      	orrs	r4, r3
 8000a0e:	0264      	lsls	r4, r4, #9
 8000a10:	0a64      	lsrs	r4, r4, #9
 8000a12:	0033      	movs	r3, r6
 8000a14:	21ff      	movs	r1, #255	; 0xff
 8000a16:	e7d5      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000a18:	0163      	lsls	r3, r4, #5
 8000a1a:	016c      	lsls	r4, r5, #5
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d23b      	bcs.n	8000a98 <__aeabi_fdiv+0x20c>
 8000a20:	261b      	movs	r6, #27
 8000a22:	2100      	movs	r1, #0
 8000a24:	3801      	subs	r0, #1
 8000a26:	2501      	movs	r5, #1
 8000a28:	001f      	movs	r7, r3
 8000a2a:	0049      	lsls	r1, r1, #1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2f00      	cmp	r7, #0
 8000a30:	db01      	blt.n	8000a36 <__aeabi_fdiv+0x1aa>
 8000a32:	429c      	cmp	r4, r3
 8000a34:	d801      	bhi.n	8000a3a <__aeabi_fdiv+0x1ae>
 8000a36:	1b1b      	subs	r3, r3, r4
 8000a38:	4329      	orrs	r1, r5
 8000a3a:	3e01      	subs	r6, #1
 8000a3c:	2e00      	cmp	r6, #0
 8000a3e:	d1f3      	bne.n	8000a28 <__aeabi_fdiv+0x19c>
 8000a40:	001c      	movs	r4, r3
 8000a42:	1e63      	subs	r3, r4, #1
 8000a44:	419c      	sbcs	r4, r3
 8000a46:	430c      	orrs	r4, r1
 8000a48:	0001      	movs	r1, r0
 8000a4a:	317f      	adds	r1, #127	; 0x7f
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	ddce      	ble.n	80009ee <__aeabi_fdiv+0x162>
 8000a50:	0763      	lsls	r3, r4, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fdiv+0x1d2>
 8000a54:	230f      	movs	r3, #15
 8000a56:	4023      	ands	r3, r4
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fdiv+0x1d2>
 8000a5c:	3404      	adds	r4, #4
 8000a5e:	0123      	lsls	r3, r4, #4
 8000a60:	d503      	bpl.n	8000a6a <__aeabi_fdiv+0x1de>
 8000a62:	0001      	movs	r1, r0
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <__aeabi_fdiv+0x28c>)
 8000a66:	3180      	adds	r1, #128	; 0x80
 8000a68:	401c      	ands	r4, r3
 8000a6a:	29fe      	cmp	r1, #254	; 0xfe
 8000a6c:	dd0d      	ble.n	8000a8a <__aeabi_fdiv+0x1fe>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9a01      	ldr	r2, [sp, #4]
 8000a72:	21ff      	movs	r1, #255	; 0xff
 8000a74:	4013      	ands	r3, r2
 8000a76:	2400      	movs	r4, #0
 8000a78:	e7a4      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	03db      	lsls	r3, r3, #15
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	0264      	lsls	r4, r4, #9
 8000a82:	0a64      	lsrs	r4, r4, #9
 8000a84:	0033      	movs	r3, r6
 8000a86:	21ff      	movs	r1, #255	; 0xff
 8000a88:	e79c      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	9a01      	ldr	r2, [sp, #4]
 8000a8e:	01a4      	lsls	r4, r4, #6
 8000a90:	0a64      	lsrs	r4, r4, #9
 8000a92:	b2c9      	uxtb	r1, r1
 8000a94:	4013      	ands	r3, r2
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000a98:	1b1b      	subs	r3, r3, r4
 8000a9a:	261a      	movs	r6, #26
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	e7c2      	b.n	8000a26 <__aeabi_fdiv+0x19a>
 8000aa0:	9b00      	ldr	r3, [sp, #0]
 8000aa2:	468b      	mov	fp, r1
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	e74c      	b.n	8000944 <__aeabi_fdiv+0xb8>
 8000aaa:	0263      	lsls	r3, r4, #9
 8000aac:	d5e5      	bpl.n	8000a7a <__aeabi_fdiv+0x1ee>
 8000aae:	2500      	movs	r5, #0
 8000ab0:	2480      	movs	r4, #128	; 0x80
 8000ab2:	03e4      	lsls	r4, r4, #15
 8000ab4:	432c      	orrs	r4, r5
 8000ab6:	0264      	lsls	r4, r4, #9
 8000ab8:	0a64      	lsrs	r4, r4, #9
 8000aba:	9b00      	ldr	r3, [sp, #0]
 8000abc:	21ff      	movs	r1, #255	; 0xff
 8000abe:	e781      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000ac0:	9501      	str	r5, [sp, #4]
 8000ac2:	e7c1      	b.n	8000a48 <__aeabi_fdiv+0x1bc>
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	2020      	movs	r0, #32
 8000ac8:	40cb      	lsrs	r3, r1
 8000aca:	1a41      	subs	r1, r0, r1
 8000acc:	408c      	lsls	r4, r1
 8000ace:	1e61      	subs	r1, r4, #1
 8000ad0:	418c      	sbcs	r4, r1
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	0763      	lsls	r3, r4, #29
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_fdiv+0x256>
 8000ad8:	230f      	movs	r3, #15
 8000ada:	4023      	ands	r3, r4
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_fdiv+0x256>
 8000ae0:	3404      	adds	r4, #4
 8000ae2:	0163      	lsls	r3, r4, #5
 8000ae4:	d505      	bpl.n	8000af2 <__aeabi_fdiv+0x266>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9a01      	ldr	r2, [sp, #4]
 8000aea:	2101      	movs	r1, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	2400      	movs	r4, #0
 8000af0:	e768      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000af2:	2301      	movs	r3, #1
 8000af4:	9a01      	ldr	r2, [sp, #4]
 8000af6:	01a4      	lsls	r4, r4, #6
 8000af8:	0a64      	lsrs	r4, r4, #9
 8000afa:	4013      	ands	r3, r2
 8000afc:	2100      	movs	r1, #0
 8000afe:	e761      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	03db      	lsls	r3, r3, #15
 8000b04:	431c      	orrs	r4, r3
 8000b06:	0264      	lsls	r4, r4, #9
 8000b08:	0a64      	lsrs	r4, r4, #9
 8000b0a:	4653      	mov	r3, sl
 8000b0c:	21ff      	movs	r1, #255	; 0xff
 8000b0e:	e759      	b.n	80009c4 <__aeabi_fdiv+0x138>
 8000b10:	0800e2e8 	.word	0x0800e2e8
 8000b14:	0800e328 	.word	0x0800e328
 8000b18:	f7ffffff 	.word	0xf7ffffff

08000b1c <__eqsf2>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	0042      	lsls	r2, r0, #1
 8000b20:	0245      	lsls	r5, r0, #9
 8000b22:	024e      	lsls	r6, r1, #9
 8000b24:	004c      	lsls	r4, r1, #1
 8000b26:	0fc3      	lsrs	r3, r0, #31
 8000b28:	0a6d      	lsrs	r5, r5, #9
 8000b2a:	0e12      	lsrs	r2, r2, #24
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e24      	lsrs	r4, r4, #24
 8000b30:	0fc9      	lsrs	r1, r1, #31
 8000b32:	2001      	movs	r0, #1
 8000b34:	2aff      	cmp	r2, #255	; 0xff
 8000b36:	d006      	beq.n	8000b46 <__eqsf2+0x2a>
 8000b38:	2cff      	cmp	r4, #255	; 0xff
 8000b3a:	d003      	beq.n	8000b44 <__eqsf2+0x28>
 8000b3c:	42a2      	cmp	r2, r4
 8000b3e:	d101      	bne.n	8000b44 <__eqsf2+0x28>
 8000b40:	42b5      	cmp	r5, r6
 8000b42:	d006      	beq.n	8000b52 <__eqsf2+0x36>
 8000b44:	bd70      	pop	{r4, r5, r6, pc}
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d1fc      	bne.n	8000b44 <__eqsf2+0x28>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d1fa      	bne.n	8000b44 <__eqsf2+0x28>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d1f8      	bne.n	8000b44 <__eqsf2+0x28>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d006      	beq.n	8000b64 <__eqsf2+0x48>
 8000b56:	2001      	movs	r0, #1
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d1f3      	bne.n	8000b44 <__eqsf2+0x28>
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	1e45      	subs	r5, r0, #1
 8000b60:	41a8      	sbcs	r0, r5
 8000b62:	e7ef      	b.n	8000b44 <__eqsf2+0x28>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e7ed      	b.n	8000b44 <__eqsf2+0x28>

08000b68 <__gesf2>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	0042      	lsls	r2, r0, #1
 8000b6c:	0245      	lsls	r5, r0, #9
 8000b6e:	024c      	lsls	r4, r1, #9
 8000b70:	0fc3      	lsrs	r3, r0, #31
 8000b72:	0048      	lsls	r0, r1, #1
 8000b74:	0a6d      	lsrs	r5, r5, #9
 8000b76:	0e12      	lsrs	r2, r2, #24
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e00      	lsrs	r0, r0, #24
 8000b7c:	0fc9      	lsrs	r1, r1, #31
 8000b7e:	2aff      	cmp	r2, #255	; 0xff
 8000b80:	d01e      	beq.n	8000bc0 <__gesf2+0x58>
 8000b82:	28ff      	cmp	r0, #255	; 0xff
 8000b84:	d021      	beq.n	8000bca <__gesf2+0x62>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d10a      	bne.n	8000ba0 <__gesf2+0x38>
 8000b8a:	426e      	negs	r6, r5
 8000b8c:	416e      	adcs	r6, r5
 8000b8e:	b2f6      	uxtb	r6, r6
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d10f      	bne.n	8000bb4 <__gesf2+0x4c>
 8000b94:	2c00      	cmp	r4, #0
 8000b96:	d10d      	bne.n	8000bb4 <__gesf2+0x4c>
 8000b98:	2000      	movs	r0, #0
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d009      	beq.n	8000bb2 <__gesf2+0x4a>
 8000b9e:	e005      	b.n	8000bac <__gesf2+0x44>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d101      	bne.n	8000ba8 <__gesf2+0x40>
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	d001      	beq.n	8000bac <__gesf2+0x44>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d011      	beq.n	8000bd0 <__gesf2+0x68>
 8000bac:	2101      	movs	r1, #1
 8000bae:	4258      	negs	r0, r3
 8000bb0:	4308      	orrs	r0, r1
 8000bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0f7      	beq.n	8000ba8 <__gesf2+0x40>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	3901      	subs	r1, #1
 8000bbc:	4308      	orrs	r0, r1
 8000bbe:	e7f8      	b.n	8000bb2 <__gesf2+0x4a>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0de      	beq.n	8000b82 <__gesf2+0x1a>
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	4240      	negs	r0, r0
 8000bc8:	e7f3      	b.n	8000bb2 <__gesf2+0x4a>
 8000bca:	2c00      	cmp	r4, #0
 8000bcc:	d0db      	beq.n	8000b86 <__gesf2+0x1e>
 8000bce:	e7f9      	b.n	8000bc4 <__gesf2+0x5c>
 8000bd0:	4282      	cmp	r2, r0
 8000bd2:	dceb      	bgt.n	8000bac <__gesf2+0x44>
 8000bd4:	db04      	blt.n	8000be0 <__gesf2+0x78>
 8000bd6:	42a5      	cmp	r5, r4
 8000bd8:	d8e8      	bhi.n	8000bac <__gesf2+0x44>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	42a5      	cmp	r5, r4
 8000bde:	d2e8      	bcs.n	8000bb2 <__gesf2+0x4a>
 8000be0:	2101      	movs	r1, #1
 8000be2:	1e58      	subs	r0, r3, #1
 8000be4:	4308      	orrs	r0, r1
 8000be6:	e7e4      	b.n	8000bb2 <__gesf2+0x4a>

08000be8 <__lesf2>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	0042      	lsls	r2, r0, #1
 8000bec:	024d      	lsls	r5, r1, #9
 8000bee:	004c      	lsls	r4, r1, #1
 8000bf0:	0246      	lsls	r6, r0, #9
 8000bf2:	0a76      	lsrs	r6, r6, #9
 8000bf4:	0e12      	lsrs	r2, r2, #24
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0a6d      	lsrs	r5, r5, #9
 8000bfa:	0e24      	lsrs	r4, r4, #24
 8000bfc:	0fc9      	lsrs	r1, r1, #31
 8000bfe:	2aff      	cmp	r2, #255	; 0xff
 8000c00:	d016      	beq.n	8000c30 <__lesf2+0x48>
 8000c02:	2cff      	cmp	r4, #255	; 0xff
 8000c04:	d018      	beq.n	8000c38 <__lesf2+0x50>
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	d10a      	bne.n	8000c20 <__lesf2+0x38>
 8000c0a:	4270      	negs	r0, r6
 8000c0c:	4170      	adcs	r0, r6
 8000c0e:	b2c0      	uxtb	r0, r0
 8000c10:	2c00      	cmp	r4, #0
 8000c12:	d015      	beq.n	8000c40 <__lesf2+0x58>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d005      	beq.n	8000c24 <__lesf2+0x3c>
 8000c18:	2001      	movs	r0, #1
 8000c1a:	3901      	subs	r1, #1
 8000c1c:	4308      	orrs	r0, r1
 8000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	d013      	beq.n	8000c4c <__lesf2+0x64>
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d014      	beq.n	8000c52 <__lesf2+0x6a>
 8000c28:	2001      	movs	r0, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	4318      	orrs	r0, r3
 8000c2e:	e7f6      	b.n	8000c1e <__lesf2+0x36>
 8000c30:	2002      	movs	r0, #2
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d1f3      	bne.n	8000c1e <__lesf2+0x36>
 8000c36:	e7e4      	b.n	8000c02 <__lesf2+0x1a>
 8000c38:	2002      	movs	r0, #2
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d1ef      	bne.n	8000c1e <__lesf2+0x36>
 8000c3e:	e7e2      	b.n	8000c06 <__lesf2+0x1e>
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d1e7      	bne.n	8000c14 <__lesf2+0x2c>
 8000c44:	2000      	movs	r0, #0
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d0e9      	beq.n	8000c1e <__lesf2+0x36>
 8000c4a:	e7ed      	b.n	8000c28 <__lesf2+0x40>
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d1e9      	bne.n	8000c24 <__lesf2+0x3c>
 8000c50:	e7ea      	b.n	8000c28 <__lesf2+0x40>
 8000c52:	42a2      	cmp	r2, r4
 8000c54:	dc06      	bgt.n	8000c64 <__lesf2+0x7c>
 8000c56:	dbdf      	blt.n	8000c18 <__lesf2+0x30>
 8000c58:	42ae      	cmp	r6, r5
 8000c5a:	d803      	bhi.n	8000c64 <__lesf2+0x7c>
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	42ae      	cmp	r6, r5
 8000c60:	d3da      	bcc.n	8000c18 <__lesf2+0x30>
 8000c62:	e7dc      	b.n	8000c1e <__lesf2+0x36>
 8000c64:	2001      	movs	r0, #1
 8000c66:	4249      	negs	r1, r1
 8000c68:	4308      	orrs	r0, r1
 8000c6a:	e7d8      	b.n	8000c1e <__lesf2+0x36>

08000c6c <__aeabi_fmul>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	4657      	mov	r7, sl
 8000c70:	464e      	mov	r6, r9
 8000c72:	4645      	mov	r5, r8
 8000c74:	46de      	mov	lr, fp
 8000c76:	b5e0      	push	{r5, r6, r7, lr}
 8000c78:	0247      	lsls	r7, r0, #9
 8000c7a:	0046      	lsls	r6, r0, #1
 8000c7c:	4688      	mov	r8, r1
 8000c7e:	0a7f      	lsrs	r7, r7, #9
 8000c80:	0e36      	lsrs	r6, r6, #24
 8000c82:	0fc4      	lsrs	r4, r0, #31
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d047      	beq.n	8000d18 <__aeabi_fmul+0xac>
 8000c88:	2eff      	cmp	r6, #255	; 0xff
 8000c8a:	d024      	beq.n	8000cd6 <__aeabi_fmul+0x6a>
 8000c8c:	00fb      	lsls	r3, r7, #3
 8000c8e:	2780      	movs	r7, #128	; 0x80
 8000c90:	04ff      	lsls	r7, r7, #19
 8000c92:	431f      	orrs	r7, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	4699      	mov	r9, r3
 8000c98:	469a      	mov	sl, r3
 8000c9a:	3e7f      	subs	r6, #127	; 0x7f
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	025d      	lsls	r5, r3, #9
 8000ca0:	0058      	lsls	r0, r3, #1
 8000ca2:	0fdb      	lsrs	r3, r3, #31
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	0e00      	lsrs	r0, r0, #24
 8000ca8:	4698      	mov	r8, r3
 8000caa:	d043      	beq.n	8000d34 <__aeabi_fmul+0xc8>
 8000cac:	28ff      	cmp	r0, #255	; 0xff
 8000cae:	d03b      	beq.n	8000d28 <__aeabi_fmul+0xbc>
 8000cb0:	00eb      	lsls	r3, r5, #3
 8000cb2:	2580      	movs	r5, #128	; 0x80
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	04ed      	lsls	r5, r5, #19
 8000cb8:	431d      	orrs	r5, r3
 8000cba:	387f      	subs	r0, #127	; 0x7f
 8000cbc:	1836      	adds	r6, r6, r0
 8000cbe:	1c73      	adds	r3, r6, #1
 8000cc0:	4641      	mov	r1, r8
 8000cc2:	469b      	mov	fp, r3
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	4061      	eors	r1, r4
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	d864      	bhi.n	8000d98 <__aeabi_fmul+0x12c>
 8000cce:	4875      	ldr	r0, [pc, #468]	; (8000ea4 <__aeabi_fmul+0x238>)
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	58c3      	ldr	r3, [r0, r3]
 8000cd4:	469f      	mov	pc, r3
 8000cd6:	2f00      	cmp	r7, #0
 8000cd8:	d142      	bne.n	8000d60 <__aeabi_fmul+0xf4>
 8000cda:	2308      	movs	r3, #8
 8000cdc:	4699      	mov	r9, r3
 8000cde:	3b06      	subs	r3, #6
 8000ce0:	26ff      	movs	r6, #255	; 0xff
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	e7da      	b.n	8000c9c <__aeabi_fmul+0x30>
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	2a02      	cmp	r2, #2
 8000cea:	d028      	beq.n	8000d3e <__aeabi_fmul+0xd2>
 8000cec:	2a03      	cmp	r2, #3
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fmul+0x86>
 8000cf0:	e0ce      	b.n	8000e90 <__aeabi_fmul+0x224>
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fmul+0x8c>
 8000cf6:	e0ac      	b.n	8000e52 <__aeabi_fmul+0x1e6>
 8000cf8:	4011      	ands	r1, r2
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	b2cc      	uxtb	r4, r1
 8000d00:	0240      	lsls	r0, r0, #9
 8000d02:	05d2      	lsls	r2, r2, #23
 8000d04:	0a40      	lsrs	r0, r0, #9
 8000d06:	07e4      	lsls	r4, r4, #31
 8000d08:	4310      	orrs	r0, r2
 8000d0a:	4320      	orrs	r0, r4
 8000d0c:	bc3c      	pop	{r2, r3, r4, r5}
 8000d0e:	4690      	mov	r8, r2
 8000d10:	4699      	mov	r9, r3
 8000d12:	46a2      	mov	sl, r4
 8000d14:	46ab      	mov	fp, r5
 8000d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d115      	bne.n	8000d48 <__aeabi_fmul+0xdc>
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	4699      	mov	r9, r3
 8000d20:	3b03      	subs	r3, #3
 8000d22:	2600      	movs	r6, #0
 8000d24:	469a      	mov	sl, r3
 8000d26:	e7b9      	b.n	8000c9c <__aeabi_fmul+0x30>
 8000d28:	20ff      	movs	r0, #255	; 0xff
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0c5      	beq.n	8000cbc <__aeabi_fmul+0x50>
 8000d30:	2203      	movs	r2, #3
 8000d32:	e7c3      	b.n	8000cbc <__aeabi_fmul+0x50>
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	d119      	bne.n	8000d6c <__aeabi_fmul+0x100>
 8000d38:	2000      	movs	r0, #0
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	e7be      	b.n	8000cbc <__aeabi_fmul+0x50>
 8000d3e:	2401      	movs	r4, #1
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	400c      	ands	r4, r1
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7db      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000d48:	0038      	movs	r0, r7
 8000d4a:	f001 ffb1 	bl	8002cb0 <__clzsi2>
 8000d4e:	2676      	movs	r6, #118	; 0x76
 8000d50:	1f43      	subs	r3, r0, #5
 8000d52:	409f      	lsls	r7, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	4276      	negs	r6, r6
 8000d58:	1a36      	subs	r6, r6, r0
 8000d5a:	4699      	mov	r9, r3
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	e79d      	b.n	8000c9c <__aeabi_fmul+0x30>
 8000d60:	230c      	movs	r3, #12
 8000d62:	4699      	mov	r9, r3
 8000d64:	3b09      	subs	r3, #9
 8000d66:	26ff      	movs	r6, #255	; 0xff
 8000d68:	469a      	mov	sl, r3
 8000d6a:	e797      	b.n	8000c9c <__aeabi_fmul+0x30>
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	f001 ff9f 	bl	8002cb0 <__clzsi2>
 8000d72:	1f43      	subs	r3, r0, #5
 8000d74:	409d      	lsls	r5, r3
 8000d76:	2376      	movs	r3, #118	; 0x76
 8000d78:	425b      	negs	r3, r3
 8000d7a:	1a18      	subs	r0, r3, r0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e79d      	b.n	8000cbc <__aeabi_fmul+0x50>
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	2400      	movs	r4, #0
 8000d84:	03c0      	lsls	r0, r0, #15
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	e7ba      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000d8a:	003d      	movs	r5, r7
 8000d8c:	4652      	mov	r2, sl
 8000d8e:	e7ab      	b.n	8000ce8 <__aeabi_fmul+0x7c>
 8000d90:	003d      	movs	r5, r7
 8000d92:	0021      	movs	r1, r4
 8000d94:	4652      	mov	r2, sl
 8000d96:	e7a7      	b.n	8000ce8 <__aeabi_fmul+0x7c>
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	042a      	lsls	r2, r5, #16
 8000d9e:	0c12      	lsrs	r2, r2, #16
 8000da0:	0c2b      	lsrs	r3, r5, #16
 8000da2:	0014      	movs	r4, r2
 8000da4:	4660      	mov	r0, ip
 8000da6:	4665      	mov	r5, ip
 8000da8:	043f      	lsls	r7, r7, #16
 8000daa:	0c3f      	lsrs	r7, r7, #16
 8000dac:	437c      	muls	r4, r7
 8000dae:	4342      	muls	r2, r0
 8000db0:	435d      	muls	r5, r3
 8000db2:	437b      	muls	r3, r7
 8000db4:	0c27      	lsrs	r7, r4, #16
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	18ff      	adds	r7, r7, r3
 8000dba:	42ba      	cmp	r2, r7
 8000dbc:	d903      	bls.n	8000dc6 <__aeabi_fmul+0x15a>
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	469c      	mov	ip, r3
 8000dc4:	4465      	add	r5, ip
 8000dc6:	0424      	lsls	r4, r4, #16
 8000dc8:	043a      	lsls	r2, r7, #16
 8000dca:	0c24      	lsrs	r4, r4, #16
 8000dcc:	1912      	adds	r2, r2, r4
 8000dce:	0193      	lsls	r3, r2, #6
 8000dd0:	1e5c      	subs	r4, r3, #1
 8000dd2:	41a3      	sbcs	r3, r4
 8000dd4:	0c3f      	lsrs	r7, r7, #16
 8000dd6:	0e92      	lsrs	r2, r2, #26
 8000dd8:	197d      	adds	r5, r7, r5
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	01ad      	lsls	r5, r5, #6
 8000dde:	4315      	orrs	r5, r2
 8000de0:	012b      	lsls	r3, r5, #4
 8000de2:	d504      	bpl.n	8000dee <__aeabi_fmul+0x182>
 8000de4:	2301      	movs	r3, #1
 8000de6:	465e      	mov	r6, fp
 8000de8:	086a      	lsrs	r2, r5, #1
 8000dea:	401d      	ands	r5, r3
 8000dec:	4315      	orrs	r5, r2
 8000dee:	0032      	movs	r2, r6
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	dd25      	ble.n	8000e42 <__aeabi_fmul+0x1d6>
 8000df6:	076b      	lsls	r3, r5, #29
 8000df8:	d004      	beq.n	8000e04 <__aeabi_fmul+0x198>
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	402b      	ands	r3, r5
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d000      	beq.n	8000e04 <__aeabi_fmul+0x198>
 8000e02:	3504      	adds	r5, #4
 8000e04:	012b      	lsls	r3, r5, #4
 8000e06:	d503      	bpl.n	8000e10 <__aeabi_fmul+0x1a4>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <__aeabi_fmul+0x23c>)
 8000e0c:	3280      	adds	r2, #128	; 0x80
 8000e0e:	401d      	ands	r5, r3
 8000e10:	2afe      	cmp	r2, #254	; 0xfe
 8000e12:	dc94      	bgt.n	8000d3e <__aeabi_fmul+0xd2>
 8000e14:	2401      	movs	r4, #1
 8000e16:	01a8      	lsls	r0, r5, #6
 8000e18:	0a40      	lsrs	r0, r0, #9
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	400c      	ands	r4, r1
 8000e1e:	e76f      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	03c0      	lsls	r0, r0, #15
 8000e24:	4207      	tst	r7, r0
 8000e26:	d007      	beq.n	8000e38 <__aeabi_fmul+0x1cc>
 8000e28:	4205      	tst	r5, r0
 8000e2a:	d105      	bne.n	8000e38 <__aeabi_fmul+0x1cc>
 8000e2c:	4328      	orrs	r0, r5
 8000e2e:	0240      	lsls	r0, r0, #9
 8000e30:	0a40      	lsrs	r0, r0, #9
 8000e32:	4644      	mov	r4, r8
 8000e34:	22ff      	movs	r2, #255	; 0xff
 8000e36:	e763      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e38:	4338      	orrs	r0, r7
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	0a40      	lsrs	r0, r0, #9
 8000e3e:	22ff      	movs	r2, #255	; 0xff
 8000e40:	e75e      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e42:	2401      	movs	r4, #1
 8000e44:	1aa3      	subs	r3, r4, r2
 8000e46:	2b1b      	cmp	r3, #27
 8000e48:	dd05      	ble.n	8000e56 <__aeabi_fmul+0x1ea>
 8000e4a:	400c      	ands	r4, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e756      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e52:	465e      	mov	r6, fp
 8000e54:	e7cb      	b.n	8000dee <__aeabi_fmul+0x182>
 8000e56:	002a      	movs	r2, r5
 8000e58:	2020      	movs	r0, #32
 8000e5a:	40da      	lsrs	r2, r3
 8000e5c:	1ac3      	subs	r3, r0, r3
 8000e5e:	409d      	lsls	r5, r3
 8000e60:	002b      	movs	r3, r5
 8000e62:	1e5d      	subs	r5, r3, #1
 8000e64:	41ab      	sbcs	r3, r5
 8000e66:	4313      	orrs	r3, r2
 8000e68:	075a      	lsls	r2, r3, #29
 8000e6a:	d004      	beq.n	8000e76 <__aeabi_fmul+0x20a>
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	401a      	ands	r2, r3
 8000e70:	2a04      	cmp	r2, #4
 8000e72:	d000      	beq.n	8000e76 <__aeabi_fmul+0x20a>
 8000e74:	3304      	adds	r3, #4
 8000e76:	015a      	lsls	r2, r3, #5
 8000e78:	d504      	bpl.n	8000e84 <__aeabi_fmul+0x218>
 8000e7a:	2401      	movs	r4, #1
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	400c      	ands	r4, r1
 8000e80:	2000      	movs	r0, #0
 8000e82:	e73d      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e84:	2401      	movs	r4, #1
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	0a58      	lsrs	r0, r3, #9
 8000e8a:	400c      	ands	r4, r1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e737      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	2401      	movs	r4, #1
 8000e94:	03c0      	lsls	r0, r0, #15
 8000e96:	4328      	orrs	r0, r5
 8000e98:	0240      	lsls	r0, r0, #9
 8000e9a:	0a40      	lsrs	r0, r0, #9
 8000e9c:	400c      	ands	r4, r1
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	e72e      	b.n	8000d00 <__aeabi_fmul+0x94>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	0800e368 	.word	0x0800e368
 8000ea8:	f7ffffff 	.word	0xf7ffffff

08000eac <__aeabi_f2iz>:
 8000eac:	0241      	lsls	r1, r0, #9
 8000eae:	0043      	lsls	r3, r0, #1
 8000eb0:	0fc2      	lsrs	r2, r0, #31
 8000eb2:	0a49      	lsrs	r1, r1, #9
 8000eb4:	0e1b      	lsrs	r3, r3, #24
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	2b7e      	cmp	r3, #126	; 0x7e
 8000eba:	dd0d      	ble.n	8000ed8 <__aeabi_f2iz+0x2c>
 8000ebc:	2b9d      	cmp	r3, #157	; 0x9d
 8000ebe:	dc0c      	bgt.n	8000eda <__aeabi_f2iz+0x2e>
 8000ec0:	2080      	movs	r0, #128	; 0x80
 8000ec2:	0400      	lsls	r0, r0, #16
 8000ec4:	4301      	orrs	r1, r0
 8000ec6:	2b95      	cmp	r3, #149	; 0x95
 8000ec8:	dc0a      	bgt.n	8000ee0 <__aeabi_f2iz+0x34>
 8000eca:	2096      	movs	r0, #150	; 0x96
 8000ecc:	1ac3      	subs	r3, r0, r3
 8000ece:	40d9      	lsrs	r1, r3
 8000ed0:	4248      	negs	r0, r1
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_f2iz+0x2c>
 8000ed6:	0008      	movs	r0, r1
 8000ed8:	4770      	bx	lr
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <__aeabi_f2iz+0x3c>)
 8000edc:	18d0      	adds	r0, r2, r3
 8000ede:	e7fb      	b.n	8000ed8 <__aeabi_f2iz+0x2c>
 8000ee0:	3b96      	subs	r3, #150	; 0x96
 8000ee2:	4099      	lsls	r1, r3
 8000ee4:	e7f4      	b.n	8000ed0 <__aeabi_f2iz+0x24>
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	7fffffff 	.word	0x7fffffff

08000eec <__aeabi_i2f>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d030      	beq.n	8000f54 <__aeabi_i2f+0x68>
 8000ef2:	17c3      	asrs	r3, r0, #31
 8000ef4:	18c4      	adds	r4, r0, r3
 8000ef6:	405c      	eors	r4, r3
 8000ef8:	0fc5      	lsrs	r5, r0, #31
 8000efa:	0020      	movs	r0, r4
 8000efc:	f001 fed8 	bl	8002cb0 <__clzsi2>
 8000f00:	239e      	movs	r3, #158	; 0x9e
 8000f02:	1a1b      	subs	r3, r3, r0
 8000f04:	2b96      	cmp	r3, #150	; 0x96
 8000f06:	dc0d      	bgt.n	8000f24 <__aeabi_i2f+0x38>
 8000f08:	2296      	movs	r2, #150	; 0x96
 8000f0a:	1ad2      	subs	r2, r2, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	002a      	movs	r2, r5
 8000f10:	0264      	lsls	r4, r4, #9
 8000f12:	0a64      	lsrs	r4, r4, #9
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	0264      	lsls	r4, r4, #9
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	0a60      	lsrs	r0, r4, #9
 8000f1c:	07d2      	lsls	r2, r2, #31
 8000f1e:	4318      	orrs	r0, r3
 8000f20:	4310      	orrs	r0, r2
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
 8000f24:	2b99      	cmp	r3, #153	; 0x99
 8000f26:	dc19      	bgt.n	8000f5c <__aeabi_i2f+0x70>
 8000f28:	2299      	movs	r2, #153	; 0x99
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	dd29      	ble.n	8000f84 <__aeabi_i2f+0x98>
 8000f30:	4094      	lsls	r4, r2
 8000f32:	0022      	movs	r2, r4
 8000f34:	4c14      	ldr	r4, [pc, #80]	; (8000f88 <__aeabi_i2f+0x9c>)
 8000f36:	4014      	ands	r4, r2
 8000f38:	0751      	lsls	r1, r2, #29
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_i2f+0x5a>
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	400a      	ands	r2, r1
 8000f40:	2a04      	cmp	r2, #4
 8000f42:	d000      	beq.n	8000f46 <__aeabi_i2f+0x5a>
 8000f44:	3404      	adds	r4, #4
 8000f46:	0162      	lsls	r2, r4, #5
 8000f48:	d413      	bmi.n	8000f72 <__aeabi_i2f+0x86>
 8000f4a:	01a4      	lsls	r4, r4, #6
 8000f4c:	0a64      	lsrs	r4, r4, #9
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	002a      	movs	r2, r5
 8000f52:	e7e0      	b.n	8000f16 <__aeabi_i2f+0x2a>
 8000f54:	2200      	movs	r2, #0
 8000f56:	2300      	movs	r3, #0
 8000f58:	2400      	movs	r4, #0
 8000f5a:	e7dc      	b.n	8000f16 <__aeabi_i2f+0x2a>
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	0021      	movs	r1, r4
 8000f60:	1a12      	subs	r2, r2, r0
 8000f62:	40d1      	lsrs	r1, r2
 8000f64:	22b9      	movs	r2, #185	; 0xb9
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	1e62      	subs	r2, r4, #1
 8000f6c:	4194      	sbcs	r4, r2
 8000f6e:	430c      	orrs	r4, r1
 8000f70:	e7da      	b.n	8000f28 <__aeabi_i2f+0x3c>
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <__aeabi_i2f+0x9c>)
 8000f74:	002a      	movs	r2, r5
 8000f76:	401c      	ands	r4, r3
 8000f78:	239f      	movs	r3, #159	; 0x9f
 8000f7a:	01a4      	lsls	r4, r4, #6
 8000f7c:	1a1b      	subs	r3, r3, r0
 8000f7e:	0a64      	lsrs	r4, r4, #9
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	e7c8      	b.n	8000f16 <__aeabi_i2f+0x2a>
 8000f84:	0022      	movs	r2, r4
 8000f86:	e7d5      	b.n	8000f34 <__aeabi_i2f+0x48>
 8000f88:	fbffffff 	.word	0xfbffffff

08000f8c <__aeabi_ui2f>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	1e04      	subs	r4, r0, #0
 8000f90:	d027      	beq.n	8000fe2 <__aeabi_ui2f+0x56>
 8000f92:	f001 fe8d 	bl	8002cb0 <__clzsi2>
 8000f96:	239e      	movs	r3, #158	; 0x9e
 8000f98:	1a1b      	subs	r3, r3, r0
 8000f9a:	2b96      	cmp	r3, #150	; 0x96
 8000f9c:	dc0a      	bgt.n	8000fb4 <__aeabi_ui2f+0x28>
 8000f9e:	2296      	movs	r2, #150	; 0x96
 8000fa0:	1ad2      	subs	r2, r2, r3
 8000fa2:	4094      	lsls	r4, r2
 8000fa4:	0264      	lsls	r4, r4, #9
 8000fa6:	0a64      	lsrs	r4, r4, #9
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	0264      	lsls	r4, r4, #9
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0a60      	lsrs	r0, r4, #9
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	bd10      	pop	{r4, pc}
 8000fb4:	2b99      	cmp	r3, #153	; 0x99
 8000fb6:	dc17      	bgt.n	8000fe8 <__aeabi_ui2f+0x5c>
 8000fb8:	2299      	movs	r2, #153	; 0x99
 8000fba:	1ad2      	subs	r2, r2, r3
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	dd27      	ble.n	8001010 <__aeabi_ui2f+0x84>
 8000fc0:	4094      	lsls	r4, r2
 8000fc2:	0022      	movs	r2, r4
 8000fc4:	4c13      	ldr	r4, [pc, #76]	; (8001014 <__aeabi_ui2f+0x88>)
 8000fc6:	4014      	ands	r4, r2
 8000fc8:	0751      	lsls	r1, r2, #29
 8000fca:	d004      	beq.n	8000fd6 <__aeabi_ui2f+0x4a>
 8000fcc:	210f      	movs	r1, #15
 8000fce:	400a      	ands	r2, r1
 8000fd0:	2a04      	cmp	r2, #4
 8000fd2:	d000      	beq.n	8000fd6 <__aeabi_ui2f+0x4a>
 8000fd4:	3404      	adds	r4, #4
 8000fd6:	0162      	lsls	r2, r4, #5
 8000fd8:	d412      	bmi.n	8001000 <__aeabi_ui2f+0x74>
 8000fda:	01a4      	lsls	r4, r4, #6
 8000fdc:	0a64      	lsrs	r4, r4, #9
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	e7e3      	b.n	8000faa <__aeabi_ui2f+0x1e>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	e7e0      	b.n	8000faa <__aeabi_ui2f+0x1e>
 8000fe8:	22b9      	movs	r2, #185	; 0xb9
 8000fea:	0021      	movs	r1, r4
 8000fec:	1ad2      	subs	r2, r2, r3
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	1e51      	subs	r1, r2, #1
 8000ff4:	418a      	sbcs	r2, r1
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	1a09      	subs	r1, r1, r0
 8000ffa:	40cc      	lsrs	r4, r1
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	e7db      	b.n	8000fb8 <__aeabi_ui2f+0x2c>
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__aeabi_ui2f+0x88>)
 8001002:	401c      	ands	r4, r3
 8001004:	239f      	movs	r3, #159	; 0x9f
 8001006:	01a4      	lsls	r4, r4, #6
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	0a64      	lsrs	r4, r4, #9
 800100c:	b2db      	uxtb	r3, r3
 800100e:	e7cc      	b.n	8000faa <__aeabi_ui2f+0x1e>
 8001010:	0022      	movs	r2, r4
 8001012:	e7d7      	b.n	8000fc4 <__aeabi_ui2f+0x38>
 8001014:	fbffffff 	.word	0xfbffffff

08001018 <__aeabi_dadd>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	4645      	mov	r5, r8
 800101c:	46de      	mov	lr, fp
 800101e:	4657      	mov	r7, sl
 8001020:	464e      	mov	r6, r9
 8001022:	030c      	lsls	r4, r1, #12
 8001024:	b5e0      	push	{r5, r6, r7, lr}
 8001026:	004e      	lsls	r6, r1, #1
 8001028:	0fc9      	lsrs	r1, r1, #31
 800102a:	4688      	mov	r8, r1
 800102c:	000d      	movs	r5, r1
 800102e:	0a61      	lsrs	r1, r4, #9
 8001030:	0f44      	lsrs	r4, r0, #29
 8001032:	430c      	orrs	r4, r1
 8001034:	00c7      	lsls	r7, r0, #3
 8001036:	0319      	lsls	r1, r3, #12
 8001038:	0058      	lsls	r0, r3, #1
 800103a:	0fdb      	lsrs	r3, r3, #31
 800103c:	469b      	mov	fp, r3
 800103e:	0a4b      	lsrs	r3, r1, #9
 8001040:	0f51      	lsrs	r1, r2, #29
 8001042:	430b      	orrs	r3, r1
 8001044:	0d76      	lsrs	r6, r6, #21
 8001046:	0d40      	lsrs	r0, r0, #21
 8001048:	0019      	movs	r1, r3
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	45d8      	cmp	r8, fp
 800104e:	d100      	bne.n	8001052 <__aeabi_dadd+0x3a>
 8001050:	e0ae      	b.n	80011b0 <__aeabi_dadd+0x198>
 8001052:	1a35      	subs	r5, r6, r0
 8001054:	2d00      	cmp	r5, #0
 8001056:	dc00      	bgt.n	800105a <__aeabi_dadd+0x42>
 8001058:	e0f6      	b.n	8001248 <__aeabi_dadd+0x230>
 800105a:	2800      	cmp	r0, #0
 800105c:	d10f      	bne.n	800107e <__aeabi_dadd+0x66>
 800105e:	4313      	orrs	r3, r2
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x4c>
 8001062:	e0db      	b.n	800121c <__aeabi_dadd+0x204>
 8001064:	1e6b      	subs	r3, r5, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <__aeabi_dadd+0x54>
 800106a:	e137      	b.n	80012dc <__aeabi_dadd+0x2c4>
 800106c:	1aba      	subs	r2, r7, r2
 800106e:	4297      	cmp	r7, r2
 8001070:	41bf      	sbcs	r7, r7
 8001072:	1a64      	subs	r4, r4, r1
 8001074:	427f      	negs	r7, r7
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2601      	movs	r6, #1
 800107a:	0017      	movs	r7, r2
 800107c:	e024      	b.n	80010c8 <__aeabi_dadd+0xb0>
 800107e:	4bc6      	ldr	r3, [pc, #792]	; (8001398 <__aeabi_dadd+0x380>)
 8001080:	429e      	cmp	r6, r3
 8001082:	d04d      	beq.n	8001120 <__aeabi_dadd+0x108>
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	4319      	orrs	r1, r3
 800108a:	2d38      	cmp	r5, #56	; 0x38
 800108c:	dd00      	ble.n	8001090 <__aeabi_dadd+0x78>
 800108e:	e107      	b.n	80012a0 <__aeabi_dadd+0x288>
 8001090:	2d1f      	cmp	r5, #31
 8001092:	dd00      	ble.n	8001096 <__aeabi_dadd+0x7e>
 8001094:	e138      	b.n	8001308 <__aeabi_dadd+0x2f0>
 8001096:	2020      	movs	r0, #32
 8001098:	1b43      	subs	r3, r0, r5
 800109a:	469a      	mov	sl, r3
 800109c:	000b      	movs	r3, r1
 800109e:	4650      	mov	r0, sl
 80010a0:	4083      	lsls	r3, r0
 80010a2:	4699      	mov	r9, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	4648      	mov	r0, r9
 80010a8:	40eb      	lsrs	r3, r5
 80010aa:	4318      	orrs	r0, r3
 80010ac:	0003      	movs	r3, r0
 80010ae:	4650      	mov	r0, sl
 80010b0:	4082      	lsls	r2, r0
 80010b2:	1e50      	subs	r0, r2, #1
 80010b4:	4182      	sbcs	r2, r0
 80010b6:	40e9      	lsrs	r1, r5
 80010b8:	431a      	orrs	r2, r3
 80010ba:	1aba      	subs	r2, r7, r2
 80010bc:	1a61      	subs	r1, r4, r1
 80010be:	4297      	cmp	r7, r2
 80010c0:	41a4      	sbcs	r4, r4
 80010c2:	0017      	movs	r7, r2
 80010c4:	4264      	negs	r4, r4
 80010c6:	1b0c      	subs	r4, r1, r4
 80010c8:	0223      	lsls	r3, r4, #8
 80010ca:	d562      	bpl.n	8001192 <__aeabi_dadd+0x17a>
 80010cc:	0264      	lsls	r4, r4, #9
 80010ce:	0a65      	lsrs	r5, r4, #9
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0xbe>
 80010d4:	e0df      	b.n	8001296 <__aeabi_dadd+0x27e>
 80010d6:	0028      	movs	r0, r5
 80010d8:	f001 fdea 	bl	8002cb0 <__clzsi2>
 80010dc:	0003      	movs	r3, r0
 80010de:	3b08      	subs	r3, #8
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	dd00      	ble.n	80010e6 <__aeabi_dadd+0xce>
 80010e4:	e0d2      	b.n	800128c <__aeabi_dadd+0x274>
 80010e6:	2220      	movs	r2, #32
 80010e8:	003c      	movs	r4, r7
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	409d      	lsls	r5, r3
 80010ee:	40d4      	lsrs	r4, r2
 80010f0:	409f      	lsls	r7, r3
 80010f2:	4325      	orrs	r5, r4
 80010f4:	429e      	cmp	r6, r3
 80010f6:	dd00      	ble.n	80010fa <__aeabi_dadd+0xe2>
 80010f8:	e0c4      	b.n	8001284 <__aeabi_dadd+0x26c>
 80010fa:	1b9e      	subs	r6, r3, r6
 80010fc:	1c73      	adds	r3, r6, #1
 80010fe:	2b1f      	cmp	r3, #31
 8001100:	dd00      	ble.n	8001104 <__aeabi_dadd+0xec>
 8001102:	e0f1      	b.n	80012e8 <__aeabi_dadd+0x2d0>
 8001104:	2220      	movs	r2, #32
 8001106:	0038      	movs	r0, r7
 8001108:	0029      	movs	r1, r5
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	40d8      	lsrs	r0, r3
 800110e:	4091      	lsls	r1, r2
 8001110:	4097      	lsls	r7, r2
 8001112:	002c      	movs	r4, r5
 8001114:	4301      	orrs	r1, r0
 8001116:	1e78      	subs	r0, r7, #1
 8001118:	4187      	sbcs	r7, r0
 800111a:	40dc      	lsrs	r4, r3
 800111c:	2600      	movs	r6, #0
 800111e:	430f      	orrs	r7, r1
 8001120:	077b      	lsls	r3, r7, #29
 8001122:	d009      	beq.n	8001138 <__aeabi_dadd+0x120>
 8001124:	230f      	movs	r3, #15
 8001126:	403b      	ands	r3, r7
 8001128:	2b04      	cmp	r3, #4
 800112a:	d005      	beq.n	8001138 <__aeabi_dadd+0x120>
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	42bb      	cmp	r3, r7
 8001130:	41bf      	sbcs	r7, r7
 8001132:	427f      	negs	r7, r7
 8001134:	19e4      	adds	r4, r4, r7
 8001136:	001f      	movs	r7, r3
 8001138:	0223      	lsls	r3, r4, #8
 800113a:	d52c      	bpl.n	8001196 <__aeabi_dadd+0x17e>
 800113c:	4b96      	ldr	r3, [pc, #600]	; (8001398 <__aeabi_dadd+0x380>)
 800113e:	3601      	adds	r6, #1
 8001140:	429e      	cmp	r6, r3
 8001142:	d100      	bne.n	8001146 <__aeabi_dadd+0x12e>
 8001144:	e09a      	b.n	800127c <__aeabi_dadd+0x264>
 8001146:	4645      	mov	r5, r8
 8001148:	4b94      	ldr	r3, [pc, #592]	; (800139c <__aeabi_dadd+0x384>)
 800114a:	08ff      	lsrs	r7, r7, #3
 800114c:	401c      	ands	r4, r3
 800114e:	0760      	lsls	r0, r4, #29
 8001150:	0576      	lsls	r6, r6, #21
 8001152:	0264      	lsls	r4, r4, #9
 8001154:	4307      	orrs	r7, r0
 8001156:	0b24      	lsrs	r4, r4, #12
 8001158:	0d76      	lsrs	r6, r6, #21
 800115a:	2100      	movs	r1, #0
 800115c:	0324      	lsls	r4, r4, #12
 800115e:	0b23      	lsrs	r3, r4, #12
 8001160:	0d0c      	lsrs	r4, r1, #20
 8001162:	4a8f      	ldr	r2, [pc, #572]	; (80013a0 <__aeabi_dadd+0x388>)
 8001164:	0524      	lsls	r4, r4, #20
 8001166:	431c      	orrs	r4, r3
 8001168:	4014      	ands	r4, r2
 800116a:	0533      	lsls	r3, r6, #20
 800116c:	4323      	orrs	r3, r4
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	085b      	lsrs	r3, r3, #1
 8001174:	432b      	orrs	r3, r5
 8001176:	0038      	movs	r0, r7
 8001178:	0019      	movs	r1, r3
 800117a:	bc3c      	pop	{r2, r3, r4, r5}
 800117c:	4690      	mov	r8, r2
 800117e:	4699      	mov	r9, r3
 8001180:	46a2      	mov	sl, r4
 8001182:	46ab      	mov	fp, r5
 8001184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001186:	4664      	mov	r4, ip
 8001188:	4304      	orrs	r4, r0
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x176>
 800118c:	e211      	b.n	80015b2 <__aeabi_dadd+0x59a>
 800118e:	0004      	movs	r4, r0
 8001190:	4667      	mov	r7, ip
 8001192:	077b      	lsls	r3, r7, #29
 8001194:	d1c6      	bne.n	8001124 <__aeabi_dadd+0x10c>
 8001196:	4645      	mov	r5, r8
 8001198:	0760      	lsls	r0, r4, #29
 800119a:	08ff      	lsrs	r7, r7, #3
 800119c:	4307      	orrs	r7, r0
 800119e:	08e4      	lsrs	r4, r4, #3
 80011a0:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <__aeabi_dadd+0x380>)
 80011a2:	429e      	cmp	r6, r3
 80011a4:	d030      	beq.n	8001208 <__aeabi_dadd+0x1f0>
 80011a6:	0324      	lsls	r4, r4, #12
 80011a8:	0576      	lsls	r6, r6, #21
 80011aa:	0b24      	lsrs	r4, r4, #12
 80011ac:	0d76      	lsrs	r6, r6, #21
 80011ae:	e7d4      	b.n	800115a <__aeabi_dadd+0x142>
 80011b0:	1a33      	subs	r3, r6, r0
 80011b2:	469a      	mov	sl, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dd78      	ble.n	80012aa <__aeabi_dadd+0x292>
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d031      	beq.n	8001220 <__aeabi_dadd+0x208>
 80011bc:	4876      	ldr	r0, [pc, #472]	; (8001398 <__aeabi_dadd+0x380>)
 80011be:	4286      	cmp	r6, r0
 80011c0:	d0ae      	beq.n	8001120 <__aeabi_dadd+0x108>
 80011c2:	2080      	movs	r0, #128	; 0x80
 80011c4:	0400      	lsls	r0, r0, #16
 80011c6:	4301      	orrs	r1, r0
 80011c8:	4653      	mov	r3, sl
 80011ca:	2b38      	cmp	r3, #56	; 0x38
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_dadd+0x1b8>
 80011ce:	e0e9      	b.n	80013a4 <__aeabi_dadd+0x38c>
 80011d0:	430a      	orrs	r2, r1
 80011d2:	1e51      	subs	r1, r2, #1
 80011d4:	418a      	sbcs	r2, r1
 80011d6:	2100      	movs	r1, #0
 80011d8:	19d2      	adds	r2, r2, r7
 80011da:	42ba      	cmp	r2, r7
 80011dc:	41bf      	sbcs	r7, r7
 80011de:	1909      	adds	r1, r1, r4
 80011e0:	427c      	negs	r4, r7
 80011e2:	0017      	movs	r7, r2
 80011e4:	190c      	adds	r4, r1, r4
 80011e6:	0223      	lsls	r3, r4, #8
 80011e8:	d5d3      	bpl.n	8001192 <__aeabi_dadd+0x17a>
 80011ea:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <__aeabi_dadd+0x380>)
 80011ec:	3601      	adds	r6, #1
 80011ee:	429e      	cmp	r6, r3
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dadd+0x1dc>
 80011f2:	e13a      	b.n	800146a <__aeabi_dadd+0x452>
 80011f4:	2001      	movs	r0, #1
 80011f6:	4b69      	ldr	r3, [pc, #420]	; (800139c <__aeabi_dadd+0x384>)
 80011f8:	401c      	ands	r4, r3
 80011fa:	087b      	lsrs	r3, r7, #1
 80011fc:	4007      	ands	r7, r0
 80011fe:	431f      	orrs	r7, r3
 8001200:	07e0      	lsls	r0, r4, #31
 8001202:	4307      	orrs	r7, r0
 8001204:	0864      	lsrs	r4, r4, #1
 8001206:	e78b      	b.n	8001120 <__aeabi_dadd+0x108>
 8001208:	0023      	movs	r3, r4
 800120a:	433b      	orrs	r3, r7
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x1f8>
 800120e:	e1cb      	b.n	80015a8 <__aeabi_dadd+0x590>
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	0312      	lsls	r2, r2, #12
 8001214:	4314      	orrs	r4, r2
 8001216:	0324      	lsls	r4, r4, #12
 8001218:	0b24      	lsrs	r4, r4, #12
 800121a:	e79e      	b.n	800115a <__aeabi_dadd+0x142>
 800121c:	002e      	movs	r6, r5
 800121e:	e77f      	b.n	8001120 <__aeabi_dadd+0x108>
 8001220:	0008      	movs	r0, r1
 8001222:	4310      	orrs	r0, r2
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x210>
 8001226:	e0b4      	b.n	8001392 <__aeabi_dadd+0x37a>
 8001228:	1e58      	subs	r0, r3, #1
 800122a:	2800      	cmp	r0, #0
 800122c:	d000      	beq.n	8001230 <__aeabi_dadd+0x218>
 800122e:	e0de      	b.n	80013ee <__aeabi_dadd+0x3d6>
 8001230:	18ba      	adds	r2, r7, r2
 8001232:	42ba      	cmp	r2, r7
 8001234:	419b      	sbcs	r3, r3
 8001236:	1864      	adds	r4, r4, r1
 8001238:	425b      	negs	r3, r3
 800123a:	18e4      	adds	r4, r4, r3
 800123c:	0017      	movs	r7, r2
 800123e:	2601      	movs	r6, #1
 8001240:	0223      	lsls	r3, r4, #8
 8001242:	d5a6      	bpl.n	8001192 <__aeabi_dadd+0x17a>
 8001244:	2602      	movs	r6, #2
 8001246:	e7d5      	b.n	80011f4 <__aeabi_dadd+0x1dc>
 8001248:	2d00      	cmp	r5, #0
 800124a:	d16e      	bne.n	800132a <__aeabi_dadd+0x312>
 800124c:	1c70      	adds	r0, r6, #1
 800124e:	0540      	lsls	r0, r0, #21
 8001250:	0d40      	lsrs	r0, r0, #21
 8001252:	2801      	cmp	r0, #1
 8001254:	dc00      	bgt.n	8001258 <__aeabi_dadd+0x240>
 8001256:	e0f9      	b.n	800144c <__aeabi_dadd+0x434>
 8001258:	1ab8      	subs	r0, r7, r2
 800125a:	4684      	mov	ip, r0
 800125c:	4287      	cmp	r7, r0
 800125e:	4180      	sbcs	r0, r0
 8001260:	1ae5      	subs	r5, r4, r3
 8001262:	4240      	negs	r0, r0
 8001264:	1a2d      	subs	r5, r5, r0
 8001266:	0228      	lsls	r0, r5, #8
 8001268:	d400      	bmi.n	800126c <__aeabi_dadd+0x254>
 800126a:	e089      	b.n	8001380 <__aeabi_dadd+0x368>
 800126c:	1bd7      	subs	r7, r2, r7
 800126e:	42ba      	cmp	r2, r7
 8001270:	4192      	sbcs	r2, r2
 8001272:	1b1c      	subs	r4, r3, r4
 8001274:	4252      	negs	r2, r2
 8001276:	1aa5      	subs	r5, r4, r2
 8001278:	46d8      	mov	r8, fp
 800127a:	e729      	b.n	80010d0 <__aeabi_dadd+0xb8>
 800127c:	4645      	mov	r5, r8
 800127e:	2400      	movs	r4, #0
 8001280:	2700      	movs	r7, #0
 8001282:	e76a      	b.n	800115a <__aeabi_dadd+0x142>
 8001284:	4c45      	ldr	r4, [pc, #276]	; (800139c <__aeabi_dadd+0x384>)
 8001286:	1af6      	subs	r6, r6, r3
 8001288:	402c      	ands	r4, r5
 800128a:	e749      	b.n	8001120 <__aeabi_dadd+0x108>
 800128c:	003d      	movs	r5, r7
 800128e:	3828      	subs	r0, #40	; 0x28
 8001290:	4085      	lsls	r5, r0
 8001292:	2700      	movs	r7, #0
 8001294:	e72e      	b.n	80010f4 <__aeabi_dadd+0xdc>
 8001296:	0038      	movs	r0, r7
 8001298:	f001 fd0a 	bl	8002cb0 <__clzsi2>
 800129c:	3020      	adds	r0, #32
 800129e:	e71d      	b.n	80010dc <__aeabi_dadd+0xc4>
 80012a0:	430a      	orrs	r2, r1
 80012a2:	1e51      	subs	r1, r2, #1
 80012a4:	418a      	sbcs	r2, r1
 80012a6:	2100      	movs	r1, #0
 80012a8:	e707      	b.n	80010ba <__aeabi_dadd+0xa2>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d000      	beq.n	80012b0 <__aeabi_dadd+0x298>
 80012ae:	e0f3      	b.n	8001498 <__aeabi_dadd+0x480>
 80012b0:	1c70      	adds	r0, r6, #1
 80012b2:	0543      	lsls	r3, r0, #21
 80012b4:	0d5b      	lsrs	r3, r3, #21
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	dc00      	bgt.n	80012bc <__aeabi_dadd+0x2a4>
 80012ba:	e0ad      	b.n	8001418 <__aeabi_dadd+0x400>
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <__aeabi_dadd+0x380>)
 80012be:	4298      	cmp	r0, r3
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x2ac>
 80012c2:	e0d1      	b.n	8001468 <__aeabi_dadd+0x450>
 80012c4:	18ba      	adds	r2, r7, r2
 80012c6:	42ba      	cmp	r2, r7
 80012c8:	41bf      	sbcs	r7, r7
 80012ca:	1864      	adds	r4, r4, r1
 80012cc:	427f      	negs	r7, r7
 80012ce:	19e4      	adds	r4, r4, r7
 80012d0:	07e7      	lsls	r7, r4, #31
 80012d2:	0852      	lsrs	r2, r2, #1
 80012d4:	4317      	orrs	r7, r2
 80012d6:	0864      	lsrs	r4, r4, #1
 80012d8:	0006      	movs	r6, r0
 80012da:	e721      	b.n	8001120 <__aeabi_dadd+0x108>
 80012dc:	482e      	ldr	r0, [pc, #184]	; (8001398 <__aeabi_dadd+0x380>)
 80012de:	4285      	cmp	r5, r0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x2cc>
 80012e2:	e093      	b.n	800140c <__aeabi_dadd+0x3f4>
 80012e4:	001d      	movs	r5, r3
 80012e6:	e6d0      	b.n	800108a <__aeabi_dadd+0x72>
 80012e8:	0029      	movs	r1, r5
 80012ea:	3e1f      	subs	r6, #31
 80012ec:	40f1      	lsrs	r1, r6
 80012ee:	2b20      	cmp	r3, #32
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x2dc>
 80012f2:	e08d      	b.n	8001410 <__aeabi_dadd+0x3f8>
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	409d      	lsls	r5, r3
 80012fa:	432f      	orrs	r7, r5
 80012fc:	1e7d      	subs	r5, r7, #1
 80012fe:	41af      	sbcs	r7, r5
 8001300:	2400      	movs	r4, #0
 8001302:	430f      	orrs	r7, r1
 8001304:	2600      	movs	r6, #0
 8001306:	e744      	b.n	8001192 <__aeabi_dadd+0x17a>
 8001308:	002b      	movs	r3, r5
 800130a:	0008      	movs	r0, r1
 800130c:	3b20      	subs	r3, #32
 800130e:	40d8      	lsrs	r0, r3
 8001310:	0003      	movs	r3, r0
 8001312:	2d20      	cmp	r5, #32
 8001314:	d100      	bne.n	8001318 <__aeabi_dadd+0x300>
 8001316:	e07d      	b.n	8001414 <__aeabi_dadd+0x3fc>
 8001318:	2040      	movs	r0, #64	; 0x40
 800131a:	1b45      	subs	r5, r0, r5
 800131c:	40a9      	lsls	r1, r5
 800131e:	430a      	orrs	r2, r1
 8001320:	1e51      	subs	r1, r2, #1
 8001322:	418a      	sbcs	r2, r1
 8001324:	2100      	movs	r1, #0
 8001326:	431a      	orrs	r2, r3
 8001328:	e6c7      	b.n	80010ba <__aeabi_dadd+0xa2>
 800132a:	2e00      	cmp	r6, #0
 800132c:	d050      	beq.n	80013d0 <__aeabi_dadd+0x3b8>
 800132e:	4e1a      	ldr	r6, [pc, #104]	; (8001398 <__aeabi_dadd+0x380>)
 8001330:	42b0      	cmp	r0, r6
 8001332:	d057      	beq.n	80013e4 <__aeabi_dadd+0x3cc>
 8001334:	2680      	movs	r6, #128	; 0x80
 8001336:	426b      	negs	r3, r5
 8001338:	4699      	mov	r9, r3
 800133a:	0436      	lsls	r6, r6, #16
 800133c:	4334      	orrs	r4, r6
 800133e:	464b      	mov	r3, r9
 8001340:	2b38      	cmp	r3, #56	; 0x38
 8001342:	dd00      	ble.n	8001346 <__aeabi_dadd+0x32e>
 8001344:	e0d6      	b.n	80014f4 <__aeabi_dadd+0x4dc>
 8001346:	2b1f      	cmp	r3, #31
 8001348:	dd00      	ble.n	800134c <__aeabi_dadd+0x334>
 800134a:	e135      	b.n	80015b8 <__aeabi_dadd+0x5a0>
 800134c:	2620      	movs	r6, #32
 800134e:	1af5      	subs	r5, r6, r3
 8001350:	0026      	movs	r6, r4
 8001352:	40ae      	lsls	r6, r5
 8001354:	46b2      	mov	sl, r6
 8001356:	003e      	movs	r6, r7
 8001358:	40de      	lsrs	r6, r3
 800135a:	46ac      	mov	ip, r5
 800135c:	0035      	movs	r5, r6
 800135e:	4656      	mov	r6, sl
 8001360:	432e      	orrs	r6, r5
 8001362:	4665      	mov	r5, ip
 8001364:	40af      	lsls	r7, r5
 8001366:	1e7d      	subs	r5, r7, #1
 8001368:	41af      	sbcs	r7, r5
 800136a:	40dc      	lsrs	r4, r3
 800136c:	4337      	orrs	r7, r6
 800136e:	1bd7      	subs	r7, r2, r7
 8001370:	42ba      	cmp	r2, r7
 8001372:	4192      	sbcs	r2, r2
 8001374:	1b0c      	subs	r4, r1, r4
 8001376:	4252      	negs	r2, r2
 8001378:	1aa4      	subs	r4, r4, r2
 800137a:	0006      	movs	r6, r0
 800137c:	46d8      	mov	r8, fp
 800137e:	e6a3      	b.n	80010c8 <__aeabi_dadd+0xb0>
 8001380:	4664      	mov	r4, ip
 8001382:	4667      	mov	r7, ip
 8001384:	432c      	orrs	r4, r5
 8001386:	d000      	beq.n	800138a <__aeabi_dadd+0x372>
 8001388:	e6a2      	b.n	80010d0 <__aeabi_dadd+0xb8>
 800138a:	2500      	movs	r5, #0
 800138c:	2600      	movs	r6, #0
 800138e:	2700      	movs	r7, #0
 8001390:	e706      	b.n	80011a0 <__aeabi_dadd+0x188>
 8001392:	001e      	movs	r6, r3
 8001394:	e6c4      	b.n	8001120 <__aeabi_dadd+0x108>
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	000007ff 	.word	0x000007ff
 800139c:	ff7fffff 	.word	0xff7fffff
 80013a0:	800fffff 	.word	0x800fffff
 80013a4:	2b1f      	cmp	r3, #31
 80013a6:	dc63      	bgt.n	8001470 <__aeabi_dadd+0x458>
 80013a8:	2020      	movs	r0, #32
 80013aa:	1ac3      	subs	r3, r0, r3
 80013ac:	0008      	movs	r0, r1
 80013ae:	4098      	lsls	r0, r3
 80013b0:	469c      	mov	ip, r3
 80013b2:	4683      	mov	fp, r0
 80013b4:	4653      	mov	r3, sl
 80013b6:	0010      	movs	r0, r2
 80013b8:	40d8      	lsrs	r0, r3
 80013ba:	0003      	movs	r3, r0
 80013bc:	4658      	mov	r0, fp
 80013be:	4318      	orrs	r0, r3
 80013c0:	4663      	mov	r3, ip
 80013c2:	409a      	lsls	r2, r3
 80013c4:	1e53      	subs	r3, r2, #1
 80013c6:	419a      	sbcs	r2, r3
 80013c8:	4653      	mov	r3, sl
 80013ca:	4302      	orrs	r2, r0
 80013cc:	40d9      	lsrs	r1, r3
 80013ce:	e703      	b.n	80011d8 <__aeabi_dadd+0x1c0>
 80013d0:	0026      	movs	r6, r4
 80013d2:	433e      	orrs	r6, r7
 80013d4:	d006      	beq.n	80013e4 <__aeabi_dadd+0x3cc>
 80013d6:	43eb      	mvns	r3, r5
 80013d8:	4699      	mov	r9, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0c7      	beq.n	800136e <__aeabi_dadd+0x356>
 80013de:	4e94      	ldr	r6, [pc, #592]	; (8001630 <__aeabi_dadd+0x618>)
 80013e0:	42b0      	cmp	r0, r6
 80013e2:	d1ac      	bne.n	800133e <__aeabi_dadd+0x326>
 80013e4:	000c      	movs	r4, r1
 80013e6:	0017      	movs	r7, r2
 80013e8:	0006      	movs	r6, r0
 80013ea:	46d8      	mov	r8, fp
 80013ec:	e698      	b.n	8001120 <__aeabi_dadd+0x108>
 80013ee:	4b90      	ldr	r3, [pc, #576]	; (8001630 <__aeabi_dadd+0x618>)
 80013f0:	459a      	cmp	sl, r3
 80013f2:	d00b      	beq.n	800140c <__aeabi_dadd+0x3f4>
 80013f4:	4682      	mov	sl, r0
 80013f6:	e6e7      	b.n	80011c8 <__aeabi_dadd+0x1b0>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d000      	beq.n	80013fe <__aeabi_dadd+0x3e6>
 80013fc:	e09e      	b.n	800153c <__aeabi_dadd+0x524>
 80013fe:	0018      	movs	r0, r3
 8001400:	4310      	orrs	r0, r2
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x3ee>
 8001404:	e0e9      	b.n	80015da <__aeabi_dadd+0x5c2>
 8001406:	001c      	movs	r4, r3
 8001408:	0017      	movs	r7, r2
 800140a:	46d8      	mov	r8, fp
 800140c:	4e88      	ldr	r6, [pc, #544]	; (8001630 <__aeabi_dadd+0x618>)
 800140e:	e687      	b.n	8001120 <__aeabi_dadd+0x108>
 8001410:	2500      	movs	r5, #0
 8001412:	e772      	b.n	80012fa <__aeabi_dadd+0x2e2>
 8001414:	2100      	movs	r1, #0
 8001416:	e782      	b.n	800131e <__aeabi_dadd+0x306>
 8001418:	0023      	movs	r3, r4
 800141a:	433b      	orrs	r3, r7
 800141c:	2e00      	cmp	r6, #0
 800141e:	d000      	beq.n	8001422 <__aeabi_dadd+0x40a>
 8001420:	e0ab      	b.n	800157a <__aeabi_dadd+0x562>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x410>
 8001426:	e0e7      	b.n	80015f8 <__aeabi_dadd+0x5e0>
 8001428:	000b      	movs	r3, r1
 800142a:	4313      	orrs	r3, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x418>
 800142e:	e677      	b.n	8001120 <__aeabi_dadd+0x108>
 8001430:	18ba      	adds	r2, r7, r2
 8001432:	42ba      	cmp	r2, r7
 8001434:	41bf      	sbcs	r7, r7
 8001436:	1864      	adds	r4, r4, r1
 8001438:	427f      	negs	r7, r7
 800143a:	19e4      	adds	r4, r4, r7
 800143c:	0223      	lsls	r3, r4, #8
 800143e:	d400      	bmi.n	8001442 <__aeabi_dadd+0x42a>
 8001440:	e0f2      	b.n	8001628 <__aeabi_dadd+0x610>
 8001442:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <__aeabi_dadd+0x61c>)
 8001444:	0017      	movs	r7, r2
 8001446:	401c      	ands	r4, r3
 8001448:	0006      	movs	r6, r0
 800144a:	e669      	b.n	8001120 <__aeabi_dadd+0x108>
 800144c:	0020      	movs	r0, r4
 800144e:	4338      	orrs	r0, r7
 8001450:	2e00      	cmp	r6, #0
 8001452:	d1d1      	bne.n	80013f8 <__aeabi_dadd+0x3e0>
 8001454:	2800      	cmp	r0, #0
 8001456:	d15b      	bne.n	8001510 <__aeabi_dadd+0x4f8>
 8001458:	001c      	movs	r4, r3
 800145a:	4314      	orrs	r4, r2
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x448>
 800145e:	e0a8      	b.n	80015b2 <__aeabi_dadd+0x59a>
 8001460:	001c      	movs	r4, r3
 8001462:	0017      	movs	r7, r2
 8001464:	46d8      	mov	r8, fp
 8001466:	e65b      	b.n	8001120 <__aeabi_dadd+0x108>
 8001468:	0006      	movs	r6, r0
 800146a:	2400      	movs	r4, #0
 800146c:	2700      	movs	r7, #0
 800146e:	e697      	b.n	80011a0 <__aeabi_dadd+0x188>
 8001470:	4650      	mov	r0, sl
 8001472:	000b      	movs	r3, r1
 8001474:	3820      	subs	r0, #32
 8001476:	40c3      	lsrs	r3, r0
 8001478:	4699      	mov	r9, r3
 800147a:	4653      	mov	r3, sl
 800147c:	2b20      	cmp	r3, #32
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x46a>
 8001480:	e095      	b.n	80015ae <__aeabi_dadd+0x596>
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	4650      	mov	r0, sl
 8001486:	1a1b      	subs	r3, r3, r0
 8001488:	4099      	lsls	r1, r3
 800148a:	430a      	orrs	r2, r1
 800148c:	1e51      	subs	r1, r2, #1
 800148e:	418a      	sbcs	r2, r1
 8001490:	464b      	mov	r3, r9
 8001492:	2100      	movs	r1, #0
 8001494:	431a      	orrs	r2, r3
 8001496:	e69f      	b.n	80011d8 <__aeabi_dadd+0x1c0>
 8001498:	2e00      	cmp	r6, #0
 800149a:	d130      	bne.n	80014fe <__aeabi_dadd+0x4e6>
 800149c:	0026      	movs	r6, r4
 800149e:	433e      	orrs	r6, r7
 80014a0:	d067      	beq.n	8001572 <__aeabi_dadd+0x55a>
 80014a2:	43db      	mvns	r3, r3
 80014a4:	469a      	mov	sl, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d01c      	beq.n	80014e4 <__aeabi_dadd+0x4cc>
 80014aa:	4e61      	ldr	r6, [pc, #388]	; (8001630 <__aeabi_dadd+0x618>)
 80014ac:	42b0      	cmp	r0, r6
 80014ae:	d060      	beq.n	8001572 <__aeabi_dadd+0x55a>
 80014b0:	4653      	mov	r3, sl
 80014b2:	2b38      	cmp	r3, #56	; 0x38
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x4a0>
 80014b6:	e096      	b.n	80015e6 <__aeabi_dadd+0x5ce>
 80014b8:	2b1f      	cmp	r3, #31
 80014ba:	dd00      	ble.n	80014be <__aeabi_dadd+0x4a6>
 80014bc:	e09f      	b.n	80015fe <__aeabi_dadd+0x5e6>
 80014be:	2620      	movs	r6, #32
 80014c0:	1af3      	subs	r3, r6, r3
 80014c2:	0026      	movs	r6, r4
 80014c4:	409e      	lsls	r6, r3
 80014c6:	469c      	mov	ip, r3
 80014c8:	46b3      	mov	fp, r6
 80014ca:	4653      	mov	r3, sl
 80014cc:	003e      	movs	r6, r7
 80014ce:	40de      	lsrs	r6, r3
 80014d0:	0033      	movs	r3, r6
 80014d2:	465e      	mov	r6, fp
 80014d4:	431e      	orrs	r6, r3
 80014d6:	4663      	mov	r3, ip
 80014d8:	409f      	lsls	r7, r3
 80014da:	1e7b      	subs	r3, r7, #1
 80014dc:	419f      	sbcs	r7, r3
 80014de:	4653      	mov	r3, sl
 80014e0:	40dc      	lsrs	r4, r3
 80014e2:	4337      	orrs	r7, r6
 80014e4:	18bf      	adds	r7, r7, r2
 80014e6:	4297      	cmp	r7, r2
 80014e8:	4192      	sbcs	r2, r2
 80014ea:	1864      	adds	r4, r4, r1
 80014ec:	4252      	negs	r2, r2
 80014ee:	18a4      	adds	r4, r4, r2
 80014f0:	0006      	movs	r6, r0
 80014f2:	e678      	b.n	80011e6 <__aeabi_dadd+0x1ce>
 80014f4:	4327      	orrs	r7, r4
 80014f6:	1e7c      	subs	r4, r7, #1
 80014f8:	41a7      	sbcs	r7, r4
 80014fa:	2400      	movs	r4, #0
 80014fc:	e737      	b.n	800136e <__aeabi_dadd+0x356>
 80014fe:	4e4c      	ldr	r6, [pc, #304]	; (8001630 <__aeabi_dadd+0x618>)
 8001500:	42b0      	cmp	r0, r6
 8001502:	d036      	beq.n	8001572 <__aeabi_dadd+0x55a>
 8001504:	2680      	movs	r6, #128	; 0x80
 8001506:	425b      	negs	r3, r3
 8001508:	0436      	lsls	r6, r6, #16
 800150a:	469a      	mov	sl, r3
 800150c:	4334      	orrs	r4, r6
 800150e:	e7cf      	b.n	80014b0 <__aeabi_dadd+0x498>
 8001510:	0018      	movs	r0, r3
 8001512:	4310      	orrs	r0, r2
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x500>
 8001516:	e603      	b.n	8001120 <__aeabi_dadd+0x108>
 8001518:	1ab8      	subs	r0, r7, r2
 800151a:	4684      	mov	ip, r0
 800151c:	4567      	cmp	r7, ip
 800151e:	41ad      	sbcs	r5, r5
 8001520:	1ae0      	subs	r0, r4, r3
 8001522:	426d      	negs	r5, r5
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	0205      	lsls	r5, r0, #8
 8001528:	d400      	bmi.n	800152c <__aeabi_dadd+0x514>
 800152a:	e62c      	b.n	8001186 <__aeabi_dadd+0x16e>
 800152c:	1bd7      	subs	r7, r2, r7
 800152e:	42ba      	cmp	r2, r7
 8001530:	4192      	sbcs	r2, r2
 8001532:	1b1c      	subs	r4, r3, r4
 8001534:	4252      	negs	r2, r2
 8001536:	1aa4      	subs	r4, r4, r2
 8001538:	46d8      	mov	r8, fp
 800153a:	e5f1      	b.n	8001120 <__aeabi_dadd+0x108>
 800153c:	0018      	movs	r0, r3
 800153e:	4310      	orrs	r0, r2
 8001540:	d100      	bne.n	8001544 <__aeabi_dadd+0x52c>
 8001542:	e763      	b.n	800140c <__aeabi_dadd+0x3f4>
 8001544:	08f8      	lsrs	r0, r7, #3
 8001546:	0767      	lsls	r7, r4, #29
 8001548:	4307      	orrs	r7, r0
 800154a:	2080      	movs	r0, #128	; 0x80
 800154c:	08e4      	lsrs	r4, r4, #3
 800154e:	0300      	lsls	r0, r0, #12
 8001550:	4204      	tst	r4, r0
 8001552:	d008      	beq.n	8001566 <__aeabi_dadd+0x54e>
 8001554:	08dd      	lsrs	r5, r3, #3
 8001556:	4205      	tst	r5, r0
 8001558:	d105      	bne.n	8001566 <__aeabi_dadd+0x54e>
 800155a:	08d2      	lsrs	r2, r2, #3
 800155c:	0759      	lsls	r1, r3, #29
 800155e:	4311      	orrs	r1, r2
 8001560:	000f      	movs	r7, r1
 8001562:	002c      	movs	r4, r5
 8001564:	46d8      	mov	r8, fp
 8001566:	0f7b      	lsrs	r3, r7, #29
 8001568:	00e4      	lsls	r4, r4, #3
 800156a:	431c      	orrs	r4, r3
 800156c:	00ff      	lsls	r7, r7, #3
 800156e:	4e30      	ldr	r6, [pc, #192]	; (8001630 <__aeabi_dadd+0x618>)
 8001570:	e5d6      	b.n	8001120 <__aeabi_dadd+0x108>
 8001572:	000c      	movs	r4, r1
 8001574:	0017      	movs	r7, r2
 8001576:	0006      	movs	r6, r0
 8001578:	e5d2      	b.n	8001120 <__aeabi_dadd+0x108>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d038      	beq.n	80015f0 <__aeabi_dadd+0x5d8>
 800157e:	000b      	movs	r3, r1
 8001580:	4313      	orrs	r3, r2
 8001582:	d100      	bne.n	8001586 <__aeabi_dadd+0x56e>
 8001584:	e742      	b.n	800140c <__aeabi_dadd+0x3f4>
 8001586:	08f8      	lsrs	r0, r7, #3
 8001588:	0767      	lsls	r7, r4, #29
 800158a:	4307      	orrs	r7, r0
 800158c:	2080      	movs	r0, #128	; 0x80
 800158e:	08e4      	lsrs	r4, r4, #3
 8001590:	0300      	lsls	r0, r0, #12
 8001592:	4204      	tst	r4, r0
 8001594:	d0e7      	beq.n	8001566 <__aeabi_dadd+0x54e>
 8001596:	08cb      	lsrs	r3, r1, #3
 8001598:	4203      	tst	r3, r0
 800159a:	d1e4      	bne.n	8001566 <__aeabi_dadd+0x54e>
 800159c:	08d2      	lsrs	r2, r2, #3
 800159e:	0749      	lsls	r1, r1, #29
 80015a0:	4311      	orrs	r1, r2
 80015a2:	000f      	movs	r7, r1
 80015a4:	001c      	movs	r4, r3
 80015a6:	e7de      	b.n	8001566 <__aeabi_dadd+0x54e>
 80015a8:	2700      	movs	r7, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e5d5      	b.n	800115a <__aeabi_dadd+0x142>
 80015ae:	2100      	movs	r1, #0
 80015b0:	e76b      	b.n	800148a <__aeabi_dadd+0x472>
 80015b2:	2500      	movs	r5, #0
 80015b4:	2700      	movs	r7, #0
 80015b6:	e5f3      	b.n	80011a0 <__aeabi_dadd+0x188>
 80015b8:	464e      	mov	r6, r9
 80015ba:	0025      	movs	r5, r4
 80015bc:	3e20      	subs	r6, #32
 80015be:	40f5      	lsrs	r5, r6
 80015c0:	464b      	mov	r3, r9
 80015c2:	002e      	movs	r6, r5
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d02d      	beq.n	8001624 <__aeabi_dadd+0x60c>
 80015c8:	2540      	movs	r5, #64	; 0x40
 80015ca:	1aed      	subs	r5, r5, r3
 80015cc:	40ac      	lsls	r4, r5
 80015ce:	4327      	orrs	r7, r4
 80015d0:	1e7c      	subs	r4, r7, #1
 80015d2:	41a7      	sbcs	r7, r4
 80015d4:	2400      	movs	r4, #0
 80015d6:	4337      	orrs	r7, r6
 80015d8:	e6c9      	b.n	800136e <__aeabi_dadd+0x356>
 80015da:	2480      	movs	r4, #128	; 0x80
 80015dc:	2500      	movs	r5, #0
 80015de:	0324      	lsls	r4, r4, #12
 80015e0:	4e13      	ldr	r6, [pc, #76]	; (8001630 <__aeabi_dadd+0x618>)
 80015e2:	2700      	movs	r7, #0
 80015e4:	e5dc      	b.n	80011a0 <__aeabi_dadd+0x188>
 80015e6:	4327      	orrs	r7, r4
 80015e8:	1e7c      	subs	r4, r7, #1
 80015ea:	41a7      	sbcs	r7, r4
 80015ec:	2400      	movs	r4, #0
 80015ee:	e779      	b.n	80014e4 <__aeabi_dadd+0x4cc>
 80015f0:	000c      	movs	r4, r1
 80015f2:	0017      	movs	r7, r2
 80015f4:	4e0e      	ldr	r6, [pc, #56]	; (8001630 <__aeabi_dadd+0x618>)
 80015f6:	e593      	b.n	8001120 <__aeabi_dadd+0x108>
 80015f8:	000c      	movs	r4, r1
 80015fa:	0017      	movs	r7, r2
 80015fc:	e590      	b.n	8001120 <__aeabi_dadd+0x108>
 80015fe:	4656      	mov	r6, sl
 8001600:	0023      	movs	r3, r4
 8001602:	3e20      	subs	r6, #32
 8001604:	40f3      	lsrs	r3, r6
 8001606:	4699      	mov	r9, r3
 8001608:	4653      	mov	r3, sl
 800160a:	2b20      	cmp	r3, #32
 800160c:	d00e      	beq.n	800162c <__aeabi_dadd+0x614>
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	4656      	mov	r6, sl
 8001612:	1b9b      	subs	r3, r3, r6
 8001614:	409c      	lsls	r4, r3
 8001616:	4327      	orrs	r7, r4
 8001618:	1e7c      	subs	r4, r7, #1
 800161a:	41a7      	sbcs	r7, r4
 800161c:	464b      	mov	r3, r9
 800161e:	2400      	movs	r4, #0
 8001620:	431f      	orrs	r7, r3
 8001622:	e75f      	b.n	80014e4 <__aeabi_dadd+0x4cc>
 8001624:	2400      	movs	r4, #0
 8001626:	e7d2      	b.n	80015ce <__aeabi_dadd+0x5b6>
 8001628:	0017      	movs	r7, r2
 800162a:	e5b2      	b.n	8001192 <__aeabi_dadd+0x17a>
 800162c:	2400      	movs	r4, #0
 800162e:	e7f2      	b.n	8001616 <__aeabi_dadd+0x5fe>
 8001630:	000007ff 	.word	0x000007ff
 8001634:	ff7fffff 	.word	0xff7fffff

08001638 <__aeabi_ddiv>:
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	4657      	mov	r7, sl
 800163c:	4645      	mov	r5, r8
 800163e:	46de      	mov	lr, fp
 8001640:	464e      	mov	r6, r9
 8001642:	b5e0      	push	{r5, r6, r7, lr}
 8001644:	004c      	lsls	r4, r1, #1
 8001646:	030e      	lsls	r6, r1, #12
 8001648:	b087      	sub	sp, #28
 800164a:	4683      	mov	fp, r0
 800164c:	4692      	mov	sl, r2
 800164e:	001d      	movs	r5, r3
 8001650:	4680      	mov	r8, r0
 8001652:	0b36      	lsrs	r6, r6, #12
 8001654:	0d64      	lsrs	r4, r4, #21
 8001656:	0fcf      	lsrs	r7, r1, #31
 8001658:	2c00      	cmp	r4, #0
 800165a:	d04f      	beq.n	80016fc <__aeabi_ddiv+0xc4>
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <__aeabi_ddiv+0x1e4>)
 800165e:	429c      	cmp	r4, r3
 8001660:	d035      	beq.n	80016ce <__aeabi_ddiv+0x96>
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	0f42      	lsrs	r2, r0, #29
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	00f6      	lsls	r6, r6, #3
 800166a:	4313      	orrs	r3, r2
 800166c:	4333      	orrs	r3, r6
 800166e:	4699      	mov	r9, r3
 8001670:	00c3      	lsls	r3, r0, #3
 8001672:	4698      	mov	r8, r3
 8001674:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <__aeabi_ddiv+0x1e8>)
 8001676:	2600      	movs	r6, #0
 8001678:	469c      	mov	ip, r3
 800167a:	2300      	movs	r3, #0
 800167c:	4464      	add	r4, ip
 800167e:	9303      	str	r3, [sp, #12]
 8001680:	032b      	lsls	r3, r5, #12
 8001682:	0b1b      	lsrs	r3, r3, #12
 8001684:	469b      	mov	fp, r3
 8001686:	006b      	lsls	r3, r5, #1
 8001688:	0fed      	lsrs	r5, r5, #31
 800168a:	4650      	mov	r0, sl
 800168c:	0d5b      	lsrs	r3, r3, #21
 800168e:	9501      	str	r5, [sp, #4]
 8001690:	d05e      	beq.n	8001750 <__aeabi_ddiv+0x118>
 8001692:	4a62      	ldr	r2, [pc, #392]	; (800181c <__aeabi_ddiv+0x1e4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d053      	beq.n	8001740 <__aeabi_ddiv+0x108>
 8001698:	465a      	mov	r2, fp
 800169a:	00d1      	lsls	r1, r2, #3
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	0f40      	lsrs	r0, r0, #29
 80016a0:	0412      	lsls	r2, r2, #16
 80016a2:	4302      	orrs	r2, r0
 80016a4:	430a      	orrs	r2, r1
 80016a6:	4693      	mov	fp, r2
 80016a8:	4652      	mov	r2, sl
 80016aa:	00d1      	lsls	r1, r2, #3
 80016ac:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <__aeabi_ddiv+0x1e8>)
 80016ae:	4694      	mov	ip, r2
 80016b0:	2200      	movs	r2, #0
 80016b2:	4463      	add	r3, ip
 80016b4:	0038      	movs	r0, r7
 80016b6:	4068      	eors	r0, r5
 80016b8:	4684      	mov	ip, r0
 80016ba:	9002      	str	r0, [sp, #8]
 80016bc:	1ae4      	subs	r4, r4, r3
 80016be:	4316      	orrs	r6, r2
 80016c0:	2e0f      	cmp	r6, #15
 80016c2:	d900      	bls.n	80016c6 <__aeabi_ddiv+0x8e>
 80016c4:	e0b4      	b.n	8001830 <__aeabi_ddiv+0x1f8>
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <__aeabi_ddiv+0x1ec>)
 80016c8:	00b6      	lsls	r6, r6, #2
 80016ca:	599b      	ldr	r3, [r3, r6]
 80016cc:	469f      	mov	pc, r3
 80016ce:	0003      	movs	r3, r0
 80016d0:	4333      	orrs	r3, r6
 80016d2:	4699      	mov	r9, r3
 80016d4:	d16c      	bne.n	80017b0 <__aeabi_ddiv+0x178>
 80016d6:	2300      	movs	r3, #0
 80016d8:	4698      	mov	r8, r3
 80016da:	3302      	adds	r3, #2
 80016dc:	2608      	movs	r6, #8
 80016de:	9303      	str	r3, [sp, #12]
 80016e0:	e7ce      	b.n	8001680 <__aeabi_ddiv+0x48>
 80016e2:	46cb      	mov	fp, r9
 80016e4:	4641      	mov	r1, r8
 80016e6:	9a03      	ldr	r2, [sp, #12]
 80016e8:	9701      	str	r7, [sp, #4]
 80016ea:	2a02      	cmp	r2, #2
 80016ec:	d165      	bne.n	80017ba <__aeabi_ddiv+0x182>
 80016ee:	9b01      	ldr	r3, [sp, #4]
 80016f0:	4c4a      	ldr	r4, [pc, #296]	; (800181c <__aeabi_ddiv+0x1e4>)
 80016f2:	469c      	mov	ip, r3
 80016f4:	2300      	movs	r3, #0
 80016f6:	2200      	movs	r2, #0
 80016f8:	4698      	mov	r8, r3
 80016fa:	e06b      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 80016fc:	0003      	movs	r3, r0
 80016fe:	4333      	orrs	r3, r6
 8001700:	4699      	mov	r9, r3
 8001702:	d04e      	beq.n	80017a2 <__aeabi_ddiv+0x16a>
 8001704:	2e00      	cmp	r6, #0
 8001706:	d100      	bne.n	800170a <__aeabi_ddiv+0xd2>
 8001708:	e1bc      	b.n	8001a84 <__aeabi_ddiv+0x44c>
 800170a:	0030      	movs	r0, r6
 800170c:	f001 fad0 	bl	8002cb0 <__clzsi2>
 8001710:	0003      	movs	r3, r0
 8001712:	3b0b      	subs	r3, #11
 8001714:	2b1c      	cmp	r3, #28
 8001716:	dd00      	ble.n	800171a <__aeabi_ddiv+0xe2>
 8001718:	e1ac      	b.n	8001a74 <__aeabi_ddiv+0x43c>
 800171a:	221d      	movs	r2, #29
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	465a      	mov	r2, fp
 8001720:	0001      	movs	r1, r0
 8001722:	40da      	lsrs	r2, r3
 8001724:	3908      	subs	r1, #8
 8001726:	408e      	lsls	r6, r1
 8001728:	0013      	movs	r3, r2
 800172a:	4333      	orrs	r3, r6
 800172c:	4699      	mov	r9, r3
 800172e:	465b      	mov	r3, fp
 8001730:	408b      	lsls	r3, r1
 8001732:	4698      	mov	r8, r3
 8001734:	2300      	movs	r3, #0
 8001736:	4c3c      	ldr	r4, [pc, #240]	; (8001828 <__aeabi_ddiv+0x1f0>)
 8001738:	2600      	movs	r6, #0
 800173a:	1a24      	subs	r4, r4, r0
 800173c:	9303      	str	r3, [sp, #12]
 800173e:	e79f      	b.n	8001680 <__aeabi_ddiv+0x48>
 8001740:	4651      	mov	r1, sl
 8001742:	465a      	mov	r2, fp
 8001744:	4311      	orrs	r1, r2
 8001746:	d129      	bne.n	800179c <__aeabi_ddiv+0x164>
 8001748:	2200      	movs	r2, #0
 800174a:	4693      	mov	fp, r2
 800174c:	3202      	adds	r2, #2
 800174e:	e7b1      	b.n	80016b4 <__aeabi_ddiv+0x7c>
 8001750:	4659      	mov	r1, fp
 8001752:	4301      	orrs	r1, r0
 8001754:	d01e      	beq.n	8001794 <__aeabi_ddiv+0x15c>
 8001756:	465b      	mov	r3, fp
 8001758:	2b00      	cmp	r3, #0
 800175a:	d100      	bne.n	800175e <__aeabi_ddiv+0x126>
 800175c:	e19e      	b.n	8001a9c <__aeabi_ddiv+0x464>
 800175e:	4658      	mov	r0, fp
 8001760:	f001 faa6 	bl	8002cb0 <__clzsi2>
 8001764:	0003      	movs	r3, r0
 8001766:	3b0b      	subs	r3, #11
 8001768:	2b1c      	cmp	r3, #28
 800176a:	dd00      	ble.n	800176e <__aeabi_ddiv+0x136>
 800176c:	e18f      	b.n	8001a8e <__aeabi_ddiv+0x456>
 800176e:	0002      	movs	r2, r0
 8001770:	4659      	mov	r1, fp
 8001772:	3a08      	subs	r2, #8
 8001774:	4091      	lsls	r1, r2
 8001776:	468b      	mov	fp, r1
 8001778:	211d      	movs	r1, #29
 800177a:	1acb      	subs	r3, r1, r3
 800177c:	4651      	mov	r1, sl
 800177e:	40d9      	lsrs	r1, r3
 8001780:	000b      	movs	r3, r1
 8001782:	4659      	mov	r1, fp
 8001784:	430b      	orrs	r3, r1
 8001786:	4651      	mov	r1, sl
 8001788:	469b      	mov	fp, r3
 800178a:	4091      	lsls	r1, r2
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <__aeabi_ddiv+0x1f0>)
 800178e:	2200      	movs	r2, #0
 8001790:	1a1b      	subs	r3, r3, r0
 8001792:	e78f      	b.n	80016b4 <__aeabi_ddiv+0x7c>
 8001794:	2300      	movs	r3, #0
 8001796:	2201      	movs	r2, #1
 8001798:	469b      	mov	fp, r3
 800179a:	e78b      	b.n	80016b4 <__aeabi_ddiv+0x7c>
 800179c:	4651      	mov	r1, sl
 800179e:	2203      	movs	r2, #3
 80017a0:	e788      	b.n	80016b4 <__aeabi_ddiv+0x7c>
 80017a2:	2300      	movs	r3, #0
 80017a4:	4698      	mov	r8, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	2604      	movs	r6, #4
 80017aa:	2400      	movs	r4, #0
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	e767      	b.n	8001680 <__aeabi_ddiv+0x48>
 80017b0:	2303      	movs	r3, #3
 80017b2:	46b1      	mov	r9, r6
 80017b4:	9303      	str	r3, [sp, #12]
 80017b6:	260c      	movs	r6, #12
 80017b8:	e762      	b.n	8001680 <__aeabi_ddiv+0x48>
 80017ba:	2a03      	cmp	r2, #3
 80017bc:	d100      	bne.n	80017c0 <__aeabi_ddiv+0x188>
 80017be:	e25c      	b.n	8001c7a <__aeabi_ddiv+0x642>
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	2a01      	cmp	r2, #1
 80017c4:	d000      	beq.n	80017c8 <__aeabi_ddiv+0x190>
 80017c6:	e1e4      	b.n	8001b92 <__aeabi_ddiv+0x55a>
 80017c8:	4013      	ands	r3, r2
 80017ca:	469c      	mov	ip, r3
 80017cc:	2300      	movs	r3, #0
 80017ce:	2400      	movs	r4, #0
 80017d0:	2200      	movs	r2, #0
 80017d2:	4698      	mov	r8, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	0312      	lsls	r2, r2, #12
 80017d8:	0b13      	lsrs	r3, r2, #12
 80017da:	0d0a      	lsrs	r2, r1, #20
 80017dc:	0512      	lsls	r2, r2, #20
 80017de:	431a      	orrs	r2, r3
 80017e0:	0523      	lsls	r3, r4, #20
 80017e2:	4c12      	ldr	r4, [pc, #72]	; (800182c <__aeabi_ddiv+0x1f4>)
 80017e4:	4640      	mov	r0, r8
 80017e6:	4022      	ands	r2, r4
 80017e8:	4313      	orrs	r3, r2
 80017ea:	4662      	mov	r2, ip
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	07d2      	lsls	r2, r2, #31
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	4313      	orrs	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	b007      	add	sp, #28
 80017f8:	bc3c      	pop	{r2, r3, r4, r5}
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	46a2      	mov	sl, r4
 8001800:	46ab      	mov	fp, r5
 8001802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001804:	2300      	movs	r3, #0
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	469c      	mov	ip, r3
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4698      	mov	r8, r3
 800180e:	4c03      	ldr	r4, [pc, #12]	; (800181c <__aeabi_ddiv+0x1e4>)
 8001810:	e7e0      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001812:	2300      	movs	r3, #0
 8001814:	4c01      	ldr	r4, [pc, #4]	; (800181c <__aeabi_ddiv+0x1e4>)
 8001816:	2200      	movs	r2, #0
 8001818:	4698      	mov	r8, r3
 800181a:	e7db      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 800181c:	000007ff 	.word	0x000007ff
 8001820:	fffffc01 	.word	0xfffffc01
 8001824:	0800e3a8 	.word	0x0800e3a8
 8001828:	fffffc0d 	.word	0xfffffc0d
 800182c:	800fffff 	.word	0x800fffff
 8001830:	45d9      	cmp	r9, fp
 8001832:	d900      	bls.n	8001836 <__aeabi_ddiv+0x1fe>
 8001834:	e139      	b.n	8001aaa <__aeabi_ddiv+0x472>
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x202>
 8001838:	e134      	b.n	8001aa4 <__aeabi_ddiv+0x46c>
 800183a:	2300      	movs	r3, #0
 800183c:	4646      	mov	r6, r8
 800183e:	464d      	mov	r5, r9
 8001840:	469a      	mov	sl, r3
 8001842:	3c01      	subs	r4, #1
 8001844:	465b      	mov	r3, fp
 8001846:	0e0a      	lsrs	r2, r1, #24
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	431a      	orrs	r2, r3
 800184c:	020b      	lsls	r3, r1, #8
 800184e:	0c17      	lsrs	r7, r2, #16
 8001850:	9303      	str	r3, [sp, #12]
 8001852:	0413      	lsls	r3, r2, #16
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	0039      	movs	r1, r7
 8001858:	0028      	movs	r0, r5
 800185a:	4690      	mov	r8, r2
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	f7fe fc77 	bl	8000150 <__udivsi3>
 8001862:	0002      	movs	r2, r0
 8001864:	9b01      	ldr	r3, [sp, #4]
 8001866:	4683      	mov	fp, r0
 8001868:	435a      	muls	r2, r3
 800186a:	0028      	movs	r0, r5
 800186c:	0039      	movs	r1, r7
 800186e:	4691      	mov	r9, r2
 8001870:	f7fe fcf4 	bl	800025c <__aeabi_uidivmod>
 8001874:	0c35      	lsrs	r5, r6, #16
 8001876:	0409      	lsls	r1, r1, #16
 8001878:	430d      	orrs	r5, r1
 800187a:	45a9      	cmp	r9, r5
 800187c:	d90d      	bls.n	800189a <__aeabi_ddiv+0x262>
 800187e:	465b      	mov	r3, fp
 8001880:	4445      	add	r5, r8
 8001882:	3b01      	subs	r3, #1
 8001884:	45a8      	cmp	r8, r5
 8001886:	d900      	bls.n	800188a <__aeabi_ddiv+0x252>
 8001888:	e13a      	b.n	8001b00 <__aeabi_ddiv+0x4c8>
 800188a:	45a9      	cmp	r9, r5
 800188c:	d800      	bhi.n	8001890 <__aeabi_ddiv+0x258>
 800188e:	e137      	b.n	8001b00 <__aeabi_ddiv+0x4c8>
 8001890:	2302      	movs	r3, #2
 8001892:	425b      	negs	r3, r3
 8001894:	469c      	mov	ip, r3
 8001896:	4445      	add	r5, r8
 8001898:	44e3      	add	fp, ip
 800189a:	464b      	mov	r3, r9
 800189c:	1aeb      	subs	r3, r5, r3
 800189e:	0039      	movs	r1, r7
 80018a0:	0018      	movs	r0, r3
 80018a2:	9304      	str	r3, [sp, #16]
 80018a4:	f7fe fc54 	bl	8000150 <__udivsi3>
 80018a8:	9b01      	ldr	r3, [sp, #4]
 80018aa:	0005      	movs	r5, r0
 80018ac:	4343      	muls	r3, r0
 80018ae:	0039      	movs	r1, r7
 80018b0:	9804      	ldr	r0, [sp, #16]
 80018b2:	4699      	mov	r9, r3
 80018b4:	f7fe fcd2 	bl	800025c <__aeabi_uidivmod>
 80018b8:	0433      	lsls	r3, r6, #16
 80018ba:	0409      	lsls	r1, r1, #16
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	430b      	orrs	r3, r1
 80018c0:	4599      	cmp	r9, r3
 80018c2:	d909      	bls.n	80018d8 <__aeabi_ddiv+0x2a0>
 80018c4:	4443      	add	r3, r8
 80018c6:	1e6a      	subs	r2, r5, #1
 80018c8:	4598      	cmp	r8, r3
 80018ca:	d900      	bls.n	80018ce <__aeabi_ddiv+0x296>
 80018cc:	e11a      	b.n	8001b04 <__aeabi_ddiv+0x4cc>
 80018ce:	4599      	cmp	r9, r3
 80018d0:	d800      	bhi.n	80018d4 <__aeabi_ddiv+0x29c>
 80018d2:	e117      	b.n	8001b04 <__aeabi_ddiv+0x4cc>
 80018d4:	3d02      	subs	r5, #2
 80018d6:	4443      	add	r3, r8
 80018d8:	464a      	mov	r2, r9
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	465a      	mov	r2, fp
 80018de:	0412      	lsls	r2, r2, #16
 80018e0:	432a      	orrs	r2, r5
 80018e2:	9903      	ldr	r1, [sp, #12]
 80018e4:	4693      	mov	fp, r2
 80018e6:	0c10      	lsrs	r0, r2, #16
 80018e8:	0c0a      	lsrs	r2, r1, #16
 80018ea:	4691      	mov	r9, r2
 80018ec:	0409      	lsls	r1, r1, #16
 80018ee:	465a      	mov	r2, fp
 80018f0:	0c09      	lsrs	r1, r1, #16
 80018f2:	464e      	mov	r6, r9
 80018f4:	000d      	movs	r5, r1
 80018f6:	0412      	lsls	r2, r2, #16
 80018f8:	0c12      	lsrs	r2, r2, #16
 80018fa:	4345      	muls	r5, r0
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	4351      	muls	r1, r2
 8001900:	4372      	muls	r2, r6
 8001902:	4370      	muls	r0, r6
 8001904:	1952      	adds	r2, r2, r5
 8001906:	0c0e      	lsrs	r6, r1, #16
 8001908:	18b2      	adds	r2, r6, r2
 800190a:	4295      	cmp	r5, r2
 800190c:	d903      	bls.n	8001916 <__aeabi_ddiv+0x2de>
 800190e:	2580      	movs	r5, #128	; 0x80
 8001910:	026d      	lsls	r5, r5, #9
 8001912:	46ac      	mov	ip, r5
 8001914:	4460      	add	r0, ip
 8001916:	0c15      	lsrs	r5, r2, #16
 8001918:	0409      	lsls	r1, r1, #16
 800191a:	0412      	lsls	r2, r2, #16
 800191c:	0c09      	lsrs	r1, r1, #16
 800191e:	1828      	adds	r0, r5, r0
 8001920:	1852      	adds	r2, r2, r1
 8001922:	4283      	cmp	r3, r0
 8001924:	d200      	bcs.n	8001928 <__aeabi_ddiv+0x2f0>
 8001926:	e0ce      	b.n	8001ac6 <__aeabi_ddiv+0x48e>
 8001928:	d100      	bne.n	800192c <__aeabi_ddiv+0x2f4>
 800192a:	e0c8      	b.n	8001abe <__aeabi_ddiv+0x486>
 800192c:	1a1d      	subs	r5, r3, r0
 800192e:	4653      	mov	r3, sl
 8001930:	1a9e      	subs	r6, r3, r2
 8001932:	45b2      	cmp	sl, r6
 8001934:	4192      	sbcs	r2, r2
 8001936:	4252      	negs	r2, r2
 8001938:	1aab      	subs	r3, r5, r2
 800193a:	469a      	mov	sl, r3
 800193c:	4598      	cmp	r8, r3
 800193e:	d100      	bne.n	8001942 <__aeabi_ddiv+0x30a>
 8001940:	e117      	b.n	8001b72 <__aeabi_ddiv+0x53a>
 8001942:	0039      	movs	r1, r7
 8001944:	0018      	movs	r0, r3
 8001946:	f7fe fc03 	bl	8000150 <__udivsi3>
 800194a:	9b01      	ldr	r3, [sp, #4]
 800194c:	0005      	movs	r5, r0
 800194e:	4343      	muls	r3, r0
 8001950:	0039      	movs	r1, r7
 8001952:	4650      	mov	r0, sl
 8001954:	9304      	str	r3, [sp, #16]
 8001956:	f7fe fc81 	bl	800025c <__aeabi_uidivmod>
 800195a:	9804      	ldr	r0, [sp, #16]
 800195c:	040b      	lsls	r3, r1, #16
 800195e:	0c31      	lsrs	r1, r6, #16
 8001960:	4319      	orrs	r1, r3
 8001962:	4288      	cmp	r0, r1
 8001964:	d909      	bls.n	800197a <__aeabi_ddiv+0x342>
 8001966:	4441      	add	r1, r8
 8001968:	1e6b      	subs	r3, r5, #1
 800196a:	4588      	cmp	r8, r1
 800196c:	d900      	bls.n	8001970 <__aeabi_ddiv+0x338>
 800196e:	e107      	b.n	8001b80 <__aeabi_ddiv+0x548>
 8001970:	4288      	cmp	r0, r1
 8001972:	d800      	bhi.n	8001976 <__aeabi_ddiv+0x33e>
 8001974:	e104      	b.n	8001b80 <__aeabi_ddiv+0x548>
 8001976:	3d02      	subs	r5, #2
 8001978:	4441      	add	r1, r8
 800197a:	9b04      	ldr	r3, [sp, #16]
 800197c:	1acb      	subs	r3, r1, r3
 800197e:	0018      	movs	r0, r3
 8001980:	0039      	movs	r1, r7
 8001982:	9304      	str	r3, [sp, #16]
 8001984:	f7fe fbe4 	bl	8000150 <__udivsi3>
 8001988:	9b01      	ldr	r3, [sp, #4]
 800198a:	4682      	mov	sl, r0
 800198c:	4343      	muls	r3, r0
 800198e:	0039      	movs	r1, r7
 8001990:	9804      	ldr	r0, [sp, #16]
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	f7fe fc62 	bl	800025c <__aeabi_uidivmod>
 8001998:	9801      	ldr	r0, [sp, #4]
 800199a:	040b      	lsls	r3, r1, #16
 800199c:	0431      	lsls	r1, r6, #16
 800199e:	0c09      	lsrs	r1, r1, #16
 80019a0:	4319      	orrs	r1, r3
 80019a2:	4288      	cmp	r0, r1
 80019a4:	d90d      	bls.n	80019c2 <__aeabi_ddiv+0x38a>
 80019a6:	4653      	mov	r3, sl
 80019a8:	4441      	add	r1, r8
 80019aa:	3b01      	subs	r3, #1
 80019ac:	4588      	cmp	r8, r1
 80019ae:	d900      	bls.n	80019b2 <__aeabi_ddiv+0x37a>
 80019b0:	e0e8      	b.n	8001b84 <__aeabi_ddiv+0x54c>
 80019b2:	4288      	cmp	r0, r1
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x380>
 80019b6:	e0e5      	b.n	8001b84 <__aeabi_ddiv+0x54c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	425b      	negs	r3, r3
 80019bc:	469c      	mov	ip, r3
 80019be:	4441      	add	r1, r8
 80019c0:	44e2      	add	sl, ip
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	1ace      	subs	r6, r1, r3
 80019c8:	4651      	mov	r1, sl
 80019ca:	4329      	orrs	r1, r5
 80019cc:	9d05      	ldr	r5, [sp, #20]
 80019ce:	464f      	mov	r7, r9
 80019d0:	002a      	movs	r2, r5
 80019d2:	040b      	lsls	r3, r1, #16
 80019d4:	0c08      	lsrs	r0, r1, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	435a      	muls	r2, r3
 80019da:	4345      	muls	r5, r0
 80019dc:	437b      	muls	r3, r7
 80019de:	4378      	muls	r0, r7
 80019e0:	195b      	adds	r3, r3, r5
 80019e2:	0c17      	lsrs	r7, r2, #16
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d903      	bls.n	80019f2 <__aeabi_ddiv+0x3ba>
 80019ea:	2580      	movs	r5, #128	; 0x80
 80019ec:	026d      	lsls	r5, r5, #9
 80019ee:	46ac      	mov	ip, r5
 80019f0:	4460      	add	r0, ip
 80019f2:	0c1d      	lsrs	r5, r3, #16
 80019f4:	0412      	lsls	r2, r2, #16
 80019f6:	041b      	lsls	r3, r3, #16
 80019f8:	0c12      	lsrs	r2, r2, #16
 80019fa:	1828      	adds	r0, r5, r0
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	4286      	cmp	r6, r0
 8001a00:	d200      	bcs.n	8001a04 <__aeabi_ddiv+0x3cc>
 8001a02:	e093      	b.n	8001b2c <__aeabi_ddiv+0x4f4>
 8001a04:	d100      	bne.n	8001a08 <__aeabi_ddiv+0x3d0>
 8001a06:	e08e      	b.n	8001b26 <__aeabi_ddiv+0x4ee>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	4319      	orrs	r1, r3
 8001a0c:	4ba0      	ldr	r3, [pc, #640]	; (8001c90 <__aeabi_ddiv+0x658>)
 8001a0e:	18e3      	adds	r3, r4, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	dc00      	bgt.n	8001a16 <__aeabi_ddiv+0x3de>
 8001a14:	e099      	b.n	8001b4a <__aeabi_ddiv+0x512>
 8001a16:	074a      	lsls	r2, r1, #29
 8001a18:	d000      	beq.n	8001a1c <__aeabi_ddiv+0x3e4>
 8001a1a:	e09e      	b.n	8001b5a <__aeabi_ddiv+0x522>
 8001a1c:	465a      	mov	r2, fp
 8001a1e:	01d2      	lsls	r2, r2, #7
 8001a20:	d506      	bpl.n	8001a30 <__aeabi_ddiv+0x3f8>
 8001a22:	465a      	mov	r2, fp
 8001a24:	4b9b      	ldr	r3, [pc, #620]	; (8001c94 <__aeabi_ddiv+0x65c>)
 8001a26:	401a      	ands	r2, r3
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	4693      	mov	fp, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	4a99      	ldr	r2, [pc, #612]	; (8001c98 <__aeabi_ddiv+0x660>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	dd68      	ble.n	8001b08 <__aeabi_ddiv+0x4d0>
 8001a36:	2301      	movs	r3, #1
 8001a38:	9a02      	ldr	r2, [sp, #8]
 8001a3a:	4c98      	ldr	r4, [pc, #608]	; (8001c9c <__aeabi_ddiv+0x664>)
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4694      	mov	ip, r2
 8001a42:	4698      	mov	r8, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	e6c5      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	0312      	lsls	r2, r2, #12
 8001a4e:	4213      	tst	r3, r2
 8001a50:	d00a      	beq.n	8001a68 <__aeabi_ddiv+0x430>
 8001a52:	465b      	mov	r3, fp
 8001a54:	4213      	tst	r3, r2
 8001a56:	d106      	bne.n	8001a66 <__aeabi_ddiv+0x42e>
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	0312      	lsls	r2, r2, #12
 8001a5c:	0b12      	lsrs	r2, r2, #12
 8001a5e:	46ac      	mov	ip, r5
 8001a60:	4688      	mov	r8, r1
 8001a62:	4c8e      	ldr	r4, [pc, #568]	; (8001c9c <__aeabi_ddiv+0x664>)
 8001a64:	e6b6      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001a66:	464b      	mov	r3, r9
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	0312      	lsls	r2, r2, #12
 8001a6c:	0b12      	lsrs	r2, r2, #12
 8001a6e:	46bc      	mov	ip, r7
 8001a70:	4c8a      	ldr	r4, [pc, #552]	; (8001c9c <__aeabi_ddiv+0x664>)
 8001a72:	e6af      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001a74:	0003      	movs	r3, r0
 8001a76:	465a      	mov	r2, fp
 8001a78:	3b28      	subs	r3, #40	; 0x28
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	4691      	mov	r9, r2
 8001a80:	4698      	mov	r8, r3
 8001a82:	e657      	b.n	8001734 <__aeabi_ddiv+0xfc>
 8001a84:	4658      	mov	r0, fp
 8001a86:	f001 f913 	bl	8002cb0 <__clzsi2>
 8001a8a:	3020      	adds	r0, #32
 8001a8c:	e640      	b.n	8001710 <__aeabi_ddiv+0xd8>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	4652      	mov	r2, sl
 8001a92:	3b28      	subs	r3, #40	; 0x28
 8001a94:	409a      	lsls	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	4693      	mov	fp, r2
 8001a9a:	e677      	b.n	800178c <__aeabi_ddiv+0x154>
 8001a9c:	f001 f908 	bl	8002cb0 <__clzsi2>
 8001aa0:	3020      	adds	r0, #32
 8001aa2:	e65f      	b.n	8001764 <__aeabi_ddiv+0x12c>
 8001aa4:	4588      	cmp	r8, r1
 8001aa6:	d200      	bcs.n	8001aaa <__aeabi_ddiv+0x472>
 8001aa8:	e6c7      	b.n	800183a <__aeabi_ddiv+0x202>
 8001aaa:	464b      	mov	r3, r9
 8001aac:	07de      	lsls	r6, r3, #31
 8001aae:	085d      	lsrs	r5, r3, #1
 8001ab0:	4643      	mov	r3, r8
 8001ab2:	085b      	lsrs	r3, r3, #1
 8001ab4:	431e      	orrs	r6, r3
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	07db      	lsls	r3, r3, #31
 8001aba:	469a      	mov	sl, r3
 8001abc:	e6c2      	b.n	8001844 <__aeabi_ddiv+0x20c>
 8001abe:	2500      	movs	r5, #0
 8001ac0:	4592      	cmp	sl, r2
 8001ac2:	d300      	bcc.n	8001ac6 <__aeabi_ddiv+0x48e>
 8001ac4:	e733      	b.n	800192e <__aeabi_ddiv+0x2f6>
 8001ac6:	9e03      	ldr	r6, [sp, #12]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	46b4      	mov	ip, r6
 8001acc:	44e2      	add	sl, ip
 8001ace:	45b2      	cmp	sl, r6
 8001ad0:	41ad      	sbcs	r5, r5
 8001ad2:	426d      	negs	r5, r5
 8001ad4:	4445      	add	r5, r8
 8001ad6:	18eb      	adds	r3, r5, r3
 8001ad8:	3901      	subs	r1, #1
 8001ada:	4598      	cmp	r8, r3
 8001adc:	d207      	bcs.n	8001aee <__aeabi_ddiv+0x4b6>
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d900      	bls.n	8001ae4 <__aeabi_ddiv+0x4ac>
 8001ae2:	e07f      	b.n	8001be4 <__aeabi_ddiv+0x5ac>
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_ddiv+0x4b0>
 8001ae6:	e0bc      	b.n	8001c62 <__aeabi_ddiv+0x62a>
 8001ae8:	1a1d      	subs	r5, r3, r0
 8001aea:	468b      	mov	fp, r1
 8001aec:	e71f      	b.n	800192e <__aeabi_ddiv+0x2f6>
 8001aee:	4598      	cmp	r8, r3
 8001af0:	d1fa      	bne.n	8001ae8 <__aeabi_ddiv+0x4b0>
 8001af2:	9d03      	ldr	r5, [sp, #12]
 8001af4:	4555      	cmp	r5, sl
 8001af6:	d9f2      	bls.n	8001ade <__aeabi_ddiv+0x4a6>
 8001af8:	4643      	mov	r3, r8
 8001afa:	468b      	mov	fp, r1
 8001afc:	1a1d      	subs	r5, r3, r0
 8001afe:	e716      	b.n	800192e <__aeabi_ddiv+0x2f6>
 8001b00:	469b      	mov	fp, r3
 8001b02:	e6ca      	b.n	800189a <__aeabi_ddiv+0x262>
 8001b04:	0015      	movs	r5, r2
 8001b06:	e6e7      	b.n	80018d8 <__aeabi_ddiv+0x2a0>
 8001b08:	465a      	mov	r2, fp
 8001b0a:	08c9      	lsrs	r1, r1, #3
 8001b0c:	0752      	lsls	r2, r2, #29
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	055b      	lsls	r3, r3, #21
 8001b12:	4690      	mov	r8, r2
 8001b14:	0d5c      	lsrs	r4, r3, #21
 8001b16:	465a      	mov	r2, fp
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9902      	ldr	r1, [sp, #8]
 8001b1c:	0252      	lsls	r2, r2, #9
 8001b1e:	4019      	ands	r1, r3
 8001b20:	0b12      	lsrs	r2, r2, #12
 8001b22:	468c      	mov	ip, r1
 8001b24:	e656      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_ddiv+0x4f4>
 8001b2a:	e76f      	b.n	8001a0c <__aeabi_ddiv+0x3d4>
 8001b2c:	4446      	add	r6, r8
 8001b2e:	1e4a      	subs	r2, r1, #1
 8001b30:	45b0      	cmp	r8, r6
 8001b32:	d929      	bls.n	8001b88 <__aeabi_ddiv+0x550>
 8001b34:	0011      	movs	r1, r2
 8001b36:	4286      	cmp	r6, r0
 8001b38:	d000      	beq.n	8001b3c <__aeabi_ddiv+0x504>
 8001b3a:	e765      	b.n	8001a08 <__aeabi_ddiv+0x3d0>
 8001b3c:	9a03      	ldr	r2, [sp, #12]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d000      	beq.n	8001b44 <__aeabi_ddiv+0x50c>
 8001b42:	e761      	b.n	8001a08 <__aeabi_ddiv+0x3d0>
 8001b44:	e762      	b.n	8001a0c <__aeabi_ddiv+0x3d4>
 8001b46:	2101      	movs	r1, #1
 8001b48:	4249      	negs	r1, r1
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	1ac2      	subs	r2, r0, r3
 8001b4e:	2a38      	cmp	r2, #56	; 0x38
 8001b50:	dd21      	ble.n	8001b96 <__aeabi_ddiv+0x55e>
 8001b52:	9b02      	ldr	r3, [sp, #8]
 8001b54:	4003      	ands	r3, r0
 8001b56:	469c      	mov	ip, r3
 8001b58:	e638      	b.n	80017cc <__aeabi_ddiv+0x194>
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	2a04      	cmp	r2, #4
 8001b60:	d100      	bne.n	8001b64 <__aeabi_ddiv+0x52c>
 8001b62:	e75b      	b.n	8001a1c <__aeabi_ddiv+0x3e4>
 8001b64:	000a      	movs	r2, r1
 8001b66:	1d11      	adds	r1, r2, #4
 8001b68:	4291      	cmp	r1, r2
 8001b6a:	4192      	sbcs	r2, r2
 8001b6c:	4252      	negs	r2, r2
 8001b6e:	4493      	add	fp, r2
 8001b70:	e754      	b.n	8001a1c <__aeabi_ddiv+0x3e4>
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <__aeabi_ddiv+0x658>)
 8001b74:	18e3      	adds	r3, r4, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	dde5      	ble.n	8001b46 <__aeabi_ddiv+0x50e>
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4252      	negs	r2, r2
 8001b7e:	e7f2      	b.n	8001b66 <__aeabi_ddiv+0x52e>
 8001b80:	001d      	movs	r5, r3
 8001b82:	e6fa      	b.n	800197a <__aeabi_ddiv+0x342>
 8001b84:	469a      	mov	sl, r3
 8001b86:	e71c      	b.n	80019c2 <__aeabi_ddiv+0x38a>
 8001b88:	42b0      	cmp	r0, r6
 8001b8a:	d839      	bhi.n	8001c00 <__aeabi_ddiv+0x5c8>
 8001b8c:	d06e      	beq.n	8001c6c <__aeabi_ddiv+0x634>
 8001b8e:	0011      	movs	r1, r2
 8001b90:	e73a      	b.n	8001a08 <__aeabi_ddiv+0x3d0>
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	e73a      	b.n	8001a0c <__aeabi_ddiv+0x3d4>
 8001b96:	2a1f      	cmp	r2, #31
 8001b98:	dc3c      	bgt.n	8001c14 <__aeabi_ddiv+0x5dc>
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	000c      	movs	r4, r1
 8001ba0:	4658      	mov	r0, fp
 8001ba2:	4099      	lsls	r1, r3
 8001ba4:	4098      	lsls	r0, r3
 8001ba6:	1e4b      	subs	r3, r1, #1
 8001ba8:	4199      	sbcs	r1, r3
 8001baa:	465b      	mov	r3, fp
 8001bac:	40d4      	lsrs	r4, r2
 8001bae:	40d3      	lsrs	r3, r2
 8001bb0:	4320      	orrs	r0, r4
 8001bb2:	4308      	orrs	r0, r1
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	0743      	lsls	r3, r0, #29
 8001bb8:	d009      	beq.n	8001bce <__aeabi_ddiv+0x596>
 8001bba:	230f      	movs	r3, #15
 8001bbc:	4003      	ands	r3, r0
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d005      	beq.n	8001bce <__aeabi_ddiv+0x596>
 8001bc2:	0001      	movs	r1, r0
 8001bc4:	1d08      	adds	r0, r1, #4
 8001bc6:	4288      	cmp	r0, r1
 8001bc8:	419b      	sbcs	r3, r3
 8001bca:	425b      	negs	r3, r3
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	0213      	lsls	r3, r2, #8
 8001bd0:	d53a      	bpl.n	8001c48 <__aeabi_ddiv+0x610>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9a02      	ldr	r2, [sp, #8]
 8001bd6:	2401      	movs	r4, #1
 8001bd8:	401a      	ands	r2, r3
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4694      	mov	ip, r2
 8001bde:	4698      	mov	r8, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	e5f7      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001be4:	2102      	movs	r1, #2
 8001be6:	4249      	negs	r1, r1
 8001be8:	468c      	mov	ip, r1
 8001bea:	9d03      	ldr	r5, [sp, #12]
 8001bec:	44e3      	add	fp, ip
 8001bee:	46ac      	mov	ip, r5
 8001bf0:	44e2      	add	sl, ip
 8001bf2:	45aa      	cmp	sl, r5
 8001bf4:	41ad      	sbcs	r5, r5
 8001bf6:	426d      	negs	r5, r5
 8001bf8:	4445      	add	r5, r8
 8001bfa:	18ed      	adds	r5, r5, r3
 8001bfc:	1a2d      	subs	r5, r5, r0
 8001bfe:	e696      	b.n	800192e <__aeabi_ddiv+0x2f6>
 8001c00:	1e8a      	subs	r2, r1, #2
 8001c02:	9903      	ldr	r1, [sp, #12]
 8001c04:	004d      	lsls	r5, r1, #1
 8001c06:	428d      	cmp	r5, r1
 8001c08:	4189      	sbcs	r1, r1
 8001c0a:	4249      	negs	r1, r1
 8001c0c:	4441      	add	r1, r8
 8001c0e:	1876      	adds	r6, r6, r1
 8001c10:	9503      	str	r5, [sp, #12]
 8001c12:	e78f      	b.n	8001b34 <__aeabi_ddiv+0x4fc>
 8001c14:	201f      	movs	r0, #31
 8001c16:	4240      	negs	r0, r0
 8001c18:	1ac3      	subs	r3, r0, r3
 8001c1a:	4658      	mov	r0, fp
 8001c1c:	40d8      	lsrs	r0, r3
 8001c1e:	0003      	movs	r3, r0
 8001c20:	2a20      	cmp	r2, #32
 8001c22:	d028      	beq.n	8001c76 <__aeabi_ddiv+0x63e>
 8001c24:	2040      	movs	r0, #64	; 0x40
 8001c26:	465d      	mov	r5, fp
 8001c28:	1a82      	subs	r2, r0, r2
 8001c2a:	4095      	lsls	r5, r2
 8001c2c:	4329      	orrs	r1, r5
 8001c2e:	1e4a      	subs	r2, r1, #1
 8001c30:	4191      	sbcs	r1, r2
 8001c32:	4319      	orrs	r1, r3
 8001c34:	2307      	movs	r3, #7
 8001c36:	2200      	movs	r2, #0
 8001c38:	400b      	ands	r3, r1
 8001c3a:	d009      	beq.n	8001c50 <__aeabi_ddiv+0x618>
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	2200      	movs	r2, #0
 8001c40:	400b      	ands	r3, r1
 8001c42:	0008      	movs	r0, r1
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d1bd      	bne.n	8001bc4 <__aeabi_ddiv+0x58c>
 8001c48:	0001      	movs	r1, r0
 8001c4a:	0753      	lsls	r3, r2, #29
 8001c4c:	0252      	lsls	r2, r2, #9
 8001c4e:	0b12      	lsrs	r2, r2, #12
 8001c50:	08c9      	lsrs	r1, r1, #3
 8001c52:	4319      	orrs	r1, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	4688      	mov	r8, r1
 8001c58:	9902      	ldr	r1, [sp, #8]
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	4019      	ands	r1, r3
 8001c5e:	468c      	mov	ip, r1
 8001c60:	e5b8      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001c62:	4552      	cmp	r2, sl
 8001c64:	d8be      	bhi.n	8001be4 <__aeabi_ddiv+0x5ac>
 8001c66:	468b      	mov	fp, r1
 8001c68:	2500      	movs	r5, #0
 8001c6a:	e660      	b.n	800192e <__aeabi_ddiv+0x2f6>
 8001c6c:	9d03      	ldr	r5, [sp, #12]
 8001c6e:	429d      	cmp	r5, r3
 8001c70:	d3c6      	bcc.n	8001c00 <__aeabi_ddiv+0x5c8>
 8001c72:	0011      	movs	r1, r2
 8001c74:	e762      	b.n	8001b3c <__aeabi_ddiv+0x504>
 8001c76:	2500      	movs	r5, #0
 8001c78:	e7d8      	b.n	8001c2c <__aeabi_ddiv+0x5f4>
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	465b      	mov	r3, fp
 8001c7e:	0312      	lsls	r2, r2, #12
 8001c80:	431a      	orrs	r2, r3
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	0312      	lsls	r2, r2, #12
 8001c86:	0b12      	lsrs	r2, r2, #12
 8001c88:	469c      	mov	ip, r3
 8001c8a:	4688      	mov	r8, r1
 8001c8c:	4c03      	ldr	r4, [pc, #12]	; (8001c9c <__aeabi_ddiv+0x664>)
 8001c8e:	e5a1      	b.n	80017d4 <__aeabi_ddiv+0x19c>
 8001c90:	000003ff 	.word	0x000003ff
 8001c94:	feffffff 	.word	0xfeffffff
 8001c98:	000007fe 	.word	0x000007fe
 8001c9c:	000007ff 	.word	0x000007ff

08001ca0 <__eqdf2>:
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	464f      	mov	r7, r9
 8001ca4:	4646      	mov	r6, r8
 8001ca6:	46d6      	mov	lr, sl
 8001ca8:	005c      	lsls	r4, r3, #1
 8001caa:	b5c0      	push	{r6, r7, lr}
 8001cac:	031f      	lsls	r7, r3, #12
 8001cae:	0fdb      	lsrs	r3, r3, #31
 8001cb0:	469a      	mov	sl, r3
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <__eqdf2+0x70>)
 8001cb4:	030e      	lsls	r6, r1, #12
 8001cb6:	004d      	lsls	r5, r1, #1
 8001cb8:	4684      	mov	ip, r0
 8001cba:	4680      	mov	r8, r0
 8001cbc:	0b36      	lsrs	r6, r6, #12
 8001cbe:	0d6d      	lsrs	r5, r5, #21
 8001cc0:	0fc9      	lsrs	r1, r1, #31
 8001cc2:	4691      	mov	r9, r2
 8001cc4:	0b3f      	lsrs	r7, r7, #12
 8001cc6:	0d64      	lsrs	r4, r4, #21
 8001cc8:	2001      	movs	r0, #1
 8001cca:	429d      	cmp	r5, r3
 8001ccc:	d008      	beq.n	8001ce0 <__eqdf2+0x40>
 8001cce:	429c      	cmp	r4, r3
 8001cd0:	d001      	beq.n	8001cd6 <__eqdf2+0x36>
 8001cd2:	42a5      	cmp	r5, r4
 8001cd4:	d00b      	beq.n	8001cee <__eqdf2+0x4e>
 8001cd6:	bc1c      	pop	{r2, r3, r4}
 8001cd8:	4690      	mov	r8, r2
 8001cda:	4699      	mov	r9, r3
 8001cdc:	46a2      	mov	sl, r4
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce0:	4663      	mov	r3, ip
 8001ce2:	4333      	orrs	r3, r6
 8001ce4:	d1f7      	bne.n	8001cd6 <__eqdf2+0x36>
 8001ce6:	42ac      	cmp	r4, r5
 8001ce8:	d1f5      	bne.n	8001cd6 <__eqdf2+0x36>
 8001cea:	433a      	orrs	r2, r7
 8001cec:	d1f3      	bne.n	8001cd6 <__eqdf2+0x36>
 8001cee:	2001      	movs	r0, #1
 8001cf0:	42be      	cmp	r6, r7
 8001cf2:	d1f0      	bne.n	8001cd6 <__eqdf2+0x36>
 8001cf4:	45c8      	cmp	r8, r9
 8001cf6:	d1ee      	bne.n	8001cd6 <__eqdf2+0x36>
 8001cf8:	4551      	cmp	r1, sl
 8001cfa:	d007      	beq.n	8001d0c <__eqdf2+0x6c>
 8001cfc:	2d00      	cmp	r5, #0
 8001cfe:	d1ea      	bne.n	8001cd6 <__eqdf2+0x36>
 8001d00:	4663      	mov	r3, ip
 8001d02:	431e      	orrs	r6, r3
 8001d04:	0030      	movs	r0, r6
 8001d06:	1e46      	subs	r6, r0, #1
 8001d08:	41b0      	sbcs	r0, r6
 8001d0a:	e7e4      	b.n	8001cd6 <__eqdf2+0x36>
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	e7e2      	b.n	8001cd6 <__eqdf2+0x36>
 8001d10:	000007ff 	.word	0x000007ff

08001d14 <__gedf2>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	4645      	mov	r5, r8
 8001d18:	46de      	mov	lr, fp
 8001d1a:	4657      	mov	r7, sl
 8001d1c:	464e      	mov	r6, r9
 8001d1e:	b5e0      	push	{r5, r6, r7, lr}
 8001d20:	031f      	lsls	r7, r3, #12
 8001d22:	0b3d      	lsrs	r5, r7, #12
 8001d24:	4f2c      	ldr	r7, [pc, #176]	; (8001dd8 <__gedf2+0xc4>)
 8001d26:	030e      	lsls	r6, r1, #12
 8001d28:	004c      	lsls	r4, r1, #1
 8001d2a:	46ab      	mov	fp, r5
 8001d2c:	005d      	lsls	r5, r3, #1
 8001d2e:	4684      	mov	ip, r0
 8001d30:	0b36      	lsrs	r6, r6, #12
 8001d32:	0d64      	lsrs	r4, r4, #21
 8001d34:	0fc9      	lsrs	r1, r1, #31
 8001d36:	4690      	mov	r8, r2
 8001d38:	0d6d      	lsrs	r5, r5, #21
 8001d3a:	0fdb      	lsrs	r3, r3, #31
 8001d3c:	42bc      	cmp	r4, r7
 8001d3e:	d02a      	beq.n	8001d96 <__gedf2+0x82>
 8001d40:	4f25      	ldr	r7, [pc, #148]	; (8001dd8 <__gedf2+0xc4>)
 8001d42:	42bd      	cmp	r5, r7
 8001d44:	d02d      	beq.n	8001da2 <__gedf2+0x8e>
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d10f      	bne.n	8001d6a <__gedf2+0x56>
 8001d4a:	4330      	orrs	r0, r6
 8001d4c:	0007      	movs	r7, r0
 8001d4e:	4681      	mov	r9, r0
 8001d50:	4278      	negs	r0, r7
 8001d52:	4178      	adcs	r0, r7
 8001d54:	b2c0      	uxtb	r0, r0
 8001d56:	2d00      	cmp	r5, #0
 8001d58:	d117      	bne.n	8001d8a <__gedf2+0x76>
 8001d5a:	465f      	mov	r7, fp
 8001d5c:	433a      	orrs	r2, r7
 8001d5e:	d114      	bne.n	8001d8a <__gedf2+0x76>
 8001d60:	464b      	mov	r3, r9
 8001d62:	2000      	movs	r0, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00a      	beq.n	8001d7e <__gedf2+0x6a>
 8001d68:	e006      	b.n	8001d78 <__gedf2+0x64>
 8001d6a:	2d00      	cmp	r5, #0
 8001d6c:	d102      	bne.n	8001d74 <__gedf2+0x60>
 8001d6e:	4658      	mov	r0, fp
 8001d70:	4302      	orrs	r2, r0
 8001d72:	d001      	beq.n	8001d78 <__gedf2+0x64>
 8001d74:	4299      	cmp	r1, r3
 8001d76:	d018      	beq.n	8001daa <__gedf2+0x96>
 8001d78:	4248      	negs	r0, r1
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4308      	orrs	r0, r1
 8001d7e:	bc3c      	pop	{r2, r3, r4, r5}
 8001d80:	4690      	mov	r8, r2
 8001d82:	4699      	mov	r9, r3
 8001d84:	46a2      	mov	sl, r4
 8001d86:	46ab      	mov	fp, r5
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2800      	cmp	r0, #0
 8001d8c:	d0f2      	beq.n	8001d74 <__gedf2+0x60>
 8001d8e:	2001      	movs	r0, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	4318      	orrs	r0, r3
 8001d94:	e7f3      	b.n	8001d7e <__gedf2+0x6a>
 8001d96:	0037      	movs	r7, r6
 8001d98:	4307      	orrs	r7, r0
 8001d9a:	d0d1      	beq.n	8001d40 <__gedf2+0x2c>
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	4240      	negs	r0, r0
 8001da0:	e7ed      	b.n	8001d7e <__gedf2+0x6a>
 8001da2:	465f      	mov	r7, fp
 8001da4:	4317      	orrs	r7, r2
 8001da6:	d0ce      	beq.n	8001d46 <__gedf2+0x32>
 8001da8:	e7f8      	b.n	8001d9c <__gedf2+0x88>
 8001daa:	42ac      	cmp	r4, r5
 8001dac:	dce4      	bgt.n	8001d78 <__gedf2+0x64>
 8001dae:	da03      	bge.n	8001db8 <__gedf2+0xa4>
 8001db0:	1e48      	subs	r0, r1, #1
 8001db2:	2101      	movs	r1, #1
 8001db4:	4308      	orrs	r0, r1
 8001db6:	e7e2      	b.n	8001d7e <__gedf2+0x6a>
 8001db8:	455e      	cmp	r6, fp
 8001dba:	d8dd      	bhi.n	8001d78 <__gedf2+0x64>
 8001dbc:	d006      	beq.n	8001dcc <__gedf2+0xb8>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	455e      	cmp	r6, fp
 8001dc2:	d2dc      	bcs.n	8001d7e <__gedf2+0x6a>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	1e48      	subs	r0, r1, #1
 8001dc8:	4318      	orrs	r0, r3
 8001dca:	e7d8      	b.n	8001d7e <__gedf2+0x6a>
 8001dcc:	45c4      	cmp	ip, r8
 8001dce:	d8d3      	bhi.n	8001d78 <__gedf2+0x64>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	45c4      	cmp	ip, r8
 8001dd4:	d3f6      	bcc.n	8001dc4 <__gedf2+0xb0>
 8001dd6:	e7d2      	b.n	8001d7e <__gedf2+0x6a>
 8001dd8:	000007ff 	.word	0x000007ff

08001ddc <__ledf2>:
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	464e      	mov	r6, r9
 8001de0:	4645      	mov	r5, r8
 8001de2:	46de      	mov	lr, fp
 8001de4:	4657      	mov	r7, sl
 8001de6:	005c      	lsls	r4, r3, #1
 8001de8:	b5e0      	push	{r5, r6, r7, lr}
 8001dea:	031f      	lsls	r7, r3, #12
 8001dec:	0fdb      	lsrs	r3, r3, #31
 8001dee:	4699      	mov	r9, r3
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <__ledf2+0xc0>)
 8001df2:	030e      	lsls	r6, r1, #12
 8001df4:	004d      	lsls	r5, r1, #1
 8001df6:	0fc9      	lsrs	r1, r1, #31
 8001df8:	4684      	mov	ip, r0
 8001dfa:	0b36      	lsrs	r6, r6, #12
 8001dfc:	0d6d      	lsrs	r5, r5, #21
 8001dfe:	468b      	mov	fp, r1
 8001e00:	4690      	mov	r8, r2
 8001e02:	0b3f      	lsrs	r7, r7, #12
 8001e04:	0d64      	lsrs	r4, r4, #21
 8001e06:	429d      	cmp	r5, r3
 8001e08:	d020      	beq.n	8001e4c <__ledf2+0x70>
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <__ledf2+0xc0>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	d022      	beq.n	8001e56 <__ledf2+0x7a>
 8001e10:	2d00      	cmp	r5, #0
 8001e12:	d112      	bne.n	8001e3a <__ledf2+0x5e>
 8001e14:	4330      	orrs	r0, r6
 8001e16:	4243      	negs	r3, r0
 8001e18:	4143      	adcs	r3, r0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d01f      	beq.n	8001e60 <__ledf2+0x84>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <__ledf2+0x62>
 8001e24:	464b      	mov	r3, r9
 8001e26:	2001      	movs	r0, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4303      	orrs	r3, r0
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	46a2      	mov	sl, r4
 8001e36:	46ab      	mov	fp, r5
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	d016      	beq.n	8001e6c <__ledf2+0x90>
 8001e3e:	45cb      	cmp	fp, r9
 8001e40:	d017      	beq.n	8001e72 <__ledf2+0x96>
 8001e42:	465b      	mov	r3, fp
 8001e44:	4259      	negs	r1, r3
 8001e46:	2301      	movs	r3, #1
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	e7ef      	b.n	8001e2c <__ledf2+0x50>
 8001e4c:	0031      	movs	r1, r6
 8001e4e:	2302      	movs	r3, #2
 8001e50:	4301      	orrs	r1, r0
 8001e52:	d1eb      	bne.n	8001e2c <__ledf2+0x50>
 8001e54:	e7d9      	b.n	8001e0a <__ledf2+0x2e>
 8001e56:	0039      	movs	r1, r7
 8001e58:	2302      	movs	r3, #2
 8001e5a:	4311      	orrs	r1, r2
 8001e5c:	d1e6      	bne.n	8001e2c <__ledf2+0x50>
 8001e5e:	e7d7      	b.n	8001e10 <__ledf2+0x34>
 8001e60:	433a      	orrs	r2, r7
 8001e62:	d1dd      	bne.n	8001e20 <__ledf2+0x44>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d0e0      	beq.n	8001e2c <__ledf2+0x50>
 8001e6a:	e7ea      	b.n	8001e42 <__ledf2+0x66>
 8001e6c:	433a      	orrs	r2, r7
 8001e6e:	d1e6      	bne.n	8001e3e <__ledf2+0x62>
 8001e70:	e7e7      	b.n	8001e42 <__ledf2+0x66>
 8001e72:	42a5      	cmp	r5, r4
 8001e74:	dce5      	bgt.n	8001e42 <__ledf2+0x66>
 8001e76:	db05      	blt.n	8001e84 <__ledf2+0xa8>
 8001e78:	42be      	cmp	r6, r7
 8001e7a:	d8e2      	bhi.n	8001e42 <__ledf2+0x66>
 8001e7c:	d007      	beq.n	8001e8e <__ledf2+0xb2>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	42be      	cmp	r6, r7
 8001e82:	d2d3      	bcs.n	8001e2c <__ledf2+0x50>
 8001e84:	4659      	mov	r1, fp
 8001e86:	2301      	movs	r3, #1
 8001e88:	3901      	subs	r1, #1
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	e7ce      	b.n	8001e2c <__ledf2+0x50>
 8001e8e:	45c4      	cmp	ip, r8
 8001e90:	d8d7      	bhi.n	8001e42 <__ledf2+0x66>
 8001e92:	2300      	movs	r3, #0
 8001e94:	45c4      	cmp	ip, r8
 8001e96:	d3f5      	bcc.n	8001e84 <__ledf2+0xa8>
 8001e98:	e7c8      	b.n	8001e2c <__ledf2+0x50>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	000007ff 	.word	0x000007ff

08001ea0 <__aeabi_dmul>:
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea2:	4657      	mov	r7, sl
 8001ea4:	4645      	mov	r5, r8
 8001ea6:	46de      	mov	lr, fp
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	b5e0      	push	{r5, r6, r7, lr}
 8001eac:	030c      	lsls	r4, r1, #12
 8001eae:	4698      	mov	r8, r3
 8001eb0:	004e      	lsls	r6, r1, #1
 8001eb2:	0b23      	lsrs	r3, r4, #12
 8001eb4:	b087      	sub	sp, #28
 8001eb6:	0007      	movs	r7, r0
 8001eb8:	4692      	mov	sl, r2
 8001eba:	469b      	mov	fp, r3
 8001ebc:	0d76      	lsrs	r6, r6, #21
 8001ebe:	0fcd      	lsrs	r5, r1, #31
 8001ec0:	2e00      	cmp	r6, #0
 8001ec2:	d06b      	beq.n	8001f9c <__aeabi_dmul+0xfc>
 8001ec4:	4b6d      	ldr	r3, [pc, #436]	; (800207c <__aeabi_dmul+0x1dc>)
 8001ec6:	429e      	cmp	r6, r3
 8001ec8:	d035      	beq.n	8001f36 <__aeabi_dmul+0x96>
 8001eca:	2480      	movs	r4, #128	; 0x80
 8001ecc:	465b      	mov	r3, fp
 8001ece:	0f42      	lsrs	r2, r0, #29
 8001ed0:	0424      	lsls	r4, r4, #16
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4314      	orrs	r4, r2
 8001ed6:	431c      	orrs	r4, r3
 8001ed8:	00c3      	lsls	r3, r0, #3
 8001eda:	4699      	mov	r9, r3
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <__aeabi_dmul+0x1e0>)
 8001ede:	46a3      	mov	fp, r4
 8001ee0:	469c      	mov	ip, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2700      	movs	r7, #0
 8001ee6:	4466      	add	r6, ip
 8001ee8:	9302      	str	r3, [sp, #8]
 8001eea:	4643      	mov	r3, r8
 8001eec:	031c      	lsls	r4, r3, #12
 8001eee:	005a      	lsls	r2, r3, #1
 8001ef0:	0fdb      	lsrs	r3, r3, #31
 8001ef2:	4650      	mov	r0, sl
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	0d52      	lsrs	r2, r2, #21
 8001ef8:	4698      	mov	r8, r3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0x5e>
 8001efc:	e076      	b.n	8001fec <__aeabi_dmul+0x14c>
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <__aeabi_dmul+0x1dc>)
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d06d      	beq.n	8001fe0 <__aeabi_dmul+0x140>
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	0f41      	lsrs	r1, r0, #29
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	495c      	ldr	r1, [pc, #368]	; (8002080 <__aeabi_dmul+0x1e0>)
 8001f0e:	00e4      	lsls	r4, r4, #3
 8001f10:	468c      	mov	ip, r1
 8001f12:	431c      	orrs	r4, r3
 8001f14:	00c3      	lsls	r3, r0, #3
 8001f16:	2000      	movs	r0, #0
 8001f18:	4462      	add	r2, ip
 8001f1a:	4641      	mov	r1, r8
 8001f1c:	18b6      	adds	r6, r6, r2
 8001f1e:	4069      	eors	r1, r5
 8001f20:	1c72      	adds	r2, r6, #1
 8001f22:	9101      	str	r1, [sp, #4]
 8001f24:	4694      	mov	ip, r2
 8001f26:	4307      	orrs	r7, r0
 8001f28:	2f0f      	cmp	r7, #15
 8001f2a:	d900      	bls.n	8001f2e <__aeabi_dmul+0x8e>
 8001f2c:	e0b0      	b.n	8002090 <__aeabi_dmul+0x1f0>
 8001f2e:	4a55      	ldr	r2, [pc, #340]	; (8002084 <__aeabi_dmul+0x1e4>)
 8001f30:	00bf      	lsls	r7, r7, #2
 8001f32:	59d2      	ldr	r2, [r2, r7]
 8001f34:	4697      	mov	pc, r2
 8001f36:	465b      	mov	r3, fp
 8001f38:	4303      	orrs	r3, r0
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	d000      	beq.n	8001f40 <__aeabi_dmul+0xa0>
 8001f3e:	e087      	b.n	8002050 <__aeabi_dmul+0x1b0>
 8001f40:	2300      	movs	r3, #0
 8001f42:	469b      	mov	fp, r3
 8001f44:	3302      	adds	r3, #2
 8001f46:	2708      	movs	r7, #8
 8001f48:	9302      	str	r3, [sp, #8]
 8001f4a:	e7ce      	b.n	8001eea <__aeabi_dmul+0x4a>
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	2802      	cmp	r0, #2
 8001f52:	d067      	beq.n	8002024 <__aeabi_dmul+0x184>
 8001f54:	2803      	cmp	r0, #3
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dmul+0xba>
 8001f58:	e20e      	b.n	8002378 <__aeabi_dmul+0x4d8>
 8001f5a:	2801      	cmp	r0, #1
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dmul+0xc0>
 8001f5e:	e162      	b.n	8002226 <__aeabi_dmul+0x386>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2400      	movs	r4, #0
 8001f64:	2200      	movs	r2, #0
 8001f66:	4699      	mov	r9, r3
 8001f68:	9901      	ldr	r1, [sp, #4]
 8001f6a:	4001      	ands	r1, r0
 8001f6c:	b2cd      	uxtb	r5, r1
 8001f6e:	2100      	movs	r1, #0
 8001f70:	0312      	lsls	r2, r2, #12
 8001f72:	0d0b      	lsrs	r3, r1, #20
 8001f74:	0b12      	lsrs	r2, r2, #12
 8001f76:	051b      	lsls	r3, r3, #20
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	4a43      	ldr	r2, [pc, #268]	; (8002088 <__aeabi_dmul+0x1e8>)
 8001f7c:	0524      	lsls	r4, r4, #20
 8001f7e:	4013      	ands	r3, r2
 8001f80:	431c      	orrs	r4, r3
 8001f82:	0064      	lsls	r4, r4, #1
 8001f84:	07ed      	lsls	r5, r5, #31
 8001f86:	0864      	lsrs	r4, r4, #1
 8001f88:	432c      	orrs	r4, r5
 8001f8a:	4648      	mov	r0, r9
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	b007      	add	sp, #28
 8001f90:	bc3c      	pop	{r2, r3, r4, r5}
 8001f92:	4690      	mov	r8, r2
 8001f94:	4699      	mov	r9, r3
 8001f96:	46a2      	mov	sl, r4
 8001f98:	46ab      	mov	fp, r5
 8001f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9c:	4303      	orrs	r3, r0
 8001f9e:	4699      	mov	r9, r3
 8001fa0:	d04f      	beq.n	8002042 <__aeabi_dmul+0x1a2>
 8001fa2:	465b      	mov	r3, fp
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x10a>
 8001fa8:	e189      	b.n	80022be <__aeabi_dmul+0x41e>
 8001faa:	4658      	mov	r0, fp
 8001fac:	f000 fe80 	bl	8002cb0 <__clzsi2>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	3b0b      	subs	r3, #11
 8001fb4:	2b1c      	cmp	r3, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x11a>
 8001fb8:	e17a      	b.n	80022b0 <__aeabi_dmul+0x410>
 8001fba:	221d      	movs	r2, #29
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	465c      	mov	r4, fp
 8001fc4:	40da      	lsrs	r2, r3
 8001fc6:	3908      	subs	r1, #8
 8001fc8:	408c      	lsls	r4, r1
 8001fca:	0013      	movs	r3, r2
 8001fcc:	408f      	lsls	r7, r1
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	469b      	mov	fp, r3
 8001fd2:	46b9      	mov	r9, r7
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	4e2d      	ldr	r6, [pc, #180]	; (800208c <__aeabi_dmul+0x1ec>)
 8001fd8:	2700      	movs	r7, #0
 8001fda:	1a36      	subs	r6, r6, r0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	e784      	b.n	8001eea <__aeabi_dmul+0x4a>
 8001fe0:	4653      	mov	r3, sl
 8001fe2:	4323      	orrs	r3, r4
 8001fe4:	d12a      	bne.n	800203c <__aeabi_dmul+0x19c>
 8001fe6:	2400      	movs	r4, #0
 8001fe8:	2002      	movs	r0, #2
 8001fea:	e796      	b.n	8001f1a <__aeabi_dmul+0x7a>
 8001fec:	4653      	mov	r3, sl
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	d020      	beq.n	8002034 <__aeabi_dmul+0x194>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dmul+0x158>
 8001ff6:	e157      	b.n	80022a8 <__aeabi_dmul+0x408>
 8001ff8:	0020      	movs	r0, r4
 8001ffa:	f000 fe59 	bl	8002cb0 <__clzsi2>
 8001ffe:	0003      	movs	r3, r0
 8002000:	3b0b      	subs	r3, #11
 8002002:	2b1c      	cmp	r3, #28
 8002004:	dd00      	ble.n	8002008 <__aeabi_dmul+0x168>
 8002006:	e149      	b.n	800229c <__aeabi_dmul+0x3fc>
 8002008:	211d      	movs	r1, #29
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	4651      	mov	r1, sl
 800200e:	0002      	movs	r2, r0
 8002010:	40d9      	lsrs	r1, r3
 8002012:	4653      	mov	r3, sl
 8002014:	3a08      	subs	r2, #8
 8002016:	4094      	lsls	r4, r2
 8002018:	4093      	lsls	r3, r2
 800201a:	430c      	orrs	r4, r1
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <__aeabi_dmul+0x1ec>)
 800201e:	1a12      	subs	r2, r2, r0
 8002020:	2000      	movs	r0, #0
 8002022:	e77a      	b.n	8001f1a <__aeabi_dmul+0x7a>
 8002024:	2501      	movs	r5, #1
 8002026:	9b01      	ldr	r3, [sp, #4]
 8002028:	4c14      	ldr	r4, [pc, #80]	; (800207c <__aeabi_dmul+0x1dc>)
 800202a:	401d      	ands	r5, r3
 800202c:	2300      	movs	r3, #0
 800202e:	2200      	movs	r2, #0
 8002030:	4699      	mov	r9, r3
 8002032:	e79c      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002034:	2400      	movs	r4, #0
 8002036:	2200      	movs	r2, #0
 8002038:	2001      	movs	r0, #1
 800203a:	e76e      	b.n	8001f1a <__aeabi_dmul+0x7a>
 800203c:	4653      	mov	r3, sl
 800203e:	2003      	movs	r0, #3
 8002040:	e76b      	b.n	8001f1a <__aeabi_dmul+0x7a>
 8002042:	2300      	movs	r3, #0
 8002044:	469b      	mov	fp, r3
 8002046:	3301      	adds	r3, #1
 8002048:	2704      	movs	r7, #4
 800204a:	2600      	movs	r6, #0
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	e74c      	b.n	8001eea <__aeabi_dmul+0x4a>
 8002050:	2303      	movs	r3, #3
 8002052:	4681      	mov	r9, r0
 8002054:	270c      	movs	r7, #12
 8002056:	9302      	str	r3, [sp, #8]
 8002058:	e747      	b.n	8001eea <__aeabi_dmul+0x4a>
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	2300      	movs	r3, #0
 800205e:	2500      	movs	r5, #0
 8002060:	0312      	lsls	r2, r2, #12
 8002062:	4699      	mov	r9, r3
 8002064:	4c05      	ldr	r4, [pc, #20]	; (800207c <__aeabi_dmul+0x1dc>)
 8002066:	e782      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002068:	465c      	mov	r4, fp
 800206a:	464b      	mov	r3, r9
 800206c:	9802      	ldr	r0, [sp, #8]
 800206e:	e76f      	b.n	8001f50 <__aeabi_dmul+0xb0>
 8002070:	465c      	mov	r4, fp
 8002072:	464b      	mov	r3, r9
 8002074:	9501      	str	r5, [sp, #4]
 8002076:	9802      	ldr	r0, [sp, #8]
 8002078:	e76a      	b.n	8001f50 <__aeabi_dmul+0xb0>
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	000007ff 	.word	0x000007ff
 8002080:	fffffc01 	.word	0xfffffc01
 8002084:	0800e3e8 	.word	0x0800e3e8
 8002088:	800fffff 	.word	0x800fffff
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	464a      	mov	r2, r9
 8002092:	4649      	mov	r1, r9
 8002094:	0c17      	lsrs	r7, r2, #16
 8002096:	0c1a      	lsrs	r2, r3, #16
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	0408      	lsls	r0, r1, #16
 800209e:	0019      	movs	r1, r3
 80020a0:	0c00      	lsrs	r0, r0, #16
 80020a2:	4341      	muls	r1, r0
 80020a4:	0015      	movs	r5, r2
 80020a6:	4688      	mov	r8, r1
 80020a8:	0019      	movs	r1, r3
 80020aa:	437d      	muls	r5, r7
 80020ac:	4379      	muls	r1, r7
 80020ae:	9503      	str	r5, [sp, #12]
 80020b0:	4689      	mov	r9, r1
 80020b2:	0029      	movs	r1, r5
 80020b4:	0015      	movs	r5, r2
 80020b6:	4345      	muls	r5, r0
 80020b8:	444d      	add	r5, r9
 80020ba:	9502      	str	r5, [sp, #8]
 80020bc:	4645      	mov	r5, r8
 80020be:	0c2d      	lsrs	r5, r5, #16
 80020c0:	46aa      	mov	sl, r5
 80020c2:	9d02      	ldr	r5, [sp, #8]
 80020c4:	4455      	add	r5, sl
 80020c6:	45a9      	cmp	r9, r5
 80020c8:	d906      	bls.n	80020d8 <__aeabi_dmul+0x238>
 80020ca:	468a      	mov	sl, r1
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	0249      	lsls	r1, r1, #9
 80020d0:	4689      	mov	r9, r1
 80020d2:	44ca      	add	sl, r9
 80020d4:	4651      	mov	r1, sl
 80020d6:	9103      	str	r1, [sp, #12]
 80020d8:	0c29      	lsrs	r1, r5, #16
 80020da:	9104      	str	r1, [sp, #16]
 80020dc:	4641      	mov	r1, r8
 80020de:	0409      	lsls	r1, r1, #16
 80020e0:	042d      	lsls	r5, r5, #16
 80020e2:	0c09      	lsrs	r1, r1, #16
 80020e4:	4688      	mov	r8, r1
 80020e6:	0029      	movs	r1, r5
 80020e8:	0c25      	lsrs	r5, r4, #16
 80020ea:	0424      	lsls	r4, r4, #16
 80020ec:	4441      	add	r1, r8
 80020ee:	0c24      	lsrs	r4, r4, #16
 80020f0:	9105      	str	r1, [sp, #20]
 80020f2:	0021      	movs	r1, r4
 80020f4:	4341      	muls	r1, r0
 80020f6:	4688      	mov	r8, r1
 80020f8:	0021      	movs	r1, r4
 80020fa:	4379      	muls	r1, r7
 80020fc:	468a      	mov	sl, r1
 80020fe:	4368      	muls	r0, r5
 8002100:	4641      	mov	r1, r8
 8002102:	4450      	add	r0, sl
 8002104:	4681      	mov	r9, r0
 8002106:	0c08      	lsrs	r0, r1, #16
 8002108:	4448      	add	r0, r9
 800210a:	436f      	muls	r7, r5
 800210c:	4582      	cmp	sl, r0
 800210e:	d903      	bls.n	8002118 <__aeabi_dmul+0x278>
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0249      	lsls	r1, r1, #9
 8002114:	4689      	mov	r9, r1
 8002116:	444f      	add	r7, r9
 8002118:	0c01      	lsrs	r1, r0, #16
 800211a:	4689      	mov	r9, r1
 800211c:	0039      	movs	r1, r7
 800211e:	4449      	add	r1, r9
 8002120:	9102      	str	r1, [sp, #8]
 8002122:	4641      	mov	r1, r8
 8002124:	040f      	lsls	r7, r1, #16
 8002126:	9904      	ldr	r1, [sp, #16]
 8002128:	0c3f      	lsrs	r7, r7, #16
 800212a:	4688      	mov	r8, r1
 800212c:	0400      	lsls	r0, r0, #16
 800212e:	19c0      	adds	r0, r0, r7
 8002130:	4480      	add	r8, r0
 8002132:	4641      	mov	r1, r8
 8002134:	9104      	str	r1, [sp, #16]
 8002136:	4659      	mov	r1, fp
 8002138:	0c0f      	lsrs	r7, r1, #16
 800213a:	0409      	lsls	r1, r1, #16
 800213c:	0c09      	lsrs	r1, r1, #16
 800213e:	4688      	mov	r8, r1
 8002140:	4359      	muls	r1, r3
 8002142:	468a      	mov	sl, r1
 8002144:	0039      	movs	r1, r7
 8002146:	4351      	muls	r1, r2
 8002148:	4689      	mov	r9, r1
 800214a:	4641      	mov	r1, r8
 800214c:	434a      	muls	r2, r1
 800214e:	4651      	mov	r1, sl
 8002150:	0c09      	lsrs	r1, r1, #16
 8002152:	468b      	mov	fp, r1
 8002154:	437b      	muls	r3, r7
 8002156:	18d2      	adds	r2, r2, r3
 8002158:	445a      	add	r2, fp
 800215a:	4293      	cmp	r3, r2
 800215c:	d903      	bls.n	8002166 <__aeabi_dmul+0x2c6>
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	025b      	lsls	r3, r3, #9
 8002162:	469b      	mov	fp, r3
 8002164:	44d9      	add	r9, fp
 8002166:	4651      	mov	r1, sl
 8002168:	0409      	lsls	r1, r1, #16
 800216a:	0c09      	lsrs	r1, r1, #16
 800216c:	468a      	mov	sl, r1
 800216e:	4641      	mov	r1, r8
 8002170:	4361      	muls	r1, r4
 8002172:	437c      	muls	r4, r7
 8002174:	0c13      	lsrs	r3, r2, #16
 8002176:	0412      	lsls	r2, r2, #16
 8002178:	444b      	add	r3, r9
 800217a:	4452      	add	r2, sl
 800217c:	46a1      	mov	r9, r4
 800217e:	468a      	mov	sl, r1
 8002180:	003c      	movs	r4, r7
 8002182:	4641      	mov	r1, r8
 8002184:	436c      	muls	r4, r5
 8002186:	434d      	muls	r5, r1
 8002188:	4651      	mov	r1, sl
 800218a:	444d      	add	r5, r9
 800218c:	0c0f      	lsrs	r7, r1, #16
 800218e:	197d      	adds	r5, r7, r5
 8002190:	45a9      	cmp	r9, r5
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x2fc>
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0249      	lsls	r1, r1, #9
 8002198:	4688      	mov	r8, r1
 800219a:	4444      	add	r4, r8
 800219c:	9f04      	ldr	r7, [sp, #16]
 800219e:	9903      	ldr	r1, [sp, #12]
 80021a0:	46b8      	mov	r8, r7
 80021a2:	4441      	add	r1, r8
 80021a4:	468b      	mov	fp, r1
 80021a6:	4583      	cmp	fp, r0
 80021a8:	4180      	sbcs	r0, r0
 80021aa:	4241      	negs	r1, r0
 80021ac:	4688      	mov	r8, r1
 80021ae:	4651      	mov	r1, sl
 80021b0:	0408      	lsls	r0, r1, #16
 80021b2:	042f      	lsls	r7, r5, #16
 80021b4:	0c00      	lsrs	r0, r0, #16
 80021b6:	183f      	adds	r7, r7, r0
 80021b8:	4658      	mov	r0, fp
 80021ba:	9902      	ldr	r1, [sp, #8]
 80021bc:	1810      	adds	r0, r2, r0
 80021be:	4689      	mov	r9, r1
 80021c0:	4290      	cmp	r0, r2
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	444f      	add	r7, r9
 80021c6:	46ba      	mov	sl, r7
 80021c8:	4252      	negs	r2, r2
 80021ca:	4699      	mov	r9, r3
 80021cc:	4693      	mov	fp, r2
 80021ce:	44c2      	add	sl, r8
 80021d0:	44d1      	add	r9, sl
 80021d2:	44cb      	add	fp, r9
 80021d4:	428f      	cmp	r7, r1
 80021d6:	41bf      	sbcs	r7, r7
 80021d8:	45c2      	cmp	sl, r8
 80021da:	4189      	sbcs	r1, r1
 80021dc:	4599      	cmp	r9, r3
 80021de:	419b      	sbcs	r3, r3
 80021e0:	4593      	cmp	fp, r2
 80021e2:	4192      	sbcs	r2, r2
 80021e4:	427f      	negs	r7, r7
 80021e6:	4249      	negs	r1, r1
 80021e8:	0c2d      	lsrs	r5, r5, #16
 80021ea:	4252      	negs	r2, r2
 80021ec:	430f      	orrs	r7, r1
 80021ee:	425b      	negs	r3, r3
 80021f0:	4313      	orrs	r3, r2
 80021f2:	197f      	adds	r7, r7, r5
 80021f4:	18ff      	adds	r7, r7, r3
 80021f6:	465b      	mov	r3, fp
 80021f8:	193c      	adds	r4, r7, r4
 80021fa:	0ddb      	lsrs	r3, r3, #23
 80021fc:	9a05      	ldr	r2, [sp, #20]
 80021fe:	0264      	lsls	r4, r4, #9
 8002200:	431c      	orrs	r4, r3
 8002202:	0243      	lsls	r3, r0, #9
 8002204:	4313      	orrs	r3, r2
 8002206:	1e5d      	subs	r5, r3, #1
 8002208:	41ab      	sbcs	r3, r5
 800220a:	465a      	mov	r2, fp
 800220c:	0dc0      	lsrs	r0, r0, #23
 800220e:	4303      	orrs	r3, r0
 8002210:	0252      	lsls	r2, r2, #9
 8002212:	4313      	orrs	r3, r2
 8002214:	01e2      	lsls	r2, r4, #7
 8002216:	d556      	bpl.n	80022c6 <__aeabi_dmul+0x426>
 8002218:	2001      	movs	r0, #1
 800221a:	085a      	lsrs	r2, r3, #1
 800221c:	4003      	ands	r3, r0
 800221e:	4313      	orrs	r3, r2
 8002220:	07e2      	lsls	r2, r4, #31
 8002222:	4313      	orrs	r3, r2
 8002224:	0864      	lsrs	r4, r4, #1
 8002226:	485a      	ldr	r0, [pc, #360]	; (8002390 <__aeabi_dmul+0x4f0>)
 8002228:	4460      	add	r0, ip
 800222a:	2800      	cmp	r0, #0
 800222c:	dd4d      	ble.n	80022ca <__aeabi_dmul+0x42a>
 800222e:	075a      	lsls	r2, r3, #29
 8002230:	d009      	beq.n	8002246 <__aeabi_dmul+0x3a6>
 8002232:	220f      	movs	r2, #15
 8002234:	401a      	ands	r2, r3
 8002236:	2a04      	cmp	r2, #4
 8002238:	d005      	beq.n	8002246 <__aeabi_dmul+0x3a6>
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	429a      	cmp	r2, r3
 800223e:	419b      	sbcs	r3, r3
 8002240:	425b      	negs	r3, r3
 8002242:	18e4      	adds	r4, r4, r3
 8002244:	0013      	movs	r3, r2
 8002246:	01e2      	lsls	r2, r4, #7
 8002248:	d504      	bpl.n	8002254 <__aeabi_dmul+0x3b4>
 800224a:	2080      	movs	r0, #128	; 0x80
 800224c:	4a51      	ldr	r2, [pc, #324]	; (8002394 <__aeabi_dmul+0x4f4>)
 800224e:	00c0      	lsls	r0, r0, #3
 8002250:	4014      	ands	r4, r2
 8002252:	4460      	add	r0, ip
 8002254:	4a50      	ldr	r2, [pc, #320]	; (8002398 <__aeabi_dmul+0x4f8>)
 8002256:	4290      	cmp	r0, r2
 8002258:	dd00      	ble.n	800225c <__aeabi_dmul+0x3bc>
 800225a:	e6e3      	b.n	8002024 <__aeabi_dmul+0x184>
 800225c:	2501      	movs	r5, #1
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	0762      	lsls	r2, r4, #29
 8002262:	431a      	orrs	r2, r3
 8002264:	0264      	lsls	r4, r4, #9
 8002266:	9b01      	ldr	r3, [sp, #4]
 8002268:	4691      	mov	r9, r2
 800226a:	0b22      	lsrs	r2, r4, #12
 800226c:	0544      	lsls	r4, r0, #21
 800226e:	0d64      	lsrs	r4, r4, #21
 8002270:	401d      	ands	r5, r3
 8002272:	e67c      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	4659      	mov	r1, fp
 8002278:	0312      	lsls	r2, r2, #12
 800227a:	4211      	tst	r1, r2
 800227c:	d008      	beq.n	8002290 <__aeabi_dmul+0x3f0>
 800227e:	4214      	tst	r4, r2
 8002280:	d106      	bne.n	8002290 <__aeabi_dmul+0x3f0>
 8002282:	4322      	orrs	r2, r4
 8002284:	0312      	lsls	r2, r2, #12
 8002286:	0b12      	lsrs	r2, r2, #12
 8002288:	4645      	mov	r5, r8
 800228a:	4699      	mov	r9, r3
 800228c:	4c43      	ldr	r4, [pc, #268]	; (800239c <__aeabi_dmul+0x4fc>)
 800228e:	e66e      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002290:	465b      	mov	r3, fp
 8002292:	431a      	orrs	r2, r3
 8002294:	0312      	lsls	r2, r2, #12
 8002296:	0b12      	lsrs	r2, r2, #12
 8002298:	4c40      	ldr	r4, [pc, #256]	; (800239c <__aeabi_dmul+0x4fc>)
 800229a:	e668      	b.n	8001f6e <__aeabi_dmul+0xce>
 800229c:	0003      	movs	r3, r0
 800229e:	4654      	mov	r4, sl
 80022a0:	3b28      	subs	r3, #40	; 0x28
 80022a2:	409c      	lsls	r4, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	e6b9      	b.n	800201c <__aeabi_dmul+0x17c>
 80022a8:	f000 fd02 	bl	8002cb0 <__clzsi2>
 80022ac:	3020      	adds	r0, #32
 80022ae:	e6a6      	b.n	8001ffe <__aeabi_dmul+0x15e>
 80022b0:	0003      	movs	r3, r0
 80022b2:	3b28      	subs	r3, #40	; 0x28
 80022b4:	409f      	lsls	r7, r3
 80022b6:	2300      	movs	r3, #0
 80022b8:	46bb      	mov	fp, r7
 80022ba:	4699      	mov	r9, r3
 80022bc:	e68a      	b.n	8001fd4 <__aeabi_dmul+0x134>
 80022be:	f000 fcf7 	bl	8002cb0 <__clzsi2>
 80022c2:	3020      	adds	r0, #32
 80022c4:	e674      	b.n	8001fb0 <__aeabi_dmul+0x110>
 80022c6:	46b4      	mov	ip, r6
 80022c8:	e7ad      	b.n	8002226 <__aeabi_dmul+0x386>
 80022ca:	2501      	movs	r5, #1
 80022cc:	1a2a      	subs	r2, r5, r0
 80022ce:	2a38      	cmp	r2, #56	; 0x38
 80022d0:	dd06      	ble.n	80022e0 <__aeabi_dmul+0x440>
 80022d2:	9b01      	ldr	r3, [sp, #4]
 80022d4:	2400      	movs	r4, #0
 80022d6:	401d      	ands	r5, r3
 80022d8:	2300      	movs	r3, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	4699      	mov	r9, r3
 80022de:	e646      	b.n	8001f6e <__aeabi_dmul+0xce>
 80022e0:	2a1f      	cmp	r2, #31
 80022e2:	dc21      	bgt.n	8002328 <__aeabi_dmul+0x488>
 80022e4:	2520      	movs	r5, #32
 80022e6:	0020      	movs	r0, r4
 80022e8:	1aad      	subs	r5, r5, r2
 80022ea:	001e      	movs	r6, r3
 80022ec:	40ab      	lsls	r3, r5
 80022ee:	40a8      	lsls	r0, r5
 80022f0:	40d6      	lsrs	r6, r2
 80022f2:	1e5d      	subs	r5, r3, #1
 80022f4:	41ab      	sbcs	r3, r5
 80022f6:	4330      	orrs	r0, r6
 80022f8:	4318      	orrs	r0, r3
 80022fa:	40d4      	lsrs	r4, r2
 80022fc:	0743      	lsls	r3, r0, #29
 80022fe:	d009      	beq.n	8002314 <__aeabi_dmul+0x474>
 8002300:	230f      	movs	r3, #15
 8002302:	4003      	ands	r3, r0
 8002304:	2b04      	cmp	r3, #4
 8002306:	d005      	beq.n	8002314 <__aeabi_dmul+0x474>
 8002308:	0003      	movs	r3, r0
 800230a:	1d18      	adds	r0, r3, #4
 800230c:	4298      	cmp	r0, r3
 800230e:	419b      	sbcs	r3, r3
 8002310:	425b      	negs	r3, r3
 8002312:	18e4      	adds	r4, r4, r3
 8002314:	0223      	lsls	r3, r4, #8
 8002316:	d521      	bpl.n	800235c <__aeabi_dmul+0x4bc>
 8002318:	2501      	movs	r5, #1
 800231a:	9b01      	ldr	r3, [sp, #4]
 800231c:	2401      	movs	r4, #1
 800231e:	401d      	ands	r5, r3
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	4699      	mov	r9, r3
 8002326:	e622      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002328:	251f      	movs	r5, #31
 800232a:	0021      	movs	r1, r4
 800232c:	426d      	negs	r5, r5
 800232e:	1a28      	subs	r0, r5, r0
 8002330:	40c1      	lsrs	r1, r0
 8002332:	0008      	movs	r0, r1
 8002334:	2a20      	cmp	r2, #32
 8002336:	d01d      	beq.n	8002374 <__aeabi_dmul+0x4d4>
 8002338:	355f      	adds	r5, #95	; 0x5f
 800233a:	1aaa      	subs	r2, r5, r2
 800233c:	4094      	lsls	r4, r2
 800233e:	4323      	orrs	r3, r4
 8002340:	1e5c      	subs	r4, r3, #1
 8002342:	41a3      	sbcs	r3, r4
 8002344:	2507      	movs	r5, #7
 8002346:	4303      	orrs	r3, r0
 8002348:	401d      	ands	r5, r3
 800234a:	2200      	movs	r2, #0
 800234c:	2d00      	cmp	r5, #0
 800234e:	d009      	beq.n	8002364 <__aeabi_dmul+0x4c4>
 8002350:	220f      	movs	r2, #15
 8002352:	2400      	movs	r4, #0
 8002354:	401a      	ands	r2, r3
 8002356:	0018      	movs	r0, r3
 8002358:	2a04      	cmp	r2, #4
 800235a:	d1d6      	bne.n	800230a <__aeabi_dmul+0x46a>
 800235c:	0003      	movs	r3, r0
 800235e:	0765      	lsls	r5, r4, #29
 8002360:	0264      	lsls	r4, r4, #9
 8002362:	0b22      	lsrs	r2, r4, #12
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	432b      	orrs	r3, r5
 8002368:	2501      	movs	r5, #1
 800236a:	4699      	mov	r9, r3
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	2400      	movs	r4, #0
 8002370:	401d      	ands	r5, r3
 8002372:	e5fc      	b.n	8001f6e <__aeabi_dmul+0xce>
 8002374:	2400      	movs	r4, #0
 8002376:	e7e2      	b.n	800233e <__aeabi_dmul+0x49e>
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	2501      	movs	r5, #1
 800237c:	0312      	lsls	r2, r2, #12
 800237e:	4322      	orrs	r2, r4
 8002380:	9901      	ldr	r1, [sp, #4]
 8002382:	0312      	lsls	r2, r2, #12
 8002384:	0b12      	lsrs	r2, r2, #12
 8002386:	400d      	ands	r5, r1
 8002388:	4699      	mov	r9, r3
 800238a:	4c04      	ldr	r4, [pc, #16]	; (800239c <__aeabi_dmul+0x4fc>)
 800238c:	e5ef      	b.n	8001f6e <__aeabi_dmul+0xce>
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	000003ff 	.word	0x000003ff
 8002394:	feffffff 	.word	0xfeffffff
 8002398:	000007fe 	.word	0x000007fe
 800239c:	000007ff 	.word	0x000007ff

080023a0 <__aeabi_dsub>:
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	4646      	mov	r6, r8
 80023a4:	46d6      	mov	lr, sl
 80023a6:	464f      	mov	r7, r9
 80023a8:	030c      	lsls	r4, r1, #12
 80023aa:	b5c0      	push	{r6, r7, lr}
 80023ac:	0fcd      	lsrs	r5, r1, #31
 80023ae:	004e      	lsls	r6, r1, #1
 80023b0:	0a61      	lsrs	r1, r4, #9
 80023b2:	0f44      	lsrs	r4, r0, #29
 80023b4:	430c      	orrs	r4, r1
 80023b6:	00c1      	lsls	r1, r0, #3
 80023b8:	0058      	lsls	r0, r3, #1
 80023ba:	0d40      	lsrs	r0, r0, #21
 80023bc:	4684      	mov	ip, r0
 80023be:	468a      	mov	sl, r1
 80023c0:	000f      	movs	r7, r1
 80023c2:	0319      	lsls	r1, r3, #12
 80023c4:	0f50      	lsrs	r0, r2, #29
 80023c6:	0a49      	lsrs	r1, r1, #9
 80023c8:	4301      	orrs	r1, r0
 80023ca:	48c6      	ldr	r0, [pc, #792]	; (80026e4 <__aeabi_dsub+0x344>)
 80023cc:	0d76      	lsrs	r6, r6, #21
 80023ce:	46a8      	mov	r8, r5
 80023d0:	0fdb      	lsrs	r3, r3, #31
 80023d2:	00d2      	lsls	r2, r2, #3
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d100      	bne.n	80023da <__aeabi_dsub+0x3a>
 80023d8:	e0d8      	b.n	800258c <__aeabi_dsub+0x1ec>
 80023da:	2001      	movs	r0, #1
 80023dc:	4043      	eors	r3, r0
 80023de:	42ab      	cmp	r3, r5
 80023e0:	d100      	bne.n	80023e4 <__aeabi_dsub+0x44>
 80023e2:	e0a6      	b.n	8002532 <__aeabi_dsub+0x192>
 80023e4:	4660      	mov	r0, ip
 80023e6:	1a35      	subs	r5, r6, r0
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	dc00      	bgt.n	80023ee <__aeabi_dsub+0x4e>
 80023ec:	e105      	b.n	80025fa <__aeabi_dsub+0x25a>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d110      	bne.n	8002414 <__aeabi_dsub+0x74>
 80023f2:	000b      	movs	r3, r1
 80023f4:	4313      	orrs	r3, r2
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x5a>
 80023f8:	e0d7      	b.n	80025aa <__aeabi_dsub+0x20a>
 80023fa:	1e6b      	subs	r3, r5, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d000      	beq.n	8002402 <__aeabi_dsub+0x62>
 8002400:	e14b      	b.n	800269a <__aeabi_dsub+0x2fa>
 8002402:	4653      	mov	r3, sl
 8002404:	1a9f      	subs	r7, r3, r2
 8002406:	45ba      	cmp	sl, r7
 8002408:	4180      	sbcs	r0, r0
 800240a:	1a64      	subs	r4, r4, r1
 800240c:	4240      	negs	r0, r0
 800240e:	1a24      	subs	r4, r4, r0
 8002410:	2601      	movs	r6, #1
 8002412:	e01e      	b.n	8002452 <__aeabi_dsub+0xb2>
 8002414:	4bb3      	ldr	r3, [pc, #716]	; (80026e4 <__aeabi_dsub+0x344>)
 8002416:	429e      	cmp	r6, r3
 8002418:	d048      	beq.n	80024ac <__aeabi_dsub+0x10c>
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	4319      	orrs	r1, r3
 8002420:	2d38      	cmp	r5, #56	; 0x38
 8002422:	dd00      	ble.n	8002426 <__aeabi_dsub+0x86>
 8002424:	e119      	b.n	800265a <__aeabi_dsub+0x2ba>
 8002426:	2d1f      	cmp	r5, #31
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0x8c>
 800242a:	e14c      	b.n	80026c6 <__aeabi_dsub+0x326>
 800242c:	2320      	movs	r3, #32
 800242e:	000f      	movs	r7, r1
 8002430:	1b5b      	subs	r3, r3, r5
 8002432:	0010      	movs	r0, r2
 8002434:	409a      	lsls	r2, r3
 8002436:	409f      	lsls	r7, r3
 8002438:	40e8      	lsrs	r0, r5
 800243a:	1e53      	subs	r3, r2, #1
 800243c:	419a      	sbcs	r2, r3
 800243e:	40e9      	lsrs	r1, r5
 8002440:	4307      	orrs	r7, r0
 8002442:	4317      	orrs	r7, r2
 8002444:	4653      	mov	r3, sl
 8002446:	1bdf      	subs	r7, r3, r7
 8002448:	1a61      	subs	r1, r4, r1
 800244a:	45ba      	cmp	sl, r7
 800244c:	41a4      	sbcs	r4, r4
 800244e:	4264      	negs	r4, r4
 8002450:	1b0c      	subs	r4, r1, r4
 8002452:	0223      	lsls	r3, r4, #8
 8002454:	d400      	bmi.n	8002458 <__aeabi_dsub+0xb8>
 8002456:	e0c5      	b.n	80025e4 <__aeabi_dsub+0x244>
 8002458:	0264      	lsls	r4, r4, #9
 800245a:	0a65      	lsrs	r5, r4, #9
 800245c:	2d00      	cmp	r5, #0
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0xc2>
 8002460:	e0f6      	b.n	8002650 <__aeabi_dsub+0x2b0>
 8002462:	0028      	movs	r0, r5
 8002464:	f000 fc24 	bl	8002cb0 <__clzsi2>
 8002468:	0003      	movs	r3, r0
 800246a:	3b08      	subs	r3, #8
 800246c:	2b1f      	cmp	r3, #31
 800246e:	dd00      	ble.n	8002472 <__aeabi_dsub+0xd2>
 8002470:	e0e9      	b.n	8002646 <__aeabi_dsub+0x2a6>
 8002472:	2220      	movs	r2, #32
 8002474:	003c      	movs	r4, r7
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	409d      	lsls	r5, r3
 800247a:	40d4      	lsrs	r4, r2
 800247c:	409f      	lsls	r7, r3
 800247e:	4325      	orrs	r5, r4
 8002480:	429e      	cmp	r6, r3
 8002482:	dd00      	ble.n	8002486 <__aeabi_dsub+0xe6>
 8002484:	e0db      	b.n	800263e <__aeabi_dsub+0x29e>
 8002486:	1b9e      	subs	r6, r3, r6
 8002488:	1c73      	adds	r3, r6, #1
 800248a:	2b1f      	cmp	r3, #31
 800248c:	dd00      	ble.n	8002490 <__aeabi_dsub+0xf0>
 800248e:	e10a      	b.n	80026a6 <__aeabi_dsub+0x306>
 8002490:	2220      	movs	r2, #32
 8002492:	0038      	movs	r0, r7
 8002494:	1ad2      	subs	r2, r2, r3
 8002496:	0029      	movs	r1, r5
 8002498:	4097      	lsls	r7, r2
 800249a:	002c      	movs	r4, r5
 800249c:	4091      	lsls	r1, r2
 800249e:	40d8      	lsrs	r0, r3
 80024a0:	1e7a      	subs	r2, r7, #1
 80024a2:	4197      	sbcs	r7, r2
 80024a4:	40dc      	lsrs	r4, r3
 80024a6:	2600      	movs	r6, #0
 80024a8:	4301      	orrs	r1, r0
 80024aa:	430f      	orrs	r7, r1
 80024ac:	077b      	lsls	r3, r7, #29
 80024ae:	d009      	beq.n	80024c4 <__aeabi_dsub+0x124>
 80024b0:	230f      	movs	r3, #15
 80024b2:	403b      	ands	r3, r7
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d005      	beq.n	80024c4 <__aeabi_dsub+0x124>
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	42bb      	cmp	r3, r7
 80024bc:	41bf      	sbcs	r7, r7
 80024be:	427f      	negs	r7, r7
 80024c0:	19e4      	adds	r4, r4, r7
 80024c2:	001f      	movs	r7, r3
 80024c4:	0223      	lsls	r3, r4, #8
 80024c6:	d525      	bpl.n	8002514 <__aeabi_dsub+0x174>
 80024c8:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <__aeabi_dsub+0x344>)
 80024ca:	3601      	adds	r6, #1
 80024cc:	429e      	cmp	r6, r3
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dsub+0x132>
 80024d0:	e0af      	b.n	8002632 <__aeabi_dsub+0x292>
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <__aeabi_dsub+0x348>)
 80024d4:	2501      	movs	r5, #1
 80024d6:	401c      	ands	r4, r3
 80024d8:	4643      	mov	r3, r8
 80024da:	0762      	lsls	r2, r4, #29
 80024dc:	08ff      	lsrs	r7, r7, #3
 80024de:	0264      	lsls	r4, r4, #9
 80024e0:	0576      	lsls	r6, r6, #21
 80024e2:	4317      	orrs	r7, r2
 80024e4:	0b24      	lsrs	r4, r4, #12
 80024e6:	0d76      	lsrs	r6, r6, #21
 80024e8:	401d      	ands	r5, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	0324      	lsls	r4, r4, #12
 80024ee:	0b23      	lsrs	r3, r4, #12
 80024f0:	0d0c      	lsrs	r4, r1, #20
 80024f2:	4a7e      	ldr	r2, [pc, #504]	; (80026ec <__aeabi_dsub+0x34c>)
 80024f4:	0524      	lsls	r4, r4, #20
 80024f6:	431c      	orrs	r4, r3
 80024f8:	4014      	ands	r4, r2
 80024fa:	0533      	lsls	r3, r6, #20
 80024fc:	4323      	orrs	r3, r4
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	07ed      	lsls	r5, r5, #31
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	432b      	orrs	r3, r5
 8002506:	0038      	movs	r0, r7
 8002508:	0019      	movs	r1, r3
 800250a:	bc1c      	pop	{r2, r3, r4}
 800250c:	4690      	mov	r8, r2
 800250e:	4699      	mov	r9, r3
 8002510:	46a2      	mov	sl, r4
 8002512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002514:	2501      	movs	r5, #1
 8002516:	4643      	mov	r3, r8
 8002518:	0762      	lsls	r2, r4, #29
 800251a:	08ff      	lsrs	r7, r7, #3
 800251c:	4317      	orrs	r7, r2
 800251e:	08e4      	lsrs	r4, r4, #3
 8002520:	401d      	ands	r5, r3
 8002522:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <__aeabi_dsub+0x344>)
 8002524:	429e      	cmp	r6, r3
 8002526:	d036      	beq.n	8002596 <__aeabi_dsub+0x1f6>
 8002528:	0324      	lsls	r4, r4, #12
 800252a:	0576      	lsls	r6, r6, #21
 800252c:	0b24      	lsrs	r4, r4, #12
 800252e:	0d76      	lsrs	r6, r6, #21
 8002530:	e7db      	b.n	80024ea <__aeabi_dsub+0x14a>
 8002532:	4663      	mov	r3, ip
 8002534:	1af3      	subs	r3, r6, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	dc00      	bgt.n	800253c <__aeabi_dsub+0x19c>
 800253a:	e094      	b.n	8002666 <__aeabi_dsub+0x2c6>
 800253c:	4660      	mov	r0, ip
 800253e:	2800      	cmp	r0, #0
 8002540:	d035      	beq.n	80025ae <__aeabi_dsub+0x20e>
 8002542:	4868      	ldr	r0, [pc, #416]	; (80026e4 <__aeabi_dsub+0x344>)
 8002544:	4286      	cmp	r6, r0
 8002546:	d0b1      	beq.n	80024ac <__aeabi_dsub+0x10c>
 8002548:	2780      	movs	r7, #128	; 0x80
 800254a:	043f      	lsls	r7, r7, #16
 800254c:	4339      	orrs	r1, r7
 800254e:	2b38      	cmp	r3, #56	; 0x38
 8002550:	dc00      	bgt.n	8002554 <__aeabi_dsub+0x1b4>
 8002552:	e0fd      	b.n	8002750 <__aeabi_dsub+0x3b0>
 8002554:	430a      	orrs	r2, r1
 8002556:	0017      	movs	r7, r2
 8002558:	2100      	movs	r1, #0
 800255a:	1e7a      	subs	r2, r7, #1
 800255c:	4197      	sbcs	r7, r2
 800255e:	4457      	add	r7, sl
 8002560:	4557      	cmp	r7, sl
 8002562:	4180      	sbcs	r0, r0
 8002564:	1909      	adds	r1, r1, r4
 8002566:	4244      	negs	r4, r0
 8002568:	190c      	adds	r4, r1, r4
 800256a:	0223      	lsls	r3, r4, #8
 800256c:	d53a      	bpl.n	80025e4 <__aeabi_dsub+0x244>
 800256e:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <__aeabi_dsub+0x344>)
 8002570:	3601      	adds	r6, #1
 8002572:	429e      	cmp	r6, r3
 8002574:	d100      	bne.n	8002578 <__aeabi_dsub+0x1d8>
 8002576:	e14b      	b.n	8002810 <__aeabi_dsub+0x470>
 8002578:	2201      	movs	r2, #1
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <__aeabi_dsub+0x348>)
 800257c:	401c      	ands	r4, r3
 800257e:	087b      	lsrs	r3, r7, #1
 8002580:	4017      	ands	r7, r2
 8002582:	431f      	orrs	r7, r3
 8002584:	07e2      	lsls	r2, r4, #31
 8002586:	4317      	orrs	r7, r2
 8002588:	0864      	lsrs	r4, r4, #1
 800258a:	e78f      	b.n	80024ac <__aeabi_dsub+0x10c>
 800258c:	0008      	movs	r0, r1
 800258e:	4310      	orrs	r0, r2
 8002590:	d000      	beq.n	8002594 <__aeabi_dsub+0x1f4>
 8002592:	e724      	b.n	80023de <__aeabi_dsub+0x3e>
 8002594:	e721      	b.n	80023da <__aeabi_dsub+0x3a>
 8002596:	0023      	movs	r3, r4
 8002598:	433b      	orrs	r3, r7
 800259a:	d100      	bne.n	800259e <__aeabi_dsub+0x1fe>
 800259c:	e1b9      	b.n	8002912 <__aeabi_dsub+0x572>
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	0312      	lsls	r2, r2, #12
 80025a2:	4314      	orrs	r4, r2
 80025a4:	0324      	lsls	r4, r4, #12
 80025a6:	0b24      	lsrs	r4, r4, #12
 80025a8:	e79f      	b.n	80024ea <__aeabi_dsub+0x14a>
 80025aa:	002e      	movs	r6, r5
 80025ac:	e77e      	b.n	80024ac <__aeabi_dsub+0x10c>
 80025ae:	0008      	movs	r0, r1
 80025b0:	4310      	orrs	r0, r2
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x216>
 80025b4:	e0ca      	b.n	800274c <__aeabi_dsub+0x3ac>
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	4684      	mov	ip, r0
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x220>
 80025be:	e0e7      	b.n	8002790 <__aeabi_dsub+0x3f0>
 80025c0:	4452      	add	r2, sl
 80025c2:	4552      	cmp	r2, sl
 80025c4:	4180      	sbcs	r0, r0
 80025c6:	1864      	adds	r4, r4, r1
 80025c8:	4240      	negs	r0, r0
 80025ca:	1824      	adds	r4, r4, r0
 80025cc:	0017      	movs	r7, r2
 80025ce:	2601      	movs	r6, #1
 80025d0:	0223      	lsls	r3, r4, #8
 80025d2:	d507      	bpl.n	80025e4 <__aeabi_dsub+0x244>
 80025d4:	2602      	movs	r6, #2
 80025d6:	e7cf      	b.n	8002578 <__aeabi_dsub+0x1d8>
 80025d8:	4664      	mov	r4, ip
 80025da:	432c      	orrs	r4, r5
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x240>
 80025de:	e1b3      	b.n	8002948 <__aeabi_dsub+0x5a8>
 80025e0:	002c      	movs	r4, r5
 80025e2:	4667      	mov	r7, ip
 80025e4:	077b      	lsls	r3, r7, #29
 80025e6:	d000      	beq.n	80025ea <__aeabi_dsub+0x24a>
 80025e8:	e762      	b.n	80024b0 <__aeabi_dsub+0x110>
 80025ea:	0763      	lsls	r3, r4, #29
 80025ec:	08ff      	lsrs	r7, r7, #3
 80025ee:	431f      	orrs	r7, r3
 80025f0:	2501      	movs	r5, #1
 80025f2:	4643      	mov	r3, r8
 80025f4:	08e4      	lsrs	r4, r4, #3
 80025f6:	401d      	ands	r5, r3
 80025f8:	e793      	b.n	8002522 <__aeabi_dsub+0x182>
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	d178      	bne.n	80026f0 <__aeabi_dsub+0x350>
 80025fe:	1c75      	adds	r5, r6, #1
 8002600:	056d      	lsls	r5, r5, #21
 8002602:	0d6d      	lsrs	r5, r5, #21
 8002604:	2d01      	cmp	r5, #1
 8002606:	dc00      	bgt.n	800260a <__aeabi_dsub+0x26a>
 8002608:	e0f2      	b.n	80027f0 <__aeabi_dsub+0x450>
 800260a:	4650      	mov	r0, sl
 800260c:	1a80      	subs	r0, r0, r2
 800260e:	4582      	cmp	sl, r0
 8002610:	41bf      	sbcs	r7, r7
 8002612:	1a65      	subs	r5, r4, r1
 8002614:	427f      	negs	r7, r7
 8002616:	1bed      	subs	r5, r5, r7
 8002618:	4684      	mov	ip, r0
 800261a:	0228      	lsls	r0, r5, #8
 800261c:	d400      	bmi.n	8002620 <__aeabi_dsub+0x280>
 800261e:	e08c      	b.n	800273a <__aeabi_dsub+0x39a>
 8002620:	4650      	mov	r0, sl
 8002622:	1a17      	subs	r7, r2, r0
 8002624:	42ba      	cmp	r2, r7
 8002626:	4192      	sbcs	r2, r2
 8002628:	1b0c      	subs	r4, r1, r4
 800262a:	4255      	negs	r5, r2
 800262c:	1b65      	subs	r5, r4, r5
 800262e:	4698      	mov	r8, r3
 8002630:	e714      	b.n	800245c <__aeabi_dsub+0xbc>
 8002632:	2501      	movs	r5, #1
 8002634:	4643      	mov	r3, r8
 8002636:	2400      	movs	r4, #0
 8002638:	401d      	ands	r5, r3
 800263a:	2700      	movs	r7, #0
 800263c:	e755      	b.n	80024ea <__aeabi_dsub+0x14a>
 800263e:	4c2a      	ldr	r4, [pc, #168]	; (80026e8 <__aeabi_dsub+0x348>)
 8002640:	1af6      	subs	r6, r6, r3
 8002642:	402c      	ands	r4, r5
 8002644:	e732      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002646:	003d      	movs	r5, r7
 8002648:	3828      	subs	r0, #40	; 0x28
 800264a:	4085      	lsls	r5, r0
 800264c:	2700      	movs	r7, #0
 800264e:	e717      	b.n	8002480 <__aeabi_dsub+0xe0>
 8002650:	0038      	movs	r0, r7
 8002652:	f000 fb2d 	bl	8002cb0 <__clzsi2>
 8002656:	3020      	adds	r0, #32
 8002658:	e706      	b.n	8002468 <__aeabi_dsub+0xc8>
 800265a:	430a      	orrs	r2, r1
 800265c:	0017      	movs	r7, r2
 800265e:	2100      	movs	r1, #0
 8002660:	1e7a      	subs	r2, r7, #1
 8002662:	4197      	sbcs	r7, r2
 8002664:	e6ee      	b.n	8002444 <__aeabi_dsub+0xa4>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x2cc>
 800266a:	e0e5      	b.n	8002838 <__aeabi_dsub+0x498>
 800266c:	1c73      	adds	r3, r6, #1
 800266e:	469c      	mov	ip, r3
 8002670:	055b      	lsls	r3, r3, #21
 8002672:	0d5b      	lsrs	r3, r3, #21
 8002674:	2b01      	cmp	r3, #1
 8002676:	dc00      	bgt.n	800267a <__aeabi_dsub+0x2da>
 8002678:	e09f      	b.n	80027ba <__aeabi_dsub+0x41a>
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <__aeabi_dsub+0x344>)
 800267c:	459c      	cmp	ip, r3
 800267e:	d100      	bne.n	8002682 <__aeabi_dsub+0x2e2>
 8002680:	e0c5      	b.n	800280e <__aeabi_dsub+0x46e>
 8002682:	4452      	add	r2, sl
 8002684:	4552      	cmp	r2, sl
 8002686:	4180      	sbcs	r0, r0
 8002688:	1864      	adds	r4, r4, r1
 800268a:	4240      	negs	r0, r0
 800268c:	1824      	adds	r4, r4, r0
 800268e:	07e7      	lsls	r7, r4, #31
 8002690:	0852      	lsrs	r2, r2, #1
 8002692:	4317      	orrs	r7, r2
 8002694:	0864      	lsrs	r4, r4, #1
 8002696:	4666      	mov	r6, ip
 8002698:	e708      	b.n	80024ac <__aeabi_dsub+0x10c>
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <__aeabi_dsub+0x344>)
 800269c:	4285      	cmp	r5, r0
 800269e:	d100      	bne.n	80026a2 <__aeabi_dsub+0x302>
 80026a0:	e085      	b.n	80027ae <__aeabi_dsub+0x40e>
 80026a2:	001d      	movs	r5, r3
 80026a4:	e6bc      	b.n	8002420 <__aeabi_dsub+0x80>
 80026a6:	0029      	movs	r1, r5
 80026a8:	3e1f      	subs	r6, #31
 80026aa:	40f1      	lsrs	r1, r6
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x312>
 80026b0:	e07f      	b.n	80027b2 <__aeabi_dsub+0x412>
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	409d      	lsls	r5, r3
 80026b8:	432f      	orrs	r7, r5
 80026ba:	1e7d      	subs	r5, r7, #1
 80026bc:	41af      	sbcs	r7, r5
 80026be:	2400      	movs	r4, #0
 80026c0:	430f      	orrs	r7, r1
 80026c2:	2600      	movs	r6, #0
 80026c4:	e78e      	b.n	80025e4 <__aeabi_dsub+0x244>
 80026c6:	002b      	movs	r3, r5
 80026c8:	000f      	movs	r7, r1
 80026ca:	3b20      	subs	r3, #32
 80026cc:	40df      	lsrs	r7, r3
 80026ce:	2d20      	cmp	r5, #32
 80026d0:	d071      	beq.n	80027b6 <__aeabi_dsub+0x416>
 80026d2:	2340      	movs	r3, #64	; 0x40
 80026d4:	1b5d      	subs	r5, r3, r5
 80026d6:	40a9      	lsls	r1, r5
 80026d8:	430a      	orrs	r2, r1
 80026da:	1e51      	subs	r1, r2, #1
 80026dc:	418a      	sbcs	r2, r1
 80026de:	2100      	movs	r1, #0
 80026e0:	4317      	orrs	r7, r2
 80026e2:	e6af      	b.n	8002444 <__aeabi_dsub+0xa4>
 80026e4:	000007ff 	.word	0x000007ff
 80026e8:	ff7fffff 	.word	0xff7fffff
 80026ec:	800fffff 	.word	0x800fffff
 80026f0:	2e00      	cmp	r6, #0
 80026f2:	d03e      	beq.n	8002772 <__aeabi_dsub+0x3d2>
 80026f4:	4eb3      	ldr	r6, [pc, #716]	; (80029c4 <__aeabi_dsub+0x624>)
 80026f6:	45b4      	cmp	ip, r6
 80026f8:	d045      	beq.n	8002786 <__aeabi_dsub+0x3e6>
 80026fa:	2680      	movs	r6, #128	; 0x80
 80026fc:	0436      	lsls	r6, r6, #16
 80026fe:	426d      	negs	r5, r5
 8002700:	4334      	orrs	r4, r6
 8002702:	2d38      	cmp	r5, #56	; 0x38
 8002704:	dd00      	ble.n	8002708 <__aeabi_dsub+0x368>
 8002706:	e0a8      	b.n	800285a <__aeabi_dsub+0x4ba>
 8002708:	2d1f      	cmp	r5, #31
 800270a:	dd00      	ble.n	800270e <__aeabi_dsub+0x36e>
 800270c:	e11f      	b.n	800294e <__aeabi_dsub+0x5ae>
 800270e:	2620      	movs	r6, #32
 8002710:	0027      	movs	r7, r4
 8002712:	4650      	mov	r0, sl
 8002714:	1b76      	subs	r6, r6, r5
 8002716:	40b7      	lsls	r7, r6
 8002718:	40e8      	lsrs	r0, r5
 800271a:	4307      	orrs	r7, r0
 800271c:	4650      	mov	r0, sl
 800271e:	40b0      	lsls	r0, r6
 8002720:	1e46      	subs	r6, r0, #1
 8002722:	41b0      	sbcs	r0, r6
 8002724:	40ec      	lsrs	r4, r5
 8002726:	4338      	orrs	r0, r7
 8002728:	1a17      	subs	r7, r2, r0
 800272a:	42ba      	cmp	r2, r7
 800272c:	4192      	sbcs	r2, r2
 800272e:	1b0c      	subs	r4, r1, r4
 8002730:	4252      	negs	r2, r2
 8002732:	1aa4      	subs	r4, r4, r2
 8002734:	4666      	mov	r6, ip
 8002736:	4698      	mov	r8, r3
 8002738:	e68b      	b.n	8002452 <__aeabi_dsub+0xb2>
 800273a:	4664      	mov	r4, ip
 800273c:	4667      	mov	r7, ip
 800273e:	432c      	orrs	r4, r5
 8002740:	d000      	beq.n	8002744 <__aeabi_dsub+0x3a4>
 8002742:	e68b      	b.n	800245c <__aeabi_dsub+0xbc>
 8002744:	2500      	movs	r5, #0
 8002746:	2600      	movs	r6, #0
 8002748:	2700      	movs	r7, #0
 800274a:	e6ea      	b.n	8002522 <__aeabi_dsub+0x182>
 800274c:	001e      	movs	r6, r3
 800274e:	e6ad      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002750:	2b1f      	cmp	r3, #31
 8002752:	dc60      	bgt.n	8002816 <__aeabi_dsub+0x476>
 8002754:	2720      	movs	r7, #32
 8002756:	1af8      	subs	r0, r7, r3
 8002758:	000f      	movs	r7, r1
 800275a:	4684      	mov	ip, r0
 800275c:	4087      	lsls	r7, r0
 800275e:	0010      	movs	r0, r2
 8002760:	40d8      	lsrs	r0, r3
 8002762:	4307      	orrs	r7, r0
 8002764:	4660      	mov	r0, ip
 8002766:	4082      	lsls	r2, r0
 8002768:	1e50      	subs	r0, r2, #1
 800276a:	4182      	sbcs	r2, r0
 800276c:	40d9      	lsrs	r1, r3
 800276e:	4317      	orrs	r7, r2
 8002770:	e6f5      	b.n	800255e <__aeabi_dsub+0x1be>
 8002772:	0026      	movs	r6, r4
 8002774:	4650      	mov	r0, sl
 8002776:	4306      	orrs	r6, r0
 8002778:	d005      	beq.n	8002786 <__aeabi_dsub+0x3e6>
 800277a:	43ed      	mvns	r5, r5
 800277c:	2d00      	cmp	r5, #0
 800277e:	d0d3      	beq.n	8002728 <__aeabi_dsub+0x388>
 8002780:	4e90      	ldr	r6, [pc, #576]	; (80029c4 <__aeabi_dsub+0x624>)
 8002782:	45b4      	cmp	ip, r6
 8002784:	d1bd      	bne.n	8002702 <__aeabi_dsub+0x362>
 8002786:	000c      	movs	r4, r1
 8002788:	0017      	movs	r7, r2
 800278a:	4666      	mov	r6, ip
 800278c:	4698      	mov	r8, r3
 800278e:	e68d      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002790:	488c      	ldr	r0, [pc, #560]	; (80029c4 <__aeabi_dsub+0x624>)
 8002792:	4283      	cmp	r3, r0
 8002794:	d00b      	beq.n	80027ae <__aeabi_dsub+0x40e>
 8002796:	4663      	mov	r3, ip
 8002798:	e6d9      	b.n	800254e <__aeabi_dsub+0x1ae>
 800279a:	2d00      	cmp	r5, #0
 800279c:	d000      	beq.n	80027a0 <__aeabi_dsub+0x400>
 800279e:	e096      	b.n	80028ce <__aeabi_dsub+0x52e>
 80027a0:	0008      	movs	r0, r1
 80027a2:	4310      	orrs	r0, r2
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x408>
 80027a6:	e0e2      	b.n	800296e <__aeabi_dsub+0x5ce>
 80027a8:	000c      	movs	r4, r1
 80027aa:	0017      	movs	r7, r2
 80027ac:	4698      	mov	r8, r3
 80027ae:	4e85      	ldr	r6, [pc, #532]	; (80029c4 <__aeabi_dsub+0x624>)
 80027b0:	e67c      	b.n	80024ac <__aeabi_dsub+0x10c>
 80027b2:	2500      	movs	r5, #0
 80027b4:	e780      	b.n	80026b8 <__aeabi_dsub+0x318>
 80027b6:	2100      	movs	r1, #0
 80027b8:	e78e      	b.n	80026d8 <__aeabi_dsub+0x338>
 80027ba:	0023      	movs	r3, r4
 80027bc:	4650      	mov	r0, sl
 80027be:	4303      	orrs	r3, r0
 80027c0:	2e00      	cmp	r6, #0
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x426>
 80027c4:	e0a8      	b.n	8002918 <__aeabi_dsub+0x578>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x42c>
 80027ca:	e0de      	b.n	800298a <__aeabi_dsub+0x5ea>
 80027cc:	000b      	movs	r3, r1
 80027ce:	4313      	orrs	r3, r2
 80027d0:	d100      	bne.n	80027d4 <__aeabi_dsub+0x434>
 80027d2:	e66b      	b.n	80024ac <__aeabi_dsub+0x10c>
 80027d4:	4452      	add	r2, sl
 80027d6:	4552      	cmp	r2, sl
 80027d8:	4180      	sbcs	r0, r0
 80027da:	1864      	adds	r4, r4, r1
 80027dc:	4240      	negs	r0, r0
 80027de:	1824      	adds	r4, r4, r0
 80027e0:	0017      	movs	r7, r2
 80027e2:	0223      	lsls	r3, r4, #8
 80027e4:	d400      	bmi.n	80027e8 <__aeabi_dsub+0x448>
 80027e6:	e6fd      	b.n	80025e4 <__aeabi_dsub+0x244>
 80027e8:	4b77      	ldr	r3, [pc, #476]	; (80029c8 <__aeabi_dsub+0x628>)
 80027ea:	4666      	mov	r6, ip
 80027ec:	401c      	ands	r4, r3
 80027ee:	e65d      	b.n	80024ac <__aeabi_dsub+0x10c>
 80027f0:	0025      	movs	r5, r4
 80027f2:	4650      	mov	r0, sl
 80027f4:	4305      	orrs	r5, r0
 80027f6:	2e00      	cmp	r6, #0
 80027f8:	d1cf      	bne.n	800279a <__aeabi_dsub+0x3fa>
 80027fa:	2d00      	cmp	r5, #0
 80027fc:	d14f      	bne.n	800289e <__aeabi_dsub+0x4fe>
 80027fe:	000c      	movs	r4, r1
 8002800:	4314      	orrs	r4, r2
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x466>
 8002804:	e0a0      	b.n	8002948 <__aeabi_dsub+0x5a8>
 8002806:	000c      	movs	r4, r1
 8002808:	0017      	movs	r7, r2
 800280a:	4698      	mov	r8, r3
 800280c:	e64e      	b.n	80024ac <__aeabi_dsub+0x10c>
 800280e:	4666      	mov	r6, ip
 8002810:	2400      	movs	r4, #0
 8002812:	2700      	movs	r7, #0
 8002814:	e685      	b.n	8002522 <__aeabi_dsub+0x182>
 8002816:	001f      	movs	r7, r3
 8002818:	0008      	movs	r0, r1
 800281a:	3f20      	subs	r7, #32
 800281c:	40f8      	lsrs	r0, r7
 800281e:	0007      	movs	r7, r0
 8002820:	2b20      	cmp	r3, #32
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x486>
 8002824:	e08e      	b.n	8002944 <__aeabi_dsub+0x5a4>
 8002826:	2040      	movs	r0, #64	; 0x40
 8002828:	1ac3      	subs	r3, r0, r3
 800282a:	4099      	lsls	r1, r3
 800282c:	430a      	orrs	r2, r1
 800282e:	1e51      	subs	r1, r2, #1
 8002830:	418a      	sbcs	r2, r1
 8002832:	2100      	movs	r1, #0
 8002834:	4317      	orrs	r7, r2
 8002836:	e692      	b.n	800255e <__aeabi_dsub+0x1be>
 8002838:	2e00      	cmp	r6, #0
 800283a:	d114      	bne.n	8002866 <__aeabi_dsub+0x4c6>
 800283c:	0026      	movs	r6, r4
 800283e:	4650      	mov	r0, sl
 8002840:	4306      	orrs	r6, r0
 8002842:	d062      	beq.n	800290a <__aeabi_dsub+0x56a>
 8002844:	43db      	mvns	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d15c      	bne.n	8002904 <__aeabi_dsub+0x564>
 800284a:	1887      	adds	r7, r0, r2
 800284c:	4297      	cmp	r7, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	1864      	adds	r4, r4, r1
 8002852:	4252      	negs	r2, r2
 8002854:	18a4      	adds	r4, r4, r2
 8002856:	4666      	mov	r6, ip
 8002858:	e687      	b.n	800256a <__aeabi_dsub+0x1ca>
 800285a:	4650      	mov	r0, sl
 800285c:	4320      	orrs	r0, r4
 800285e:	1e44      	subs	r4, r0, #1
 8002860:	41a0      	sbcs	r0, r4
 8002862:	2400      	movs	r4, #0
 8002864:	e760      	b.n	8002728 <__aeabi_dsub+0x388>
 8002866:	4e57      	ldr	r6, [pc, #348]	; (80029c4 <__aeabi_dsub+0x624>)
 8002868:	45b4      	cmp	ip, r6
 800286a:	d04e      	beq.n	800290a <__aeabi_dsub+0x56a>
 800286c:	2680      	movs	r6, #128	; 0x80
 800286e:	0436      	lsls	r6, r6, #16
 8002870:	425b      	negs	r3, r3
 8002872:	4334      	orrs	r4, r6
 8002874:	2b38      	cmp	r3, #56	; 0x38
 8002876:	dd00      	ble.n	800287a <__aeabi_dsub+0x4da>
 8002878:	e07f      	b.n	800297a <__aeabi_dsub+0x5da>
 800287a:	2b1f      	cmp	r3, #31
 800287c:	dd00      	ble.n	8002880 <__aeabi_dsub+0x4e0>
 800287e:	e08b      	b.n	8002998 <__aeabi_dsub+0x5f8>
 8002880:	2620      	movs	r6, #32
 8002882:	0027      	movs	r7, r4
 8002884:	4650      	mov	r0, sl
 8002886:	1af6      	subs	r6, r6, r3
 8002888:	40b7      	lsls	r7, r6
 800288a:	40d8      	lsrs	r0, r3
 800288c:	4307      	orrs	r7, r0
 800288e:	4650      	mov	r0, sl
 8002890:	40b0      	lsls	r0, r6
 8002892:	1e46      	subs	r6, r0, #1
 8002894:	41b0      	sbcs	r0, r6
 8002896:	4307      	orrs	r7, r0
 8002898:	40dc      	lsrs	r4, r3
 800289a:	18bf      	adds	r7, r7, r2
 800289c:	e7d6      	b.n	800284c <__aeabi_dsub+0x4ac>
 800289e:	000d      	movs	r5, r1
 80028a0:	4315      	orrs	r5, r2
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x506>
 80028a4:	e602      	b.n	80024ac <__aeabi_dsub+0x10c>
 80028a6:	4650      	mov	r0, sl
 80028a8:	1a80      	subs	r0, r0, r2
 80028aa:	4582      	cmp	sl, r0
 80028ac:	41bf      	sbcs	r7, r7
 80028ae:	1a65      	subs	r5, r4, r1
 80028b0:	427f      	negs	r7, r7
 80028b2:	1bed      	subs	r5, r5, r7
 80028b4:	4684      	mov	ip, r0
 80028b6:	0228      	lsls	r0, r5, #8
 80028b8:	d400      	bmi.n	80028bc <__aeabi_dsub+0x51c>
 80028ba:	e68d      	b.n	80025d8 <__aeabi_dsub+0x238>
 80028bc:	4650      	mov	r0, sl
 80028be:	1a17      	subs	r7, r2, r0
 80028c0:	42ba      	cmp	r2, r7
 80028c2:	4192      	sbcs	r2, r2
 80028c4:	1b0c      	subs	r4, r1, r4
 80028c6:	4252      	negs	r2, r2
 80028c8:	1aa4      	subs	r4, r4, r2
 80028ca:	4698      	mov	r8, r3
 80028cc:	e5ee      	b.n	80024ac <__aeabi_dsub+0x10c>
 80028ce:	000d      	movs	r5, r1
 80028d0:	4315      	orrs	r5, r2
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dsub+0x536>
 80028d4:	e76b      	b.n	80027ae <__aeabi_dsub+0x40e>
 80028d6:	4650      	mov	r0, sl
 80028d8:	0767      	lsls	r7, r4, #29
 80028da:	08c0      	lsrs	r0, r0, #3
 80028dc:	4307      	orrs	r7, r0
 80028de:	2080      	movs	r0, #128	; 0x80
 80028e0:	08e4      	lsrs	r4, r4, #3
 80028e2:	0300      	lsls	r0, r0, #12
 80028e4:	4204      	tst	r4, r0
 80028e6:	d007      	beq.n	80028f8 <__aeabi_dsub+0x558>
 80028e8:	08cd      	lsrs	r5, r1, #3
 80028ea:	4205      	tst	r5, r0
 80028ec:	d104      	bne.n	80028f8 <__aeabi_dsub+0x558>
 80028ee:	002c      	movs	r4, r5
 80028f0:	4698      	mov	r8, r3
 80028f2:	08d7      	lsrs	r7, r2, #3
 80028f4:	0749      	lsls	r1, r1, #29
 80028f6:	430f      	orrs	r7, r1
 80028f8:	0f7b      	lsrs	r3, r7, #29
 80028fa:	00e4      	lsls	r4, r4, #3
 80028fc:	431c      	orrs	r4, r3
 80028fe:	00ff      	lsls	r7, r7, #3
 8002900:	4e30      	ldr	r6, [pc, #192]	; (80029c4 <__aeabi_dsub+0x624>)
 8002902:	e5d3      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002904:	4e2f      	ldr	r6, [pc, #188]	; (80029c4 <__aeabi_dsub+0x624>)
 8002906:	45b4      	cmp	ip, r6
 8002908:	d1b4      	bne.n	8002874 <__aeabi_dsub+0x4d4>
 800290a:	000c      	movs	r4, r1
 800290c:	0017      	movs	r7, r2
 800290e:	4666      	mov	r6, ip
 8002910:	e5cc      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002912:	2700      	movs	r7, #0
 8002914:	2400      	movs	r4, #0
 8002916:	e5e8      	b.n	80024ea <__aeabi_dsub+0x14a>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d039      	beq.n	8002990 <__aeabi_dsub+0x5f0>
 800291c:	000b      	movs	r3, r1
 800291e:	4313      	orrs	r3, r2
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x584>
 8002922:	e744      	b.n	80027ae <__aeabi_dsub+0x40e>
 8002924:	08c0      	lsrs	r0, r0, #3
 8002926:	0767      	lsls	r7, r4, #29
 8002928:	4307      	orrs	r7, r0
 800292a:	2080      	movs	r0, #128	; 0x80
 800292c:	08e4      	lsrs	r4, r4, #3
 800292e:	0300      	lsls	r0, r0, #12
 8002930:	4204      	tst	r4, r0
 8002932:	d0e1      	beq.n	80028f8 <__aeabi_dsub+0x558>
 8002934:	08cb      	lsrs	r3, r1, #3
 8002936:	4203      	tst	r3, r0
 8002938:	d1de      	bne.n	80028f8 <__aeabi_dsub+0x558>
 800293a:	08d7      	lsrs	r7, r2, #3
 800293c:	0749      	lsls	r1, r1, #29
 800293e:	430f      	orrs	r7, r1
 8002940:	001c      	movs	r4, r3
 8002942:	e7d9      	b.n	80028f8 <__aeabi_dsub+0x558>
 8002944:	2100      	movs	r1, #0
 8002946:	e771      	b.n	800282c <__aeabi_dsub+0x48c>
 8002948:	2500      	movs	r5, #0
 800294a:	2700      	movs	r7, #0
 800294c:	e5e9      	b.n	8002522 <__aeabi_dsub+0x182>
 800294e:	002e      	movs	r6, r5
 8002950:	0027      	movs	r7, r4
 8002952:	3e20      	subs	r6, #32
 8002954:	40f7      	lsrs	r7, r6
 8002956:	2d20      	cmp	r5, #32
 8002958:	d02f      	beq.n	80029ba <__aeabi_dsub+0x61a>
 800295a:	2640      	movs	r6, #64	; 0x40
 800295c:	1b75      	subs	r5, r6, r5
 800295e:	40ac      	lsls	r4, r5
 8002960:	4650      	mov	r0, sl
 8002962:	4320      	orrs	r0, r4
 8002964:	1e44      	subs	r4, r0, #1
 8002966:	41a0      	sbcs	r0, r4
 8002968:	2400      	movs	r4, #0
 800296a:	4338      	orrs	r0, r7
 800296c:	e6dc      	b.n	8002728 <__aeabi_dsub+0x388>
 800296e:	2480      	movs	r4, #128	; 0x80
 8002970:	2500      	movs	r5, #0
 8002972:	0324      	lsls	r4, r4, #12
 8002974:	4e13      	ldr	r6, [pc, #76]	; (80029c4 <__aeabi_dsub+0x624>)
 8002976:	2700      	movs	r7, #0
 8002978:	e5d3      	b.n	8002522 <__aeabi_dsub+0x182>
 800297a:	4650      	mov	r0, sl
 800297c:	4320      	orrs	r0, r4
 800297e:	0007      	movs	r7, r0
 8002980:	1e78      	subs	r0, r7, #1
 8002982:	4187      	sbcs	r7, r0
 8002984:	2400      	movs	r4, #0
 8002986:	18bf      	adds	r7, r7, r2
 8002988:	e760      	b.n	800284c <__aeabi_dsub+0x4ac>
 800298a:	000c      	movs	r4, r1
 800298c:	0017      	movs	r7, r2
 800298e:	e58d      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002990:	000c      	movs	r4, r1
 8002992:	0017      	movs	r7, r2
 8002994:	4e0b      	ldr	r6, [pc, #44]	; (80029c4 <__aeabi_dsub+0x624>)
 8002996:	e589      	b.n	80024ac <__aeabi_dsub+0x10c>
 8002998:	001e      	movs	r6, r3
 800299a:	0027      	movs	r7, r4
 800299c:	3e20      	subs	r6, #32
 800299e:	40f7      	lsrs	r7, r6
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d00c      	beq.n	80029be <__aeabi_dsub+0x61e>
 80029a4:	2640      	movs	r6, #64	; 0x40
 80029a6:	1af3      	subs	r3, r6, r3
 80029a8:	409c      	lsls	r4, r3
 80029aa:	4650      	mov	r0, sl
 80029ac:	4320      	orrs	r0, r4
 80029ae:	1e44      	subs	r4, r0, #1
 80029b0:	41a0      	sbcs	r0, r4
 80029b2:	4307      	orrs	r7, r0
 80029b4:	2400      	movs	r4, #0
 80029b6:	18bf      	adds	r7, r7, r2
 80029b8:	e748      	b.n	800284c <__aeabi_dsub+0x4ac>
 80029ba:	2400      	movs	r4, #0
 80029bc:	e7d0      	b.n	8002960 <__aeabi_dsub+0x5c0>
 80029be:	2400      	movs	r4, #0
 80029c0:	e7f3      	b.n	80029aa <__aeabi_dsub+0x60a>
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	000007ff 	.word	0x000007ff
 80029c8:	ff7fffff 	.word	0xff7fffff

080029cc <__aeabi_dcmpun>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4e0e      	ldr	r6, [pc, #56]	; (8002a08 <__aeabi_dcmpun+0x3c>)
 80029d0:	030d      	lsls	r5, r1, #12
 80029d2:	031c      	lsls	r4, r3, #12
 80029d4:	0049      	lsls	r1, r1, #1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	0b2d      	lsrs	r5, r5, #12
 80029da:	0d49      	lsrs	r1, r1, #21
 80029dc:	0b24      	lsrs	r4, r4, #12
 80029de:	0d5b      	lsrs	r3, r3, #21
 80029e0:	42b1      	cmp	r1, r6
 80029e2:	d004      	beq.n	80029ee <__aeabi_dcmpun+0x22>
 80029e4:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__aeabi_dcmpun+0x3c>)
 80029e6:	2000      	movs	r0, #0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d008      	beq.n	80029fe <__aeabi_dcmpun+0x32>
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	4305      	orrs	r5, r0
 80029f0:	2001      	movs	r0, #1
 80029f2:	2d00      	cmp	r5, #0
 80029f4:	d1fa      	bne.n	80029ec <__aeabi_dcmpun+0x20>
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <__aeabi_dcmpun+0x3c>)
 80029f8:	2000      	movs	r0, #0
 80029fa:	428b      	cmp	r3, r1
 80029fc:	d1f6      	bne.n	80029ec <__aeabi_dcmpun+0x20>
 80029fe:	4314      	orrs	r4, r2
 8002a00:	0020      	movs	r0, r4
 8002a02:	1e44      	subs	r4, r0, #1
 8002a04:	41a0      	sbcs	r0, r4
 8002a06:	e7f1      	b.n	80029ec <__aeabi_dcmpun+0x20>
 8002a08:	000007ff 	.word	0x000007ff

08002a0c <__aeabi_d2iz>:
 8002a0c:	b530      	push	{r4, r5, lr}
 8002a0e:	4d13      	ldr	r5, [pc, #76]	; (8002a5c <__aeabi_d2iz+0x50>)
 8002a10:	030a      	lsls	r2, r1, #12
 8002a12:	004b      	lsls	r3, r1, #1
 8002a14:	0b12      	lsrs	r2, r2, #12
 8002a16:	0d5b      	lsrs	r3, r3, #21
 8002a18:	0fc9      	lsrs	r1, r1, #31
 8002a1a:	2400      	movs	r4, #0
 8002a1c:	42ab      	cmp	r3, r5
 8002a1e:	dd10      	ble.n	8002a42 <__aeabi_d2iz+0x36>
 8002a20:	4c0f      	ldr	r4, [pc, #60]	; (8002a60 <__aeabi_d2iz+0x54>)
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	dc0f      	bgt.n	8002a46 <__aeabi_d2iz+0x3a>
 8002a26:	2480      	movs	r4, #128	; 0x80
 8002a28:	4d0e      	ldr	r5, [pc, #56]	; (8002a64 <__aeabi_d2iz+0x58>)
 8002a2a:	0364      	lsls	r4, r4, #13
 8002a2c:	4322      	orrs	r2, r4
 8002a2e:	1aed      	subs	r5, r5, r3
 8002a30:	2d1f      	cmp	r5, #31
 8002a32:	dd0b      	ble.n	8002a4c <__aeabi_d2iz+0x40>
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <__aeabi_d2iz+0x5c>)
 8002a36:	1ac3      	subs	r3, r0, r3
 8002a38:	40da      	lsrs	r2, r3
 8002a3a:	4254      	negs	r4, r2
 8002a3c:	2900      	cmp	r1, #0
 8002a3e:	d100      	bne.n	8002a42 <__aeabi_d2iz+0x36>
 8002a40:	0014      	movs	r4, r2
 8002a42:	0020      	movs	r0, r4
 8002a44:	bd30      	pop	{r4, r5, pc}
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <__aeabi_d2iz+0x60>)
 8002a48:	18cc      	adds	r4, r1, r3
 8002a4a:	e7fa      	b.n	8002a42 <__aeabi_d2iz+0x36>
 8002a4c:	4c08      	ldr	r4, [pc, #32]	; (8002a70 <__aeabi_d2iz+0x64>)
 8002a4e:	40e8      	lsrs	r0, r5
 8002a50:	46a4      	mov	ip, r4
 8002a52:	4463      	add	r3, ip
 8002a54:	409a      	lsls	r2, r3
 8002a56:	4302      	orrs	r2, r0
 8002a58:	e7ef      	b.n	8002a3a <__aeabi_d2iz+0x2e>
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	000003fe 	.word	0x000003fe
 8002a60:	0000041d 	.word	0x0000041d
 8002a64:	00000433 	.word	0x00000433
 8002a68:	00000413 	.word	0x00000413
 8002a6c:	7fffffff 	.word	0x7fffffff
 8002a70:	fffffbed 	.word	0xfffffbed

08002a74 <__aeabi_i2d>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d030      	beq.n	8002adc <__aeabi_i2d+0x68>
 8002a7a:	17c3      	asrs	r3, r0, #31
 8002a7c:	18c4      	adds	r4, r0, r3
 8002a7e:	405c      	eors	r4, r3
 8002a80:	0fc5      	lsrs	r5, r0, #31
 8002a82:	0020      	movs	r0, r4
 8002a84:	f000 f914 	bl	8002cb0 <__clzsi2>
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <__aeabi_i2d+0x74>)
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <__aeabi_i2d+0x78>)
 8002a8c:	1a1b      	subs	r3, r3, r0
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	2a1f      	cmp	r2, #31
 8002a92:	dd18      	ble.n	8002ac6 <__aeabi_i2d+0x52>
 8002a94:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <__aeabi_i2d+0x7c>)
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	4094      	lsls	r4, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	0324      	lsls	r4, r4, #12
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	0b24      	lsrs	r4, r4, #12
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	0324      	lsls	r4, r4, #12
 8002aaa:	0d0a      	lsrs	r2, r1, #20
 8002aac:	0b24      	lsrs	r4, r4, #12
 8002aae:	0512      	lsls	r2, r2, #20
 8002ab0:	4322      	orrs	r2, r4
 8002ab2:	4c10      	ldr	r4, [pc, #64]	; (8002af4 <__aeabi_i2d+0x80>)
 8002ab4:	051b      	lsls	r3, r3, #20
 8002ab6:	4022      	ands	r2, r4
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	07ed      	lsls	r5, r5, #31
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	432b      	orrs	r3, r5
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	bd70      	pop	{r4, r5, r6, pc}
 8002ac6:	0021      	movs	r1, r4
 8002ac8:	4091      	lsls	r1, r2
 8002aca:	000a      	movs	r2, r1
 8002acc:	210b      	movs	r1, #11
 8002ace:	1a08      	subs	r0, r1, r0
 8002ad0:	40c4      	lsrs	r4, r0
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	0324      	lsls	r4, r4, #12
 8002ad6:	0b24      	lsrs	r4, r4, #12
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	e7e3      	b.n	8002aa4 <__aeabi_i2d+0x30>
 8002adc:	2500      	movs	r5, #0
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	e7de      	b.n	8002aa4 <__aeabi_i2d+0x30>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	0000041e 	.word	0x0000041e
 8002aec:	00000433 	.word	0x00000433
 8002af0:	00000413 	.word	0x00000413
 8002af4:	800fffff 	.word	0x800fffff

08002af8 <__aeabi_f2d>:
 8002af8:	0041      	lsls	r1, r0, #1
 8002afa:	0e09      	lsrs	r1, r1, #24
 8002afc:	1c4b      	adds	r3, r1, #1
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	0246      	lsls	r6, r0, #9
 8002b04:	0a75      	lsrs	r5, r6, #9
 8002b06:	0fc4      	lsrs	r4, r0, #31
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	dd14      	ble.n	8002b36 <__aeabi_f2d+0x3e>
 8002b0c:	23e0      	movs	r3, #224	; 0xe0
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	076d      	lsls	r5, r5, #29
 8002b12:	0b36      	lsrs	r6, r6, #12
 8002b14:	18cb      	adds	r3, r1, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	0d0a      	lsrs	r2, r1, #20
 8002b1a:	0028      	movs	r0, r5
 8002b1c:	0512      	lsls	r2, r2, #20
 8002b1e:	4d1c      	ldr	r5, [pc, #112]	; (8002b90 <__aeabi_f2d+0x98>)
 8002b20:	4332      	orrs	r2, r6
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	402a      	ands	r2, r5
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	07e4      	lsls	r4, r4, #31
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	4323      	orrs	r3, r4
 8002b32:	0019      	movs	r1, r3
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	2900      	cmp	r1, #0
 8002b38:	d114      	bne.n	8002b64 <__aeabi_f2d+0x6c>
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	d01e      	beq.n	8002b7c <__aeabi_f2d+0x84>
 8002b3e:	0028      	movs	r0, r5
 8002b40:	f000 f8b6 	bl	8002cb0 <__clzsi2>
 8002b44:	280a      	cmp	r0, #10
 8002b46:	dc1c      	bgt.n	8002b82 <__aeabi_f2d+0x8a>
 8002b48:	230b      	movs	r3, #11
 8002b4a:	002a      	movs	r2, r5
 8002b4c:	1a1b      	subs	r3, r3, r0
 8002b4e:	40da      	lsrs	r2, r3
 8002b50:	0003      	movs	r3, r0
 8002b52:	3315      	adds	r3, #21
 8002b54:	409d      	lsls	r5, r3
 8002b56:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <__aeabi_f2d+0x9c>)
 8002b58:	0312      	lsls	r2, r2, #12
 8002b5a:	1a1b      	subs	r3, r3, r0
 8002b5c:	055b      	lsls	r3, r3, #21
 8002b5e:	0b16      	lsrs	r6, r2, #12
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	e7d8      	b.n	8002b16 <__aeabi_f2d+0x1e>
 8002b64:	2d00      	cmp	r5, #0
 8002b66:	d006      	beq.n	8002b76 <__aeabi_f2d+0x7e>
 8002b68:	0b32      	lsrs	r2, r6, #12
 8002b6a:	2680      	movs	r6, #128	; 0x80
 8002b6c:	0336      	lsls	r6, r6, #12
 8002b6e:	076d      	lsls	r5, r5, #29
 8002b70:	4316      	orrs	r6, r2
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <__aeabi_f2d+0xa0>)
 8002b74:	e7cf      	b.n	8002b16 <__aeabi_f2d+0x1e>
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <__aeabi_f2d+0xa0>)
 8002b78:	2600      	movs	r6, #0
 8002b7a:	e7cc      	b.n	8002b16 <__aeabi_f2d+0x1e>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2600      	movs	r6, #0
 8002b80:	e7c9      	b.n	8002b16 <__aeabi_f2d+0x1e>
 8002b82:	0003      	movs	r3, r0
 8002b84:	002a      	movs	r2, r5
 8002b86:	3b0b      	subs	r3, #11
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	2500      	movs	r5, #0
 8002b8c:	e7e3      	b.n	8002b56 <__aeabi_f2d+0x5e>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	800fffff 	.word	0x800fffff
 8002b94:	00000389 	.word	0x00000389
 8002b98:	000007ff 	.word	0x000007ff

08002b9c <__aeabi_d2f>:
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	004c      	lsls	r4, r1, #1
 8002ba0:	0d64      	lsrs	r4, r4, #21
 8002ba2:	030b      	lsls	r3, r1, #12
 8002ba4:	1c62      	adds	r2, r4, #1
 8002ba6:	0f45      	lsrs	r5, r0, #29
 8002ba8:	0a5b      	lsrs	r3, r3, #9
 8002baa:	0552      	lsls	r2, r2, #21
 8002bac:	432b      	orrs	r3, r5
 8002bae:	0fc9      	lsrs	r1, r1, #31
 8002bb0:	00c5      	lsls	r5, r0, #3
 8002bb2:	0d52      	lsrs	r2, r2, #21
 8002bb4:	2a01      	cmp	r2, #1
 8002bb6:	dd28      	ble.n	8002c0a <__aeabi_d2f+0x6e>
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <__aeabi_d2f+0x108>)
 8002bba:	18a6      	adds	r6, r4, r2
 8002bbc:	2efe      	cmp	r6, #254	; 0xfe
 8002bbe:	dc1b      	bgt.n	8002bf8 <__aeabi_d2f+0x5c>
 8002bc0:	2e00      	cmp	r6, #0
 8002bc2:	dd3e      	ble.n	8002c42 <__aeabi_d2f+0xa6>
 8002bc4:	0180      	lsls	r0, r0, #6
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	1e50      	subs	r0, r2, #1
 8002bca:	4182      	sbcs	r2, r0
 8002bcc:	0f6d      	lsrs	r5, r5, #29
 8002bce:	432a      	orrs	r2, r5
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	075a      	lsls	r2, r3, #29
 8002bd6:	d004      	beq.n	8002be2 <__aeabi_d2f+0x46>
 8002bd8:	220f      	movs	r2, #15
 8002bda:	401a      	ands	r2, r3
 8002bdc:	2a04      	cmp	r2, #4
 8002bde:	d000      	beq.n	8002be2 <__aeabi_d2f+0x46>
 8002be0:	3304      	adds	r3, #4
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	04d2      	lsls	r2, r2, #19
 8002be6:	401a      	ands	r2, r3
 8002be8:	d05a      	beq.n	8002ca0 <__aeabi_d2f+0x104>
 8002bea:	3601      	adds	r6, #1
 8002bec:	2eff      	cmp	r6, #255	; 0xff
 8002bee:	d003      	beq.n	8002bf8 <__aeabi_d2f+0x5c>
 8002bf0:	019b      	lsls	r3, r3, #6
 8002bf2:	0a5b      	lsrs	r3, r3, #9
 8002bf4:	b2f4      	uxtb	r4, r6
 8002bf6:	e001      	b.n	8002bfc <__aeabi_d2f+0x60>
 8002bf8:	24ff      	movs	r4, #255	; 0xff
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	0258      	lsls	r0, r3, #9
 8002bfe:	05e4      	lsls	r4, r4, #23
 8002c00:	0a40      	lsrs	r0, r0, #9
 8002c02:	07c9      	lsls	r1, r1, #31
 8002c04:	4320      	orrs	r0, r4
 8002c06:	4308      	orrs	r0, r1
 8002c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c0a:	2c00      	cmp	r4, #0
 8002c0c:	d007      	beq.n	8002c1e <__aeabi_d2f+0x82>
 8002c0e:	431d      	orrs	r5, r3
 8002c10:	d0f2      	beq.n	8002bf8 <__aeabi_d2f+0x5c>
 8002c12:	2080      	movs	r0, #128	; 0x80
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	0480      	lsls	r0, r0, #18
 8002c18:	4303      	orrs	r3, r0
 8002c1a:	26ff      	movs	r6, #255	; 0xff
 8002c1c:	e7da      	b.n	8002bd4 <__aeabi_d2f+0x38>
 8002c1e:	432b      	orrs	r3, r5
 8002c20:	d003      	beq.n	8002c2a <__aeabi_d2f+0x8e>
 8002c22:	2305      	movs	r3, #5
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	2cff      	cmp	r4, #255	; 0xff
 8002c28:	d003      	beq.n	8002c32 <__aeabi_d2f+0x96>
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	0a5b      	lsrs	r3, r3, #9
 8002c2e:	b2e4      	uxtb	r4, r4
 8002c30:	e7e4      	b.n	8002bfc <__aeabi_d2f+0x60>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d032      	beq.n	8002c9c <__aeabi_d2f+0x100>
 8002c36:	2080      	movs	r0, #128	; 0x80
 8002c38:	03c0      	lsls	r0, r0, #15
 8002c3a:	4303      	orrs	r3, r0
 8002c3c:	025b      	lsls	r3, r3, #9
 8002c3e:	0a5b      	lsrs	r3, r3, #9
 8002c40:	e7dc      	b.n	8002bfc <__aeabi_d2f+0x60>
 8002c42:	0032      	movs	r2, r6
 8002c44:	3217      	adds	r2, #23
 8002c46:	db14      	blt.n	8002c72 <__aeabi_d2f+0xd6>
 8002c48:	2280      	movs	r2, #128	; 0x80
 8002c4a:	271e      	movs	r7, #30
 8002c4c:	0412      	lsls	r2, r2, #16
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	1bbf      	subs	r7, r7, r6
 8002c52:	2f1f      	cmp	r7, #31
 8002c54:	dc0f      	bgt.n	8002c76 <__aeabi_d2f+0xda>
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <__aeabi_d2f+0x10c>)
 8002c58:	4694      	mov	ip, r2
 8002c5a:	4464      	add	r4, ip
 8002c5c:	002a      	movs	r2, r5
 8002c5e:	40a5      	lsls	r5, r4
 8002c60:	002e      	movs	r6, r5
 8002c62:	40a3      	lsls	r3, r4
 8002c64:	1e75      	subs	r5, r6, #1
 8002c66:	41ae      	sbcs	r6, r5
 8002c68:	40fa      	lsrs	r2, r7
 8002c6a:	4333      	orrs	r3, r6
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	2600      	movs	r6, #0
 8002c70:	e7b0      	b.n	8002bd4 <__aeabi_d2f+0x38>
 8002c72:	2400      	movs	r4, #0
 8002c74:	e7d5      	b.n	8002c22 <__aeabi_d2f+0x86>
 8002c76:	2202      	movs	r2, #2
 8002c78:	4252      	negs	r2, r2
 8002c7a:	1b96      	subs	r6, r2, r6
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	40f2      	lsrs	r2, r6
 8002c80:	2f20      	cmp	r7, #32
 8002c82:	d009      	beq.n	8002c98 <__aeabi_d2f+0xfc>
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <__aeabi_d2f+0x110>)
 8002c86:	4684      	mov	ip, r0
 8002c88:	4464      	add	r4, ip
 8002c8a:	40a3      	lsls	r3, r4
 8002c8c:	432b      	orrs	r3, r5
 8002c8e:	1e5d      	subs	r5, r3, #1
 8002c90:	41ab      	sbcs	r3, r5
 8002c92:	2600      	movs	r6, #0
 8002c94:	4313      	orrs	r3, r2
 8002c96:	e79d      	b.n	8002bd4 <__aeabi_d2f+0x38>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e7f7      	b.n	8002c8c <__aeabi_d2f+0xf0>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e7ad      	b.n	8002bfc <__aeabi_d2f+0x60>
 8002ca0:	0034      	movs	r4, r6
 8002ca2:	e7bf      	b.n	8002c24 <__aeabi_d2f+0x88>
 8002ca4:	fffffc80 	.word	0xfffffc80
 8002ca8:	fffffc82 	.word	0xfffffc82
 8002cac:	fffffca2 	.word	0xfffffca2

08002cb0 <__clzsi2>:
 8002cb0:	211c      	movs	r1, #28
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	4298      	cmp	r0, r3
 8002cb8:	d301      	bcc.n	8002cbe <__clzsi2+0xe>
 8002cba:	0c00      	lsrs	r0, r0, #16
 8002cbc:	3910      	subs	r1, #16
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	4298      	cmp	r0, r3
 8002cc2:	d301      	bcc.n	8002cc8 <__clzsi2+0x18>
 8002cc4:	0a00      	lsrs	r0, r0, #8
 8002cc6:	3908      	subs	r1, #8
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	4298      	cmp	r0, r3
 8002ccc:	d301      	bcc.n	8002cd2 <__clzsi2+0x22>
 8002cce:	0900      	lsrs	r0, r0, #4
 8002cd0:	3904      	subs	r1, #4
 8002cd2:	a202      	add	r2, pc, #8	; (adr r2, 8002cdc <__clzsi2+0x2c>)
 8002cd4:	5c10      	ldrb	r0, [r2, r0]
 8002cd6:	1840      	adds	r0, r0, r1
 8002cd8:	4770      	bx	lr
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	02020304 	.word	0x02020304
 8002ce0:	01010101 	.word	0x01010101
	...

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf0:	20fa      	movs	r0, #250	; 0xfa
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_InitTick+0x3c>)
 8002cf4:	0080      	lsls	r0, r0, #2
 8002cf6:	7819      	ldrb	r1, [r3, #0]
 8002cf8:	f7fd fa2a 	bl	8000150 <__udivsi3>
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_InitTick+0x40>)
 8002cfe:	0001      	movs	r1, r0
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	f7fd fa25 	bl	8000150 <__udivsi3>
 8002d06:	f000 f885 	bl	8002e14 <HAL_SYSTICK_Config>
 8002d0a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d0e:	2c00      	cmp	r4, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	2d03      	cmp	r5, #3
 8002d14:	d807      	bhi.n	8002d26 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d16:	3802      	subs	r0, #2
 8002d18:	0022      	movs	r2, r4
 8002d1a:	0029      	movs	r1, r5
 8002d1c:	f000 f83e 	bl	8002d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	0020      	movs	r0, r4
 8002d22:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_InitTick+0x44>)
 8002d24:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	2000001c 	.word	0x2000001c
 8002d30:	20000004 	.word	0x20000004

08002d34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d34:	2310      	movs	r3, #16
 8002d36:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_Init+0x1c>)
{
 8002d38:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d42:	f7ff ffd3 	bl	8002cec <HAL_InitTick>
  HAL_MspInit();
 8002d46:	f008 f80d 	bl	800ad64 <HAL_MspInit>
}
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40022000 	.word	0x40022000

08002d54 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HAL_IncTick+0x10>)
 8002d56:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_IncTick+0x14>)
 8002d58:	6811      	ldr	r1, [r2, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	185b      	adds	r3, r3, r1
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	4770      	bx	lr
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	2000039c 	.word	0x2000039c
 8002d68:	20000000 	.word	0x20000000

08002d6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <HAL_GetTick+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
}
 8002d70:	4770      	bx	lr
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	2000039c 	.word	0x2000039c

08002d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff fff6 	bl	8002d6c <HAL_GetTick>
 8002d80:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	1c63      	adds	r3, r4, #1
 8002d84:	d002      	beq.n	8002d8c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_Delay+0x20>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	1b40      	subs	r0, r0, r5
 8002d92:	4284      	cmp	r4, r0
 8002d94:	d8fa      	bhi.n	8002d8c <HAL_Delay+0x14>
  {
  }
}
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002da0:	2800      	cmp	r0, #0
 8002da2:	db12      	blt.n	8002dca <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002da4:	0883      	lsrs	r3, r0, #2
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <HAL_NVIC_SetPriority+0x58>)
 8002da8:	2403      	movs	r4, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	189b      	adds	r3, r3, r2
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	4020      	ands	r0, r4
 8002db2:	40a0      	lsls	r0, r4
 8002db4:	0014      	movs	r4, r2
 8002db6:	25c0      	movs	r5, #192	; 0xc0
 8002db8:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dba:	4011      	ands	r1, r2
 8002dbc:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbe:	00ad      	lsls	r5, r5, #2
 8002dc0:	595e      	ldr	r6, [r3, r5]
 8002dc2:	43a6      	bics	r6, r4
 8002dc4:	4331      	orrs	r1, r6
 8002dc6:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dca:	2403      	movs	r4, #3
 8002dcc:	230f      	movs	r3, #15
 8002dce:	b2c0      	uxtb	r0, r0
 8002dd0:	4003      	ands	r3, r0
 8002dd2:	4020      	ands	r0, r4
 8002dd4:	40a0      	lsls	r0, r4
 8002dd6:	34fc      	adds	r4, #252	; 0xfc
 8002dd8:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dda:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ddc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dde:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de0:	3b08      	subs	r3, #8
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <HAL_NVIC_SetPriority+0x5c>)
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	43aa      	bics	r2, r5
 8002dee:	4311      	orrs	r1, r2
 8002df0:	61d9      	str	r1, [r3, #28]
 8002df2:	e7e9      	b.n	8002dc8 <HAL_NVIC_SetPriority+0x2c>
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	db05      	blt.n	8002e0c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e00:	231f      	movs	r3, #31
 8002e02:	4018      	ands	r0, r3
 8002e04:	3b1e      	subs	r3, #30
 8002e06:	4083      	lsls	r3, r0
 8002e08:	4a01      	ldr	r2, [pc, #4]	; (8002e10 <HAL_NVIC_EnableIRQ+0x14>)
 8002e0a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e0c:	4770      	bx	lr
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_SYSTICK_Config+0x28>)
 8002e16:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e18:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d80d      	bhi.n	8002e3a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e1e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e22:	4808      	ldr	r0, [pc, #32]	; (8002e44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e24:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e26:	6a03      	ldr	r3, [r0, #32]
 8002e28:	0609      	lsls	r1, r1, #24
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e32:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e34:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e36:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e38:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e3a:	4770      	bx	lr
 8002e3c:	00ffffff 	.word	0x00ffffff
 8002e40:	e000e010 	.word	0xe000e010
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e48:	b510      	push	{r4, lr}
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <DMA_CalcBaseAndBitshift+0x34>)
{
 8002e4c:	0004      	movs	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e4e:	6800      	ldr	r0, [r0, #0]
 8002e50:	4298      	cmp	r0, r3
 8002e52:	d809      	bhi.n	8002e68 <DMA_CalcBaseAndBitshift+0x20>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <DMA_CalcBaseAndBitshift+0x38>)
 8002e56:	2114      	movs	r1, #20
 8002e58:	18c0      	adds	r0, r0, r3
 8002e5a:	f7fd f979 	bl	8000150 <__udivsi3>
    hdma->DmaBaseAddress = DMA1;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <DMA_CalcBaseAndBitshift+0x3c>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e60:	0080      	lsls	r0, r0, #2
 8002e62:	6420      	str	r0, [r4, #64]	; 0x40
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8002e64:	63e3      	str	r3, [r4, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002e66:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <DMA_CalcBaseAndBitshift+0x40>)
 8002e6a:	2114      	movs	r1, #20
 8002e6c:	18c0      	adds	r0, r0, r3
 8002e6e:	f7fd f96f 	bl	8000150 <__udivsi3>
 8002e72:	0080      	lsls	r0, r0, #2
 8002e74:	6420      	str	r0, [r4, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <DMA_CalcBaseAndBitshift+0x44>)
 8002e78:	e7f4      	b.n	8002e64 <DMA_CalcBaseAndBitshift+0x1c>
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40020407 	.word	0x40020407
 8002e80:	bffdfff8 	.word	0xbffdfff8
 8002e84:	40020000 	.word	0x40020000
 8002e88:	bffdfbf8 	.word	0xbffdfbf8
 8002e8c:	40020400 	.word	0x40020400

08002e90 <HAL_DMA_Init>:
{ 
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
  if(NULL == hdma)
 8002e96:	2c00      	cmp	r4, #0
 8002e98:	d01e      	beq.n	8002ed8 <HAL_DMA_Init+0x48>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e9a:	2302      	movs	r3, #2
  tmp = hdma->Instance->CCR;
 8002e9c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e9e:	1ca5      	adds	r5, r4, #2
 8002ea0:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8002ea2:	6811      	ldr	r1, [r2, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <HAL_DMA_Init+0x4c>)
  tmp |=  hdma->Init.Direction        |
 8002ea6:	68a0      	ldr	r0, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ea8:	4019      	ands	r1, r3
  tmp |=  hdma->Init.Direction        |
 8002eaa:	6863      	ldr	r3, [r4, #4]
 8002eac:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	68e0      	ldr	r0, [r4, #12]
 8002eb0:	4303      	orrs	r3, r0
 8002eb2:	6920      	ldr	r0, [r4, #16]
 8002eb4:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb6:	6960      	ldr	r0, [r4, #20]
 8002eb8:	4303      	orrs	r3, r0
 8002eba:	69a0      	ldr	r0, [r4, #24]
 8002ebc:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ebe:	69e0      	ldr	r0, [r4, #28]
 8002ec0:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002ec2:	430b      	orrs	r3, r1
  DMA_CalcBaseAndBitshift(hdma);
 8002ec4:	0020      	movs	r0, r4
  hdma->Instance->CCR = tmp;  
 8002ec6:	6013      	str	r3, [r2, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8002ec8:	f7ff ffbe 	bl	8002e48 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002ece:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed0:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002ed2:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002ed6:	77e0      	strb	r0, [r4, #31]
}  
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffffc00f 	.word	0xffffc00f

08002ee0 <HAL_DMA_Start_IT>:
{
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8002ee2:	1c46      	adds	r6, r0, #1
 8002ee4:	7ff5      	ldrb	r5, [r6, #31]
 8002ee6:	2402      	movs	r4, #2
 8002ee8:	2d01      	cmp	r5, #1
 8002eea:	d026      	beq.n	8002f3a <HAL_DMA_Start_IT+0x5a>
 8002eec:	2501      	movs	r5, #1
 8002eee:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef0:	1905      	adds	r5, r0, r4
 8002ef2:	46ac      	mov	ip, r5
 8002ef4:	7fed      	ldrb	r5, [r5, #31]
 8002ef6:	2700      	movs	r7, #0
 8002ef8:	b2ed      	uxtb	r5, r5
 8002efa:	2d01      	cmp	r5, #1
 8002efc:	d129      	bne.n	8002f52 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002efe:	4666      	mov	r6, ip
 8002f00:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f02:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f04:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f06:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f08:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f0a:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f0c:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f0e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f10:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8002f12:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002f14:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f16:	6843      	ldr	r3, [r0, #4]
 8002f18:	6805      	ldr	r5, [r0, #0]
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d10f      	bne.n	8002f3e <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8002f1e:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002f20:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002f22:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f24:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00c      	beq.n	8002f44 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f2a:	230e      	movs	r3, #14
 8002f2c:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f2e:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f30:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002f34:	682a      	ldr	r2, [r5, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	602b      	str	r3, [r5, #0]
} 
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002f3e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f40:	60e2      	str	r2, [r4, #12]
 8002f42:	e7ee      	b.n	8002f22 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f44:	230a      	movs	r3, #10
 8002f46:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f48:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002f4a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	4393      	bics	r3, r2
 8002f50:	e7ed      	b.n	8002f2e <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8002f52:	77f7      	strb	r7, [r6, #31]
 8002f54:	e7f1      	b.n	8002f3a <HAL_DMA_Start_IT+0x5a>

08002f56 <HAL_DMA_Abort_IT>:
{  
 8002f56:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f58:	1c84      	adds	r4, r0, #2
 8002f5a:	7fe3      	ldrb	r3, [r4, #31]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d004      	beq.n	8002f6a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f60:	2304      	movs	r3, #4
 8002f62:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002f64:	3b03      	subs	r3, #3
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f6a:	210e      	movs	r1, #14
 8002f6c:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f6e:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	438a      	bics	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f76:	2201      	movs	r2, #1
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	4391      	bics	r1, r2
 8002f7c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f7e:	0011      	movs	r1, r2
 8002f80:	40a9      	lsls	r1, r5
 8002f82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f84:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002f86:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002f88:	2400      	movs	r4, #0
 8002f8a:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8002f8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002f8e:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002f92:	42a2      	cmp	r2, r4
 8002f94:	d0e7      	beq.n	8002f66 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002f96:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	0023      	movs	r3, r4
 8002f9a:	e7e4      	b.n	8002f66 <HAL_DMA_Abort_IT+0x10>

08002f9c <HAL_DMA_IRQHandler>:
{
 8002f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f9e:	2704      	movs	r7, #4
 8002fa0:	003e      	movs	r6, r7
 8002fa2:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fa6:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fa8:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002fae:	422e      	tst	r6, r5
 8002fb0:	d00d      	beq.n	8002fce <HAL_DMA_IRQHandler+0x32>
 8002fb2:	423c      	tst	r4, r7
 8002fb4:	d00b      	beq.n	8002fce <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	0689      	lsls	r1, r1, #26
 8002fba:	d402      	bmi.n	8002fc2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	43b9      	bics	r1, r7
 8002fc0:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fc4:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d019      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8002fca:	4798      	blx	r3
}  
 8002fcc:	e017      	b.n	8002ffe <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fce:	2702      	movs	r7, #2
 8002fd0:	003e      	movs	r6, r7
 8002fd2:	408e      	lsls	r6, r1
 8002fd4:	422e      	tst	r6, r5
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_IRQHandler+0x64>
 8002fd8:	423c      	tst	r4, r7
 8002fda:	d011      	beq.n	8003000 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fdc:	6819      	ldr	r1, [r3, #0]
 8002fde:	0689      	lsls	r1, r1, #26
 8002fe0:	d406      	bmi.n	8002ff0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002fe2:	240a      	movs	r4, #10
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	43a1      	bics	r1, r4
 8002fe8:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002fea:	2101      	movs	r1, #1
 8002fec:	19c3      	adds	r3, r0, r7
 8002fee:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ff0:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d1e5      	bne.n	8002fca <HAL_DMA_IRQHandler+0x2e>
}  
 8002ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003000:	2608      	movs	r6, #8
 8003002:	0037      	movs	r7, r6
 8003004:	408f      	lsls	r7, r1
 8003006:	423d      	tst	r5, r7
 8003008:	d0f9      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x62>
 800300a:	4234      	tst	r4, r6
 800300c:	d0f7      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800300e:	250e      	movs	r5, #14
 8003010:	681c      	ldr	r4, [r3, #0]
 8003012:	43ac      	bics	r4, r5
 8003014:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003016:	2301      	movs	r3, #1
 8003018:	001c      	movs	r4, r3
 800301a:	408c      	lsls	r4, r1
 800301c:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 800301e:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003020:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8003022:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8003024:	2200      	movs	r2, #0
 8003026:	18c3      	adds	r3, r0, r3
 8003028:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 800302a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800302c:	e7e5      	b.n	8002ffa <HAL_DMA_IRQHandler+0x5e>
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003032:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003034:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003036:	1882      	adds	r2, r0, r2
 8003038:	1e54      	subs	r4, r2, #1
 800303a:	41a2      	sbcs	r2, r4
{ 
 800303c:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8003040:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003042:	3204      	adds	r2, #4
 8003044:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003046:	9a03      	ldr	r2, [sp, #12]
 8003048:	40da      	lsrs	r2, r3
 800304a:	d101      	bne.n	8003050 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 800304c:	b009      	add	sp, #36	; 0x24
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4694      	mov	ip, r2
 8003056:	4664      	mov	r4, ip
 8003058:	9a03      	ldr	r2, [sp, #12]
 800305a:	4022      	ands	r2, r4
 800305c:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 800305e:	d100      	bne.n	8003062 <HAL_GPIO_Init+0x32>
 8003060:	e092      	b.n	8003188 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003062:	684a      	ldr	r2, [r1, #4]
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	2210      	movs	r2, #16
 8003068:	9e01      	ldr	r6, [sp, #4]
 800306a:	4396      	bics	r6, r2
 800306c:	2e02      	cmp	r6, #2
 800306e:	d10d      	bne.n	800308c <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003070:	2407      	movs	r4, #7
 8003072:	270f      	movs	r7, #15
 8003074:	401c      	ands	r4, r3
 8003076:	00a4      	lsls	r4, r4, #2
 8003078:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	1882      	adds	r2, r0, r2
 8003080:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003082:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003084:	690f      	ldr	r7, [r1, #16]
 8003086:	40a7      	lsls	r7, r4
 8003088:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 800308a:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800308c:	2203      	movs	r2, #3
 800308e:	0014      	movs	r4, r2
 8003090:	005d      	lsls	r5, r3, #1
 8003092:	40ac      	lsls	r4, r5
 8003094:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8003096:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003098:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800309a:	4027      	ands	r7, r4
 800309c:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800309e:	9f01      	ldr	r7, [sp, #4]
 80030a0:	403a      	ands	r2, r7
 80030a2:	40aa      	lsls	r2, r5
 80030a4:	9f04      	ldr	r7, [sp, #16]
 80030a6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80030a8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030aa:	2e01      	cmp	r6, #1
 80030ac:	d80e      	bhi.n	80030cc <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ae:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80030b0:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b2:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030b4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030b6:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80030b8:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ba:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80030bc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030be:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030c0:	9a01      	ldr	r2, [sp, #4]
 80030c2:	06d2      	lsls	r2, r2, #27
 80030c4:	0fd2      	lsrs	r2, r2, #31
 80030c6:	409a      	lsls	r2, r3
 80030c8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80030ca:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80030cc:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030ce:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030d0:	688a      	ldr	r2, [r1, #8]
 80030d2:	40aa      	lsls	r2, r5
 80030d4:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030d6:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80030d8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030da:	00d2      	lsls	r2, r2, #3
 80030dc:	d554      	bpl.n	8003188 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030de:	2601      	movs	r6, #1
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e2:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	6994      	ldr	r4, [r2, #24]
 80030e6:	4334      	orrs	r4, r6
 80030e8:	6194      	str	r4, [r2, #24]
 80030ea:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80030ec:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	4032      	ands	r2, r6
 80030f0:	9207      	str	r2, [sp, #28]
 80030f2:	9a07      	ldr	r2, [sp, #28]
 80030f4:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_GPIO_Init+0x164>)
 80030f6:	00a4      	lsls	r4, r4, #2
 80030f8:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 80030fa:	68a2      	ldr	r2, [r4, #8]
 80030fc:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030fe:	2203      	movs	r2, #3
 8003100:	4015      	ands	r5, r2
 8003102:	00ad      	lsls	r5, r5, #2
 8003104:	320c      	adds	r2, #12
 8003106:	40aa      	lsls	r2, r5
 8003108:	4667      	mov	r7, ip
 800310a:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800310c:	2290      	movs	r2, #144	; 0x90
 800310e:	05d2      	lsls	r2, r2, #23
 8003110:	4694      	mov	ip, r2
 8003112:	2200      	movs	r2, #0
 8003114:	4560      	cmp	r0, ip
 8003116:	d00d      	beq.n	8003134 <HAL_GPIO_Init+0x104>
 8003118:	4a1f      	ldr	r2, [pc, #124]	; (8003198 <HAL_GPIO_Init+0x168>)
 800311a:	4694      	mov	ip, r2
 800311c:	0032      	movs	r2, r6
 800311e:	4560      	cmp	r0, ip
 8003120:	d008      	beq.n	8003134 <HAL_GPIO_Init+0x104>
 8003122:	4e1e      	ldr	r6, [pc, #120]	; (800319c <HAL_GPIO_Init+0x16c>)
 8003124:	1892      	adds	r2, r2, r2
 8003126:	42b0      	cmp	r0, r6
 8003128:	d004      	beq.n	8003134 <HAL_GPIO_Init+0x104>
 800312a:	4e1d      	ldr	r6, [pc, #116]	; (80031a0 <HAL_GPIO_Init+0x170>)
 800312c:	3201      	adds	r2, #1
 800312e:	42b0      	cmp	r0, r6
 8003130:	d000      	beq.n	8003134 <HAL_GPIO_Init+0x104>
 8003132:	9a05      	ldr	r2, [sp, #20]
 8003134:	40aa      	lsls	r2, r5
 8003136:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003138:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 800313c:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 800313e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003140:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003142:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 8003144:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003146:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003148:	03ff      	lsls	r7, r7, #15
 800314a:	d401      	bmi.n	8003150 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 800314c:	0035      	movs	r5, r6
 800314e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003150:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003152:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003154:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003156:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8003158:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800315a:	03bf      	lsls	r7, r7, #14
 800315c:	d401      	bmi.n	8003162 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800315e:	0035      	movs	r5, r6
 8003160:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003162:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003164:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003166:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003168:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800316a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800316c:	02ff      	lsls	r7, r7, #11
 800316e:	d401      	bmi.n	8003174 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8003170:	0035      	movs	r5, r6
 8003172:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003174:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003176:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003178:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 800317c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317e:	02bf      	lsls	r7, r7, #10
 8003180:	d401      	bmi.n	8003186 <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 8003182:	4025      	ands	r5, r4
 8003184:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003186:	60d6      	str	r6, [r2, #12]
    position++;
 8003188:	3301      	adds	r3, #1
 800318a:	e75c      	b.n	8003046 <HAL_GPIO_Init+0x16>
 800318c:	b7fff000 	.word	0xb7fff000
 8003190:	40021000 	.word	0x40021000
 8003194:	40010000 	.word	0x40010000
 8003198:	48000400 	.word	0x48000400
 800319c:	48000800 	.word	0x48000800
 80031a0:	48000c00 	.word	0x48000c00
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a8:	2a00      	cmp	r2, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80031b2:	e7fc      	b.n	80031ae <HAL_GPIO_WritePin+0x6>

080031b4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80031b4:	6943      	ldr	r3, [r0, #20]
 80031b6:	4219      	tst	r1, r3
 80031b8:	d000      	beq.n	80031bc <HAL_GPIO_TogglePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031ba:	0409      	lsls	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031bc:	6181      	str	r1, [r0, #24]
  }
}
 80031be:	4770      	bx	lr

080031c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031c0:	6803      	ldr	r3, [r0, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	0792      	lsls	r2, r2, #30
 80031c6:	d501      	bpl.n	80031cc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c8:	2200      	movs	r2, #0
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031cc:	2201      	movs	r2, #1
 80031ce:	6999      	ldr	r1, [r3, #24]
 80031d0:	4211      	tst	r1, r2
 80031d2:	d102      	bne.n	80031da <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	619a      	str	r2, [r3, #24]
  }
}
 80031da:	4770      	bx	lr

080031dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031e0:	0589      	lsls	r1, r1, #22
 80031e2:	4333      	orrs	r3, r6
 80031e4:	0d89      	lsrs	r1, r1, #22
 80031e6:	4319      	orrs	r1, r3
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	6804      	ldr	r4, [r0, #0]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	0d70      	lsrs	r0, r6, #21
 80031f0:	4018      	ands	r0, r3
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <I2C_TransferConfig+0x28>)
 80031f4:	6865      	ldr	r5, [r4, #4]
 80031f6:	0412      	lsls	r2, r2, #16
 80031f8:	4318      	orrs	r0, r3
 80031fa:	4385      	bics	r5, r0
 80031fc:	4311      	orrs	r1, r2
 80031fe:	4329      	orrs	r1, r5
 8003200:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	03ff63ff 	.word	0x03ff63ff

08003208 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003208:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800320a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800320c:	4c16      	ldr	r4, [pc, #88]	; (8003268 <I2C_Enable_IRQ+0x60>)
 800320e:	2204      	movs	r2, #4
 8003210:	42a3      	cmp	r3, r4
 8003212:	d002      	beq.n	800321a <I2C_Enable_IRQ+0x12>
 8003214:	4c15      	ldr	r4, [pc, #84]	; (800326c <I2C_Enable_IRQ+0x64>)
 8003216:	42a3      	cmp	r3, r4
 8003218:	d114      	bne.n	8003244 <I2C_Enable_IRQ+0x3c>
  uint32_t tmpisr = 0U;
 800321a:	2300      	movs	r3, #0
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800321c:	4211      	tst	r1, r2
 800321e:	d000      	beq.n	8003222 <I2C_Enable_IRQ+0x1a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003220:	33b8      	adds	r3, #184	; 0xb8
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003222:	2211      	movs	r2, #17
 8003224:	400a      	ands	r2, r1
 8003226:	2a11      	cmp	r2, #17
 8003228:	d101      	bne.n	800322e <I2C_Enable_IRQ+0x26>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800322a:	327f      	adds	r2, #127	; 0x7f
 800322c:	4313      	orrs	r3, r2
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800322e:	2212      	movs	r2, #18
 8003230:	4011      	ands	r1, r2
 8003232:	4291      	cmp	r1, r2
 8003234:	d101      	bne.n	800323a <I2C_Enable_IRQ+0x32>
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003236:	324e      	adds	r2, #78	; 0x4e
    }

    else if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003238:	4313      	orrs	r3, r2
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800323a:	6802      	ldr	r2, [r0, #0]
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	430b      	orrs	r3, r1
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bd10      	pop	{r4, pc}
  uint32_t tmpisr = 0U;
 8003244:	2300      	movs	r3, #0
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003246:	4211      	tst	r1, r2
 8003248:	d000      	beq.n	800324c <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800324a:	33b8      	adds	r3, #184	; 0xb8
    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800324c:	07ca      	lsls	r2, r1, #31
 800324e:	d501      	bpl.n	8003254 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003250:	22f2      	movs	r2, #242	; 0xf2
 8003252:	4313      	orrs	r3, r2
    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003254:	078a      	lsls	r2, r1, #30
 8003256:	d501      	bpl.n	800325c <I2C_Enable_IRQ+0x54>
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003258:	22f4      	movs	r2, #244	; 0xf4
 800325a:	e7ed      	b.n	8003238 <I2C_Enable_IRQ+0x30>
    else if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800325c:	2212      	movs	r2, #18
 800325e:	4011      	ands	r1, r2
 8003260:	4291      	cmp	r1, r2
 8003262:	d1ea      	bne.n	800323a <I2C_Enable_IRQ+0x32>
      tmpisr |= I2C_IT_STOPI;
 8003264:	320e      	adds	r2, #14
 8003266:	e7e7      	b.n	8003238 <I2C_Enable_IRQ+0x30>
 8003268:	08003f79 	.word	0x08003f79
 800326c:	08003e8d 	.word	0x08003e8d

08003270 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003270:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8003272:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003274:	07ca      	lsls	r2, r1, #31
 8003276:	d508      	bpl.n	800328a <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003278:	0003      	movs	r3, r0
 800327a:	3341      	adds	r3, #65	; 0x41
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	2328      	movs	r3, #40	; 0x28
 8003280:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003282:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003284:	2a28      	cmp	r2, #40	; 0x28
 8003286:	d000      	beq.n	800328a <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003288:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800328a:	078a      	lsls	r2, r1, #30
 800328c:	d508      	bpl.n	80032a0 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800328e:	0002      	movs	r2, r0
 8003290:	2428      	movs	r4, #40	; 0x28
 8003292:	3241      	adds	r2, #65	; 0x41
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	4022      	ands	r2, r4
 8003298:	42a2      	cmp	r2, r4
 800329a:	d116      	bne.n	80032ca <I2C_Disable_IRQ+0x5a>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800329c:	2244      	movs	r2, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800329e:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032a0:	074a      	lsls	r2, r1, #29
 80032a2:	d501      	bpl.n	80032a8 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032a4:	22b8      	movs	r2, #184	; 0xb8
 80032a6:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80032a8:	2211      	movs	r2, #17
 80032aa:	400a      	ands	r2, r1
 80032ac:	2a11      	cmp	r2, #17
 80032ae:	d101      	bne.n	80032b4 <I2C_Disable_IRQ+0x44>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032b0:	327f      	adds	r2, #127	; 0x7f
 80032b2:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80032b4:	2212      	movs	r2, #18
 80032b6:	4011      	ands	r1, r2
 80032b8:	4291      	cmp	r1, r2
 80032ba:	d101      	bne.n	80032c0 <I2C_Disable_IRQ+0x50>
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032bc:	324e      	adds	r2, #78	; 0x4e
 80032be:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032c0:	6801      	ldr	r1, [r0, #0]
 80032c2:	680a      	ldr	r2, [r1, #0]
 80032c4:	439a      	bics	r2, r3
 80032c6:	600a      	str	r2, [r1, #0]
}
 80032c8:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032ca:	22f4      	movs	r2, #244	; 0xf4
 80032cc:	e7e7      	b.n	800329e <I2C_Disable_IRQ+0x2e>

080032ce <I2C_WaitOnFlagUntilTimeout>:
{
 80032ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d0:	0004      	movs	r4, r0
 80032d2:	000e      	movs	r6, r1
 80032d4:	0017      	movs	r7, r2
 80032d6:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	6993      	ldr	r3, [r2, #24]
 80032dc:	4033      	ands	r3, r6
 80032de:	1b9b      	subs	r3, r3, r6
 80032e0:	4259      	negs	r1, r3
 80032e2:	414b      	adcs	r3, r1
 80032e4:	42bb      	cmp	r3, r7
 80032e6:	d001      	beq.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80032e8:	2000      	movs	r0, #0
 80032ea:	e017      	b.n	800331c <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	1c6b      	adds	r3, r5, #1
 80032ee:	d0f4      	beq.n	80032da <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7ff fd3c 	bl	8002d6c <HAL_GetTick>
 80032f4:	9b06      	ldr	r3, [sp, #24]
 80032f6:	1ac0      	subs	r0, r0, r3
 80032f8:	4285      	cmp	r5, r0
 80032fa:	d301      	bcc.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x32>
 80032fc:	2d00      	cmp	r5, #0
 80032fe:	d1eb      	bne.n	80032d8 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	2220      	movs	r2, #32
 8003302:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003304:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	4313      	orrs	r3, r2
 8003308:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800330a:	0023      	movs	r3, r4
 800330c:	3341      	adds	r3, #65	; 0x41
 800330e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003310:	0022      	movs	r2, r4
 8003312:	2300      	movs	r3, #0
 8003314:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8003316:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800331a:	7023      	strb	r3, [r4, #0]
}
 800331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003320 <I2C_IsAcknowledgeFailed>:
{
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003322:	6803      	ldr	r3, [r0, #0]
{
 8003324:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003326:	6998      	ldr	r0, [r3, #24]
 8003328:	2310      	movs	r3, #16
{
 800332a:	000e      	movs	r6, r1
 800332c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003330:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003332:	2800      	cmp	r0, #0
 8003334:	d118      	bne.n	8003368 <I2C_IsAcknowledgeFailed+0x48>
}
 8003336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8003338:	1c72      	adds	r2, r6, #1
 800333a:	d016      	beq.n	800336a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7ff fd16 	bl	8002d6c <HAL_GetTick>
 8003340:	1bc0      	subs	r0, r0, r7
 8003342:	4286      	cmp	r6, r0
 8003344:	d301      	bcc.n	800334a <I2C_IsAcknowledgeFailed+0x2a>
 8003346:	2e00      	cmp	r6, #0
 8003348:	d10e      	bne.n	8003368 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800334a:	2220      	movs	r2, #32
 800334c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800334e:	4313      	orrs	r3, r2
 8003350:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003352:	0023      	movs	r3, r4
 8003354:	3341      	adds	r3, #65	; 0x41
 8003356:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003358:	0022      	movs	r2, r4
 800335a:	2300      	movs	r3, #0
 800335c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800335e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8003362:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8003364:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8003366:	e7e6      	b.n	8003336 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	422a      	tst	r2, r5
 800336e:	d0e3      	beq.n	8003338 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8003372:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003374:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003376:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003378:	f7ff ff22 	bl	80031c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	4906      	ldr	r1, [pc, #24]	; (8003398 <I2C_IsAcknowledgeFailed+0x78>)
 8003380:	6853      	ldr	r3, [r2, #4]
 8003382:	400b      	ands	r3, r1
 8003384:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003386:	2304      	movs	r3, #4
 8003388:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800338a:	4313      	orrs	r3, r2
 800338c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800338e:	0023      	movs	r3, r4
 8003390:	3341      	adds	r3, #65	; 0x41
 8003392:	701d      	strb	r5, [r3, #0]
 8003394:	e7e0      	b.n	8003358 <I2C_IsAcknowledgeFailed+0x38>
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	fe00e800 	.word	0xfe00e800

0800339c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	0004      	movs	r4, r0
 80033a0:	000d      	movs	r5, r1
 80033a2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033a4:	2702      	movs	r7, #2
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	423b      	tst	r3, r7
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 80033ae:	2000      	movs	r0, #0
}
 80033b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	0032      	movs	r2, r6
 80033b4:	0029      	movs	r1, r5
 80033b6:	0020      	movs	r0, r4
 80033b8:	f7ff ffb2 	bl	8003320 <I2C_IsAcknowledgeFailed>
 80033bc:	2800      	cmp	r0, #0
 80033be:	d115      	bne.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80033c0:	1c6b      	adds	r3, r5, #1
 80033c2:	d0f0      	beq.n	80033a6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7ff fcd2 	bl	8002d6c <HAL_GetTick>
 80033c8:	1b80      	subs	r0, r0, r6
 80033ca:	4285      	cmp	r5, r0
 80033cc:	d301      	bcc.n	80033d2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80033ce:	2d00      	cmp	r5, #0
 80033d0:	d1e9      	bne.n	80033a6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d2:	2220      	movs	r2, #32
 80033d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80033d6:	4313      	orrs	r3, r2
 80033d8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033da:	0023      	movs	r3, r4
 80033dc:	3341      	adds	r3, #65	; 0x41
 80033de:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	0022      	movs	r2, r4
 80033e2:	2300      	movs	r3, #0
 80033e4:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80033e6:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80033ea:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
 80033ee:	e7df      	b.n	80033b0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080033f0 <I2C_RequestMemoryWrite>:
{
 80033f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f2:	0014      	movs	r4, r2
 80033f4:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <I2C_RequestMemoryWrite+0x60>)
{
 80033fa:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	045b      	lsls	r3, r3, #17
 8003402:	f7ff feeb 	bl	80031dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	9a07      	ldr	r2, [sp, #28]
 8003408:	9906      	ldr	r1, [sp, #24]
 800340a:	0028      	movs	r0, r5
 800340c:	f7ff ffc6 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8003410:	2800      	cmp	r0, #0
 8003412:	d001      	beq.n	8003418 <I2C_RequestMemoryWrite+0x28>
    return HAL_ERROR;
 8003414:	2001      	movs	r0, #1
}
 8003416:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003418:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341a:	2e01      	cmp	r6, #1
 800341c:	d10d      	bne.n	800343a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341e:	b2e4      	uxtb	r4, r4
 8003420:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	9b07      	ldr	r3, [sp, #28]
 8003424:	2200      	movs	r2, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	9b06      	ldr	r3, [sp, #24]
 800342c:	0028      	movs	r0, r5
 800342e:	f7ff ff4e 	bl	80032ce <I2C_WaitOnFlagUntilTimeout>
 8003432:	1e43      	subs	r3, r0, #1
 8003434:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003436:	b2c0      	uxtb	r0, r0
 8003438:	e7ed      	b.n	8003416 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800343a:	0a22      	lsrs	r2, r4, #8
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	9906      	ldr	r1, [sp, #24]
 8003440:	9a07      	ldr	r2, [sp, #28]
 8003442:	0028      	movs	r0, r5
 8003444:	f7ff ffaa 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8003448:	2800      	cmp	r0, #0
 800344a:	d1e3      	bne.n	8003414 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	e7e6      	b.n	800341e <I2C_RequestMemoryWrite+0x2e>
 8003450:	80002000 	.word	0x80002000

08003454 <I2C_RequestMemoryRead>:
{
 8003454:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003456:	0005      	movs	r5, r0
 8003458:	0014      	movs	r4, r2
 800345a:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <I2C_RequestMemoryRead+0x60>)
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	f7ff feba 	bl	80031dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	9a07      	ldr	r2, [sp, #28]
 800346a:	9906      	ldr	r1, [sp, #24]
 800346c:	0028      	movs	r0, r5
 800346e:	f7ff ff95 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 8003472:	2800      	cmp	r0, #0
 8003474:	d001      	beq.n	800347a <I2C_RequestMemoryRead+0x26>
    return HAL_ERROR;
 8003476:	2001      	movs	r0, #1
}
 8003478:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800347a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800347c:	2e01      	cmp	r6, #1
 800347e:	d10d      	bne.n	800349c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003480:	b2e4      	uxtb	r4, r4
 8003482:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003484:	9b07      	ldr	r3, [sp, #28]
 8003486:	2200      	movs	r2, #0
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2140      	movs	r1, #64	; 0x40
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	0028      	movs	r0, r5
 8003490:	f7ff ff1d 	bl	80032ce <I2C_WaitOnFlagUntilTimeout>
 8003494:	1e43      	subs	r3, r0, #1
 8003496:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8003498:	b2c0      	uxtb	r0, r0
 800349a:	e7ed      	b.n	8003478 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800349c:	0a22      	lsrs	r2, r4, #8
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a0:	9906      	ldr	r1, [sp, #24]
 80034a2:	9a07      	ldr	r2, [sp, #28]
 80034a4:	0028      	movs	r0, r5
 80034a6:	f7ff ff79 	bl	800339c <I2C_WaitOnTXISFlagUntilTimeout>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d1e3      	bne.n	8003476 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034ae:	682b      	ldr	r3, [r5, #0]
 80034b0:	e7e6      	b.n	8003480 <I2C_RequestMemoryRead+0x2c>
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	80002000 	.word	0x80002000

080034b8 <HAL_I2C_Init>:
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	0004      	movs	r4, r0
    return HAL_ERROR;
 80034bc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80034be:	2c00      	cmp	r4, #0
 80034c0:	d03f      	beq.n	8003542 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	0025      	movs	r5, r4
 80034c4:	3541      	adds	r5, #65	; 0x41
 80034c6:	782b      	ldrb	r3, [r5, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	0022      	movs	r2, r4
 80034d0:	3240      	adds	r2, #64	; 0x40
 80034d2:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80034d4:	0020      	movs	r0, r4
 80034d6:	f005 f8d9 	bl	800868c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80034da:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80034dc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80034de:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68a6      	ldr	r6, [r4, #8]
 80034e8:	438a      	bics	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034ec:	6861      	ldr	r1, [r4, #4]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_I2C_Init+0xa0>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_I2C_Init+0xa4>)
 80034f8:	4011      	ands	r1, r2
 80034fa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034fc:	2801      	cmp	r0, #1
 80034fe:	d121      	bne.n	8003544 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0209      	lsls	r1, r1, #8
 8003504:	4331      	orrs	r1, r6
 8003506:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003508:	6858      	ldr	r0, [r3, #4]
 800350a:	4915      	ldr	r1, [pc, #84]	; (8003560 <HAL_I2C_Init+0xa8>)
 800350c:	4301      	orrs	r1, r0
 800350e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003510:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003512:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003514:	400a      	ands	r2, r1
 8003516:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003518:	6961      	ldr	r1, [r4, #20]
 800351a:	6922      	ldr	r2, [r4, #16]
 800351c:	430a      	orrs	r2, r1
 800351e:	69a1      	ldr	r1, [r4, #24]
 8003520:	0209      	lsls	r1, r1, #8
 8003522:	430a      	orrs	r2, r1
 8003524:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003526:	6a21      	ldr	r1, [r4, #32]
 8003528:	69e2      	ldr	r2, [r4, #28]
 800352a:	430a      	orrs	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800352e:	2201      	movs	r2, #1
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003536:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800353c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	3442      	adds	r4, #66	; 0x42
 8003540:	7020      	strb	r0, [r4, #0]
}
 8003542:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003544:	2184      	movs	r1, #132	; 0x84
 8003546:	0209      	lsls	r1, r1, #8
 8003548:	4331      	orrs	r1, r6
 800354a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354c:	2802      	cmp	r0, #2
 800354e:	d1db      	bne.n	8003508 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0109      	lsls	r1, r1, #4
 8003554:	6059      	str	r1, [r3, #4]
 8003556:	e7d7      	b.n	8003508 <HAL_I2C_Init+0x50>
 8003558:	f0ffffff 	.word	0xf0ffffff
 800355c:	ffff7fff 	.word	0xffff7fff
 8003560:	02008000 	.word	0x02008000

08003564 <HAL_I2C_Mem_Write_DMA>:
{
 8003564:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003566:	0007      	movs	r7, r0
{
 8003568:	b089      	sub	sp, #36	; 0x24
 800356a:	9307      	str	r3, [sp, #28]
 800356c:	ab0e      	add	r3, sp, #56	; 0x38
 800356e:	9206      	str	r2, [sp, #24]
 8003570:	cb04      	ldmia	r3!, {r2}
 8003572:	9105      	str	r1, [sp, #20]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	9202      	str	r2, [sp, #8]
 8003578:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	3741      	adds	r7, #65	; 0x41
 800357c:	783b      	ldrb	r3, [r7, #0]
{
 800357e:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003580:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003582:	2b20      	cmp	r3, #32
 8003584:	d171      	bne.n	800366a <HAL_I2C_Mem_Write_DMA+0x106>
    if ((pData == NULL) || (Size == 0U))
 8003586:	2a00      	cmp	r2, #0
 8003588:	d002      	beq.n	8003590 <HAL_I2C_Mem_Write_DMA+0x2c>
 800358a:	9b04      	ldr	r3, [sp, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_I2C_Mem_Write_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8003596:	2501      	movs	r5, #1
 8003598:	e067      	b.n	800366a <HAL_I2C_Mem_Write_DMA+0x106>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800359a:	6803      	ldr	r3, [r0, #0]
 800359c:	699e      	ldr	r6, [r3, #24]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	401e      	ands	r6, r3
 80035a4:	d161      	bne.n	800366a <HAL_I2C_Mem_Write_DMA+0x106>
    __HAL_LOCK(hi2c);
 80035a6:	0003      	movs	r3, r0
 80035a8:	3340      	adds	r3, #64	; 0x40
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	2a01      	cmp	r2, #1
 80035ae:	d05c      	beq.n	800366a <HAL_I2C_Mem_Write_DMA+0x106>
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80035b4:	f7ff fbda 	bl	8002d6c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035b8:	2321      	movs	r3, #33	; 0x21
 80035ba:	703b      	strb	r3, [r7, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80035bc:	0023      	movs	r3, r4
 80035be:	3342      	adds	r3, #66	; 0x42
 80035c0:	9303      	str	r3, [sp, #12]
 80035c2:	2340      	movs	r3, #64	; 0x40
 80035c4:	9a03      	ldr	r2, [sp, #12]
 80035c6:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 80035c8:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ca:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 80035cc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ce:	466b      	mov	r3, sp
 80035d0:	8a1b      	ldrh	r3, [r3, #16]
 80035d2:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_I2C_Mem_Write_DMA+0x13c>)
 80035d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <HAL_I2C_Mem_Write_DMA+0x140>)
 80035da:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035de:	2bff      	cmp	r3, #255	; 0xff
 80035e0:	d915      	bls.n	800360e <HAL_I2C_Mem_Write_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e2:	23ff      	movs	r3, #255	; 0xff
 80035e4:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 80035ea:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80035ec:	2319      	movs	r3, #25
 80035ee:	9001      	str	r0, [sp, #4]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	9a06      	ldr	r2, [sp, #24]
 80035f4:	9b07      	ldr	r3, [sp, #28]
 80035f6:	9905      	ldr	r1, [sp, #20]
 80035f8:	0020      	movs	r0, r4
 80035fa:	f7ff fef9 	bl	80033f0 <I2C_RequestMemoryWrite>
 80035fe:	0027      	movs	r7, r4
 8003600:	0006      	movs	r6, r0
 8003602:	3740      	adds	r7, #64	; 0x40
 8003604:	2800      	cmp	r0, #0
 8003606:	d007      	beq.n	8003618 <HAL_I2C_Mem_Write_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 8003608:	2300      	movs	r3, #0
 800360a:	703b      	strb	r3, [r7, #0]
 800360c:	e7c3      	b.n	8003596 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800360e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003610:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	049b      	lsls	r3, r3, #18
 8003616:	e7e8      	b.n	80035ea <HAL_I2C_Mem_Write_DMA+0x86>
    if (hi2c->hdmatx != NULL)
 8003618:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800361a:	2800      	cmp	r0, #0
 800361c:	d028      	beq.n	8003670 <HAL_I2C_Mem_Write_DMA+0x10c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_I2C_Mem_Write_DMA+0x144>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8003620:	6822      	ldr	r2, [r4, #0]
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003622:	6283      	str	r3, [r0, #40]	; 0x28
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_I2C_Mem_Write_DMA+0x148>)
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003626:	62c6      	str	r6, [r0, #44]	; 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003628:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 800362a:	6346      	str	r6, [r0, #52]	; 0x34
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800362c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800362e:	3228      	adds	r2, #40	; 0x28
 8003630:	9902      	ldr	r1, [sp, #8]
 8003632:	f7ff fc55 	bl	8002ee0 <HAL_DMA_Start_IT>
 8003636:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 8003638:	d126      	bne.n	8003688 <HAL_I2C_Mem_Write_DMA+0x124>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800363a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800363c:	9000      	str	r0, [sp, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	9b04      	ldr	r3, [sp, #16]
 8003642:	9905      	ldr	r1, [sp, #20]
 8003644:	0020      	movs	r0, r4
 8003646:	f7ff fdc9 	bl	80031dc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800364a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800364c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800364e:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003656:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 8003658:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800365a:	f7ff fdd5 	bl	8003208 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	6811      	ldr	r1, [r2, #0]
 8003666:	430b      	orrs	r3, r1
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	0028      	movs	r0, r5
 800366c:	b009      	add	sp, #36	; 0x24
 800366e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 8003670:	0023      	movs	r3, r4
 8003672:	2220      	movs	r2, #32
 8003674:	3341      	adds	r3, #65	; 0x41
 8003676:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003680:	4313      	orrs	r3, r2
 8003682:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003684:	7038      	strb	r0, [r7, #0]
 8003686:	e786      	b.n	8003596 <HAL_I2C_Mem_Write_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003688:	0023      	movs	r3, r4
 800368a:	2220      	movs	r2, #32
 800368c:	3341      	adds	r3, #65	; 0x41
 800368e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003694:	2310      	movs	r3, #16
 8003696:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003698:	4313      	orrs	r3, r2
 800369a:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800369c:	703e      	strb	r6, [r7, #0]
 800369e:	e77a      	b.n	8003596 <HAL_I2C_Mem_Write_DMA+0x32>
 80036a0:	ffff0000 	.word	0xffff0000
 80036a4:	08003f79 	.word	0x08003f79
 80036a8:	080040a1 	.word	0x080040a1
 80036ac:	08004089 	.word	0x08004089

080036b0 <HAL_I2C_Mem_Read_DMA>:
{
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	0006      	movs	r6, r0
{
 80036b4:	b089      	sub	sp, #36	; 0x24
 80036b6:	9307      	str	r3, [sp, #28]
 80036b8:	ab0e      	add	r3, sp, #56	; 0x38
 80036ba:	9206      	str	r2, [sp, #24]
 80036bc:	cb04      	ldmia	r3!, {r2}
 80036be:	9105      	str	r1, [sp, #20]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	9202      	str	r2, [sp, #8]
 80036c4:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c6:	3641      	adds	r6, #65	; 0x41
 80036c8:	7833      	ldrb	r3, [r6, #0]
{
 80036ca:	0004      	movs	r4, r0
    return HAL_BUSY;
 80036cc:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d172      	bne.n	80037b8 <HAL_I2C_Mem_Read_DMA+0x108>
    if ((pData == NULL) || (Size == 0U))
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d002      	beq.n	80036dc <HAL_I2C_Mem_Read_DMA+0x2c>
 80036d6:	9b04      	ldr	r3, [sp, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_I2C_Mem_Read_DMA+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80036e2:	2501      	movs	r5, #1
 80036e4:	e068      	b.n	80037b8 <HAL_I2C_Mem_Read_DMA+0x108>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80036e6:	2780      	movs	r7, #128	; 0x80
 80036e8:	6803      	ldr	r3, [r0, #0]
 80036ea:	023f      	lsls	r7, r7, #8
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	401f      	ands	r7, r3
 80036f0:	d162      	bne.n	80037b8 <HAL_I2C_Mem_Read_DMA+0x108>
    __HAL_LOCK(hi2c);
 80036f2:	0003      	movs	r3, r0
 80036f4:	3340      	adds	r3, #64	; 0x40
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	2a01      	cmp	r2, #1
 80036fa:	d05d      	beq.n	80037b8 <HAL_I2C_Mem_Read_DMA+0x108>
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003700:	f7ff fb34 	bl	8002d6c <HAL_GetTick>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003704:	2322      	movs	r3, #34	; 0x22
 8003706:	7033      	strb	r3, [r6, #0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003708:	0023      	movs	r3, r4
 800370a:	3342      	adds	r3, #66	; 0x42
 800370c:	9303      	str	r3, [sp, #12]
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	9a03      	ldr	r2, [sp, #12]
 8003712:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr    = pData;
 8003714:	9b02      	ldr	r3, [sp, #8]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003716:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8003718:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800371a:	466b      	mov	r3, sp
 800371c:	8a1b      	ldrh	r3, [r3, #16]
 800371e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003720:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <HAL_I2C_Mem_Read_DMA+0x140>)
 8003722:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_I2C_Mem_Read_DMA+0x144>)
 8003726:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003728:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800372a:	2bff      	cmp	r3, #255	; 0xff
 800372c:	d915      	bls.n	800375a <HAL_I2C_Mem_Read_DMA+0xaa>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800372e:	23ff      	movs	r3, #255	; 0xff
 8003730:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	045b      	lsls	r3, r3, #17
      xfermode = I2C_AUTOEND_MODE;
 8003736:	9304      	str	r3, [sp, #16]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003738:	2319      	movs	r3, #25
 800373a:	9001      	str	r0, [sp, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	9a06      	ldr	r2, [sp, #24]
 8003740:	9b07      	ldr	r3, [sp, #28]
 8003742:	9905      	ldr	r1, [sp, #20]
 8003744:	0020      	movs	r0, r4
 8003746:	f7ff fe85 	bl	8003454 <I2C_RequestMemoryRead>
 800374a:	0027      	movs	r7, r4
 800374c:	0006      	movs	r6, r0
 800374e:	3740      	adds	r7, #64	; 0x40
 8003750:	2800      	cmp	r0, #0
 8003752:	d007      	beq.n	8003764 <HAL_I2C_Mem_Read_DMA+0xb4>
      __HAL_UNLOCK(hi2c);
 8003754:	2300      	movs	r3, #0
 8003756:	703b      	strb	r3, [r7, #0]
 8003758:	e7c3      	b.n	80036e2 <HAL_I2C_Mem_Read_DMA+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800375a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375c:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	049b      	lsls	r3, r3, #18
 8003762:	e7e8      	b.n	8003736 <HAL_I2C_Mem_Read_DMA+0x86>
    if (hi2c->hdmarx != NULL)
 8003764:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003766:	2800      	cmp	r0, #0
 8003768:	d029      	beq.n	80037be <HAL_I2C_Mem_Read_DMA+0x10e>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_I2C_Mem_Read_DMA+0x148>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800376c:	6821      	ldr	r1, [r4, #0]
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800376e:	6283      	str	r3, [r0, #40]	; 0x28
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_I2C_Mem_Read_DMA+0x14c>)
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003772:	62c6      	str	r6, [r0, #44]	; 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003774:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003776:	6346      	str	r6, [r0, #52]	; 0x34
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8003778:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800377a:	3124      	adds	r1, #36	; 0x24
 800377c:	9a02      	ldr	r2, [sp, #8]
 800377e:	f7ff fbaf 	bl	8002ee0 <HAL_DMA_Start_IT>
 8003782:	1e05      	subs	r5, r0, #0
    if (dmaxferstatus == HAL_OK)
 8003784:	d127      	bne.n	80037d6 <HAL_I2C_Mem_Read_DMA+0x126>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003786:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_I2C_Mem_Read_DMA+0x150>)
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	9905      	ldr	r1, [sp, #20]
 8003790:	9b04      	ldr	r3, [sp, #16]
 8003792:	0020      	movs	r0, r4
 8003794:	f7ff fd22 	bl	80031dc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8003798:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800379a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800379c:	2111      	movs	r1, #17
      hi2c->XferCount -= hi2c->XferSize;
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80037a4:	0020      	movs	r0, r4
      __HAL_UNLOCK(hi2c);
 80037a6:	703d      	strb	r5, [r7, #0]
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80037a8:	f7ff fd2e 	bl	8003208 <I2C_Enable_IRQ>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	6811      	ldr	r1, [r2, #0]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	0028      	movs	r0, r5
 80037ba:	b009      	add	sp, #36	; 0x24
 80037bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_READY;
 80037be:	0023      	movs	r3, r4
 80037c0:	2220      	movs	r2, #32
 80037c2:	3341      	adds	r3, #65	; 0x41
 80037c4:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037c6:	9b03      	ldr	r3, [sp, #12]
 80037c8:	7018      	strb	r0, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037ce:	4313      	orrs	r3, r2
 80037d0:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80037d2:	7038      	strb	r0, [r7, #0]
 80037d4:	e785      	b.n	80036e2 <HAL_I2C_Mem_Read_DMA+0x32>
      hi2c->State     = HAL_I2C_STATE_READY;
 80037d6:	0023      	movs	r3, r4
 80037d8:	2220      	movs	r2, #32
 80037da:	3341      	adds	r3, #65	; 0x41
 80037dc:	701a      	strb	r2, [r3, #0]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	701e      	strb	r6, [r3, #0]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80037e2:	2310      	movs	r3, #16
 80037e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80037e6:	4313      	orrs	r3, r2
 80037e8:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80037ea:	703e      	strb	r6, [r7, #0]
 80037ec:	e779      	b.n	80036e2 <HAL_I2C_Mem_Read_DMA+0x32>
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	ffff0000 	.word	0xffff0000
 80037f4:	08003f79 	.word	0x08003f79
 80037f8:	080040f1 	.word	0x080040f1
 80037fc:	08004089 	.word	0x08004089
 8003800:	80002400 	.word	0x80002400

08003804 <HAL_I2C_IsDeviceReady>:
{
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8003808:	2300      	movs	r3, #0
{
 800380a:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 800380c:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800380e:	0003      	movs	r3, r0
 8003810:	3341      	adds	r3, #65	; 0x41
{
 8003812:	9105      	str	r1, [sp, #20]
 8003814:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
{
 800381a:	0004      	movs	r4, r0
    return HAL_BUSY;
 800381c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800381e:	2b20      	cmp	r3, #32
 8003820:	d156      	bne.n	80038d0 <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	4013      	ands	r3, r2
 800382c:	d150      	bne.n	80038d0 <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 800382e:	0021      	movs	r1, r4
 8003830:	3140      	adds	r1, #64	; 0x40
 8003832:	780a      	ldrb	r2, [r1, #0]
 8003834:	2a01      	cmp	r2, #1
 8003836:	d04b      	beq.n	80038d0 <HAL_I2C_IsDeviceReady+0xcc>
 8003838:	2201      	movs	r2, #1
 800383a:	700a      	strb	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	2124      	movs	r1, #36	; 0x24
 800383e:	9802      	ldr	r0, [sp, #8]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003840:	9203      	str	r2, [sp, #12]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003842:	7001      	strb	r1, [r0, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	6463      	str	r3, [r4, #68]	; 0x44
 8003846:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003848:	68e1      	ldr	r1, [r4, #12]
 800384a:	059b      	lsls	r3, r3, #22
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	0d9b      	lsrs	r3, r3, #22
 8003850:	2901      	cmp	r1, #1
 8003852:	d11f      	bne.n	8003894 <HAL_I2C_IsDeviceReady+0x90>
 8003854:	4933      	ldr	r1, [pc, #204]	; (8003924 <HAL_I2C_IsDeviceReady+0x120>)
 8003856:	430b      	orrs	r3, r1
 8003858:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800385a:	f7ff fa87 	bl	8002d6c <HAL_GetTick>
 800385e:	0006      	movs	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003866:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003868:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800386a:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800386c:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800386e:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003870:	4313      	orrs	r3, r2
 8003872:	d012      	beq.n	800389a <HAL_I2C_IsDeviceReady+0x96>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003874:	2710      	movs	r7, #16
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800387a:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800387c:	403a      	ands	r2, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	002b      	movs	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003880:	2a00      	cmp	r2, #0
 8003882:	d127      	bne.n	80038d4 <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003884:	2120      	movs	r1, #32
 8003886:	0020      	movs	r0, r4
 8003888:	f7ff fd21 	bl	80032ce <I2C_WaitOnFlagUntilTimeout>
 800388c:	2800      	cmp	r0, #0
 800388e:	d017      	beq.n	80038c0 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e01d      	b.n	80038d0 <HAL_I2C_IsDeviceReady+0xcc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003894:	21a0      	movs	r1, #160	; 0xa0
 8003896:	0189      	lsls	r1, r1, #6
 8003898:	e7dd      	b.n	8003856 <HAL_I2C_IsDeviceReady+0x52>
        if (Timeout != HAL_MAX_DELAY)
 800389a:	1c6b      	adds	r3, r5, #1
 800389c:	d0e0      	beq.n	8003860 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7ff fa65 	bl	8002d6c <HAL_GetTick>
 80038a2:	1b80      	subs	r0, r0, r6
 80038a4:	4285      	cmp	r5, r0
 80038a6:	d301      	bcc.n	80038ac <HAL_I2C_IsDeviceReady+0xa8>
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	d1d9      	bne.n	8003860 <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	2320      	movs	r3, #32
 80038ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(hi2c);
 80038b0:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b4:	6862      	ldr	r2, [r4, #4]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	7023      	strb	r3, [r4, #0]
 80038be:	e7e7      	b.n	8003890 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c0:	2320      	movs	r3, #32
 80038c2:	6822      	ldr	r2, [r4, #0]
 80038c4:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 80038c8:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	3241      	adds	r2, #65	; 0x41
 80038cc:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80038ce:	7020      	strb	r0, [r4, #0]
}
 80038d0:	b009      	add	sp, #36	; 0x24
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038d4:	2200      	movs	r2, #0
 80038d6:	2120      	movs	r1, #32
 80038d8:	0020      	movs	r0, r4
 80038da:	f7ff fcf8 	bl	80032ce <I2C_WaitOnFlagUntilTimeout>
 80038de:	1e02      	subs	r2, r0, #0
 80038e0:	d1d6      	bne.n	8003890 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 80038e4:	9804      	ldr	r0, [sp, #16]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e8:	2720      	movs	r7, #32
 80038ea:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 80038ec:	9907      	ldr	r1, [sp, #28]
 80038ee:	4281      	cmp	r1, r0
 80038f0:	d10e      	bne.n	8003910 <HAL_I2C_IsDeviceReady+0x10c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	6858      	ldr	r0, [r3, #4]
 80038f6:	01c9      	lsls	r1, r1, #7
 80038f8:	4301      	orrs	r1, r0
 80038fa:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038fc:	0020      	movs	r0, r4
 80038fe:	9600      	str	r6, [sp, #0]
 8003900:	002b      	movs	r3, r5
 8003902:	0039      	movs	r1, r7
 8003904:	f7ff fce3 	bl	80032ce <I2C_WaitOnFlagUntilTimeout>
 8003908:	2800      	cmp	r0, #0
 800390a:	d1c1      	bne.n	8003890 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8003910:	9b07      	ldr	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8003912:	9a04      	ldr	r2, [sp, #16]
      I2C_Trials++;
 8003914:	3301      	adds	r3, #1
 8003916:	9307      	str	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8003918:	9b07      	ldr	r3, [sp, #28]
 800391a:	429a      	cmp	r2, r3
 800391c:	d900      	bls.n	8003920 <HAL_I2C_IsDeviceReady+0x11c>
 800391e:	e792      	b.n	8003846 <HAL_I2C_IsDeviceReady+0x42>
 8003920:	e7c4      	b.n	80038ac <HAL_I2C_IsDeviceReady+0xa8>
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	02002000 	.word	0x02002000

08003928 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003928:	6803      	ldr	r3, [r0, #0]
{
 800392a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800392c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800392e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8003930:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d000      	beq.n	8003938 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8003936:	4798      	blx	r3
}
 8003938:	bd10      	pop	{r4, pc}

0800393a <HAL_I2C_MasterTxCpltCallback>:
 800393a:	4770      	bx	lr

0800393c <HAL_I2C_MasterRxCpltCallback>:
 800393c:	4770      	bx	lr

0800393e <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	0003      	movs	r3, r0
{
 8003940:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	2500      	movs	r5, #0
 8003944:	2220      	movs	r2, #32
 8003946:	0006      	movs	r6, r0
 8003948:	3342      	adds	r3, #66	; 0x42
 800394a:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800394c:	3b01      	subs	r3, #1
 800394e:	7819      	ldrb	r1, [r3, #0]
{
 8003950:	0004      	movs	r4, r0
 8003952:	3640      	adds	r6, #64	; 0x40
    hi2c->State         = HAL_I2C_STATE_READY;
 8003954:	701a      	strb	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003956:	2921      	cmp	r1, #33	; 0x21
 8003958:	d10a      	bne.n	8003970 <I2C_ITMasterSeqCplt+0x32>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800395a:	2311      	movs	r3, #17
    hi2c->XferISR       = NULL;
 800395c:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800395e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003960:	3920      	subs	r1, #32
 8003962:	f7ff fc85 	bl	8003270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003966:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003968:	0020      	movs	r0, r4
 800396a:	f7ff ffe6 	bl	800393a <HAL_I2C_MasterTxCpltCallback>
}
 800396e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003970:	2312      	movs	r3, #18
    hi2c->XferISR       = NULL;
 8003972:	6345      	str	r5, [r0, #52]	; 0x34
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003974:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003976:	2102      	movs	r1, #2
 8003978:	f7ff fc7a 	bl	8003270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800397c:	7035      	strb	r5, [r6, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800397e:	0020      	movs	r0, r4
 8003980:	f7ff ffdc 	bl	800393c <HAL_I2C_MasterRxCpltCallback>
}
 8003984:	e7f3      	b.n	800396e <I2C_ITMasterSeqCplt+0x30>

08003986 <HAL_I2C_SlaveTxCpltCallback>:
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_SlaveRxCpltCallback>:
 8003988:	4770      	bx	lr

0800398a <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	0003      	movs	r3, r0
{
 800398c:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	2500      	movs	r5, #0
 8003990:	3342      	adds	r3, #66	; 0x42
 8003992:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003994:	3b01      	subs	r3, #1
 8003996:	781a      	ldrb	r2, [r3, #0]
{
 8003998:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800399a:	2a29      	cmp	r2, #41	; 0x29
 800399c:	d10d      	bne.n	80039ba <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800399e:	3a01      	subs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a2:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039a4:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039a6:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039a8:	f7ff fc62 	bl	8003270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039ac:	0023      	movs	r3, r4
 80039ae:	3340      	adds	r3, #64	; 0x40
 80039b0:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039b2:	0020      	movs	r0, r4
 80039b4:	f7ff ffe7 	bl	8003986 <HAL_I2C_SlaveTxCpltCallback>
}
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	2a2a      	cmp	r2, #42	; 0x2a
 80039be:	d1fb      	bne.n	80039b8 <I2C_ITSlaveSeqCplt+0x2e>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039c0:	3a02      	subs	r2, #2
 80039c2:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039c4:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039c6:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039c8:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039ca:	f7ff fc51 	bl	8003270 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039ce:	0023      	movs	r3, r4
 80039d0:	3340      	adds	r3, #64	; 0x40
 80039d2:	701d      	strb	r5, [r3, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039d4:	0020      	movs	r0, r4
 80039d6:	f7ff ffd7 	bl	8003988 <HAL_I2C_SlaveRxCpltCallback>
}
 80039da:	e7ed      	b.n	80039b8 <I2C_ITSlaveSeqCplt+0x2e>

080039dc <HAL_I2C_AddrCallback>:
}
 80039dc:	4770      	bx	lr

080039de <I2C_ITAddrCplt.isra.8>:
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039de:	0003      	movs	r3, r0
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80039e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039e2:	3341      	adds	r3, #65	; 0x41
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	2328      	movs	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80039e8:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ea:	401a      	ands	r2, r3
 80039ec:	6803      	ldr	r3, [r0, #0]
 80039ee:	2a28      	cmp	r2, #40	; 0x28
 80039f0:	d137      	bne.n	8003a62 <I2C_ITAddrCplt.isra.8+0x84>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039f2:	27fe      	movs	r7, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80039f4:	699d      	ldr	r5, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80039f6:	699e      	ldr	r6, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80039f8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039fa:	68d9      	ldr	r1, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80039fc:	03ed      	lsls	r5, r5, #15
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80039fe:	9101      	str	r1, [sp, #4]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a00:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a02:	0c36      	lsrs	r6, r6, #16
    transferdirection = I2C_GET_DIR(hi2c);
 8003a04:	0fed      	lsrs	r5, r5, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a06:	403e      	ands	r6, r7
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a08:	2902      	cmp	r1, #2
 8003a0a:	d121      	bne.n	8003a50 <I2C_ITAddrCplt.isra.8+0x72>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a0c:	0592      	lsls	r2, r2, #22
 8003a0e:	0d92      	lsrs	r2, r2, #22
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003a10:	09d1      	lsrs	r1, r2, #7
 8003a12:	404e      	eors	r6, r1
 8003a14:	2106      	movs	r1, #6
 8003a16:	400e      	ands	r6, r1
 8003a18:	d110      	bne.n	8003a3c <I2C_ITAddrCplt.isra.8+0x5e>
        hi2c->AddrEventCount++;
 8003a1a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a1c:	3101      	adds	r1, #1
 8003a1e:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a20:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003a22:	2902      	cmp	r1, #2
 8003a24:	d109      	bne.n	8003a3a <I2C_ITAddrCplt.isra.8+0x5c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a26:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 8003a28:	6486      	str	r6, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a2a:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	3340      	adds	r3, #64	; 0x40
 8003a30:	701e      	strb	r6, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a32:	0029      	movs	r1, r5
 8003a34:	0020      	movs	r0, r4
 8003a36:	f7ff ffd1 	bl	80039dc <HAL_I2C_AddrCallback>
}
 8003a3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	f7ff fc17 	bl	8003270 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a42:	0023      	movs	r3, r4
 8003a44:	2200      	movs	r2, #0
 8003a46:	3340      	adds	r3, #64	; 0x40
 8003a48:	701a      	strb	r2, [r3, #0]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a4a:	9a01      	ldr	r2, [sp, #4]
 8003a4c:	403a      	ands	r2, r7
 8003a4e:	e7f0      	b.n	8003a32 <I2C_ITAddrCplt.isra.8+0x54>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a50:	2104      	movs	r1, #4
 8003a52:	f7ff fc0d 	bl	8003270 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a56:	0023      	movs	r3, r4
 8003a58:	2200      	movs	r2, #0
 8003a5a:	3340      	adds	r3, #64	; 0x40
 8003a5c:	701a      	strb	r2, [r3, #0]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a5e:	0032      	movs	r2, r6
 8003a60:	e7e7      	b.n	8003a32 <I2C_ITAddrCplt.isra.8+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a62:	2208      	movs	r2, #8
 8003a64:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	3440      	adds	r4, #64	; 0x40
 8003a6a:	7023      	strb	r3, [r4, #0]
 8003a6c:	e7e5      	b.n	8003a3a <I2C_ITAddrCplt.isra.8+0x5c>

08003a6e <HAL_I2C_ListenCpltCallback>:
 8003a6e:	4770      	bx	lr

08003a70 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <I2C_ITListenCplt+0x64>)
{
 8003a72:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a74:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	6303      	str	r3, [r0, #48]	; 0x30
{
 8003a7c:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	2020      	movs	r0, #32
 8003a80:	3241      	adds	r2, #65	; 0x41
 8003a82:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	7053      	strb	r3, [r2, #1]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a86:	2204      	movs	r2, #4
  hi2c->XferISR = NULL;
 8003a88:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a8a:	4211      	tst	r1, r2
 8003a8c:	d012      	beq.n	8003ab4 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a98:	3301      	adds	r3, #1
 8003a9a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003aa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	6462      	str	r2, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ab4:	2107      	movs	r1, #7
 8003ab6:	0020      	movs	r0, r4
 8003ab8:	f7ff fbda 	bl	8003270 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003abc:	2210      	movs	r2, #16
 8003abe:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003ac0:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	3340      	adds	r3, #64	; 0x40
 8003aca:	701a      	strb	r2, [r3, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8003acc:	f7ff ffcf 	bl	8003a6e <HAL_I2C_ListenCpltCallback>
}
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	ffff0000 	.word	0xffff0000

08003ad8 <HAL_I2C_AbortCpltCallback>:
}
 8003ad8:	4770      	bx	lr
	...

08003adc <I2C_ITError>:
{
 8003adc:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ade:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ae0:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ae6:	3541      	adds	r5, #65	; 0x41
 8003ae8:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003aea:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aec:	4a2f      	ldr	r2, [pc, #188]	; (8003bac <I2C_ITError+0xd0>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003aee:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003af0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003af2:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8003af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 8003af6:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8003af8:	4311      	orrs	r1, r2
 8003afa:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d822      	bhi.n	8003b46 <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b00:	2103      	movs	r1, #3
 8003b02:	f7ff fbb5 	bl	8003270 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b06:	2328      	movs	r3, #40	; 0x28
 8003b08:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <I2C_ITError+0xd4>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0c:	6326      	str	r6, [r4, #48]	; 0x30
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b0e:	2280      	movs	r2, #128	; 0x80
    hi2c->XferISR       = NULL;
 8003b10:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	01d2      	lsls	r2, r2, #7
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b1a:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b1c:	d01e      	beq.n	8003b5c <I2C_ITError+0x80>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b1e:	4925      	ldr	r1, [pc, #148]	; (8003bb4 <I2C_ITError+0xd8>)
    if (hi2c->hdmatx != NULL)
 8003b20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d00c      	beq.n	8003b44 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2a:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <I2C_ITError+0xdc>)
      __HAL_UNLOCK(hi2c);
 8003b2c:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2e:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8003b30:	0023      	movs	r3, r4
 8003b32:	3340      	adds	r3, #64	; 0x40
 8003b34:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b36:	f7ff fa0e 	bl	8002f56 <HAL_DMA_Abort_IT>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d002      	beq.n	8003b44 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b3e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b42:	4798      	blx	r3
}
 8003b44:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b46:	2107      	movs	r1, #7
 8003b48:	f7ff fb92 	bl	8003270 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b4c:	782b      	ldrb	r3, [r5, #0]
 8003b4e:	2b60      	cmp	r3, #96	; 0x60
 8003b50:	d001      	beq.n	8003b56 <I2C_ITError+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b52:	2320      	movs	r3, #32
 8003b54:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	6323      	str	r3, [r4, #48]	; 0x30
 8003b5a:	e7d8      	b.n	8003b0e <I2C_ITError+0x32>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b5c:	2080      	movs	r0, #128	; 0x80
 8003b5e:	0200      	lsls	r0, r0, #8
 8003b60:	4002      	ands	r2, r0
 8003b62:	d011      	beq.n	8003b88 <I2C_ITError+0xac>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4815      	ldr	r0, [pc, #84]	; (8003bbc <I2C_ITError+0xe0>)
 8003b68:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 8003b6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b6c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d0e8      	beq.n	8003b44 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <I2C_ITError+0xdc>)
 8003b74:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8003b76:	0023      	movs	r3, r4
 8003b78:	3340      	adds	r3, #64	; 0x40
 8003b7a:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b7c:	f7ff f9eb 	bl	8002f56 <HAL_DMA_Abort_IT>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d0df      	beq.n	8003b44 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003b86:	e7db      	b.n	8003b40 <I2C_ITError+0x64>
 8003b88:	0023      	movs	r3, r4
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b8a:	7829      	ldrb	r1, [r5, #0]
 8003b8c:	3340      	adds	r3, #64	; 0x40
 8003b8e:	2960      	cmp	r1, #96	; 0x60
 8003b90:	d106      	bne.n	8003ba0 <I2C_ITError+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b92:	3940      	subs	r1, #64	; 0x40
 8003b94:	7029      	strb	r1, [r5, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b96:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8003b98:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b9a:	f7ff ff9d 	bl	8003ad8 <HAL_I2C_AbortCpltCallback>
 8003b9e:	e7d1      	b.n	8003b44 <I2C_ITError+0x68>
    __HAL_UNLOCK(hi2c);
 8003ba0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8003ba2:	0020      	movs	r0, r4
 8003ba4:	f004 fe68 	bl	8008878 <HAL_I2C_ErrorCallback>
}
 8003ba8:	e7cc      	b.n	8003b44 <I2C_ITError+0x68>
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	ffff0000 	.word	0xffff0000
 8003bb0:	08003cb5 	.word	0x08003cb5
 8003bb4:	ffffbfff 	.word	0xffffbfff
 8003bb8:	08004199 	.word	0x08004199
 8003bbc:	ffff7fff 	.word	0xffff7fff

08003bc0 <I2C_ITSlaveCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc0:	2220      	movs	r2, #32
{
 8003bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc4:	0004      	movs	r4, r0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bc6:	2580      	movs	r5, #128	; 0x80
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003bc8:	6803      	ldr	r3, [r0, #0]
{
 8003bca:	000f      	movs	r7, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003bcc:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003bce:	2107      	movs	r1, #7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd0:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003bd2:	f7ff fb4d 	bl	8003270 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	022d      	lsls	r5, r5, #8
 8003bda:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003bdc:	4933      	ldr	r1, [pc, #204]	; (8003cac <I2C_ITSlaveCplt+0xec>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bde:	432a      	orrs	r2, r5
 8003be0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8003be2:	685a      	ldr	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003be4:	0020      	movs	r0, r4
  I2C_RESET_CR2(hi2c);
 8003be6:	400a      	ands	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8003bea:	f7ff fae9 	bl	80031c0 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bee:	0473      	lsls	r3, r6, #17
 8003bf0:	d538      	bpl.n	8003c64 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8003bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <I2C_ITSlaveCplt+0x40>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c00:	2304      	movs	r3, #4
 8003c02:	421f      	tst	r7, r3
 8003c04:	d010      	beq.n	8003c28 <I2C_ITSlaveCplt+0x68>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c06:	439f      	bics	r7, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8003c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8003c16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <I2C_ITSlaveCplt+0x68>
      hi2c->XferSize--;
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003c20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8003c28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <I2C_ITSlaveCplt+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003c32:	4313      	orrs	r3, r2
 8003c34:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	0025      	movs	r5, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3c:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	7013      	strb	r3, [r2, #0]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c42:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8003c44:	6363      	str	r3, [r4, #52]	; 0x34
 8003c46:	3541      	adds	r5, #65	; 0x41
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c48:	429e      	cmp	r6, r3
 8003c4a:	d00f      	beq.n	8003c6c <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c4e:	0020      	movs	r0, r4
 8003c50:	f7ff ff44 	bl	8003adc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c54:	782b      	ldrb	r3, [r5, #0]
 8003c56:	2b28      	cmp	r3, #40	; 0x28
 8003c58:	d103      	bne.n	8003c62 <I2C_ITSlaveCplt+0xa2>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c5a:	0039      	movs	r1, r7
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	f7ff ff07 	bl	8003a70 <I2C_ITListenCplt>
}
 8003c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c64:	422e      	tst	r6, r5
 8003c66:	d0cb      	beq.n	8003c00 <I2C_ITSlaveCplt+0x40>
    if (hi2c->hdmarx != NULL)
 8003c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c6a:	e7c3      	b.n	8003bf4 <I2C_ITSlaveCplt+0x34>
 8003c6c:	0027      	movs	r7, r4
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c70:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <I2C_ITSlaveCplt+0xf0>)
 8003c72:	3740      	adds	r7, #64	; 0x40
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <I2C_ITSlaveCplt+0xd0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003c78:	0020      	movs	r0, r4
 8003c7a:	f7ff fe86 	bl	800398a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <I2C_ITSlaveCplt+0xf0>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c80:	0020      	movs	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c82:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	2320      	movs	r3, #32
 8003c86:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003c88:	703e      	strb	r6, [r7, #0]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c8a:	f7ff fef0 	bl	8003a6e <HAL_I2C_ListenCpltCallback>
 8003c8e:	e7e8      	b.n	8003c62 <I2C_ITSlaveCplt+0xa2>
 8003c90:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c92:	782a      	ldrb	r2, [r5, #0]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c94:	0020      	movs	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8003c98:	703e      	strb	r6, [r7, #0]
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c9a:	2a22      	cmp	r2, #34	; 0x22
 8003c9c:	d102      	bne.n	8003ca4 <I2C_ITSlaveCplt+0xe4>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c9e:	f7ff fe73 	bl	8003988 <HAL_I2C_SlaveRxCpltCallback>
 8003ca2:	e7de      	b.n	8003c62 <I2C_ITSlaveCplt+0xa2>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ca4:	f7ff fe6f 	bl	8003986 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ca8:	e7db      	b.n	8003c62 <I2C_ITSlaveCplt+0xa2>
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	fe00e800 	.word	0xfe00e800
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <I2C_Slave_ISR_IT>:
  __HAL_LOCK(hi2c);
 8003cb4:	0003      	movs	r3, r0
{
 8003cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
{
 8003cbe:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003cc0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
{
 8003cc2:	000d      	movs	r5, r1
 8003cc4:	0017      	movs	r7, r2
  __HAL_LOCK(hi2c);
 8003cc6:	2002      	movs	r0, #2
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d022      	beq.n	8003d12 <I2C_Slave_ISR_IT+0x5e>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	9a01      	ldr	r2, [sp, #4]
 8003cd0:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cd2:	331f      	adds	r3, #31
 8003cd4:	4219      	tst	r1, r3
 8003cd6:	d004      	beq.n	8003ce2 <I2C_Slave_ISR_IT+0x2e>
 8003cd8:	421f      	tst	r7, r3
 8003cda:	d002      	beq.n	8003ce2 <I2C_Slave_ISR_IT+0x2e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003cdc:	0020      	movs	r0, r4
 8003cde:	f7ff ff6f 	bl	8003bc0 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ce2:	2310      	movs	r3, #16
 8003ce4:	421d      	tst	r5, r3
 8003ce6:	d033      	beq.n	8003d50 <I2C_Slave_ISR_IT+0x9c>
 8003ce8:	421f      	tst	r7, r3
 8003cea:	d031      	beq.n	8003d50 <I2C_Slave_ISR_IT+0x9c>
    if (hi2c->XferCount == 0U)
 8003cec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cee:	2a00      	cmp	r2, #0
 8003cf0:	d120      	bne.n	8003d34 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003cf2:	0023      	movs	r3, r4
 8003cf4:	3341      	adds	r3, #65	; 0x41
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	2a28      	cmp	r2, #40	; 0x28
 8003cfa:	d10b      	bne.n	8003d14 <I2C_Slave_ISR_IT+0x60>
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	0492      	lsls	r2, r2, #18
 8003d00:	4296      	cmp	r6, r2
 8003d02:	d107      	bne.n	8003d14 <I2C_Slave_ISR_IT+0x60>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d04:	0029      	movs	r1, r5
 8003d06:	0020      	movs	r0, r4
 8003d08:	f7ff feb2 	bl	8003a70 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	7018      	strb	r0, [r3, #0]
}
 8003d12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d14:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d16:	7819      	ldrb	r1, [r3, #0]
 8003d18:	6823      	ldr	r3, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d1a:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d1c:	2929      	cmp	r1, #41	; 0x29
 8003d1e:	d1f5      	bne.n	8003d0c <I2C_Slave_ISR_IT+0x58>
 8003d20:	492b      	ldr	r1, [pc, #172]	; (8003dd0 <I2C_Slave_ISR_IT+0x11c>)
 8003d22:	428e      	cmp	r6, r1
 8003d24:	d0f2      	beq.n	8003d0c <I2C_Slave_ISR_IT+0x58>
        I2C_Flush_TXDR(hi2c);
 8003d26:	0020      	movs	r0, r4
 8003d28:	f7ff fa4a 	bl	80031c0 <I2C_Flush_TXDR>
      I2C_ITSlaveSeqCplt(hi2c);
 8003d2c:	0020      	movs	r0, r4
 8003d2e:	f7ff fe2c 	bl	800398a <I2C_ITSlaveSeqCplt>
 8003d32:	e7eb      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	61d3      	str	r3, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d38:	2304      	movs	r3, #4
 8003d3a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003d40:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <I2C_Slave_ISR_IT+0x120>)
 8003d42:	421e      	tst	r6, r3
 8003d44:	d1e2      	bne.n	8003d0c <I2C_Slave_ISR_IT+0x58>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d48:	0020      	movs	r0, r4
 8003d4a:	f7ff fec7 	bl	8003adc <I2C_ITError>
 8003d4e:	e7dd      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d50:	2304      	movs	r3, #4
 8003d52:	421d      	tst	r5, r3
 8003d54:	d019      	beq.n	8003d8a <I2C_Slave_ISR_IT+0xd6>
 8003d56:	421f      	tst	r7, r3
 8003d58:	d017      	beq.n	8003d8a <I2C_Slave_ISR_IT+0xd6>
    if (hi2c->XferCount > 0U)
 8003d5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00d      	beq.n	8003d7c <I2C_Slave_ISR_IT+0xc8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003d6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d70:	3b01      	subs	r3, #1
 8003d72:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003d7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1c4      	bne.n	8003d0c <I2C_Slave_ISR_IT+0x58>
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <I2C_Slave_ISR_IT+0x11c>)
 8003d84:	429e      	cmp	r6, r3
 8003d86:	d1d1      	bne.n	8003d2c <I2C_Slave_ISR_IT+0x78>
 8003d88:	e7c0      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	421d      	tst	r5, r3
 8003d8e:	d005      	beq.n	8003d9c <I2C_Slave_ISR_IT+0xe8>
 8003d90:	421f      	tst	r7, r3
 8003d92:	d003      	beq.n	8003d9c <I2C_Slave_ISR_IT+0xe8>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d94:	0020      	movs	r0, r4
 8003d96:	f7ff fe22 	bl	80039de <I2C_ITAddrCplt.isra.8>
 8003d9a:	e7b7      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	421d      	tst	r5, r3
 8003da0:	d0b4      	beq.n	8003d0c <I2C_Slave_ISR_IT+0x58>
 8003da2:	421f      	tst	r7, r3
 8003da4:	d0b2      	beq.n	8003d0c <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount > 0U)
 8003da6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003db2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003db4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003db6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003db8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003dc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	8523      	strh	r3, [r4, #40]	; 0x28
 8003dc6:	e7a1      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003dc8:	4b02      	ldr	r3, [pc, #8]	; (8003dd4 <I2C_Slave_ISR_IT+0x120>)
 8003dca:	421e      	tst	r6, r3
 8003dcc:	d0ae      	beq.n	8003d2c <I2C_Slave_ISR_IT+0x78>
 8003dce:	e79d      	b.n	8003d0c <I2C_Slave_ISR_IT+0x58>
 8003dd0:	ffff0000 	.word	0xffff0000
 8003dd4:	feffffff 	.word	0xfeffffff

08003dd8 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd8:	2220      	movs	r2, #32
 8003dda:	6803      	ldr	r3, [r0, #0]
{
 8003ddc:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dde:	61da      	str	r2, [r3, #28]
  I2C_RESET_CR2(hi2c);
 8003de0:	685a      	ldr	r2, [r3, #4]
{
 8003de2:	0004      	movs	r4, r0
  I2C_RESET_CR2(hi2c);
 8003de4:	4827      	ldr	r0, [pc, #156]	; (8003e84 <I2C_ITMasterCplt+0xac>)
 8003de6:	4002      	ands	r2, r0
 8003de8:	605a      	str	r2, [r3, #4]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	2200      	movs	r2, #0
 8003dec:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8003dee:	6362      	str	r2, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003df0:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <I2C_ITMasterCplt+0xb0>)
 8003df2:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8003df4:	2210      	movs	r2, #16
 8003df6:	4211      	tst	r1, r2
 8003df8:	d004      	beq.n	8003e04 <I2C_ITMasterCplt+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfa:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e00:	4313      	orrs	r3, r2
 8003e02:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Flush_TXDR(hi2c);
 8003e04:	0020      	movs	r0, r4
 8003e06:	f7ff f9db 	bl	80031c0 <I2C_Flush_TXDR>
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	f7ff fa2f 	bl	8003270 <I2C_Disable_IRQ>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e12:	0022      	movs	r2, r4
 8003e14:	3241      	adds	r2, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 8003e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e18:	7811      	ldrb	r1, [r2, #0]
 8003e1a:	2960      	cmp	r1, #96	; 0x60
 8003e1c:	d001      	beq.n	8003e22 <I2C_ITMasterCplt+0x4a>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <I2C_ITMasterCplt+0x54>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e24:	0020      	movs	r0, r4
 8003e26:	f7ff fe59 	bl	8003adc <I2C_ITError>
}
 8003e2a:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e2c:	7811      	ldrb	r1, [r2, #0]
 8003e2e:	2921      	cmp	r1, #33	; 0x21
 8003e30:	d112      	bne.n	8003e58 <I2C_ITMasterCplt+0x80>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	3901      	subs	r1, #1
 8003e34:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e36:	0022      	movs	r2, r4
 8003e38:	0021      	movs	r1, r4
 8003e3a:	3242      	adds	r2, #66	; 0x42
 8003e3c:	7810      	ldrb	r0, [r2, #0]
 8003e3e:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003e42:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e44:	2840      	cmp	r0, #64	; 0x40
 8003e46:	d103      	bne.n	8003e50 <I2C_ITMasterCplt+0x78>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f004 fd09 	bl	8008860 <HAL_I2C_MemTxCpltCallback>
 8003e4e:	e7ec      	b.n	8003e2a <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e50:	0020      	movs	r0, r4
 8003e52:	f7ff fd72 	bl	800393a <HAL_I2C_MasterTxCpltCallback>
 8003e56:	e7e8      	b.n	8003e2a <I2C_ITMasterCplt+0x52>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e58:	7811      	ldrb	r1, [r2, #0]
 8003e5a:	2922      	cmp	r1, #34	; 0x22
 8003e5c:	d1e5      	bne.n	8003e2a <I2C_ITMasterCplt+0x52>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	3902      	subs	r1, #2
 8003e60:	7011      	strb	r1, [r2, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e62:	0022      	movs	r2, r4
 8003e64:	0021      	movs	r1, r4
 8003e66:	3242      	adds	r2, #66	; 0x42
 8003e68:	7810      	ldrb	r0, [r2, #0]
 8003e6a:	3140      	adds	r1, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8003e6e:	700b      	strb	r3, [r1, #0]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e70:	2840      	cmp	r0, #64	; 0x40
 8003e72:	d103      	bne.n	8003e7c <I2C_ITMasterCplt+0xa4>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e74:	0020      	movs	r0, r4
 8003e76:	f004 fcf9 	bl	800886c <HAL_I2C_MemRxCpltCallback>
 8003e7a:	e7d6      	b.n	8003e2a <I2C_ITMasterCplt+0x52>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e7c:	0020      	movs	r0, r4
 8003e7e:	f7ff fd5d 	bl	800393c <HAL_I2C_MasterRxCpltCallback>
}
 8003e82:	e7d2      	b.n	8003e2a <I2C_ITMasterCplt+0x52>
 8003e84:	fe00e800 	.word	0xfe00e800
 8003e88:	ffff0000 	.word	0xffff0000

08003e8c <I2C_Slave_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8003e8c:	0003      	movs	r3, r0
{
 8003e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8003e90:	3340      	adds	r3, #64	; 0x40
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	781b      	ldrb	r3, [r3, #0]
{
 8003e96:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e98:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
{
 8003e9a:	000e      	movs	r6, r1
 8003e9c:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8003e9e:	2002      	movs	r0, #2
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d038      	beq.n	8003f16 <I2C_Slave_ISR_DMA+0x8a>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9a01      	ldr	r2, [sp, #4]
 8003ea8:	7013      	strb	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003eaa:	331f      	adds	r3, #31
 8003eac:	4219      	tst	r1, r3
 8003eae:	d004      	beq.n	8003eba <I2C_Slave_ISR_DMA+0x2e>
 8003eb0:	421d      	tst	r5, r3
 8003eb2:	d002      	beq.n	8003eba <I2C_Slave_ISR_DMA+0x2e>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f7ff fe83 	bl	8003bc0 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003eba:	2310      	movs	r3, #16
 8003ebc:	421e      	tst	r6, r3
 8003ebe:	d04d      	beq.n	8003f5c <I2C_Slave_ISR_DMA+0xd0>
 8003ec0:	421d      	tst	r5, r3
 8003ec2:	d04b      	beq.n	8003f5c <I2C_Slave_ISR_DMA+0xd0>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ec4:	22c0      	movs	r2, #192	; 0xc0
 8003ec6:	0212      	lsls	r2, r2, #8
 8003ec8:	4215      	tst	r5, r2
 8003eca:	d044      	beq.n	8003f56 <I2C_Slave_ISR_DMA+0xca>
      if (hi2c->hdmarx != NULL)
 8003ecc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  uint32_t treatdmanack = 0U;
 8003ece:	1e13      	subs	r3, r2, #0
      if (hi2c->hdmarx != NULL)
 8003ed0:	d006      	beq.n	8003ee0 <I2C_Slave_ISR_DMA+0x54>
  uint32_t treatdmanack = 0U;
 8003ed2:	2300      	movs	r3, #0
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003ed4:	0429      	lsls	r1, r5, #16
 8003ed6:	d503      	bpl.n	8003ee0 <I2C_Slave_ISR_DMA+0x54>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
  uint32_t treatdmanack = 0U;
 8003edc:	425a      	negs	r2, r3
 8003ede:	4153      	adcs	r3, r2
      if (hi2c->hdmatx != NULL)
 8003ee0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	d005      	beq.n	8003ef2 <I2C_Slave_ISR_DMA+0x66>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ee6:	0469      	lsls	r1, r5, #17
 8003ee8:	d503      	bpl.n	8003ef2 <I2C_Slave_ISR_DMA+0x66>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	6852      	ldr	r2, [r2, #4]
 8003eee:	2a00      	cmp	r2, #0
 8003ef0:	d001      	beq.n	8003ef6 <I2C_Slave_ISR_DMA+0x6a>
      if (treatdmanack == 1U)
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d120      	bne.n	8003f38 <I2C_Slave_ISR_DMA+0xac>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003ef6:	0023      	movs	r3, r4
 8003ef8:	3341      	adds	r3, #65	; 0x41
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	2a28      	cmp	r2, #40	; 0x28
 8003efe:	d10b      	bne.n	8003f18 <I2C_Slave_ISR_DMA+0x8c>
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	0492      	lsls	r2, r2, #18
 8003f04:	4297      	cmp	r7, r2
 8003f06:	d107      	bne.n	8003f18 <I2C_Slave_ISR_DMA+0x8c>
          I2C_ITListenCplt(hi2c, ITFlags);
 8003f08:	0031      	movs	r1, r6
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f7ff fdb0 	bl	8003a70 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 8003f10:	2000      	movs	r0, #0
 8003f12:	9b01      	ldr	r3, [sp, #4]
 8003f14:	7018      	strb	r0, [r3, #0]
}
 8003f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f18:	2210      	movs	r2, #16
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f1a:	7819      	ldrb	r1, [r3, #0]
 8003f1c:	6823      	ldr	r3, [r4, #0]
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1e:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f20:	2929      	cmp	r1, #41	; 0x29
 8003f22:	d1f5      	bne.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
 8003f24:	4912      	ldr	r1, [pc, #72]	; (8003f70 <I2C_Slave_ISR_DMA+0xe4>)
 8003f26:	428f      	cmp	r7, r1
 8003f28:	d0f2      	beq.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
          I2C_Flush_TXDR(hi2c);
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f7ff f948 	bl	80031c0 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8003f30:	0020      	movs	r0, r4
 8003f32:	f7ff fd2a 	bl	800398a <I2C_ITSlaveSeqCplt>
 8003f36:	e7eb      	b.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	2210      	movs	r2, #16
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f3e:	2304      	movs	r3, #4
 8003f40:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f42:	4313      	orrs	r3, r2
 8003f44:	6463      	str	r3, [r4, #68]	; 0x44
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <I2C_Slave_ISR_DMA+0xe8>)
 8003f48:	421f      	tst	r7, r3
 8003f4a:	d1e1      	bne.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003f4e:	0020      	movs	r0, r4
 8003f50:	f7ff fdc4 	bl	8003adc <I2C_ITError>
 8003f54:	e7dc      	b.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	61d3      	str	r3, [r2, #28]
 8003f5a:	e7d9      	b.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	421e      	tst	r6, r3
 8003f60:	d0d6      	beq.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
 8003f62:	421d      	tst	r5, r3
 8003f64:	d0d4      	beq.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003f66:	0020      	movs	r0, r4
 8003f68:	f7ff fd39 	bl	80039de <I2C_ITAddrCplt.isra.8>
 8003f6c:	e7d0      	b.n	8003f10 <I2C_Slave_ISR_DMA+0x84>
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	ffff0000 	.word	0xffff0000
 8003f74:	feffffff 	.word	0xfeffffff

08003f78 <I2C_Master_ISR_DMA>:
{
 8003f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(hi2c);
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	3540      	adds	r5, #64	; 0x40
 8003f7e:	782b      	ldrb	r3, [r5, #0]
{
 8003f80:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8003f82:	2002      	movs	r0, #2
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d015      	beq.n	8003fb4 <I2C_Master_ISR_DMA+0x3c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	702b      	strb	r3, [r5, #0]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f8c:	330f      	adds	r3, #15
 8003f8e:	4219      	tst	r1, r3
 8003f90:	d011      	beq.n	8003fb6 <I2C_Master_ISR_DMA+0x3e>
 8003f92:	421a      	tst	r2, r3
 8003f94:	d00f      	beq.n	8003fb6 <I2C_Master_ISR_DMA+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f96:	6822      	ldr	r2, [r4, #0]
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003f98:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f9e:	3b0c      	subs	r3, #12
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	6463      	str	r3, [r4, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fa4:	2112      	movs	r1, #18
 8003fa6:	f7ff f92f 	bl	8003208 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8003faa:	0020      	movs	r0, r4
 8003fac:	f7ff f908 	bl	80031c0 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	7028      	strb	r0, [r5, #0]
}
 8003fb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003fb6:	2340      	movs	r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003fb8:	0608      	lsls	r0, r1, #24
 8003fba:	d544      	bpl.n	8004046 <I2C_Master_ISR_DMA+0xce>
 8003fbc:	421a      	tst	r2, r3
 8003fbe:	d042      	beq.n	8004046 <I2C_Master_ISR_DMA+0xce>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	6811      	ldr	r1, [r2, #0]
 8003fc4:	4399      	bics	r1, r3
 8003fc6:	6011      	str	r1, [r2, #0]
    if (hi2c->XferCount != 0U)
 8003fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02f      	beq.n	800402e <I2C_Master_ISR_DMA+0xb6>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003fce:	6851      	ldr	r1, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003fd2:	0589      	lsls	r1, r1, #22
 8003fd4:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd6:	2bff      	cmp	r3, #255	; 0xff
 8003fd8:	d91b      	bls.n	8004012 <I2C_Master_ISR_DMA+0x9a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fda:	23ff      	movs	r3, #255	; 0xff
 8003fdc:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003fde:	2380      	movs	r3, #128	; 0x80
 8003fe0:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003fe6:	9000      	str	r0, [sp, #0]
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	0020      	movs	r0, r4
 8003fec:	f7ff f8f6 	bl	80031dc <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8003ff0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ff2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ffa:	0023      	movs	r3, r4
 8003ffc:	3341      	adds	r3, #65	; 0x41
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	6823      	ldr	r3, [r4, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004002:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004004:	2a22      	cmp	r2, #34	; 0x22
 8004006:	d10f      	bne.n	8004028 <I2C_Master_ISR_DMA+0xb0>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0212      	lsls	r2, r2, #8
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e7ce      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
        hi2c->XferSize = hi2c->XferCount;
 8004012:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004014:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8004016:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <I2C_Master_ISR_DMA+0x10c>)
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <I2C_Master_ISR_DMA+0xaa>
          xfermode = hi2c->XferOptions;
 800401e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004020:	e7df      	b.n	8003fe2 <I2C_Master_ISR_DMA+0x6a>
          xfermode = I2C_AUTOEND_MODE;
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	049b      	lsls	r3, r3, #18
 8004026:	e7dc      	b.n	8003fe2 <I2C_Master_ISR_DMA+0x6a>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	01d2      	lsls	r2, r2, #7
 800402c:	e7ee      	b.n	800400c <I2C_Master_ISR_DMA+0x94>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800402e:	6853      	ldr	r3, [r2, #4]
 8004030:	019b      	lsls	r3, r3, #6
 8004032:	d403      	bmi.n	800403c <I2C_Master_ISR_DMA+0xc4>
        I2C_ITMasterSeqCplt(hi2c);
 8004034:	0020      	movs	r0, r4
 8004036:	f7ff fc82 	bl	800393e <I2C_ITMasterSeqCplt>
 800403a:	e7b9      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	0020      	movs	r0, r4
 8004040:	f7ff fd4c 	bl	8003adc <I2C_ITError>
 8004044:	e7b4      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004046:	4219      	tst	r1, r3
 8004048:	d012      	beq.n	8004070 <I2C_Master_ISR_DMA+0xf8>
 800404a:	421a      	tst	r2, r3
 800404c:	d010      	beq.n	8004070 <I2C_Master_ISR_DMA+0xf8>
    if (hi2c->XferCount == 0U)
 800404e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f3      	bne.n	800403c <I2C_Master_ISR_DMA+0xc4>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	0192      	lsls	r2, r2, #6
 800405a:	d4a9      	bmi.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800405c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800405e:	4a09      	ldr	r2, [pc, #36]	; (8004084 <I2C_Master_ISR_DMA+0x10c>)
 8004060:	4291      	cmp	r1, r2
 8004062:	d1e7      	bne.n	8004034 <I2C_Master_ISR_DMA+0xbc>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	01d2      	lsls	r2, r2, #7
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	e79f      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004070:	2320      	movs	r3, #32
 8004072:	4219      	tst	r1, r3
 8004074:	d09c      	beq.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
 8004076:	421a      	tst	r2, r3
 8004078:	d100      	bne.n	800407c <I2C_Master_ISR_DMA+0x104>
 800407a:	e799      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800407c:	0020      	movs	r0, r4
 800407e:	f7ff feab 	bl	8003dd8 <I2C_ITMasterCplt>
 8004082:	e795      	b.n	8003fb0 <I2C_Master_ISR_DMA+0x38>
 8004084:	ffff0000 	.word	0xffff0000

08004088 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004088:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800408a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800408c:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800408e:	6802      	ldr	r2, [r0, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	6851      	ldr	r1, [r2, #4]
 8004094:	430b      	orrs	r3, r1
 8004096:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004098:	2110      	movs	r1, #16
 800409a:	f7ff fd1f 	bl	8003adc <I2C_ITError>
}
 800409e:	bd10      	pop	{r4, pc}

080040a0 <I2C_DMAMasterTransmitCplt>:
{
 80040a0:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040a2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040a4:	4911      	ldr	r1, [pc, #68]	; (80040ec <I2C_DMAMasterTransmitCplt+0x4c>)
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	6813      	ldr	r3, [r2, #0]
 80040aa:	400b      	ands	r3, r1
 80040ac:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 80040ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <I2C_DMAMasterTransmitCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80040b4:	2112      	movs	r1, #18
 80040b6:	0020      	movs	r0, r4
 80040b8:	f7ff f8a6 	bl	8003208 <I2C_Enable_IRQ>
}
 80040bc:	e013      	b.n	80040e6 <I2C_DMAMasterTransmitCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 80040be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80040c2:	1859      	adds	r1, r3, r1
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 80040c6:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c8:	2bff      	cmp	r3, #255	; 0xff
 80040ca:	d90d      	bls.n	80040e8 <I2C_DMAMasterTransmitCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040cc:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 80040ce:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 80040d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040d2:	3228      	adds	r2, #40	; 0x28
 80040d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80040d6:	f7fe ff03 	bl	8002ee0 <HAL_DMA_Start_IT>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0ea      	beq.n	80040b4 <I2C_DMAMasterTransmitCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80040de:	2110      	movs	r1, #16
 80040e0:	0020      	movs	r0, r4
 80040e2:	f7ff fcfb 	bl	8003adc <I2C_ITError>
}
 80040e6:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 80040e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ea:	e7f0      	b.n	80040ce <I2C_DMAMasterTransmitCplt+0x2e>
 80040ec:	ffffbfff 	.word	0xffffbfff

080040f0 <I2C_DMAMasterReceiveCplt>:
{
 80040f0:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040f4:	4a11      	ldr	r2, [pc, #68]	; (800413c <I2C_DMAMasterReceiveCplt+0x4c>)
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	680b      	ldr	r3, [r1, #0]
 80040fa:	4013      	ands	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 80040fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <I2C_DMAMasterReceiveCplt+0x1e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004104:	2112      	movs	r1, #18
 8004106:	0020      	movs	r0, r4
 8004108:	f7ff f87e 	bl	8003208 <I2C_Enable_IRQ>
}
 800410c:	e013      	b.n	8004136 <I2C_DMAMasterReceiveCplt+0x46>
    hi2c->pBuffPtr += hi2c->XferSize;
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004112:	189a      	adds	r2, r3, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004114:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8004116:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004118:	2bff      	cmp	r3, #255	; 0xff
 800411a:	d90d      	bls.n	8004138 <I2C_DMAMasterReceiveCplt+0x48>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800411c:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = hi2c->XferCount;
 800411e:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8004120:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004122:	3124      	adds	r1, #36	; 0x24
 8004124:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004126:	f7fe fedb 	bl	8002ee0 <HAL_DMA_Start_IT>
 800412a:	2800      	cmp	r0, #0
 800412c:	d0ea      	beq.n	8004104 <I2C_DMAMasterReceiveCplt+0x14>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800412e:	2110      	movs	r1, #16
 8004130:	0020      	movs	r0, r4
 8004132:	f7ff fcd3 	bl	8003adc <I2C_ITError>
}
 8004136:	bd10      	pop	{r4, pc}
      hi2c->XferSize = hi2c->XferCount;
 8004138:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800413a:	e7f0      	b.n	800411e <I2C_DMAMasterReceiveCplt+0x2e>
 800413c:	ffff7fff 	.word	0xffff7fff

08004140 <HAL_I2C_ER_IRQHandler>:
{
 8004140:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004142:	2580      	movs	r5, #128	; 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004144:	6803      	ldr	r3, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004146:	006d      	lsls	r5, r5, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004148:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800414a:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800414c:	4229      	tst	r1, r5
 800414e:	d006      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x1e>
 8004150:	0614      	lsls	r4, r2, #24
 8004152:	d504      	bpl.n	800415e <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004154:	2401      	movs	r4, #1
 8004156:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8004158:	4334      	orrs	r4, r6
 800415a:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800415c:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800415e:	2580      	movs	r5, #128	; 0x80
 8004160:	00ed      	lsls	r5, r5, #3
 8004162:	4229      	tst	r1, r5
 8004164:	d006      	beq.n	8004174 <HAL_I2C_ER_IRQHandler+0x34>
 8004166:	0614      	lsls	r4, r2, #24
 8004168:	d504      	bpl.n	8004174 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800416a:	2408      	movs	r4, #8
 800416c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800416e:	4334      	orrs	r4, r6
 8004170:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004172:	61dd      	str	r5, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004174:	2480      	movs	r4, #128	; 0x80
 8004176:	00a4      	lsls	r4, r4, #2
 8004178:	4221      	tst	r1, r4
 800417a:	d006      	beq.n	800418a <HAL_I2C_ER_IRQHandler+0x4a>
 800417c:	0612      	lsls	r2, r2, #24
 800417e:	d504      	bpl.n	800418a <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004180:	2202      	movs	r2, #2
 8004182:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004184:	430a      	orrs	r2, r1
 8004186:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004188:	61dc      	str	r4, [r3, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800418a:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 800418c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800418e:	4219      	tst	r1, r3
 8004190:	d001      	beq.n	8004196 <HAL_I2C_ER_IRQHandler+0x56>
    I2C_ITError(hi2c, tmperror);
 8004192:	f7ff fca3 	bl	8003adc <I2C_ITError>
}
 8004196:	bd70      	pop	{r4, r5, r6, pc}

08004198 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8004198:	2300      	movs	r3, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800419a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800419c:	b510      	push	{r4, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 800419e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80041a0:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80041a2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80041a4:	6353      	str	r3, [r2, #52]	; 0x34
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041a6:	0003      	movs	r3, r0
 80041a8:	3341      	adds	r3, #65	; 0x41
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	2a60      	cmp	r2, #96	; 0x60
 80041ae:	d104      	bne.n	80041ba <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 80041b0:	3a40      	subs	r2, #64	; 0x40
 80041b2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80041b4:	f7ff fc90 	bl	8003ad8 <HAL_I2C_AbortCpltCallback>
}
 80041b8:	bd10      	pop	{r4, pc}
    HAL_I2C_ErrorCallback(hi2c);
 80041ba:	f004 fb5d 	bl	8008878 <HAL_I2C_ErrorCallback>
}
 80041be:	e7fb      	b.n	80041b8 <I2C_DMAAbort+0x20>

080041c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c2:	0004      	movs	r4, r0
 80041c4:	3441      	adds	r4, #65	; 0x41
 80041c6:	7822      	ldrb	r2, [r4, #0]
{
 80041c8:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ca:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ce:	2a20      	cmp	r2, #32
 80041d0:	d118      	bne.n	8004204 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 80041d2:	001d      	movs	r5, r3
 80041d4:	3540      	adds	r5, #64	; 0x40
 80041d6:	782e      	ldrb	r6, [r5, #0]
 80041d8:	2e01      	cmp	r6, #1
 80041da:	d013      	beq.n	8004204 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 80041dc:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80041de:	3022      	adds	r0, #34	; 0x22
 80041e0:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80041e2:	681e      	ldr	r6, [r3, #0]
 80041e4:	3823      	subs	r0, #35	; 0x23
 80041e6:	4386      	bics	r6, r0
 80041e8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041ea:	681e      	ldr	r6, [r3, #0]
 80041ec:	4f06      	ldr	r7, [pc, #24]	; (8004208 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 80041ee:	403e      	ands	r6, r7
 80041f0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80041f2:	681e      	ldr	r6, [r3, #0]
 80041f4:	4331      	orrs	r1, r6
 80041f6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	4308      	orrs	r0, r1
 80041fc:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80041fe:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004200:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8004202:	7028      	strb	r0, [r5, #0]
  }
}
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	ffffefff 	.word	0xffffefff

0800420c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420e:	0005      	movs	r5, r0
 8004210:	3541      	adds	r5, #65	; 0x41
 8004212:	782a      	ldrb	r2, [r5, #0]
{
 8004214:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004216:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004218:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	2a20      	cmp	r2, #32
 800421c:	d117      	bne.n	800424e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800421e:	001c      	movs	r4, r3
 8004220:	3440      	adds	r4, #64	; 0x40
 8004222:	7826      	ldrb	r6, [r4, #0]
 8004224:	2e01      	cmp	r6, #1
 8004226:	d012      	beq.n	800424e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8004228:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800422a:	3022      	adds	r0, #34	; 0x22
 800422c:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 800422e:	681e      	ldr	r6, [r3, #0]
 8004230:	3823      	subs	r0, #35	; 0x23
 8004232:	4386      	bics	r6, r0
 8004234:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8004236:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8004238:	4f05      	ldr	r7, [pc, #20]	; (8004250 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 800423a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800423c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800423e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8004240:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	4308      	orrs	r0, r1
 8004246:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8004248:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800424c:	7020      	strb	r0, [r4, #0]
  }
}
 800424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004250:	fffff0ff 	.word	0xfffff0ff

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004256:	0004      	movs	r4, r0
 8004258:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425a:	2800      	cmp	r0, #0
 800425c:	d102      	bne.n	8004264 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800425e:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8004260:	b005      	add	sp, #20
 8004262:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	07db      	lsls	r3, r3, #31
 8004268:	d433      	bmi.n	80042d2 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	079b      	lsls	r3, r3, #30
 800426e:	d500      	bpl.n	8004272 <HAL_RCC_OscConfig+0x1e>
 8004270:	e087      	b.n	8004382 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	d500      	bpl.n	800427a <HAL_RCC_OscConfig+0x26>
 8004278:	e0c8      	b.n	800440c <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	075b      	lsls	r3, r3, #29
 800427e:	d500      	bpl.n	8004282 <HAL_RCC_OscConfig+0x2e>
 8004280:	e0eb      	b.n	800445a <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	06db      	lsls	r3, r3, #27
 8004286:	d51a      	bpl.n	80042be <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004288:	6962      	ldr	r2, [r4, #20]
 800428a:	4dbc      	ldr	r5, [pc, #752]	; (800457c <HAL_RCC_OscConfig+0x328>)
 800428c:	2304      	movs	r3, #4
 800428e:	2a01      	cmp	r2, #1
 8004290:	d000      	beq.n	8004294 <HAL_RCC_OscConfig+0x40>
 8004292:	e157      	b.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004294:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004296:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004298:	430b      	orrs	r3, r1
 800429a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800429c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800429e:	431a      	orrs	r2, r3
 80042a0:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80042a2:	f7fe fd63 	bl	8002d6c <HAL_GetTick>
 80042a6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042a8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80042aa:	4233      	tst	r3, r6
 80042ac:	d100      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5c>
 80042ae:	e142      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80042b0:	21f8      	movs	r1, #248	; 0xf8
 80042b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80042b4:	69a3      	ldr	r3, [r4, #24]
 80042b6:	438a      	bics	r2, r1
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4313      	orrs	r3, r2
 80042bc:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	069b      	lsls	r3, r3, #26
 80042c2:	d500      	bpl.n	80042c6 <HAL_RCC_OscConfig+0x72>
 80042c4:	e166      	b.n	8004594 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d000      	beq.n	80042ce <HAL_RCC_OscConfig+0x7a>
 80042cc:	e1a3      	b.n	8004616 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 80042ce:	2000      	movs	r0, #0
 80042d0:	e7c6      	b.n	8004260 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042d2:	210c      	movs	r1, #12
 80042d4:	4da9      	ldr	r5, [pc, #676]	; (800457c <HAL_RCC_OscConfig+0x328>)
 80042d6:	686a      	ldr	r2, [r5, #4]
 80042d8:	400a      	ands	r2, r1
 80042da:	2a04      	cmp	r2, #4
 80042dc:	d00b      	beq.n	80042f6 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042de:	686b      	ldr	r3, [r5, #4]
 80042e0:	400b      	ands	r3, r1
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d10e      	bne.n	8004304 <HAL_RCC_OscConfig+0xb0>
 80042e6:	22c0      	movs	r2, #192	; 0xc0
 80042e8:	686b      	ldr	r3, [r5, #4]
 80042ea:	0252      	lsls	r2, r2, #9
 80042ec:	4013      	ands	r3, r2
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	0252      	lsls	r2, r2, #9
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d106      	bne.n	8004304 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f6:	682b      	ldr	r3, [r5, #0]
 80042f8:	039b      	lsls	r3, r3, #14
 80042fa:	d5b6      	bpl.n	800426a <HAL_RCC_OscConfig+0x16>
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1b3      	bne.n	800426a <HAL_RCC_OscConfig+0x16>
 8004302:	e7ac      	b.n	800425e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d113      	bne.n	8004332 <HAL_RCC_OscConfig+0xde>
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	682a      	ldr	r2, [r5, #0]
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	4313      	orrs	r3, r2
 8004312:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004314:	f7fe fd2a 	bl	8002d6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004318:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800431a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431c:	02b6      	lsls	r6, r6, #10
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	4233      	tst	r3, r6
 8004322:	d1a2      	bne.n	800426a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004324:	f7fe fd22 	bl	8002d6c <HAL_GetTick>
 8004328:	1bc0      	subs	r0, r0, r7
 800432a:	2864      	cmp	r0, #100	; 0x64
 800432c:	d9f7      	bls.n	800431e <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800432e:	2003      	movs	r0, #3
 8004330:	e796      	b.n	8004260 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004332:	2b00      	cmp	r3, #0
 8004334:	d115      	bne.n	8004362 <HAL_RCC_OscConfig+0x10e>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	4a91      	ldr	r2, [pc, #580]	; (8004580 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433c:	4013      	ands	r3, r2
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	4a90      	ldr	r2, [pc, #576]	; (8004584 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004344:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004346:	4013      	ands	r3, r2
 8004348:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800434a:	f7fe fd0f 	bl	8002d6c <HAL_GetTick>
 800434e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	4233      	tst	r3, r6
 8004354:	d089      	beq.n	800426a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004356:	f7fe fd09 	bl	8002d6c <HAL_GetTick>
 800435a:	1bc0      	subs	r0, r0, r7
 800435c:	2864      	cmp	r0, #100	; 0x64
 800435e:	d9f7      	bls.n	8004350 <HAL_RCC_OscConfig+0xfc>
 8004360:	e7e5      	b.n	800432e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	2b05      	cmp	r3, #5
 8004364:	d105      	bne.n	8004372 <HAL_RCC_OscConfig+0x11e>
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	682a      	ldr	r2, [r5, #0]
 800436a:	02db      	lsls	r3, r3, #11
 800436c:	4313      	orrs	r3, r2
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	e7cb      	b.n	800430a <HAL_RCC_OscConfig+0xb6>
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	4a82      	ldr	r2, [pc, #520]	; (8004580 <HAL_RCC_OscConfig+0x32c>)
 8004376:	4013      	ands	r3, r2
 8004378:	602b      	str	r3, [r5, #0]
 800437a:	682b      	ldr	r3, [r5, #0]
 800437c:	4a81      	ldr	r2, [pc, #516]	; (8004584 <HAL_RCC_OscConfig+0x330>)
 800437e:	4013      	ands	r3, r2
 8004380:	e7c7      	b.n	8004312 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004382:	220c      	movs	r2, #12
 8004384:	4d7d      	ldr	r5, [pc, #500]	; (800457c <HAL_RCC_OscConfig+0x328>)
 8004386:	686b      	ldr	r3, [r5, #4]
 8004388:	4213      	tst	r3, r2
 800438a:	d00b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800438c:	686b      	ldr	r3, [r5, #4]
 800438e:	4013      	ands	r3, r2
 8004390:	2b08      	cmp	r3, #8
 8004392:	d116      	bne.n	80043c2 <HAL_RCC_OscConfig+0x16e>
 8004394:	22c0      	movs	r2, #192	; 0xc0
 8004396:	686b      	ldr	r3, [r5, #4]
 8004398:	0252      	lsls	r2, r2, #9
 800439a:	4013      	ands	r3, r2
 800439c:	2280      	movs	r2, #128	; 0x80
 800439e:	0212      	lsls	r2, r2, #8
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10e      	bne.n	80043c2 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	079b      	lsls	r3, r3, #30
 80043a8:	d503      	bpl.n	80043b2 <HAL_RCC_OscConfig+0x15e>
 80043aa:	68e3      	ldr	r3, [r4, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d000      	beq.n	80043b2 <HAL_RCC_OscConfig+0x15e>
 80043b0:	e755      	b.n	800425e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	21f8      	movs	r1, #248	; 0xf8
 80043b4:	682a      	ldr	r2, [r5, #0]
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	438a      	bics	r2, r1
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4313      	orrs	r3, r2
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	e757      	b.n	8004272 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043c2:	68e2      	ldr	r2, [r4, #12]
 80043c4:	2301      	movs	r3, #1
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	d00f      	beq.n	80043ea <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 80043ca:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80043ce:	4313      	orrs	r3, r2
 80043d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80043d2:	f7fe fccb 	bl	8002d6c <HAL_GetTick>
 80043d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	4233      	tst	r3, r6
 80043dc:	d1e9      	bne.n	80043b2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe fcc5 	bl	8002d6c <HAL_GetTick>
 80043e2:	1bc0      	subs	r0, r0, r7
 80043e4:	2802      	cmp	r0, #2
 80043e6:	d9f7      	bls.n	80043d8 <HAL_RCC_OscConfig+0x184>
 80043e8:	e7a1      	b.n	800432e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 80043ea:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ec:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80043ee:	439a      	bics	r2, r3
 80043f0:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80043f2:	f7fe fcbb 	bl	8002d6c <HAL_GetTick>
 80043f6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	4233      	tst	r3, r6
 80043fc:	d100      	bne.n	8004400 <HAL_RCC_OscConfig+0x1ac>
 80043fe:	e738      	b.n	8004272 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004400:	f7fe fcb4 	bl	8002d6c <HAL_GetTick>
 8004404:	1bc0      	subs	r0, r0, r7
 8004406:	2802      	cmp	r0, #2
 8004408:	d9f6      	bls.n	80043f8 <HAL_RCC_OscConfig+0x1a4>
 800440a:	e790      	b.n	800432e <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800440c:	69e2      	ldr	r2, [r4, #28]
 800440e:	2301      	movs	r3, #1
 8004410:	4d5a      	ldr	r5, [pc, #360]	; (800457c <HAL_RCC_OscConfig+0x328>)
 8004412:	2a00      	cmp	r2, #0
 8004414:	d010      	beq.n	8004438 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8004416:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004418:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800441a:	4313      	orrs	r3, r2
 800441c:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800441e:	f7fe fca5 	bl	8002d6c <HAL_GetTick>
 8004422:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004424:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004426:	4233      	tst	r3, r6
 8004428:	d000      	beq.n	800442c <HAL_RCC_OscConfig+0x1d8>
 800442a:	e726      	b.n	800427a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442c:	f7fe fc9e 	bl	8002d6c <HAL_GetTick>
 8004430:	1bc0      	subs	r0, r0, r7
 8004432:	2802      	cmp	r0, #2
 8004434:	d9f6      	bls.n	8004424 <HAL_RCC_OscConfig+0x1d0>
 8004436:	e77a      	b.n	800432e <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8004438:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800443c:	439a      	bics	r2, r3
 800443e:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004440:	f7fe fc94 	bl	8002d6c <HAL_GetTick>
 8004444:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004448:	4233      	tst	r3, r6
 800444a:	d100      	bne.n	800444e <HAL_RCC_OscConfig+0x1fa>
 800444c:	e715      	b.n	800427a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444e:	f7fe fc8d 	bl	8002d6c <HAL_GetTick>
 8004452:	1bc0      	subs	r0, r0, r7
 8004454:	2802      	cmp	r0, #2
 8004456:	d9f6      	bls.n	8004446 <HAL_RCC_OscConfig+0x1f2>
 8004458:	e769      	b.n	800432e <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800445c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445e:	4d47      	ldr	r5, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x328>)
 8004460:	0552      	lsls	r2, r2, #21
 8004462:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004464:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004466:	4213      	tst	r3, r2
 8004468:	d108      	bne.n	800447c <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	69eb      	ldr	r3, [r5, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	61eb      	str	r3, [r5, #28]
 8004470:	69eb      	ldr	r3, [r5, #28]
 8004472:	4013      	ands	r3, r2
 8004474:	9303      	str	r3, [sp, #12]
 8004476:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	2780      	movs	r7, #128	; 0x80
 800447e:	4e42      	ldr	r6, [pc, #264]	; (8004588 <HAL_RCC_OscConfig+0x334>)
 8004480:	007f      	lsls	r7, r7, #1
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	423b      	tst	r3, r7
 8004486:	d006      	beq.n	8004496 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d113      	bne.n	80044b6 <HAL_RCC_OscConfig+0x262>
 800448e:	6a2a      	ldr	r2, [r5, #32]
 8004490:	4313      	orrs	r3, r2
 8004492:	622b      	str	r3, [r5, #32]
 8004494:	e030      	b.n	80044f8 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004496:	6833      	ldr	r3, [r6, #0]
 8004498:	433b      	orrs	r3, r7
 800449a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800449c:	f7fe fc66 	bl	8002d6c <HAL_GetTick>
 80044a0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	423b      	tst	r3, r7
 80044a6:	d1ef      	bne.n	8004488 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fe fc60 	bl	8002d6c <HAL_GetTick>
 80044ac:	9b01      	ldr	r3, [sp, #4]
 80044ae:	1ac0      	subs	r0, r0, r3
 80044b0:	2864      	cmp	r0, #100	; 0x64
 80044b2:	d9f6      	bls.n	80044a2 <HAL_RCC_OscConfig+0x24e>
 80044b4:	e73b      	b.n	800432e <HAL_RCC_OscConfig+0xda>
 80044b6:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d114      	bne.n	80044e6 <HAL_RCC_OscConfig+0x292>
 80044bc:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044be:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	4393      	bics	r3, r2
 80044c2:	622b      	str	r3, [r5, #32]
 80044c4:	6a2b      	ldr	r3, [r5, #32]
 80044c6:	3203      	adds	r2, #3
 80044c8:	4393      	bics	r3, r2
 80044ca:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80044cc:	f7fe fc4e 	bl	8002d6c <HAL_GetTick>
 80044d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	6a2b      	ldr	r3, [r5, #32]
 80044d4:	423b      	tst	r3, r7
 80044d6:	d025      	beq.n	8004524 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7fe fc48 	bl	8002d6c <HAL_GetTick>
 80044dc:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_OscConfig+0x338>)
 80044de:	1b80      	subs	r0, r0, r6
 80044e0:	4298      	cmp	r0, r3
 80044e2:	d9f6      	bls.n	80044d2 <HAL_RCC_OscConfig+0x27e>
 80044e4:	e723      	b.n	800432e <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e6:	2b05      	cmp	r3, #5
 80044e8:	d10b      	bne.n	8004502 <HAL_RCC_OscConfig+0x2ae>
 80044ea:	6a29      	ldr	r1, [r5, #32]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	430b      	orrs	r3, r1
 80044f0:	622b      	str	r3, [r5, #32]
 80044f2:	6a2b      	ldr	r3, [r5, #32]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80044f8:	f7fe fc38 	bl	8002d6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80044fe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00d      	b.n	800451e <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004502:	6a2b      	ldr	r3, [r5, #32]
 8004504:	4393      	bics	r3, r2
 8004506:	2204      	movs	r2, #4
 8004508:	622b      	str	r3, [r5, #32]
 800450a:	6a2b      	ldr	r3, [r5, #32]
 800450c:	4393      	bics	r3, r2
 800450e:	e7c0      	b.n	8004492 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fe fc2c 	bl	8002d6c <HAL_GetTick>
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCC_OscConfig+0x338>)
 8004516:	1b80      	subs	r0, r0, r6
 8004518:	4298      	cmp	r0, r3
 800451a:	d900      	bls.n	800451e <HAL_RCC_OscConfig+0x2ca>
 800451c:	e707      	b.n	800432e <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	6a2b      	ldr	r3, [r5, #32]
 8004520:	423b      	tst	r3, r7
 8004522:	d0f5      	beq.n	8004510 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8004524:	9b00      	ldr	r3, [sp, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d000      	beq.n	800452c <HAL_RCC_OscConfig+0x2d8>
 800452a:	e6aa      	b.n	8004282 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	69eb      	ldr	r3, [r5, #28]
 800452e:	4a18      	ldr	r2, [pc, #96]	; (8004590 <HAL_RCC_OscConfig+0x33c>)
 8004530:	4013      	ands	r3, r2
 8004532:	61eb      	str	r3, [r5, #28]
 8004534:	e6a5      	b.n	8004282 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004536:	f7fe fc19 	bl	8002d6c <HAL_GetTick>
 800453a:	1bc0      	subs	r0, r0, r7
 800453c:	2802      	cmp	r0, #2
 800453e:	d800      	bhi.n	8004542 <HAL_RCC_OscConfig+0x2ee>
 8004540:	e6b2      	b.n	80042a8 <HAL_RCC_OscConfig+0x54>
 8004542:	e6f4      	b.n	800432e <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004544:	3205      	adds	r2, #5
 8004546:	d103      	bne.n	8004550 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004548:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800454a:	439a      	bics	r2, r3
 800454c:	636a      	str	r2, [r5, #52]	; 0x34
 800454e:	e6af      	b.n	80042b0 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004550:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004552:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004554:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8004556:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8004558:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800455a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800455c:	4393      	bics	r3, r2
 800455e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004560:	f7fe fc04 	bl	8002d6c <HAL_GetTick>
 8004564:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004566:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004568:	4233      	tst	r3, r6
 800456a:	d100      	bne.n	800456e <HAL_RCC_OscConfig+0x31a>
 800456c:	e6a7      	b.n	80042be <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800456e:	f7fe fbfd 	bl	8002d6c <HAL_GetTick>
 8004572:	1bc0      	subs	r0, r0, r7
 8004574:	2802      	cmp	r0, #2
 8004576:	d9f6      	bls.n	8004566 <HAL_RCC_OscConfig+0x312>
 8004578:	e6d9      	b.n	800432e <HAL_RCC_OscConfig+0xda>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	40021000 	.word	0x40021000
 8004580:	fffeffff 	.word	0xfffeffff
 8004584:	fffbffff 	.word	0xfffbffff
 8004588:	40007000 	.word	0x40007000
 800458c:	00001388 	.word	0x00001388
 8004590:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004594:	210c      	movs	r1, #12
 8004596:	4d53      	ldr	r5, [pc, #332]	; (80046e4 <HAL_RCC_OscConfig+0x490>)
 8004598:	686a      	ldr	r2, [r5, #4]
 800459a:	400a      	ands	r2, r1
 800459c:	428a      	cmp	r2, r1
 800459e:	d009      	beq.n	80045b4 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045a0:	686b      	ldr	r3, [r5, #4]
 80045a2:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80045a8:	22c0      	movs	r2, #192	; 0xc0
 80045aa:	686b      	ldr	r3, [r5, #4]
 80045ac:	0252      	lsls	r2, r2, #9
 80045ae:	4013      	ands	r3, r2
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80045b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045b6:	03db      	lsls	r3, r3, #15
 80045b8:	d400      	bmi.n	80045bc <HAL_RCC_OscConfig+0x368>
 80045ba:	e684      	b.n	80042c6 <HAL_RCC_OscConfig+0x72>
 80045bc:	6a23      	ldr	r3, [r4, #32]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d000      	beq.n	80045c4 <HAL_RCC_OscConfig+0x370>
 80045c2:	e64c      	b.n	800425e <HAL_RCC_OscConfig+0xa>
 80045c4:	e67f      	b.n	80042c6 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c6:	6a23      	ldr	r3, [r4, #32]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d011      	beq.n	80045f0 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 80045cc:	2680      	movs	r6, #128	; 0x80
 80045ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045d0:	0276      	lsls	r6, r6, #9
 80045d2:	4333      	orrs	r3, r6
 80045d4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80045d6:	f7fe fbc9 	bl	8002d6c <HAL_GetTick>
 80045da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80045dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045de:	4233      	tst	r3, r6
 80045e0:	d000      	beq.n	80045e4 <HAL_RCC_OscConfig+0x390>
 80045e2:	e670      	b.n	80042c6 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e4:	f7fe fbc2 	bl	8002d6c <HAL_GetTick>
 80045e8:	1bc0      	subs	r0, r0, r7
 80045ea:	2802      	cmp	r0, #2
 80045ec:	d9f6      	bls.n	80045dc <HAL_RCC_OscConfig+0x388>
 80045ee:	e69e      	b.n	800432e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 80045f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80045f4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80045f6:	4013      	ands	r3, r2
 80045f8:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80045fa:	f7fe fbb7 	bl	8002d6c <HAL_GetTick>
 80045fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004600:	0276      	lsls	r6, r6, #9
 8004602:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004604:	4233      	tst	r3, r6
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x3b6>
 8004608:	e65d      	b.n	80042c6 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800460a:	f7fe fbaf 	bl	8002d6c <HAL_GetTick>
 800460e:	1bc0      	subs	r0, r0, r7
 8004610:	2802      	cmp	r0, #2
 8004612:	d9f6      	bls.n	8004602 <HAL_RCC_OscConfig+0x3ae>
 8004614:	e68b      	b.n	800432e <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004616:	200c      	movs	r0, #12
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCC_OscConfig+0x490>)
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	001d      	movs	r5, r3
 800461e:	4001      	ands	r1, r0
 8004620:	2908      	cmp	r1, #8
 8004622:	d044      	beq.n	80046ae <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4931      	ldr	r1, [pc, #196]	; (80046ec <HAL_RCC_OscConfig+0x498>)
 8004628:	400b      	ands	r3, r1
 800462a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462c:	2a02      	cmp	r2, #2
 800462e:	d12f      	bne.n	8004690 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8004630:	f7fe fb9c 	bl	8002d6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004634:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8004636:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	04b6      	lsls	r6, r6, #18
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	4233      	tst	r3, r6
 800463e:	d121      	bne.n	8004684 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004640:	220f      	movs	r2, #15
 8004642:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004644:	4393      	bics	r3, r2
 8004646:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004648:	4313      	orrs	r3, r2
 800464a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800464c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800464e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004650:	686a      	ldr	r2, [r5, #4]
 8004652:	430b      	orrs	r3, r1
 8004654:	4926      	ldr	r1, [pc, #152]	; (80046f0 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004656:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	400a      	ands	r2, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800465e:	2380      	movs	r3, #128	; 0x80
 8004660:	682a      	ldr	r2, [r5, #0]
 8004662:	045b      	lsls	r3, r3, #17
 8004664:	4313      	orrs	r3, r2
 8004666:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004668:	f7fe fb80 	bl	8002d6c <HAL_GetTick>
 800466c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800466e:	04a4      	lsls	r4, r4, #18
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	4223      	tst	r3, r4
 8004674:	d000      	beq.n	8004678 <HAL_RCC_OscConfig+0x424>
 8004676:	e62a      	b.n	80042ce <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fb78 	bl	8002d6c <HAL_GetTick>
 800467c:	1b80      	subs	r0, r0, r6
 800467e:	2802      	cmp	r0, #2
 8004680:	d9f6      	bls.n	8004670 <HAL_RCC_OscConfig+0x41c>
 8004682:	e654      	b.n	800432e <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004684:	f7fe fb72 	bl	8002d6c <HAL_GetTick>
 8004688:	1bc0      	subs	r0, r0, r7
 800468a:	2802      	cmp	r0, #2
 800468c:	d9d5      	bls.n	800463a <HAL_RCC_OscConfig+0x3e6>
 800468e:	e64e      	b.n	800432e <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8004690:	f7fe fb6c 	bl	8002d6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8004696:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004698:	04a4      	lsls	r4, r4, #18
 800469a:	682b      	ldr	r3, [r5, #0]
 800469c:	4223      	tst	r3, r4
 800469e:	d100      	bne.n	80046a2 <HAL_RCC_OscConfig+0x44e>
 80046a0:	e615      	b.n	80042ce <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe fb63 	bl	8002d6c <HAL_GetTick>
 80046a6:	1b80      	subs	r0, r0, r6
 80046a8:	2802      	cmp	r0, #2
 80046aa:	d9f6      	bls.n	800469a <HAL_RCC_OscConfig+0x446>
 80046ac:	e63f      	b.n	800432e <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ae:	2a01      	cmp	r2, #1
 80046b0:	d100      	bne.n	80046b4 <HAL_RCC_OscConfig+0x460>
 80046b2:	e5d4      	b.n	800425e <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80046b6:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80046ba:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	4002      	ands	r2, r0
 80046c0:	428a      	cmp	r2, r1
 80046c2:	d000      	beq.n	80046c6 <HAL_RCC_OscConfig+0x472>
 80046c4:	e5cb      	b.n	800425e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80046c6:	220f      	movs	r2, #15
 80046c8:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d000      	beq.n	80046d2 <HAL_RCC_OscConfig+0x47e>
 80046d0:	e5c5      	b.n	800425e <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80046d2:	23f0      	movs	r3, #240	; 0xf0
 80046d4:	039b      	lsls	r3, r3, #14
 80046d6:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80046d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80046da:	1ac0      	subs	r0, r0, r3
 80046dc:	1e43      	subs	r3, r0, #1
 80046de:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80046e0:	b2c0      	uxtb	r0, r0
 80046e2:	e5bd      	b.n	8004260 <HAL_RCC_OscConfig+0xc>
 80046e4:	40021000 	.word	0x40021000
 80046e8:	fffeffff 	.word	0xfffeffff
 80046ec:	feffffff 	.word	0xfeffffff
 80046f0:	ffc27fff 	.word	0xffc27fff

080046f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80046f6:	4c19      	ldr	r4, [pc, #100]	; (800475c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80046f8:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80046fa:	2210      	movs	r2, #16
 80046fc:	0021      	movs	r1, r4
 80046fe:	4668      	mov	r0, sp
 8004700:	f007 faf0 	bl	800bce4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004704:	0021      	movs	r1, r4
 8004706:	ad04      	add	r5, sp, #16
 8004708:	2210      	movs	r2, #16
 800470a:	3110      	adds	r1, #16
 800470c:	0028      	movs	r0, r5
 800470e:	f007 fae9 	bl	800bce4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004712:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004714:	4e12      	ldr	r6, [pc, #72]	; (8004760 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004716:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004718:	401a      	ands	r2, r3
 800471a:	2a08      	cmp	r2, #8
 800471c:	d004      	beq.n	8004728 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2a0c      	cmp	r2, #12
 8004720:	d11a      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004722:	4810      	ldr	r0, [pc, #64]	; (8004764 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004724:	b008      	add	sp, #32
 8004726:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004728:	200f      	movs	r0, #15
 800472a:	466a      	mov	r2, sp
 800472c:	0c99      	lsrs	r1, r3, #18
 800472e:	4001      	ands	r1, r0
 8004730:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004732:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004734:	4002      	ands	r2, r0
 8004736:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004738:	22c0      	movs	r2, #192	; 0xc0
 800473a:	2080      	movs	r0, #128	; 0x80
 800473c:	0252      	lsls	r2, r2, #9
 800473e:	4013      	ands	r3, r2
 8004740:	0240      	lsls	r0, r0, #9
 8004742:	4283      	cmp	r3, r0
 8004744:	d101      	bne.n	800474a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004746:	4808      	ldr	r0, [pc, #32]	; (8004768 <HAL_RCC_GetSysClockFreq+0x74>)
 8004748:	e002      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800474a:	4293      	cmp	r3, r2
 800474c:	d1fb      	bne.n	8004746 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800474e:	4805      	ldr	r0, [pc, #20]	; (8004764 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004750:	f7fb fcfe 	bl	8000150 <__udivsi3>
 8004754:	4360      	muls	r0, r4
 8004756:	e7e5      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8004758:	4803      	ldr	r0, [pc, #12]	; (8004768 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800475a:	e7e3      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x30>
 800475c:	0800e2c8 	.word	0x0800e2c8
 8004760:	40021000 	.word	0x40021000
 8004764:	02dc6c00 	.word	0x02dc6c00
 8004768:	007a1200 	.word	0x007a1200

0800476c <HAL_RCC_ClockConfig>:
{
 800476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476e:	0005      	movs	r5, r0
 8004770:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8004772:	2800      	cmp	r0, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
}
 8004778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477a:	2201      	movs	r2, #1
 800477c:	4c3b      	ldr	r4, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x100>)
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	4013      	ands	r3, r2
 8004782:	428b      	cmp	r3, r1
 8004784:	d31c      	bcc.n	80047c0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	078b      	lsls	r3, r1, #30
 800478a:	d422      	bmi.n	80047d2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478c:	07cb      	lsls	r3, r1, #31
 800478e:	d42f      	bmi.n	80047f0 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	2301      	movs	r3, #1
 8004792:	6822      	ldr	r2, [r4, #0]
 8004794:	401a      	ands	r2, r3
 8004796:	4297      	cmp	r7, r2
 8004798:	d359      	bcc.n	800484e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	4c34      	ldr	r4, [pc, #208]	; (8004870 <HAL_RCC_ClockConfig+0x104>)
 800479e:	075b      	lsls	r3, r3, #29
 80047a0:	d45d      	bmi.n	800485e <HAL_RCC_ClockConfig+0xf2>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047a2:	f7ff ffa7 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_RCC_ClockConfig+0x108>)
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	0f1b      	lsrs	r3, r3, #28
 80047ae:	5cd3      	ldrb	r3, [r2, r3]
 80047b0:	40d8      	lsrs	r0, r3
 80047b2:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_RCC_ClockConfig+0x10c>)
 80047b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fe fa98 	bl	8002cec <HAL_InitTick>
  return HAL_OK;
 80047bc:	2000      	movs	r0, #0
 80047be:	e7db      	b.n	8004778 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	4393      	bics	r3, r2
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	4013      	ands	r3, r2
 80047cc:	4299      	cmp	r1, r3
 80047ce:	d1d2      	bne.n	8004776 <HAL_RCC_ClockConfig+0xa>
 80047d0:	e7d9      	b.n	8004786 <HAL_RCC_ClockConfig+0x1a>
 80047d2:	4a27      	ldr	r2, [pc, #156]	; (8004870 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	074b      	lsls	r3, r1, #29
 80047d6:	d504      	bpl.n	80047e2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80047d8:	23e0      	movs	r3, #224	; 0xe0
 80047da:	6850      	ldr	r0, [r2, #4]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4303      	orrs	r3, r0
 80047e0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e2:	20f0      	movs	r0, #240	; 0xf0
 80047e4:	6853      	ldr	r3, [r2, #4]
 80047e6:	4383      	bics	r3, r0
 80047e8:	68a8      	ldr	r0, [r5, #8]
 80047ea:	4303      	orrs	r3, r0
 80047ec:	6053      	str	r3, [r2, #4]
 80047ee:	e7cd      	b.n	800478c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f0:	686a      	ldr	r2, [r5, #4]
 80047f2:	4e1f      	ldr	r6, [pc, #124]	; (8004870 <HAL_RCC_ClockConfig+0x104>)
 80047f4:	2a01      	cmp	r2, #1
 80047f6:	d11a      	bne.n	800482e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f8:	6833      	ldr	r3, [r6, #0]
 80047fa:	039b      	lsls	r3, r3, #14
 80047fc:	d5bb      	bpl.n	8004776 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	2103      	movs	r1, #3
 8004800:	6873      	ldr	r3, [r6, #4]
 8004802:	438b      	bics	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004808:	f7fe fab0 	bl	8002d6c <HAL_GetTick>
 800480c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	230c      	movs	r3, #12
 8004810:	6872      	ldr	r2, [r6, #4]
 8004812:	401a      	ands	r2, r3
 8004814:	686b      	ldr	r3, [r5, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d0b9      	beq.n	8004790 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481c:	f7fe faa6 	bl	8002d6c <HAL_GetTick>
 8004820:	9b01      	ldr	r3, [sp, #4]
 8004822:	1ac0      	subs	r0, r0, r3
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCC_ClockConfig+0x110>)
 8004826:	4298      	cmp	r0, r3
 8004828:	d9f1      	bls.n	800480e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800482a:	2003      	movs	r0, #3
 800482c:	e7a4      	b.n	8004778 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482e:	2a02      	cmp	r2, #2
 8004830:	d103      	bne.n	800483a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	6833      	ldr	r3, [r6, #0]
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	d4e2      	bmi.n	80047fe <HAL_RCC_ClockConfig+0x92>
 8004838:	e79d      	b.n	8004776 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800483a:	2a03      	cmp	r2, #3
 800483c:	d103      	bne.n	8004846 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800483e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004840:	03db      	lsls	r3, r3, #15
 8004842:	d4dc      	bmi.n	80047fe <HAL_RCC_ClockConfig+0x92>
 8004844:	e797      	b.n	8004776 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	6833      	ldr	r3, [r6, #0]
 8004848:	079b      	lsls	r3, r3, #30
 800484a:	d4d8      	bmi.n	80047fe <HAL_RCC_ClockConfig+0x92>
 800484c:	e793      	b.n	8004776 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	439a      	bics	r2, r3
 8004852:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	421a      	tst	r2, r3
 8004858:	d000      	beq.n	800485c <HAL_RCC_ClockConfig+0xf0>
 800485a:	e78c      	b.n	8004776 <HAL_RCC_ClockConfig+0xa>
 800485c:	e79d      	b.n	800479a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	4a07      	ldr	r2, [pc, #28]	; (8004880 <HAL_RCC_ClockConfig+0x114>)
 8004862:	4013      	ands	r3, r2
 8004864:	68ea      	ldr	r2, [r5, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	e79a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x36>
 800486c:	40022000 	.word	0x40022000
 8004870:	40021000 	.word	0x40021000
 8004874:	0800f7ba 	.word	0x0800f7ba
 8004878:	2000001c 	.word	0x2000001c
 800487c:	00001388 	.word	0x00001388
 8004880:	fffff8ff 	.word	0xfffff8ff

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004886:	4a05      	ldr	r2, [pc, #20]	; (800489c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	055b      	lsls	r3, r3, #21
 800488c:	0f5b      	lsrs	r3, r3, #29
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004892:	6810      	ldr	r0, [r2, #0]
 8004894:	40d8      	lsrs	r0, r3
}    
 8004896:	4770      	bx	lr
 8004898:	40021000 	.word	0x40021000
 800489c:	0800f7ca 	.word	0x0800f7ca
 80048a0:	2000001c 	.word	0x2000001c

080048a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048a6:	6803      	ldr	r3, [r0, #0]
{
 80048a8:	b085      	sub	sp, #20
 80048aa:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ac:	03db      	lsls	r3, r3, #15
 80048ae:	d528      	bpl.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b4:	4c44      	ldr	r4, [pc, #272]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80048b6:	0552      	lsls	r2, r2, #21
 80048b8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80048ba:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048bc:	4213      	tst	r3, r2
 80048be:	d108      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c0:	69e3      	ldr	r3, [r4, #28]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61e3      	str	r3, [r4, #28]
 80048c6:	69e3      	ldr	r3, [r4, #28]
 80048c8:	4013      	ands	r3, r2
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80048ce:	2301      	movs	r3, #1
 80048d0:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d2:	2780      	movs	r7, #128	; 0x80
 80048d4:	4e3d      	ldr	r6, [pc, #244]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80048d6:	007f      	lsls	r7, r7, #1
 80048d8:	6833      	ldr	r3, [r6, #0]
 80048da:	423b      	tst	r3, r7
 80048dc:	d041      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048de:	22c0      	movs	r2, #192	; 0xc0
 80048e0:	6a23      	ldr	r3, [r4, #32]
 80048e2:	0092      	lsls	r2, r2, #2
 80048e4:	4013      	ands	r3, r2
 80048e6:	4e3a      	ldr	r6, [pc, #232]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e8:	d14d      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ea:	6a23      	ldr	r3, [r4, #32]
 80048ec:	401e      	ands	r6, r3
 80048ee:	686b      	ldr	r3, [r5, #4]
 80048f0:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048f2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f4:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d103      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	69e3      	ldr	r3, [r4, #28]
 80048fc:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	4013      	ands	r3, r2
 8004900:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	07da      	lsls	r2, r3, #31
 8004906:	d506      	bpl.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004908:	2003      	movs	r0, #3
 800490a:	492f      	ldr	r1, [pc, #188]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800490c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800490e:	4382      	bics	r2, r0
 8004910:	68a8      	ldr	r0, [r5, #8]
 8004912:	4302      	orrs	r2, r0
 8004914:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004916:	079a      	lsls	r2, r3, #30
 8004918:	d506      	bpl.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800491a:	492b      	ldr	r1, [pc, #172]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800491c:	482e      	ldr	r0, [pc, #184]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800491e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004920:	4002      	ands	r2, r0
 8004922:	68e8      	ldr	r0, [r5, #12]
 8004924:	4302      	orrs	r2, r0
 8004926:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004928:	035a      	lsls	r2, r3, #13
 800492a:	d506      	bpl.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492c:	4926      	ldr	r1, [pc, #152]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800492e:	482b      	ldr	r0, [pc, #172]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004930:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004932:	4002      	ands	r2, r0
 8004934:	6928      	ldr	r0, [r5, #16]
 8004936:	4302      	orrs	r2, r0
 8004938:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493a:	069a      	lsls	r2, r3, #26
 800493c:	d506      	bpl.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800493e:	2010      	movs	r0, #16
 8004940:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004942:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004944:	4382      	bics	r2, r0
 8004946:	6968      	ldr	r0, [r5, #20]
 8004948:	4302      	orrs	r2, r0
 800494a:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800494c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800494e:	055b      	lsls	r3, r3, #21
 8004950:	d517      	bpl.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004956:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004958:	438b      	bics	r3, r1
 800495a:	69a9      	ldr	r1, [r5, #24]
 800495c:	430b      	orrs	r3, r1
 800495e:	6313      	str	r3, [r2, #48]	; 0x30
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	6833      	ldr	r3, [r6, #0]
 8004964:	433b      	orrs	r3, r7
 8004966:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004968:	f7fe fa00 	bl	8002d6c <HAL_GetTick>
 800496c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	6833      	ldr	r3, [r6, #0]
 8004970:	423b      	tst	r3, r7
 8004972:	d1b4      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004974:	f7fe f9fa 	bl	8002d6c <HAL_GetTick>
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	1ac0      	subs	r0, r0, r3
 800497c:	2864      	cmp	r0, #100	; 0x64
 800497e:	d9f6      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 8004980:	2003      	movs	r0, #3
}
 8004982:	b005      	add	sp, #20
 8004984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004986:	6869      	ldr	r1, [r5, #4]
 8004988:	400a      	ands	r2, r1
 800498a:	4293      	cmp	r3, r2
 800498c:	d0ad      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800498e:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004990:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004992:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004994:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8004996:	025b      	lsls	r3, r3, #9
 8004998:	4303      	orrs	r3, r0
 800499a:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499c:	6a23      	ldr	r3, [r4, #32]
 800499e:	4810      	ldr	r0, [pc, #64]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a0:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049a2:	4003      	ands	r3, r0
 80049a4:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80049a6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049a8:	07d3      	lsls	r3, r2, #31
 80049aa:	d59e      	bpl.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80049ac:	f7fe f9de 	bl	8002d6c <HAL_GetTick>
 80049b0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	2202      	movs	r2, #2
 80049b4:	6a23      	ldr	r3, [r4, #32]
 80049b6:	4213      	tst	r3, r2
 80049b8:	d197      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fe f9d7 	bl	8002d6c <HAL_GetTick>
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80049c0:	1bc0      	subs	r0, r0, r7
 80049c2:	4298      	cmp	r0, r3
 80049c4:	d9f5      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80049c6:	e7db      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
 80049d0:	fffffcff 	.word	0xfffffcff
 80049d4:	efffffff 	.word	0xefffffff
 80049d8:	fffcffff 	.word	0xfffcffff
 80049dc:	fff3ffff 	.word	0xfff3ffff
 80049e0:	fffeffff 	.word	0xfffeffff
 80049e4:	00001388 	.word	0x00001388

080049e8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049e8:	2201      	movs	r2, #1
 80049ea:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ee:	68d9      	ldr	r1, [r3, #12]
 80049f0:	4311      	orrs	r1, r2
 80049f2:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f4:	6899      	ldr	r1, [r3, #8]
 80049f6:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	2906      	cmp	r1, #6
 80049fa:	d002      	beq.n	8004a02 <HAL_TIM_Base_Start_IT+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8004a02:	2000      	movs	r0, #0
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_OC_DelayElapsedCallback>:
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIM_IC_CaptureCallback>:
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_PWM_PulseFinishedCallback>:
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_TriggerCallback>:
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a0e:	2202      	movs	r2, #2
 8004a10:	6803      	ldr	r3, [r0, #0]
{
 8004a12:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a14:	6919      	ldr	r1, [r3, #16]
{
 8004a16:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a18:	4211      	tst	r1, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a1c:	68d9      	ldr	r1, [r3, #12]
 8004a1e:	4211      	tst	r1, r2
 8004a20:	d00b      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a22:	3a05      	subs	r2, #5
 8004a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a26:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a28:	3204      	adds	r2, #4
 8004a2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a2c:	079b      	lsls	r3, r3, #30
 8004a2e:	d100      	bne.n	8004a32 <HAL_TIM_IRQHandler+0x24>
 8004a30:	e079      	b.n	8004b26 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	f7ff ffe9 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	2300      	movs	r3, #0
 8004a38:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3a:	2204      	movs	r2, #4
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	6919      	ldr	r1, [r3, #16]
 8004a40:	4211      	tst	r1, r2
 8004a42:	d010      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a44:	68d9      	ldr	r1, [r3, #12]
 8004a46:	4211      	tst	r1, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a4a:	3a09      	subs	r2, #9
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a4e:	3207      	adds	r2, #7
 8004a50:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	23c0      	movs	r3, #192	; 0xc0
 8004a56:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a58:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5a:	421a      	tst	r2, r3
 8004a5c:	d069      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	f7ff ffd3 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	2300      	movs	r3, #0
 8004a64:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a66:	2208      	movs	r2, #8
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	6919      	ldr	r1, [r3, #16]
 8004a6c:	4211      	tst	r1, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a70:	68d9      	ldr	r1, [r3, #12]
 8004a72:	4211      	tst	r1, r2
 8004a74:	d00b      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a76:	3a11      	subs	r2, #17
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7c:	320d      	adds	r2, #13
 8004a7e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a80:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a82:	079b      	lsls	r3, r3, #30
 8004a84:	d05b      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	f7ff ffbf 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a8e:	2210      	movs	r2, #16
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	6919      	ldr	r1, [r3, #16]
 8004a94:	4211      	tst	r1, r2
 8004a96:	d010      	beq.n	8004aba <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a98:	68d9      	ldr	r1, [r3, #12]
 8004a9a:	4211      	tst	r1, r2
 8004a9c:	d00d      	beq.n	8004aba <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9e:	3a21      	subs	r2, #33	; 0x21
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa2:	3219      	adds	r2, #25
 8004aa4:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	23c0      	movs	r3, #192	; 0xc0
 8004aaa:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aac:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aae:	421a      	tst	r2, r3
 8004ab0:	d04b      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	f7ff ffa9 	bl	8004a08 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aba:	2201      	movs	r2, #1
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	6919      	ldr	r1, [r3, #16]
 8004ac0:	4211      	tst	r1, r2
 8004ac2:	d007      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ac4:	68d9      	ldr	r1, [r3, #12]
 8004ac6:	4211      	tst	r1, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aca:	3a03      	subs	r2, #3
 8004acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ace:	0020      	movs	r0, r4
 8004ad0:	f003 feec 	bl	80088ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	6919      	ldr	r1, [r3, #16]
 8004ada:	4211      	tst	r1, r2
 8004adc:	d008      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ade:	68d9      	ldr	r1, [r3, #12]
 8004ae0:	4211      	tst	r1, r2
 8004ae2:	d005      	beq.n	8004af0 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ae4:	3a02      	subs	r2, #2
 8004ae6:	3aff      	subs	r2, #255	; 0xff
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aea:	0020      	movs	r0, r4
 8004aec:	f000 f8d5 	bl	8004c9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af0:	2240      	movs	r2, #64	; 0x40
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	6919      	ldr	r1, [r3, #16]
 8004af6:	4211      	tst	r1, r2
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004afa:	68d9      	ldr	r1, [r3, #12]
 8004afc:	4211      	tst	r1, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b00:	3a81      	subs	r2, #129	; 0x81
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b04:	0020      	movs	r0, r4
 8004b06:	f7ff ff81 	bl	8004a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	6919      	ldr	r1, [r3, #16]
 8004b10:	4211      	tst	r1, r2
 8004b12:	d007      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b14:	68d9      	ldr	r1, [r3, #12]
 8004b16:	4211      	tst	r1, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b1a:	3a41      	subs	r2, #65	; 0x41
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1e:	0020      	movs	r0, r4
 8004b20:	f000 f8ba 	bl	8004c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b24:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	f7ff ff6e 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	f7ff ff6d 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
 8004b30:	e781      	b.n	8004a36 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	f7ff ff68 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b36:	0020      	movs	r0, r4
 8004b38:	f7ff ff67 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
 8004b3c:	e791      	b.n	8004a62 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	f7ff ff62 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b42:	0020      	movs	r0, r4
 8004b44:	f7ff ff61 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
 8004b48:	e79f      	b.n	8004a8a <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	f7ff ff5c 	bl	8004a06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	0020      	movs	r0, r4
 8004b50:	f7ff ff5b 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
 8004b54:	e7af      	b.n	8004ab6 <HAL_TIM_IRQHandler+0xa8>
	...

08004b58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	4a20      	ldr	r2, [pc, #128]	; (8004bdc <TIM_Base_SetConfig+0x84>)
{
 8004b5a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004b5c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5e:	4290      	cmp	r0, r2
 8004b60:	d006      	beq.n	8004b70 <TIM_Base_SetConfig+0x18>
 8004b62:	2480      	movs	r4, #128	; 0x80
 8004b64:	05e4      	lsls	r4, r4, #23
 8004b66:	42a0      	cmp	r0, r4
 8004b68:	d002      	beq.n	8004b70 <TIM_Base_SetConfig+0x18>
 8004b6a:	4c1d      	ldr	r4, [pc, #116]	; (8004be0 <TIM_Base_SetConfig+0x88>)
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d10c      	bne.n	8004b8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b70:	2470      	movs	r4, #112	; 0x70
 8004b72:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004b74:	684c      	ldr	r4, [r1, #4]
 8004b76:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b78:	4290      	cmp	r0, r2
 8004b7a:	d012      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b7c:	2480      	movs	r4, #128	; 0x80
 8004b7e:	05e4      	lsls	r4, r4, #23
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d00e      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b84:	4c16      	ldr	r4, [pc, #88]	; (8004be0 <TIM_Base_SetConfig+0x88>)
 8004b86:	42a0      	cmp	r0, r4
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b8a:	4c16      	ldr	r4, [pc, #88]	; (8004be4 <TIM_Base_SetConfig+0x8c>)
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d008      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b90:	4c15      	ldr	r4, [pc, #84]	; (8004be8 <TIM_Base_SetConfig+0x90>)
 8004b92:	42a0      	cmp	r0, r4
 8004b94:	d005      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b96:	4c15      	ldr	r4, [pc, #84]	; (8004bec <TIM_Base_SetConfig+0x94>)
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d002      	beq.n	8004ba2 <TIM_Base_SetConfig+0x4a>
 8004b9c:	4c14      	ldr	r4, [pc, #80]	; (8004bf0 <TIM_Base_SetConfig+0x98>)
 8004b9e:	42a0      	cmp	r0, r4
 8004ba0:	d103      	bne.n	8004baa <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	4c14      	ldr	r4, [pc, #80]	; (8004bf4 <TIM_Base_SetConfig+0x9c>)
 8004ba4:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba6:	68cc      	ldr	r4, [r1, #12]
 8004ba8:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004baa:	2480      	movs	r4, #128	; 0x80
 8004bac:	43a3      	bics	r3, r4
 8004bae:	694c      	ldr	r4, [r1, #20]
 8004bb0:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8004bb2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb4:	688b      	ldr	r3, [r1, #8]
 8004bb6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	680b      	ldr	r3, [r1, #0]
 8004bba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	4290      	cmp	r0, r2
 8004bbe:	d008      	beq.n	8004bd2 <TIM_Base_SetConfig+0x7a>
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <TIM_Base_SetConfig+0x90>)
 8004bc2:	4298      	cmp	r0, r3
 8004bc4:	d005      	beq.n	8004bd2 <TIM_Base_SetConfig+0x7a>
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <TIM_Base_SetConfig+0x94>)
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	d002      	beq.n	8004bd2 <TIM_Base_SetConfig+0x7a>
 8004bcc:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <TIM_Base_SetConfig+0x98>)
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	d101      	bne.n	8004bd6 <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd2:	690b      	ldr	r3, [r1, #16]
 8004bd4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6143      	str	r3, [r0, #20]
}
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40002000 	.word	0x40002000
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800
 8004bf4:	fffffcff 	.word	0xfffffcff

08004bf8 <HAL_TIM_Base_Init>:
{
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
  if (htim == NULL)
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c02:	0025      	movs	r5, r4
 8004c04:	353d      	adds	r5, #61	; 0x3d
 8004c06:	782b      	ldrb	r3, [r5, #0]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004c0e:	0022      	movs	r2, r4
 8004c10:	323c      	adds	r2, #60	; 0x3c
 8004c12:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8004c14:	0020      	movs	r0, r4
 8004c16:	f006 fd7b 	bl	800b710 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1e:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	1d21      	adds	r1, r4, #4
 8004c22:	f7ff ff99 	bl	8004b58 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004c26:	2301      	movs	r3, #1
  return HAL_OK;
 8004c28:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c2a:	702b      	strb	r3, [r5, #0]
}
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c30:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c32:	0004      	movs	r4, r0
 8004c34:	2202      	movs	r2, #2
 8004c36:	343c      	adds	r4, #60	; 0x3c
 8004c38:	7825      	ldrb	r5, [r4, #0]
{
 8004c3a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004c3c:	0010      	movs	r0, r2
 8004c3e:	2d01      	cmp	r5, #1
 8004c40:	d022      	beq.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c42:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c44:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8004c46:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8004c48:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4a:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8004c4c:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4e:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004c50:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004c52:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c54:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c56:	680e      	ldr	r6, [r1, #0]
 8004c58:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5a:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	480b      	ldr	r0, [pc, #44]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8004c5e:	4283      	cmp	r3, r0
 8004c60:	d009      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004c62:	2080      	movs	r0, #128	; 0x80
 8004c64:	05c0      	lsls	r0, r0, #23
 8004c66:	4283      	cmp	r3, r0
 8004c68:	d005      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004c6a:	4809      	ldr	r0, [pc, #36]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004c6c:	4283      	cmp	r3, r0
 8004c6e:	d002      	beq.n	8004c76 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004c70:	4808      	ldr	r0, [pc, #32]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004c72:	4283      	cmp	r3, r0
 8004c74:	d104      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c76:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c78:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7a:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c7c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004c82:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004c86:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40014000 	.word	0x40014000

08004c98 <HAL_TIMEx_CommutCallback>:
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9a:	4770      	bx	lr

08004c9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	4907      	ldr	r1, [pc, #28]	; (8004cbc <UART_EndRxTransfer+0x20>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	3123      	adds	r1, #35	; 0x23
 8004caa:	31ff      	adds	r1, #255	; 0xff
 8004cac:	438a      	bics	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6603      	str	r3, [r0, #96]	; 0x60
}
 8004cb8:	4770      	bx	lr
 8004cba:	46c0      	nop			; (mov r8, r8)
 8004cbc:	fffffedf 	.word	0xfffffedf

08004cc0 <HAL_UART_Transmit_DMA>:
{
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc4:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8004cc6:	0004      	movs	r4, r0
    return HAL_BUSY;
 8004cc8:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004cca:	2a20      	cmp	r2, #32
 8004ccc:	d135      	bne.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
      return HAL_ERROR;
 8004cce:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d032      	beq.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d030      	beq.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	2280      	movs	r2, #128	; 0x80
 8004cda:	68a5      	ldr	r5, [r4, #8]
 8004cdc:	0152      	lsls	r2, r2, #5
 8004cde:	4295      	cmp	r5, r2
 8004ce0:	d104      	bne.n	8004cec <HAL_UART_Transmit_DMA+0x2c>
 8004ce2:	6922      	ldr	r2, [r4, #16]
 8004ce4:	2a00      	cmp	r2, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ce8:	4201      	tst	r1, r0
 8004cea:	d126      	bne.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
    __HAL_LOCK(huart);
 8004cec:	0026      	movs	r6, r4
 8004cee:	3670      	adds	r6, #112	; 0x70
 8004cf0:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8004cf2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004cf4:	2a01      	cmp	r2, #1
 8004cf6:	d020      	beq.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
    huart->TxXferSize  = Size;
 8004cf8:	0022      	movs	r2, r4
    __HAL_LOCK(huart);
 8004cfa:	2501      	movs	r5, #1
    huart->TxXferSize  = Size;
 8004cfc:	3250      	adds	r2, #80	; 0x50
    __HAL_LOCK(huart);
 8004cfe:	7035      	strb	r5, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d00:	2700      	movs	r7, #0
    huart->pTxBuffPtr  = pData;
 8004d02:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d04:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8004d06:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d08:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8004d0a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d0e:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8004d10:	42b8      	cmp	r0, r7
 8004d12:	d013      	beq.n	8004d3c <HAL_UART_Transmit_DMA+0x7c>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d14:	4a0e      	ldr	r2, [pc, #56]	; (8004d50 <HAL_UART_Transmit_DMA+0x90>)
      huart->hdmatx->XferAbortCallback = NULL;
 8004d16:	6347      	str	r7, [r0, #52]	; 0x34
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d18:	6282      	str	r2, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <HAL_UART_Transmit_DMA+0x94>)
 8004d1c:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_UART_Transmit_DMA+0x98>)
 8004d20:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	3228      	adds	r2, #40	; 0x28
 8004d26:	f7fe f8db 	bl	8002ee0 <HAL_DMA_Start_IT>
 8004d2a:	42b8      	cmp	r0, r7
 8004d2c:	d006      	beq.n	8004d3c <HAL_UART_Transmit_DMA+0x7c>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d2e:	2310      	movs	r3, #16
        return HAL_ERROR;
 8004d30:	0028      	movs	r0, r5
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d32:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8004d34:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8004d36:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004d38:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d3c:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8004d3e:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	1892      	adds	r2, r2, r2
 8004d48:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8004d4a:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d4c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004d4e:	e7f4      	b.n	8004d3a <HAL_UART_Transmit_DMA+0x7a>
 8004d50:	08004e0d 	.word	0x08004e0d
 8004d54:	08004e3d 	.word	0x08004e3d
 8004d58:	08004e97 	.word	0x08004e97

08004d5c <HAL_UART_Receive_DMA>:
{
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	0013      	movs	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d60:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8004d62:	0005      	movs	r5, r0
    return HAL_BUSY;
 8004d64:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d66:	2a20      	cmp	r2, #32
 8004d68:	d137      	bne.n	8004dda <HAL_UART_Receive_DMA+0x7e>
      return HAL_ERROR;
 8004d6a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	d034      	beq.n	8004dda <HAL_UART_Receive_DMA+0x7e>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d032      	beq.n	8004dda <HAL_UART_Receive_DMA+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	68ac      	ldr	r4, [r5, #8]
 8004d78:	0152      	lsls	r2, r2, #5
 8004d7a:	4294      	cmp	r4, r2
 8004d7c:	d104      	bne.n	8004d88 <HAL_UART_Receive_DMA+0x2c>
 8004d7e:	692a      	ldr	r2, [r5, #16]
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_UART_Receive_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d84:	4201      	tst	r1, r0
 8004d86:	d128      	bne.n	8004dda <HAL_UART_Receive_DMA+0x7e>
    __HAL_LOCK(huart);
 8004d88:	002e      	movs	r6, r5
 8004d8a:	3670      	adds	r6, #112	; 0x70
 8004d8c:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8004d8e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004d90:	2a01      	cmp	r2, #1
 8004d92:	d022      	beq.n	8004dda <HAL_UART_Receive_DMA+0x7e>
    huart->RxXferSize = Size;
 8004d94:	002a      	movs	r2, r5
    __HAL_LOCK(huart);
 8004d96:	2401      	movs	r4, #1
    huart->RxXferSize = Size;
 8004d98:	3258      	adds	r2, #88	; 0x58
    __HAL_LOCK(huart);
 8004d9a:	7034      	strb	r4, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	2700      	movs	r7, #0
    huart->pRxBuffPtr = pData;
 8004d9e:	6569      	str	r1, [r5, #84]	; 0x54
    huart->RxXferSize = Size;
 8004da0:	8013      	strh	r3, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da2:	2222      	movs	r2, #34	; 0x22
    if (huart->hdmarx != NULL)
 8004da4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da6:	67ef      	str	r7, [r5, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da8:	67aa      	str	r2, [r5, #120]	; 0x78
    if (huart->hdmarx != NULL)
 8004daa:	42b8      	cmp	r0, r7
 8004dac:	d016      	beq.n	8004ddc <HAL_UART_Receive_DMA+0x80>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <HAL_UART_Receive_DMA+0xa4>)
      huart->hdmarx->XferAbortCallback = NULL;
 8004db0:	6347      	str	r7, [r0, #52]	; 0x34
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004db2:	6282      	str	r2, [r0, #40]	; 0x28
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004db4:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <HAL_UART_Receive_DMA+0xa8>)
 8004db6:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004db8:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_UART_Receive_DMA+0xac>)
 8004dba:	6302      	str	r2, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004dbc:	682a      	ldr	r2, [r5, #0]
 8004dbe:	3224      	adds	r2, #36	; 0x24
 8004dc0:	4694      	mov	ip, r2
 8004dc2:	000a      	movs	r2, r1
 8004dc4:	4661      	mov	r1, ip
 8004dc6:	f7fe f88b 	bl	8002ee0 <HAL_DMA_Start_IT>
 8004dca:	42b8      	cmp	r0, r7
 8004dcc:	d006      	beq.n	8004ddc <HAL_UART_Receive_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dce:	2310      	movs	r3, #16
        return HAL_ERROR;
 8004dd0:	0020      	movs	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004dd2:	67eb      	str	r3, [r5, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8004dd4:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8004dd6:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 8004dd8:	676b      	str	r3, [r5, #116]	; 0x74
}
 8004dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ddc:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(huart);
 8004dde:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	0052      	lsls	r2, r2, #1
 8004de4:	6819      	ldr	r1, [r3, #0]
    __HAL_UNLOCK(huart);
 8004de6:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	2201      	movs	r2, #1
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8004dfc:	e7ed      	b.n	8004dda <HAL_UART_Receive_DMA+0x7e>
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	08004e49 	.word	0x08004e49
 8004e04:	08004e8b 	.word	0x08004e8b
 8004e08:	08004e97 	.word	0x08004e97

08004e0c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e0c:	6982      	ldr	r2, [r0, #24]
{
 8004e0e:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e10:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e12:	2a20      	cmp	r2, #32
 8004e14:	d00d      	beq.n	8004e32 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8004e16:	001a      	movs	r2, r3
 8004e18:	2100      	movs	r1, #0

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e1a:	681b      	ldr	r3, [r3, #0]
    huart->TxXferCount = 0U;
 8004e1c:	3252      	adds	r2, #82	; 0x52
 8004e1e:	8011      	strh	r1, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	3180      	adds	r1, #128	; 0x80
 8004e24:	438a      	bics	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	6819      	ldr	r1, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e30:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8004e32:	0018      	movs	r0, r3
 8004e34:	f003 fd2e 	bl	8008894 <HAL_UART_TxCpltCallback>
}
 8004e38:	e7fa      	b.n	8004e30 <UART_DMATransmitCplt+0x24>

08004e3a <HAL_UART_TxHalfCpltCallback>:
 8004e3a:	4770      	bx	lr

08004e3c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004e40:	f7ff fffb 	bl	8004e3a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e44:	bd10      	pop	{r4, pc}
	...

08004e48 <UART_DMAReceiveCplt>:
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e48:	6983      	ldr	r3, [r0, #24]
{
 8004e4a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e4c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d013      	beq.n	8004e7a <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 8004e52:	0013      	movs	r3, r2
 8004e54:	2100      	movs	r1, #0
 8004e56:	335a      	adds	r3, #90	; 0x5a
 8004e58:	8019      	strh	r1, [r3, #0]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	4809      	ldr	r0, [pc, #36]	; (8004e84 <UART_DMAReceiveCplt+0x3c>)
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	4001      	ands	r1, r0
 8004e62:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	3003      	adds	r0, #3
 8004e68:	30ff      	adds	r0, #255	; 0xff
 8004e6a:	4381      	bics	r1, r0
 8004e6c:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	303f      	adds	r0, #63	; 0x3f
 8004e72:	4381      	bics	r1, r0
 8004e74:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e76:	2320      	movs	r3, #32
 8004e78:	6793      	str	r3, [r2, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004e7a:	0010      	movs	r0, r2
 8004e7c:	f003 fd10 	bl	80088a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	fffffeff 	.word	0xfffffeff

08004e88 <HAL_UART_RxHalfCpltCallback>:
 8004e88:	4770      	bx	lr

08004e8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e8a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004e8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004e8e:	f7ff fffb 	bl	8004e88 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e92:	bd10      	pop	{r4, pc}

08004e94 <HAL_UART_ErrorCallback>:
 8004e94:	4770      	bx	lr

08004e96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e96:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e98:	6a44      	ldr	r4, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e9a:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e9c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e9e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004ea0:	6898      	ldr	r0, [r3, #8]
 8004ea2:	0600      	lsls	r0, r0, #24
 8004ea4:	d50b      	bpl.n	8004ebe <UART_DMAError+0x28>
 8004ea6:	2a21      	cmp	r2, #33	; 0x21
 8004ea8:	d109      	bne.n	8004ebe <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004eaa:	0022      	movs	r2, r4
 8004eac:	2000      	movs	r0, #0
 8004eae:	3252      	adds	r2, #82	; 0x52
 8004eb0:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	30c0      	adds	r0, #192	; 0xc0
 8004eb6:	4382      	bics	r2, r0
 8004eb8:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004eba:	2220      	movs	r2, #32
 8004ebc:	6762      	str	r2, [r4, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	065b      	lsls	r3, r3, #25
 8004ec2:	d508      	bpl.n	8004ed6 <UART_DMAError+0x40>
 8004ec4:	2922      	cmp	r1, #34	; 0x22
 8004ec6:	d106      	bne.n	8004ed6 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ec8:	0023      	movs	r3, r4
 8004eca:	2200      	movs	r2, #0
 8004ecc:	335a      	adds	r3, #90	; 0x5a
 8004ece:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	f7ff fee3 	bl	8004c9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ed6:	2310      	movs	r3, #16
 8004ed8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eda:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004edc:	4313      	orrs	r3, r2
 8004ede:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8004ee0:	f7ff ffd8 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee4:	bd10      	pop	{r4, pc}
	...

08004ee8 <HAL_UART_IRQHandler>:
{
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004eea:	6803      	ldr	r3, [r0, #0]
{
 8004eec:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004eee:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ef0:	4850      	ldr	r0, [pc, #320]	; (8005034 <HAL_UART_IRQHandler+0x14c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef2:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef4:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8004ef6:	4202      	tst	r2, r0
 8004ef8:	d10b      	bne.n	8004f12 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004efa:	2020      	movs	r0, #32
 8004efc:	4202      	tst	r2, r0
 8004efe:	d100      	bne.n	8004f02 <HAL_UART_IRQHandler+0x1a>
 8004f00:	e076      	b.n	8004ff0 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f02:	4201      	tst	r1, r0
 8004f04:	d100      	bne.n	8004f08 <HAL_UART_IRQHandler+0x20>
 8004f06:	e073      	b.n	8004ff0 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8004f08:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8004f0a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d165      	bne.n	8004fdc <HAL_UART_IRQHandler+0xf4>
 8004f10:	e065      	b.n	8004fde <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f12:	2001      	movs	r0, #1
 8004f14:	0035      	movs	r5, r6
 8004f16:	4005      	ands	r5, r0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004f1a:	2790      	movs	r7, #144	; 0x90
 8004f1c:	007f      	lsls	r7, r7, #1
 8004f1e:	4239      	tst	r1, r7
 8004f20:	d066      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f22:	4202      	tst	r2, r0
 8004f24:	d005      	beq.n	8004f32 <HAL_UART_IRQHandler+0x4a>
 8004f26:	05ce      	lsls	r6, r1, #23
 8004f28:	d503      	bpl.n	8004f32 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f2a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f2c:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004f2e:	4330      	orrs	r0, r6
 8004f30:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f32:	2002      	movs	r0, #2
 8004f34:	4202      	tst	r2, r0
 8004f36:	d006      	beq.n	8004f46 <HAL_UART_IRQHandler+0x5e>
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	d004      	beq.n	8004f46 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f3c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f3e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004f40:	1800      	adds	r0, r0, r0
 8004f42:	4330      	orrs	r0, r6
 8004f44:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f46:	2004      	movs	r0, #4
 8004f48:	4202      	tst	r2, r0
 8004f4a:	d006      	beq.n	8004f5a <HAL_UART_IRQHandler+0x72>
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	d004      	beq.n	8004f5a <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f50:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f52:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8004f54:	3802      	subs	r0, #2
 8004f56:	4330      	orrs	r0, r6
 8004f58:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f5a:	0710      	lsls	r0, r2, #28
 8004f5c:	d508      	bpl.n	8004f70 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f5e:	0688      	lsls	r0, r1, #26
 8004f60:	d401      	bmi.n	8004f66 <HAL_UART_IRQHandler+0x7e>
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	d004      	beq.n	8004f70 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f66:	2008      	movs	r0, #8
 8004f68:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f6a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8004f6c:	4328      	orrs	r0, r5
 8004f6e:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f70:	2080      	movs	r0, #128	; 0x80
 8004f72:	0100      	lsls	r0, r0, #4
 8004f74:	4202      	tst	r2, r0
 8004f76:	d006      	beq.n	8004f86 <HAL_UART_IRQHandler+0x9e>
 8004f78:	014d      	lsls	r5, r1, #5
 8004f7a:	d504      	bpl.n	8004f86 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f7c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f7e:	2320      	movs	r3, #32
 8004f80:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004f82:	4303      	orrs	r3, r0
 8004f84:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d028      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	421a      	tst	r2, r3
 8004f90:	d006      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f92:	4219      	tst	r1, r3
 8004f94:	d004      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8004f96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa0:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004fa2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa4:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8004fa6:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa8:	065b      	lsls	r3, r3, #25
 8004faa:	d402      	bmi.n	8004fb2 <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fac:	2328      	movs	r3, #40	; 0x28
 8004fae:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb0:	d01a      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8004fb2:	f7ff fe73 	bl	8004c9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb6:	2140      	movs	r1, #64	; 0x40
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	420a      	tst	r2, r1
 8004fbe:	d00f      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc0:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004fc2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d009      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_UART_IRQHandler+0x150>)
 8004fce:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fd0:	f7fd ffc1 	bl	8002f56 <HAL_DMA_Abort_IT>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fd8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004fda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004fdc:	4798      	blx	r3
}
 8004fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	f7ff ff57 	bl	8004e94 <HAL_UART_ErrorCallback>
 8004fe6:	e7fa      	b.n	8004fde <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8004fe8:	f7ff ff54 	bl	8004e94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	67e5      	str	r5, [r4, #124]	; 0x7c
 8004fee:	e7f6      	b.n	8004fde <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ff0:	2080      	movs	r0, #128	; 0x80
 8004ff2:	0340      	lsls	r0, r0, #13
 8004ff4:	4202      	tst	r2, r0
 8004ff6:	d006      	beq.n	8005006 <HAL_UART_IRQHandler+0x11e>
 8004ff8:	0275      	lsls	r5, r6, #9
 8004ffa:	d504      	bpl.n	8005006 <HAL_UART_IRQHandler+0x11e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ffc:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004ffe:	0020      	movs	r0, r4
 8005000:	f000 fa30 	bl	8005464 <HAL_UARTEx_WakeupCallback>
    return;
 8005004:	e7eb      	b.n	8004fde <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005006:	2080      	movs	r0, #128	; 0x80
 8005008:	4202      	tst	r2, r0
 800500a:	d003      	beq.n	8005014 <HAL_UART_IRQHandler+0x12c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800500c:	4201      	tst	r1, r0
 800500e:	d001      	beq.n	8005014 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 8005010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005012:	e77a      	b.n	8004f0a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005014:	2040      	movs	r0, #64	; 0x40
 8005016:	4202      	tst	r2, r0
 8005018:	d0e1      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
 800501a:	4201      	tst	r1, r0
 800501c:	d0df      	beq.n	8004fde <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4382      	bics	r2, r0
 8005022:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005024:	2320      	movs	r3, #32
 8005026:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005028:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800502a:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800502c:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800502e:	f003 fc31 	bl	8008894 <HAL_UART_TxCpltCallback>
 8005032:	e7d4      	b.n	8004fde <HAL_UART_IRQHandler+0xf6>
 8005034:	0000080f 	.word	0x0000080f
 8005038:	0800503d 	.word	0x0800503d

0800503c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800503c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	0002      	movs	r2, r0
{
 8005042:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005044:	325a      	adds	r2, #90	; 0x5a
 8005046:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005048:	3a08      	subs	r2, #8
 800504a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 800504c:	f7ff ff22 	bl	8004e94 <HAL_UART_ErrorCallback>
}
 8005050:	bd10      	pop	{r4, pc}
	...

08005054 <UART_SetConfig>:
{
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005058:	6925      	ldr	r5, [r4, #16]
 800505a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800505c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800505e:	432a      	orrs	r2, r5
 8005060:	6965      	ldr	r5, [r4, #20]
 8005062:	69c1      	ldr	r1, [r0, #28]
 8005064:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4d65      	ldr	r5, [pc, #404]	; (8005200 <UART_SetConfig+0x1ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800506a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800506c:	4028      	ands	r0, r5
 800506e:	4302      	orrs	r2, r0
 8005070:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	4863      	ldr	r0, [pc, #396]	; (8005204 <UART_SetConfig+0x1b0>)
  tmpreg |= huart->Init.OneBitSampling;
 8005076:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	4002      	ands	r2, r0
 800507a:	68e0      	ldr	r0, [r4, #12]
 800507c:	4302      	orrs	r2, r0
 800507e:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8005080:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005082:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005084:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005086:	4d60      	ldr	r5, [pc, #384]	; (8005208 <UART_SetConfig+0x1b4>)
 8005088:	4028      	ands	r0, r5
 800508a:	4302      	orrs	r2, r0
 800508c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800508e:	4a5f      	ldr	r2, [pc, #380]	; (800520c <UART_SetConfig+0x1b8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d113      	bne.n	80050bc <UART_SetConfig+0x68>
 8005094:	2203      	movs	r2, #3
 8005096:	4b5e      	ldr	r3, [pc, #376]	; (8005210 <UART_SetConfig+0x1bc>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4013      	ands	r3, r2
 800509c:	4a5d      	ldr	r2, [pc, #372]	; (8005214 <UART_SetConfig+0x1c0>)
 800509e:	5cd0      	ldrb	r0, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4299      	cmp	r1, r3
 80050a6:	d100      	bne.n	80050aa <UART_SetConfig+0x56>
 80050a8:	e09c      	b.n	80051e4 <UART_SetConfig+0x190>
    switch (clocksource)
 80050aa:	2808      	cmp	r0, #8
 80050ac:	d861      	bhi.n	8005172 <UART_SetConfig+0x11e>
 80050ae:	f7fb f831 	bl	8000114 <__gnu_thumb1_case_uqi>
 80050b2:	6062      	.short	0x6062
 80050b4:	60776067 	.word	0x60776067
 80050b8:	6060      	.short	0x6060
 80050ba:	7a          	.byte	0x7a
 80050bb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	4a56      	ldr	r2, [pc, #344]	; (8005218 <UART_SetConfig+0x1c4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d138      	bne.n	8005134 <UART_SetConfig+0xe0>
 80050c2:	22c0      	movs	r2, #192	; 0xc0
 80050c4:	2080      	movs	r0, #128	; 0x80
 80050c6:	4b52      	ldr	r3, [pc, #328]	; (8005210 <UART_SetConfig+0x1bc>)
 80050c8:	0292      	lsls	r2, r2, #10
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	0240      	lsls	r0, r0, #9
 80050ce:	4013      	ands	r3, r2
 80050d0:	4283      	cmp	r3, r0
 80050d2:	d100      	bne.n	80050d6 <UART_SetConfig+0x82>
 80050d4:	e07f      	b.n	80051d6 <UART_SetConfig+0x182>
 80050d6:	d808      	bhi.n	80050ea <UART_SetConfig+0x96>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <UART_SetConfig+0x8a>
 80050dc:	e071      	b.n	80051c2 <UART_SetConfig+0x16e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050de:	2380      	movs	r3, #128	; 0x80
      ret = HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d144      	bne.n	8005172 <UART_SetConfig+0x11e>
 80050e8:	e020      	b.n	800512c <UART_SetConfig+0xd8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ea:	2080      	movs	r0, #128	; 0x80
 80050ec:	0280      	lsls	r0, r0, #10
 80050ee:	4283      	cmp	r3, r0
 80050f0:	d05e      	beq.n	80051b0 <UART_SetConfig+0x15c>
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d1f3      	bne.n	80050de <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	4299      	cmp	r1, r3
 80050fc:	d140      	bne.n	8005180 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80050fe:	6863      	ldr	r3, [r4, #4]
 8005100:	0858      	lsrs	r0, r3, #1
 8005102:	4b46      	ldr	r3, [pc, #280]	; (800521c <UART_SetConfig+0x1c8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005104:	18c0      	adds	r0, r0, r3
 8005106:	6861      	ldr	r1, [r4, #4]
 8005108:	f7fb f822 	bl	8000150 <__udivsi3>
 800510c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510e:	0003      	movs	r3, r0
 8005110:	4a43      	ldr	r2, [pc, #268]	; (8005220 <UART_SetConfig+0x1cc>)
 8005112:	3b10      	subs	r3, #16
 8005114:	4293      	cmp	r3, r2
 8005116:	d82c      	bhi.n	8005172 <UART_SetConfig+0x11e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005118:	230f      	movs	r3, #15
 800511a:	0002      	movs	r2, r0
 800511c:	439a      	bics	r2, r3
 800511e:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005120:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8005122:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005124:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8005126:	4318      	orrs	r0, r3
 8005128:	60d0      	str	r0, [r2, #12]
 800512a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005130:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005132:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005134:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <UART_SetConfig+0x1d0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10c      	bne.n	8005154 <UART_SetConfig+0x100>
 800513a:	22c0      	movs	r2, #192	; 0xc0
 800513c:	2080      	movs	r0, #128	; 0x80
 800513e:	4b34      	ldr	r3, [pc, #208]	; (8005210 <UART_SetConfig+0x1bc>)
 8005140:	0312      	lsls	r2, r2, #12
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	02c0      	lsls	r0, r0, #11
 8005146:	4013      	ands	r3, r2
 8005148:	4283      	cmp	r3, r0
 800514a:	d044      	beq.n	80051d6 <UART_SetConfig+0x182>
 800514c:	d9c4      	bls.n	80050d8 <UART_SetConfig+0x84>
 800514e:	2080      	movs	r0, #128	; 0x80
 8005150:	0300      	lsls	r0, r0, #12
 8005152:	e7cc      	b.n	80050ee <UART_SetConfig+0x9a>
 8005154:	4a34      	ldr	r2, [pc, #208]	; (8005228 <UART_SetConfig+0x1d4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d033      	beq.n	80051c2 <UART_SetConfig+0x16e>
 800515a:	4a34      	ldr	r2, [pc, #208]	; (800522c <UART_SetConfig+0x1d8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d030      	beq.n	80051c2 <UART_SetConfig+0x16e>
 8005160:	4a33      	ldr	r2, [pc, #204]	; (8005230 <UART_SetConfig+0x1dc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d02d      	beq.n	80051c2 <UART_SetConfig+0x16e>
 8005166:	4a33      	ldr	r2, [pc, #204]	; (8005234 <UART_SetConfig+0x1e0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d02a      	beq.n	80051c2 <UART_SetConfig+0x16e>
 800516c:	4a32      	ldr	r2, [pc, #200]	; (8005238 <UART_SetConfig+0x1e4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d027      	beq.n	80051c2 <UART_SetConfig+0x16e>
      ret = HAL_ERROR;
 8005172:	2001      	movs	r0, #1
 8005174:	e7da      	b.n	800512c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005176:	f7ff fb85 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	085b      	lsrs	r3, r3, #1
 800517e:	e002      	b.n	8005186 <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005180:	6863      	ldr	r3, [r4, #4]
 8005182:	0858      	lsrs	r0, r3, #1
 8005184:	4b2d      	ldr	r3, [pc, #180]	; (800523c <UART_SetConfig+0x1e8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005186:	18c0      	adds	r0, r0, r3
 8005188:	6861      	ldr	r1, [r4, #4]
 800518a:	f7fa ffe1 	bl	8000150 <__udivsi3>
 800518e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005190:	0003      	movs	r3, r0
 8005192:	4a23      	ldr	r2, [pc, #140]	; (8005220 <UART_SetConfig+0x1cc>)
 8005194:	3b10      	subs	r3, #16
 8005196:	4293      	cmp	r3, r2
 8005198:	d8eb      	bhi.n	8005172 <UART_SetConfig+0x11e>
      huart->Instance->BRR = usartdiv;
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	60d8      	str	r0, [r3, #12]
 800519e:	e7c4      	b.n	800512a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 80051a0:	f7ff faa8 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80051a4:	e7e9      	b.n	800517a <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	0858      	lsrs	r0, r3, #1
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	e7ea      	b.n	8005186 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d1f6      	bne.n	80051a6 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	0858      	lsrs	r0, r3, #1
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	025b      	lsls	r3, r3, #9
 80051c0:	e7a0      	b.n	8005104 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4299      	cmp	r1, r3
 80051c8:	d1d5      	bne.n	8005176 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ca:	f7ff fb5b 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	0040      	lsls	r0, r0, #1
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	e796      	b.n	8005104 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	4299      	cmp	r1, r3
 80051dc:	d1e0      	bne.n	80051a0 <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetSysClockFreq();
 80051de:	f7ff fa89 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80051e2:	e7f4      	b.n	80051ce <UART_SetConfig+0x17a>
    switch (clocksource)
 80051e4:	2808      	cmp	r0, #8
 80051e6:	d8c4      	bhi.n	8005172 <UART_SetConfig+0x11e>
 80051e8:	f7fa ff9e 	bl	8000128 <__gnu_thumb1_case_shi>
 80051ec:	ffc3ffef 	.word	0xffc3ffef
 80051f0:	ffc3ff89 	.word	0xffc3ff89
 80051f4:	ffc3fff9 	.word	0xffc3fff9
 80051f8:	ffc3ffc3 	.word	0xffc3ffc3
 80051fc:	ffe6      	.short	0xffe6
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	efff69f3 	.word	0xefff69f3
 8005204:	ffffcfff 	.word	0xffffcfff
 8005208:	fffff4ff 	.word	0xfffff4ff
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	0800e428 	.word	0x0800e428
 8005218:	40004400 	.word	0x40004400
 800521c:	00f42400 	.word	0x00f42400
 8005220:	0000ffef 	.word	0x0000ffef
 8005224:	40004800 	.word	0x40004800
 8005228:	40004c00 	.word	0x40004c00
 800522c:	40005000 	.word	0x40005000
 8005230:	40011400 	.word	0x40011400
 8005234:	40011800 	.word	0x40011800
 8005238:	40011c00 	.word	0x40011c00
 800523c:	007a1200 	.word	0x007a1200

08005240 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005240:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005242:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005244:	07da      	lsls	r2, r3, #31
 8005246:	d506      	bpl.n	8005256 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	4c28      	ldr	r4, [pc, #160]	; (80052ec <UART_AdvFeatureConfig+0xac>)
 800524c:	684a      	ldr	r2, [r1, #4]
 800524e:	4022      	ands	r2, r4
 8005250:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005252:	4322      	orrs	r2, r4
 8005254:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005256:	079a      	lsls	r2, r3, #30
 8005258:	d506      	bpl.n	8005268 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525a:	6801      	ldr	r1, [r0, #0]
 800525c:	4c24      	ldr	r4, [pc, #144]	; (80052f0 <UART_AdvFeatureConfig+0xb0>)
 800525e:	684a      	ldr	r2, [r1, #4]
 8005260:	4022      	ands	r2, r4
 8005262:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005264:	4322      	orrs	r2, r4
 8005266:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005268:	075a      	lsls	r2, r3, #29
 800526a:	d506      	bpl.n	800527a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526c:	6801      	ldr	r1, [r0, #0]
 800526e:	4c21      	ldr	r4, [pc, #132]	; (80052f4 <UART_AdvFeatureConfig+0xb4>)
 8005270:	684a      	ldr	r2, [r1, #4]
 8005272:	4022      	ands	r2, r4
 8005274:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005276:	4322      	orrs	r2, r4
 8005278:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527a:	071a      	lsls	r2, r3, #28
 800527c:	d506      	bpl.n	800528c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800527e:	6801      	ldr	r1, [r0, #0]
 8005280:	4c1d      	ldr	r4, [pc, #116]	; (80052f8 <UART_AdvFeatureConfig+0xb8>)
 8005282:	684a      	ldr	r2, [r1, #4]
 8005284:	4022      	ands	r2, r4
 8005286:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005288:	4322      	orrs	r2, r4
 800528a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800528c:	06da      	lsls	r2, r3, #27
 800528e:	d506      	bpl.n	800529e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	6801      	ldr	r1, [r0, #0]
 8005292:	4c1a      	ldr	r4, [pc, #104]	; (80052fc <UART_AdvFeatureConfig+0xbc>)
 8005294:	688a      	ldr	r2, [r1, #8]
 8005296:	4022      	ands	r2, r4
 8005298:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800529a:	4322      	orrs	r2, r4
 800529c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529e:	069a      	lsls	r2, r3, #26
 80052a0:	d506      	bpl.n	80052b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a2:	6801      	ldr	r1, [r0, #0]
 80052a4:	4c16      	ldr	r4, [pc, #88]	; (8005300 <UART_AdvFeatureConfig+0xc0>)
 80052a6:	688a      	ldr	r2, [r1, #8]
 80052a8:	4022      	ands	r2, r4
 80052aa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80052ac:	4322      	orrs	r2, r4
 80052ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b0:	065a      	lsls	r2, r3, #25
 80052b2:	d510      	bpl.n	80052d6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b4:	6801      	ldr	r1, [r0, #0]
 80052b6:	4d13      	ldr	r5, [pc, #76]	; (8005304 <UART_AdvFeatureConfig+0xc4>)
 80052b8:	684a      	ldr	r2, [r1, #4]
 80052ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80052bc:	402a      	ands	r2, r5
 80052be:	4322      	orrs	r2, r4
 80052c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	0352      	lsls	r2, r2, #13
 80052c6:	4294      	cmp	r4, r2
 80052c8:	d105      	bne.n	80052d6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052ca:	684a      	ldr	r2, [r1, #4]
 80052cc:	4c0e      	ldr	r4, [pc, #56]	; (8005308 <UART_AdvFeatureConfig+0xc8>)
 80052ce:	4022      	ands	r2, r4
 80052d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80052d2:	4322      	orrs	r2, r4
 80052d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	d506      	bpl.n	80052e8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	490b      	ldr	r1, [pc, #44]	; (800530c <UART_AdvFeatureConfig+0xcc>)
 80052de:	6853      	ldr	r3, [r2, #4]
 80052e0:	400b      	ands	r3, r1
 80052e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6053      	str	r3, [r2, #4]
}
 80052e8:	bd30      	pop	{r4, r5, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	fffdffff 	.word	0xfffdffff
 80052f0:	fffeffff 	.word	0xfffeffff
 80052f4:	fffbffff 	.word	0xfffbffff
 80052f8:	ffff7fff 	.word	0xffff7fff
 80052fc:	ffffefff 	.word	0xffffefff
 8005300:	ffffdfff 	.word	0xffffdfff
 8005304:	ffefffff 	.word	0xffefffff
 8005308:	ff9fffff 	.word	0xff9fffff
 800530c:	fff7ffff 	.word	0xfff7ffff

08005310 <UART_WaitOnFlagUntilTimeout>:
{
 8005310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005312:	2780      	movs	r7, #128	; 0x80
{
 8005314:	0004      	movs	r4, r0
 8005316:	000e      	movs	r6, r1
 8005318:	0015      	movs	r5, r2
 800531a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800531c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	69d3      	ldr	r3, [r2, #28]
 8005322:	4033      	ands	r3, r6
 8005324:	1b9b      	subs	r3, r3, r6
 8005326:	4259      	negs	r1, r3
 8005328:	414b      	adcs	r3, r1
 800532a:	42ab      	cmp	r3, r5
 800532c:	d001      	beq.n	8005332 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800532e:	2000      	movs	r0, #0
 8005330:	e01c      	b.n	800536c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005332:	9b08      	ldr	r3, [sp, #32]
 8005334:	3301      	adds	r3, #1
 8005336:	d0f3      	beq.n	8005320 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005338:	f7fd fd18 	bl	8002d6c <HAL_GetTick>
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	9a08      	ldr	r2, [sp, #32]
 8005340:	1ac0      	subs	r0, r0, r3
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4282      	cmp	r2, r0
 8005346:	d301      	bcc.n	800534c <UART_WaitOnFlagUntilTimeout+0x3c>
 8005348:	2a00      	cmp	r2, #0
 800534a:	d110      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4913      	ldr	r1, [pc, #76]	; (800539c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005350:	400a      	ands	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	31a3      	adds	r1, #163	; 0xa3
 8005358:	31ff      	adds	r1, #255	; 0xff
 800535a:	438a      	bics	r2, r1
 800535c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800535e:	2320      	movs	r3, #32
 8005360:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005362:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005364:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8005366:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005368:	3470      	adds	r4, #112	; 0x70
 800536a:	7023      	strb	r3, [r4, #0]
}
 800536c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800536e:	2104      	movs	r1, #4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	420a      	tst	r2, r1
 8005374:	d0d3      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	423a      	tst	r2, r7
 800537a:	d0d0      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537c:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4906      	ldr	r1, [pc, #24]	; (800539c <UART_WaitOnFlagUntilTimeout+0x8c>)
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	31a3      	adds	r1, #163	; 0xa3
 800538a:	31ff      	adds	r1, #255	; 0xff
 800538c:	438a      	bics	r2, r1
 800538e:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005390:	2320      	movs	r3, #32
 8005392:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005394:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005396:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005398:	e7e4      	b.n	8005364 <UART_WaitOnFlagUntilTimeout+0x54>
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	fffffe5f 	.word	0xfffffe5f

080053a0 <UART_CheckIdleState>:
{
 80053a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	2600      	movs	r6, #0
{
 80053a4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80053a8:	f7fd fce0 	bl	8002d6c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ac:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80053ae:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	071b      	lsls	r3, r3, #28
 80053b4:	d415      	bmi.n	80053e2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	075b      	lsls	r3, r3, #29
 80053bc:	d50a      	bpl.n	80053d4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <UART_CheckIdleState+0x5c>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	03c9      	lsls	r1, r1, #15
 80053c8:	002b      	movs	r3, r5
 80053ca:	0020      	movs	r0, r4
 80053cc:	f7ff ffa0 	bl	8005310 <UART_WaitOnFlagUntilTimeout>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d111      	bne.n	80053f8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80053d6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80053dc:	3470      	adds	r4, #112	; 0x70
 80053de:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80053e0:	e00b      	b.n	80053fa <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e2:	2180      	movs	r1, #128	; 0x80
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <UART_CheckIdleState+0x5c>)
 80053e6:	0032      	movs	r2, r6
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	0389      	lsls	r1, r1, #14
 80053ec:	0003      	movs	r3, r0
 80053ee:	0020      	movs	r0, r4
 80053f0:	f7ff ff8e 	bl	8005310 <UART_WaitOnFlagUntilTimeout>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d0de      	beq.n	80053b6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80053f8:	2003      	movs	r0, #3
}
 80053fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80053fc:	01ffffff 	.word	0x01ffffff

08005400 <HAL_UART_Init>:
{
 8005400:	b510      	push	{r4, lr}
 8005402:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8005406:	2001      	movs	r0, #1
}
 8005408:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800540a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005410:	0002      	movs	r2, r0
 8005412:	3270      	adds	r2, #112	; 0x70
 8005414:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8005416:	f006 f9c5 	bl	800b7a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800541a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800541c:	2101      	movs	r1, #1
 800541e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005420:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8005422:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005424:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8005426:	438b      	bics	r3, r1
 8005428:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800542a:	f7ff fe13 	bl	8005054 <UART_SetConfig>
 800542e:	2801      	cmp	r0, #1
 8005430:	d0e9      	beq.n	8005406 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005438:	0020      	movs	r0, r4
 800543a:	f7ff ff01 	bl	8005240 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	4907      	ldr	r1, [pc, #28]	; (8005460 <HAL_UART_Init+0x60>)
 8005442:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8005444:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005446:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005448:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	438a      	bics	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005452:	2201      	movs	r2, #1
 8005454:	6819      	ldr	r1, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800545a:	f7ff ffa1 	bl	80053a0 <UART_CheckIdleState>
 800545e:	e7d3      	b.n	8005408 <HAL_UART_Init+0x8>
 8005460:	ffffb7ff 	.word	0xffffb7ff

08005464 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005464:	4770      	bx	lr
	...

08005468 <USER_Acceleration_Wakeup_Init>:
void USER_Acceleration_Wakeup_Init(void)
{
	uint8_t hexcode;


	memrx=0;
 8005468:	2300      	movs	r3, #0
{
 800546a:	b5f0      	push	{r4, r5, r6, r7, lr}
	memrx=0;
 800546c:	4eaa      	ldr	r6, [pc, #680]	; (8005718 <USER_Acceleration_Wakeup_Init+0x2b0>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&accel_ctrl1_xl,1)!=HAL_OK)
 800546e:	4dab      	ldr	r5, [pc, #684]	; (800571c <USER_Acceleration_Wakeup_Init+0x2b4>)
 8005470:	4fab      	ldr	r7, [pc, #684]	; (8005720 <USER_Acceleration_Wakeup_Init+0x2b8>)
{
 8005472:	b085      	sub	sp, #20
	memrx=0;
 8005474:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&accel_ctrl1_xl,1)!=HAL_OK)
 8005476:	3301      	adds	r3, #1
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	9700      	str	r7, [sp, #0]
 800547c:	2210      	movs	r2, #16
 800547e:	21d6      	movs	r1, #214	; 0xd6
 8005480:	0028      	movs	r0, r5
 8005482:	f7fe f915 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005486:	2800      	cmp	r0, #0
 8005488:	d001      	beq.n	800548e <USER_Acceleration_Wakeup_Init+0x26>
	{
		Error_Handler();
 800548a:	f003 fa4d 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800548e:	7833      	ldrb	r3, [r6, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0fc      	beq.n	800548e <USER_Acceleration_Wakeup_Init+0x26>

	hexcode=accel_ctrl1_xl&~0xfc;
 8005494:	2203      	movs	r2, #3
 8005496:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0x60;
 8005498:	240f      	movs	r4, #15
	hexcode=accel_ctrl1_xl&~0xfc;
 800549a:	401a      	ands	r2, r3
	hexcode|=0x60;
 800549c:	2360      	movs	r3, #96	; 0x60
 800549e:	446c      	add	r4, sp
 80054a0:	4313      	orrs	r3, r2
 80054a2:	7023      	strb	r3, [r4, #0]

	memtx=0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	4a9f      	ldr	r2, [pc, #636]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 80054a8:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 80054aa:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 80054ac:	3301      	adds	r3, #1
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	9400      	str	r4, [sp, #0]
 80054b2:	2210      	movs	r2, #16
 80054b4:	0028      	movs	r0, r5
 80054b6:	f7fe f855 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d100      	bne.n	80054c0 <USER_Acceleration_Wakeup_Init+0x58>
 80054be:	e115      	b.n	80056ec <USER_Acceleration_Wakeup_Init+0x284>
		// ODR_XL = 416 Hz, FS_XL = 2g
	{
		Error_Handler();
 80054c0:	f003 fa32 	bl	8008928 <Error_Handler>
	{
		odr_xl_value=416;
		mg_per_LSB = 0.061;
	}

	while(memtx==0);
 80054c4:	4b97      	ldr	r3, [pc, #604]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0fb      	beq.n	80054c4 <USER_Acceleration_Wakeup_Init+0x5c>
	memrx=0;
 80054cc:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&accel_tap_cfg,1)!=HAL_OK)
 80054ce:	4f96      	ldr	r7, [pc, #600]	; (8005728 <USER_Acceleration_Wakeup_Init+0x2c0>)
	memrx=0;
 80054d0:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&accel_tap_cfg,1)!=HAL_OK)
 80054d2:	3301      	adds	r3, #1
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	9700      	str	r7, [sp, #0]
 80054d8:	2258      	movs	r2, #88	; 0x58
 80054da:	21d6      	movs	r1, #214	; 0xd6
 80054dc:	0028      	movs	r0, r5
 80054de:	f7fe f8e7 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d001      	beq.n	80054ea <USER_Acceleration_Wakeup_Init+0x82>
	{
		Error_Handler();
 80054e6:	f003 fa1f 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 80054ea:	7833      	ldrb	r3, [r6, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0fc      	beq.n	80054ea <USER_Acceleration_Wakeup_Init+0x82>

	if(who_am_i==0x69)
 80054f0:	4b8e      	ldr	r3, [pc, #568]	; (800572c <USER_Acceleration_Wakeup_Init+0x2c4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b69      	cmp	r3, #105	; 0x69
 80054f6:	d000      	beq.n	80054fa <USER_Acceleration_Wakeup_Init+0x92>
 80054f8:	e100      	b.n	80056fc <USER_Acceleration_Wakeup_Init+0x294>
	{



		hexcode=accel_tap_cfg&~0x11;
 80054fa:	783a      	ldrb	r2, [r7, #0]
 80054fc:	3b58      	subs	r3, #88	; 0x58
 80054fe:	439a      	bics	r2, r3
	if(who_am_i==0x6A)
	{


		hexcode=accel_tap_cfg&~0x91;
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8005500:	4313      	orrs	r3, r2
 8005502:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 8005504:	2300      	movs	r3, #0
 8005506:	4a87      	ldr	r2, [pc, #540]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8005508:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 800550a:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800550c:	3301      	adds	r3, #1
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	9400      	str	r4, [sp, #0]
 8005512:	2258      	movs	r2, #88	; 0x58
 8005514:	0028      	movs	r0, r5
 8005516:	f7fe f825 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800551a:	2800      	cmp	r0, #0
 800551c:	d001      	beq.n	8005522 <USER_Acceleration_Wakeup_Init+0xba>
	{
		Error_Handler();
 800551e:	f003 fa03 	bl	8008928 <Error_Handler>
	}
	while(memtx==0);
 8005522:	4b80      	ldr	r3, [pc, #512]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0fb      	beq.n	8005522 <USER_Acceleration_Wakeup_Init+0xba>



	memrx=0;
 800552a:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&accel_wake_up_ths,1)!=HAL_OK)
 800552c:	4f80      	ldr	r7, [pc, #512]	; (8005730 <USER_Acceleration_Wakeup_Init+0x2c8>)
	memrx=0;
 800552e:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&accel_wake_up_ths,1)!=HAL_OK)
 8005530:	3301      	adds	r3, #1
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	9700      	str	r7, [sp, #0]
 8005536:	225b      	movs	r2, #91	; 0x5b
 8005538:	21d6      	movs	r1, #214	; 0xd6
 800553a:	0028      	movs	r0, r5
 800553c:	f7fe f8b8 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005540:	2800      	cmp	r0, #0
 8005542:	d001      	beq.n	8005548 <USER_Acceleration_Wakeup_Init+0xe0>
	{
		Error_Handler();
 8005544:	f003 f9f0 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8005548:	7833      	ldrb	r3, [r6, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0fc      	beq.n	8005548 <USER_Acceleration_Wakeup_Init+0xe0>

	hexcode=accel_wake_up_ths&~0x3f;
 800554e:	223f      	movs	r2, #63	; 0x3f
 8005550:	783b      	ldrb	r3, [r7, #0]
 8005552:	4393      	bics	r3, r2
 8005554:	7023      	strb	r3, [r4, #0]


hexcode|=USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize();
 8005556:	f002 fd55 	bl	8008004 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize>
 800555a:	7823      	ldrb	r3, [r4, #0]

	memtx=0;
 800555c:	4a71      	ldr	r2, [pc, #452]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
hexcode|=USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize();
 800555e:	4318      	orrs	r0, r3
	memtx=0;
 8005560:	2300      	movs	r3, #0
 8005562:	7013      	strb	r3, [r2, #0]

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold < harsh_accel_brake_function_wakeup_threshold mg
 8005564:	3301      	adds	r3, #1
hexcode|=USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize();
 8005566:	7020      	strb	r0, [r4, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold < harsh_accel_brake_function_wakeup_threshold mg
 8005568:	225b      	movs	r2, #91	; 0x5b
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	9400      	str	r4, [sp, #0]
 800556e:	21d6      	movs	r1, #214	; 0xd6
 8005570:	0028      	movs	r0, r5
 8005572:	f7fd fff7 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005576:	2800      	cmp	r0, #0
 8005578:	d001      	beq.n	800557e <USER_Acceleration_Wakeup_Init+0x116>
	{
		Error_Handler();
 800557a:	f003 f9d5 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800557e:	4b69      	ldr	r3, [pc, #420]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0fb      	beq.n	800557e <USER_Acceleration_Wakeup_Init+0x116>

	memrx=0;
 8005586:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&accel_ctrl8_xl,1)!=HAL_OK)
 8005588:	4f6a      	ldr	r7, [pc, #424]	; (8005734 <USER_Acceleration_Wakeup_Init+0x2cc>)
	memrx=0;
 800558a:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&accel_ctrl8_xl,1)!=HAL_OK)
 800558c:	3301      	adds	r3, #1
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	9700      	str	r7, [sp, #0]
 8005592:	2217      	movs	r2, #23
 8005594:	21d6      	movs	r1, #214	; 0xd6
 8005596:	0028      	movs	r0, r5
 8005598:	f7fe f88a 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800559c:	2800      	cmp	r0, #0
 800559e:	d001      	beq.n	80055a4 <USER_Acceleration_Wakeup_Init+0x13c>
	{
		Error_Handler();
 80055a0:	f003 f9c2 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 80055a4:	7833      	ldrb	r3, [r6, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0fc      	beq.n	80055a4 <USER_Acceleration_Wakeup_Init+0x13c>

	if(who_am_i==0x69)
 80055aa:	4b60      	ldr	r3, [pc, #384]	; (800572c <USER_Acceleration_Wakeup_Init+0x2c4>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b69      	cmp	r3, #105	; 0x69
 80055b0:	d000      	beq.n	80055b4 <USER_Acceleration_Wakeup_Init+0x14c>
 80055b2:	e0aa      	b.n	800570a <USER_Acceleration_Wakeup_Init+0x2a2>
	{
		hexcode=accel_ctrl8_xl&~0x60;
 80055b4:	2260      	movs	r2, #96	; 0x60
 80055b6:	783b      	ldrb	r3, [r7, #0]

		hexcode|=0x40; //HPF cutoff odr/9
	}
	if(who_am_i==0x6a)
	{
		hexcode=accel_ctrl8_xl&~0x68;
 80055b8:	4393      	bics	r3, r2
 80055ba:	001a      	movs	r2, r3

		hexcode|=0x40;//HPF cutoff odr/9;ODR/2 low pass filtered sent to composite filter
 80055bc:	2340      	movs	r3, #64	; 0x40
 80055be:	4313      	orrs	r3, r2
 80055c0:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	4a57      	ldr	r2, [pc, #348]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 80055c6:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 80055c8:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 80055ca:	3301      	adds	r3, #1
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	9400      	str	r4, [sp, #0]
 80055d0:	2217      	movs	r2, #23
 80055d2:	0028      	movs	r0, r5
 80055d4:	f7fd ffc6 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d001      	beq.n	80055e0 <USER_Acceleration_Wakeup_Init+0x178>
			{
		Error_Handler();
 80055dc:	f003 f9a4 	bl	8008928 <Error_Handler>
			}


	while(memtx==0);
 80055e0:	4b50      	ldr	r3, [pc, #320]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0fb      	beq.n	80055e0 <USER_Acceleration_Wakeup_Init+0x178>

	memrx=0;
 80055e8:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&accel_wake_up_dur,1)!=HAL_OK)
 80055ea:	4f53      	ldr	r7, [pc, #332]	; (8005738 <USER_Acceleration_Wakeup_Init+0x2d0>)
	memrx=0;
 80055ec:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&accel_wake_up_dur,1)!=HAL_OK)
 80055ee:	3301      	adds	r3, #1
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	9700      	str	r7, [sp, #0]
 80055f4:	225c      	movs	r2, #92	; 0x5c
 80055f6:	21d6      	movs	r1, #214	; 0xd6
 80055f8:	0028      	movs	r0, r5
 80055fa:	f7fe f859 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80055fe:	2800      	cmp	r0, #0
 8005600:	d001      	beq.n	8005606 <USER_Acceleration_Wakeup_Init+0x19e>
	{
		Error_Handler();
 8005602:	f003 f991 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8005606:	7833      	ldrb	r3, [r6, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0fc      	beq.n	8005606 <USER_Acceleration_Wakeup_Init+0x19e>

	hexcode=accel_wake_up_dur&~0x60;
 800560c:	2360      	movs	r3, #96	; 0x60
 800560e:	783a      	ldrb	r2, [r7, #0]
	hexcode|=0x60;

	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 8005610:	21d6      	movs	r1, #214	; 0xd6
	hexcode=accel_wake_up_dur&~0x60;
 8005612:	439a      	bics	r2, r3
	hexcode|=0x60;
 8005614:	4313      	orrs	r3, r2
 8005616:	7023      	strb	r3, [r4, #0]
	memtx=0;
 8005618:	2300      	movs	r3, #0
 800561a:	4a42      	ldr	r2, [pc, #264]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 800561c:	0028      	movs	r0, r5
	memtx=0;
 800561e:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 8005620:	3301      	adds	r3, #1
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	9400      	str	r4, [sp, #0]
 8005626:	225c      	movs	r2, #92	; 0x5c
 8005628:	f7fd ff9c 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800562c:	2800      	cmp	r0, #0
 800562e:	d001      	beq.n	8005634 <USER_Acceleration_Wakeup_Init+0x1cc>
	{
		Error_Handler();
 8005630:	f003 f97a 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8005634:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0fb      	beq.n	8005634 <USER_Acceleration_Wakeup_Init+0x1cc>

	memrx=0;
 800563c:	2300      	movs	r3, #0
 800563e:	4e36      	ldr	r6, [pc, #216]	; (8005718 <USER_Acceleration_Wakeup_Init+0x2b0>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&accel_md1_cfg,1)!=HAL_OK)
 8005640:	4c36      	ldr	r4, [pc, #216]	; (800571c <USER_Acceleration_Wakeup_Init+0x2b4>)
 8005642:	4d3e      	ldr	r5, [pc, #248]	; (800573c <USER_Acceleration_Wakeup_Init+0x2d4>)
	memrx=0;
 8005644:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&accel_md1_cfg,1)!=HAL_OK)
 8005646:	3301      	adds	r3, #1
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	9500      	str	r5, [sp, #0]
 800564c:	225e      	movs	r2, #94	; 0x5e
 800564e:	21d6      	movs	r1, #214	; 0xd6
 8005650:	0020      	movs	r0, r4
 8005652:	f7fe f82d 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005656:	2800      	cmp	r0, #0
 8005658:	d001      	beq.n	800565e <USER_Acceleration_Wakeup_Init+0x1f6>
	{
		Error_Handler();
 800565a:	f003 f965 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800565e:	7833      	ldrb	r3, [r6, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0fc      	beq.n	800565e <USER_Acceleration_Wakeup_Init+0x1f6>

	hexcode=accel_md1_cfg&~0x20;
 8005664:	2320      	movs	r3, #32
	hexcode|=0x20;
 8005666:	210f      	movs	r1, #15
	hexcode=accel_md1_cfg&~0x20;
 8005668:	782a      	ldrb	r2, [r5, #0]
	hexcode|=0x20;
 800566a:	4469      	add	r1, sp
	hexcode=accel_md1_cfg&~0x20;
 800566c:	439a      	bics	r2, r3
	hexcode|=0x20;
 800566e:	4313      	orrs	r3, r2
 8005670:	700b      	strb	r3, [r1, #0]

	memtx=0;
 8005672:	2300      	movs	r3, #0
 8005674:	4d2b      	ldr	r5, [pc, #172]	; (8005724 <USER_Acceleration_Wakeup_Init+0x2bc>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 8005676:	225e      	movs	r2, #94	; 0x5e
	memtx=0;
 8005678:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 800567a:	3301      	adds	r3, #1
 800567c:	9100      	str	r1, [sp, #0]
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	21d6      	movs	r1, #214	; 0xd6
 8005682:	0020      	movs	r0, r4
 8005684:	f7fd ff6e 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005688:	2800      	cmp	r0, #0
 800568a:	d001      	beq.n	8005690 <USER_Acceleration_Wakeup_Init+0x228>
	{
		Error_Handler();
 800568c:	f003 f94c 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8005690:	782b      	ldrb	r3, [r5, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0fc      	beq.n	8005690 <USER_Acceleration_Wakeup_Init+0x228>


	sprintf(out_string,"\r\nDevice Acceleration Sensing Function Started......\r\n");
 8005696:	4c2a      	ldr	r4, [pc, #168]	; (8005740 <USER_Acceleration_Wakeup_Init+0x2d8>)
 8005698:	492a      	ldr	r1, [pc, #168]	; (8005744 <USER_Acceleration_Wakeup_Init+0x2dc>)
 800569a:	0020      	movs	r0, r4
 800569c:	f006 fb56 	bl	800bd4c <strcpy>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80056a0:	2201      	movs	r2, #1
 80056a2:	2102      	movs	r1, #2
 80056a4:	4828      	ldr	r0, [pc, #160]	; (8005748 <USER_Acceleration_Wakeup_Init+0x2e0>)
 80056a6:	f7fd fd7f 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	4d27      	ldr	r5, [pc, #156]	; (800574c <USER_Acceleration_Wakeup_Init+0x2e4>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80056ae:	0020      	movs	r0, r4
	uarttx_req=1;
 80056b0:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80056b2:	f7fa fd27 	bl	8000104 <strlen>
 80056b6:	0021      	movs	r1, r4
 80056b8:	b282      	uxth	r2, r0
 80056ba:	4825      	ldr	r0, [pc, #148]	; (8005750 <USER_Acceleration_Wakeup_Init+0x2e8>)
 80056bc:	f7ff fb00 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d001      	beq.n	80056c8 <USER_Acceleration_Wakeup_Init+0x260>
	{
		Error_Handler();
 80056c4:	f003 f930 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80056c8:	782b      	ldrb	r3, [r5, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d0fc      	beq.n	80056c8 <USER_Acceleration_Wakeup_Init+0x260>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80056ce:	2200      	movs	r2, #0
 80056d0:	2102      	movs	r1, #2
 80056d2:	481d      	ldr	r0, [pc, #116]	; (8005748 <USER_Acceleration_Wakeup_Init+0x2e0>)
 80056d4:	f7fd fd68 	bl	80031a8 <HAL_GPIO_WritePin>

	acceleration_wakeup_init_function_status=EXICUTED;
 80056d8:	2201      	movs	r2, #1
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <USER_Acceleration_Wakeup_Init+0x2ec>)
 80056dc:	701a      	strb	r2, [r3, #0]

	wakeup_mode=ACCELERATION;
 80056de:	2302      	movs	r3, #2
 80056e0:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <USER_Acceleration_Wakeup_Init+0x2f0>)
 80056e2:	7013      	strb	r3, [r2, #0]
	device_mode=ACCELERATION;
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <USER_Acceleration_Wakeup_Init+0x2f4>)
 80056e6:	7013      	strb	r3, [r2, #0]


}
 80056e8:	b005      	add	sp, #20
 80056ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		odr_xl_value=416;
 80056ec:	22d0      	movs	r2, #208	; 0xd0
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <USER_Acceleration_Wakeup_Init+0x2f8>)
 80056f0:	0052      	lsls	r2, r2, #1
 80056f2:	801a      	strh	r2, [r3, #0]
		mg_per_LSB = 0.061;
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <USER_Acceleration_Wakeup_Init+0x2fc>)
 80056f6:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <USER_Acceleration_Wakeup_Init+0x300>)
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e6e3      	b.n	80054c4 <USER_Acceleration_Wakeup_Init+0x5c>
	if(who_am_i==0x6A)
 80056fc:	2b6a      	cmp	r3, #106	; 0x6a
 80056fe:	d000      	beq.n	8005702 <USER_Acceleration_Wakeup_Init+0x29a>
 8005700:	e700      	b.n	8005504 <USER_Acceleration_Wakeup_Init+0x9c>
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8005702:	226f      	movs	r2, #111	; 0x6f
		hexcode=accel_tap_cfg&~0x91;
 8005704:	783b      	ldrb	r3, [r7, #0]
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8005706:	4252      	negs	r2, r2
 8005708:	e6fa      	b.n	8005500 <USER_Acceleration_Wakeup_Init+0x98>
	if(who_am_i==0x6a)
 800570a:	2b6a      	cmp	r3, #106	; 0x6a
 800570c:	d000      	beq.n	8005710 <USER_Acceleration_Wakeup_Init+0x2a8>
 800570e:	e758      	b.n	80055c2 <USER_Acceleration_Wakeup_Init+0x15a>
		hexcode=accel_ctrl8_xl&~0x68;
 8005710:	783b      	ldrb	r3, [r7, #0]
 8005712:	2268      	movs	r2, #104	; 0x68
 8005714:	e750      	b.n	80055b8 <USER_Acceleration_Wakeup_Init+0x150>
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	20000269 	.word	0x20000269
 800571c:	200003a0 	.word	0x200003a0
 8005720:	20000214 	.word	0x20000214
 8005724:	2000026a 	.word	0x2000026a
 8005728:	20000217 	.word	0x20000217
 800572c:	20000379 	.word	0x20000379
 8005730:	20000219 	.word	0x20000219
 8005734:	20000215 	.word	0x20000215
 8005738:	20000218 	.word	0x20000218
 800573c:	20000216 	.word	0x20000216
 8005740:	2000026b 	.word	0x2000026b
 8005744:	0800e42c 	.word	0x0800e42c
 8005748:	48000400 	.word	0x48000400
 800574c:	20000378 	.word	0x20000378
 8005750:	20000510 	.word	0x20000510
 8005754:	20000232 	.word	0x20000232
 8005758:	20000489 	.word	0x20000489
 800575c:	2000048a 	.word	0x2000048a
 8005760:	20000480 	.word	0x20000480
 8005764:	3d79db23 	.word	0x3d79db23
 8005768:	2000047c 	.word	0x2000047c

0800576c <USER_Device_Orientation_Accelerometer_Init>:
extern volatile uint8_t memrx;
static uint8_t acc_ctrl9_xl,acc_ctrl4_c,acc_ctrl8_xl,acc_ctrl1_xl;


void USER_Device_Orientation_Accelerometer_Init(void)
{
 800576c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t hexcode;


	if(who_am_i==0x69)
 800576e:	4ba9      	ldr	r3, [pc, #676]	; (8005a14 <USER_Device_Orientation_Accelerometer_Init+0x2a8>)
{
 8005770:	b085      	sub	sp, #20
	if(who_am_i==0x69)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b69      	cmp	r3, #105	; 0x69
 8005776:	d100      	bne.n	800577a <USER_Device_Orientation_Accelerometer_Init+0xe>
 8005778:	e0f4      	b.n	8005964 <USER_Device_Orientation_Accelerometer_Init+0x1f8>
		while(memtx==0);


	}

	if(who_am_i==0x6a)
 800577a:	4ba6      	ldr	r3, [pc, #664]	; (8005a14 <USER_Device_Orientation_Accelerometer_Init+0x2a8>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b6a      	cmp	r3, #106	; 0x6a
 8005780:	d17c      	bne.n	800587c <USER_Device_Orientation_Accelerometer_Init+0x110>
	{
		memrx=0;
 8005782:	2300      	movs	r3, #0
 8005784:	4fa4      	ldr	r7, [pc, #656]	; (8005a18 <USER_Device_Orientation_Accelerometer_Init+0x2ac>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005786:	4da5      	ldr	r5, [pc, #660]	; (8005a1c <USER_Device_Orientation_Accelerometer_Init+0x2b0>)
 8005788:	4ca5      	ldr	r4, [pc, #660]	; (8005a20 <USER_Device_Orientation_Accelerometer_Init+0x2b4>)
		memrx=0;
 800578a:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 800578c:	3301      	adds	r3, #1
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	9400      	str	r4, [sp, #0]
 8005792:	2213      	movs	r2, #19
 8005794:	21d6      	movs	r1, #214	; 0xd6
 8005796:	0028      	movs	r0, r5
 8005798:	f7fd ff8a 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800579c:	2800      	cmp	r0, #0
 800579e:	d001      	beq.n	80057a4 <USER_Device_Orientation_Accelerometer_Init+0x38>
		{
			Error_Handler();
 80057a0:	f003 f8c2 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80057a4:	783b      	ldrb	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0fc      	beq.n	80057a4 <USER_Device_Orientation_Accelerometer_Init+0x38>

		hexcode=acc_ctrl4_c&~0x08;
 80057aa:	2308      	movs	r3, #8
		hexcode|=0x08;
 80057ac:	260f      	movs	r6, #15
		hexcode=acc_ctrl4_c&~0x08;
 80057ae:	7822      	ldrb	r2, [r4, #0]
		hexcode|=0x08;
 80057b0:	446e      	add	r6, sp
		hexcode=acc_ctrl4_c&~0x08;
 80057b2:	439a      	bics	r2, r3
		hexcode|=0x08;
 80057b4:	4313      	orrs	r3, r2
 80057b6:	7033      	strb	r3, [r6, #0]

		memtx=0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	4c9a      	ldr	r4, [pc, #616]	; (8005a24 <USER_Device_Orientation_Accelerometer_Init+0x2b8>)

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Data-ready mask enable. If enabled, when switching from Power-Down to an
 80057bc:	2213      	movs	r2, #19
		memtx=0;
 80057be:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Data-ready mask enable. If enabled, when switching from Power-Down to an
 80057c0:	3301      	adds	r3, #1
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	9600      	str	r6, [sp, #0]
 80057c6:	21d6      	movs	r1, #214	; 0xd6
 80057c8:	0028      	movs	r0, r5
 80057ca:	f7fd fecb 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	d001      	beq.n	80057d6 <USER_Device_Orientation_Accelerometer_Init+0x6a>
			//active mode, the accelerometer and gyroscope data-ready signals are masked
			//until the settling of the sensor filters is completed.
		{
			Error_Handler();
 80057d2:	f003 f8a9 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 80057d6:	7823      	ldrb	r3, [r4, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0fc      	beq.n	80057d6 <USER_Device_Orientation_Accelerometer_Init+0x6a>
		memrx=0;
 80057dc:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 80057de:	4a92      	ldr	r2, [pc, #584]	; (8005a28 <USER_Device_Orientation_Accelerometer_Init+0x2bc>)
		memrx=0;
 80057e0:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 80057e2:	3301      	adds	r3, #1
 80057e4:	9200      	str	r2, [sp, #0]
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	2217      	movs	r2, #23
 80057ea:	21d6      	movs	r1, #214	; 0xd6
 80057ec:	0028      	movs	r0, r5
 80057ee:	f7fd ff5f 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d001      	beq.n	80057fa <USER_Device_Orientation_Accelerometer_Init+0x8e>
		{
			Error_Handler();
 80057f6:	f003 f897 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80057fa:	783b      	ldrb	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0fc      	beq.n	80057fa <USER_Device_Orientation_Accelerometer_Init+0x8e>

		hexcode=acc_ctrl8_xl&~0b11101100;
 8005800:	2213      	movs	r2, #19
 8005802:	4b89      	ldr	r3, [pc, #548]	; (8005a28 <USER_Device_Orientation_Accelerometer_Init+0x2bc>)
		hexcode|=0xe8;

		memtx=0;
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005804:	21d6      	movs	r1, #214	; 0xd6
		hexcode=acc_ctrl8_xl&~0b11101100;
 8005806:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005808:	0028      	movs	r0, r5
		hexcode=acc_ctrl8_xl&~0b11101100;
 800580a:	401a      	ands	r2, r3
		hexcode|=0xe8;
 800580c:	2318      	movs	r3, #24
 800580e:	425b      	negs	r3, r3
 8005810:	4313      	orrs	r3, r2
 8005812:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005814:	2300      	movs	r3, #0
 8005816:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005818:	3301      	adds	r3, #1
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	9600      	str	r6, [sp, #0]
 800581e:	2217      	movs	r2, #23
 8005820:	f7fd fea0 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005824:	2800      	cmp	r0, #0
 8005826:	d001      	beq.n	800582c <USER_Device_Orientation_Accelerometer_Init+0xc0>
			//cut off frequency =ODR/400
			//ODR/4 low pass filtered sent to composite filter)  ;LOW NOISE
		{
			Error_Handler();
 8005828:	f003 f87e 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 800582c:	7823      	ldrb	r3, [r4, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0fc      	beq.n	800582c <USER_Device_Orientation_Accelerometer_Init+0xc0>


		memrx=0;
 8005832:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005834:	4a7d      	ldr	r2, [pc, #500]	; (8005a2c <USER_Device_Orientation_Accelerometer_Init+0x2c0>)
		memrx=0;
 8005836:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005838:	3301      	adds	r3, #1
 800583a:	9200      	str	r2, [sp, #0]
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2210      	movs	r2, #16
 8005840:	21d6      	movs	r1, #214	; 0xd6
 8005842:	0028      	movs	r0, r5
 8005844:	f7fd ff34 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005848:	2800      	cmp	r0, #0
 800584a:	d001      	beq.n	8005850 <USER_Device_Orientation_Accelerometer_Init+0xe4>
		{
			Error_Handler();
 800584c:	f003 f86c 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005850:	783b      	ldrb	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0fc      	beq.n	8005850 <USER_Device_Orientation_Accelerometer_Init+0xe4>

		hexcode=acc_ctrl1_xl&~0xff;
		hexcode|=0x60;
 8005856:	2360      	movs	r3, #96	; 0x60
 8005858:	7033      	strb	r3, [r6, #0]
		memtx=0;
 800585a:	2300      	movs	r3, #0
 800585c:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 800585e:	3301      	adds	r3, #1
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	9600      	str	r6, [sp, #0]
 8005864:	2210      	movs	r2, #16
 8005866:	21d6      	movs	r1, #214	; 0xd6
 8005868:	0028      	movs	r0, r5
 800586a:	f7fd fe7b 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800586e:	2800      	cmp	r0, #0
 8005870:	d001      	beq.n	8005876 <USER_Device_Orientation_Accelerometer_Init+0x10a>
				// ODR_XL = 416 Hz, FS_XL = 2g
			//Anti-aliasing filter bandwidth selection.
		{
			Error_Handler();
 8005872:	f003 f859 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005876:	7823      	ldrb	r3, [r4, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0fc      	beq.n	8005876 <USER_Device_Orientation_Accelerometer_Init+0x10a>
	}
	if(who_am_i==0x69)
 800587c:	4b65      	ldr	r3, [pc, #404]	; (8005a14 <USER_Device_Orientation_Accelerometer_Init+0x2a8>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b69      	cmp	r3, #105	; 0x69
 8005882:	d151      	bne.n	8005928 <USER_Device_Orientation_Accelerometer_Init+0x1bc>
	{
		memrx=0;
 8005884:	2300      	movs	r3, #0
 8005886:	4f64      	ldr	r7, [pc, #400]	; (8005a18 <USER_Device_Orientation_Accelerometer_Init+0x2ac>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005888:	4d64      	ldr	r5, [pc, #400]	; (8005a1c <USER_Device_Orientation_Accelerometer_Init+0x2b0>)
 800588a:	4c67      	ldr	r4, [pc, #412]	; (8005a28 <USER_Device_Orientation_Accelerometer_Init+0x2bc>)
		memrx=0;
 800588c:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 800588e:	3301      	adds	r3, #1
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	9400      	str	r4, [sp, #0]
 8005894:	2217      	movs	r2, #23
 8005896:	21d6      	movs	r1, #214	; 0xd6
 8005898:	0028      	movs	r0, r5
 800589a:	f7fd ff09 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d001      	beq.n	80058a6 <USER_Device_Orientation_Accelerometer_Init+0x13a>
		{
			Error_Handler();
 80058a2:	f003 f841 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80058a6:	783b      	ldrb	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0fc      	beq.n	80058a6 <USER_Device_Orientation_Accelerometer_Init+0x13a>

		hexcode=acc_ctrl8_xl&~0b11100100;
		hexcode|=0xe4;
 80058ac:	221c      	movs	r2, #28
 80058ae:	260f      	movs	r6, #15
		hexcode=acc_ctrl8_xl&~0b11100100;
 80058b0:	7823      	ldrb	r3, [r4, #0]
		hexcode|=0xe4;
 80058b2:	4252      	negs	r2, r2
 80058b4:	4313      	orrs	r3, r2
 80058b6:	446e      	add	r6, sp
 80058b8:	7033      	strb	r3, [r6, #0]


		memtx=0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	4c59      	ldr	r4, [pc, #356]	; (8005a24 <USER_Device_Orientation_Accelerometer_Init+0x2b8>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//if both the LPF2_XL_EN bit and the HP_SLOPE_XL_EN bit are set to 1, the LP digital
 80058be:	3233      	adds	r2, #51	; 0x33
		memtx=0;
 80058c0:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//if both the LPF2_XL_EN bit and the HP_SLOPE_XL_EN bit are set to 1, the LP digital
 80058c2:	3301      	adds	r3, #1
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	9600      	str	r6, [sp, #0]
 80058c8:	21d6      	movs	r1, #214	; 0xd6
 80058ca:	0028      	movs	r0, r5
 80058cc:	f7fd fe4a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d001      	beq.n	80058d8 <USER_Device_Orientation_Accelerometer_Init+0x16c>
			//filter (LPF2) is applied;Accelerometer low-pass filter LPF2 selection.
			//cut off ODR/400
			//Accelerometer slope filter / high-pass filter selection.
		{
			Error_Handler();
 80058d4:	f003 f828 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 80058d8:	7823      	ldrb	r3, [r4, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0fc      	beq.n	80058d8 <USER_Device_Orientation_Accelerometer_Init+0x16c>

		memrx=0;
 80058de:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <USER_Device_Orientation_Accelerometer_Init+0x2c0>)
		memrx=0;
 80058e2:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 80058e4:	3301      	adds	r3, #1
 80058e6:	9200      	str	r2, [sp, #0]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	2210      	movs	r2, #16
 80058ec:	21d6      	movs	r1, #214	; 0xd6
 80058ee:	0028      	movs	r0, r5
 80058f0:	f7fd fede 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d001      	beq.n	80058fc <USER_Device_Orientation_Accelerometer_Init+0x190>
		{
			Error_Handler();
 80058f8:	f003 f816 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80058fc:	783b      	ldrb	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0fc      	beq.n	80058fc <USER_Device_Orientation_Accelerometer_Init+0x190>

		hexcode=acc_ctrl1_xl&~0xff;
		hexcode|=0x63;
 8005902:	2363      	movs	r3, #99	; 0x63
 8005904:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005906:	2300      	movs	r3, #0
 8005908:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 800590a:	3301      	adds	r3, #1
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	9600      	str	r6, [sp, #0]
 8005910:	2210      	movs	r2, #16
 8005912:	21d6      	movs	r1, #214	; 0xd6
 8005914:	0028      	movs	r0, r5
 8005916:	f7fd fe25 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800591a:	2800      	cmp	r0, #0
 800591c:	d001      	beq.n	8005922 <USER_Device_Orientation_Accelerometer_Init+0x1b6>
				// ODR_XL = 416 Hz, FS_XL = 2g
			//Anti-aliasing filter bandwidth selection. value: 11 FOR 50Hzin lsm6ds3
		{
			Error_Handler();
 800591e:	f003 f803 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005922:	7823      	ldrb	r3, [r4, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0fc      	beq.n	8005922 <USER_Device_Orientation_Accelerometer_Init+0x1b6>
	}



	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8005928:	2201      	movs	r2, #1
 800592a:	2102      	movs	r1, #2
 800592c:	4840      	ldr	r0, [pc, #256]	; (8005a30 <USER_Device_Orientation_Accelerometer_Init+0x2c4>)
 800592e:	f7fd fc3b 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8005932:	2301      	movs	r3, #1
 8005934:	4c3f      	ldr	r4, [pc, #252]	; (8005a34 <USER_Device_Orientation_Accelerometer_Init+0x2c8>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized......\r\n",strlen("\r\nAccelerometer Output filter Initialized......\r\n"))!=HAL_OK)
 8005936:	2231      	movs	r2, #49	; 0x31
 8005938:	493f      	ldr	r1, [pc, #252]	; (8005a38 <USER_Device_Orientation_Accelerometer_Init+0x2cc>)
 800593a:	4840      	ldr	r0, [pc, #256]	; (8005a3c <USER_Device_Orientation_Accelerometer_Init+0x2d0>)
	uarttx_req=1;
 800593c:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized......\r\n",strlen("\r\nAccelerometer Output filter Initialized......\r\n"))!=HAL_OK)
 800593e:	f7ff f9bf 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8005942:	2800      	cmp	r0, #0
 8005944:	d001      	beq.n	800594a <USER_Device_Orientation_Accelerometer_Init+0x1de>
	{
		Error_Handler();
 8005946:	f002 ffef 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 800594a:	7823      	ldrb	r3, [r4, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d0fc      	beq.n	800594a <USER_Device_Orientation_Accelerometer_Init+0x1de>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8005950:	2200      	movs	r2, #0
 8005952:	2102      	movs	r1, #2
 8005954:	4836      	ldr	r0, [pc, #216]	; (8005a30 <USER_Device_Orientation_Accelerometer_Init+0x2c4>)
 8005956:	f7fd fc27 	bl	80031a8 <HAL_GPIO_WritePin>


	HAL_Delay(770);
 800595a:	4839      	ldr	r0, [pc, #228]	; (8005a40 <USER_Device_Orientation_Accelerometer_Init+0x2d4>)
 800595c:	f7fd fa0c 	bl	8002d78 <HAL_Delay>

}
 8005960:	b005      	add	sp, #20
 8005962:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memrx=0;
 8005964:	2300      	movs	r3, #0
 8005966:	4f2c      	ldr	r7, [pc, #176]	; (8005a18 <USER_Device_Orientation_Accelerometer_Init+0x2ac>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 8005968:	4d2c      	ldr	r5, [pc, #176]	; (8005a1c <USER_Device_Orientation_Accelerometer_Init+0x2b0>)
 800596a:	4c36      	ldr	r4, [pc, #216]	; (8005a44 <USER_Device_Orientation_Accelerometer_Init+0x2d8>)
		memrx=0;
 800596c:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 800596e:	3301      	adds	r3, #1
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	9400      	str	r4, [sp, #0]
 8005974:	2218      	movs	r2, #24
 8005976:	21d6      	movs	r1, #214	; 0xd6
 8005978:	0028      	movs	r0, r5
 800597a:	f7fd fe99 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800597e:	2800      	cmp	r0, #0
 8005980:	d001      	beq.n	8005986 <USER_Device_Orientation_Accelerometer_Init+0x21a>
			Error_Handler();
 8005982:	f002 ffd1 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8005986:	783b      	ldrb	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0fc      	beq.n	8005986 <USER_Device_Orientation_Accelerometer_Init+0x21a>
		hexcode=acc_ctrl9_xl&~0x38;
 800598c:	2338      	movs	r3, #56	; 0x38
		hexcode|=0x38;
 800598e:	260f      	movs	r6, #15
		hexcode=acc_ctrl9_xl&~0x38;
 8005990:	7822      	ldrb	r2, [r4, #0]
		hexcode|=0x38;
 8005992:	446e      	add	r6, sp
		hexcode=acc_ctrl9_xl&~0x38;
 8005994:	439a      	bics	r2, r3
		hexcode|=0x38;
 8005996:	4313      	orrs	r3, r2
 8005998:	7033      	strb	r3, [r6, #0]
		memtx=0;
 800599a:	2300      	movs	r3, #0
 800599c:	4c21      	ldr	r4, [pc, #132]	; (8005a24 <USER_Device_Orientation_Accelerometer_Init+0x2b8>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)   // Acc X, Y, Z axes enabled
 800599e:	2218      	movs	r2, #24
		memtx=0;
 80059a0:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)   // Acc X, Y, Z axes enabled
 80059a2:	3301      	adds	r3, #1
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9600      	str	r6, [sp, #0]
 80059a8:	21d6      	movs	r1, #214	; 0xd6
 80059aa:	0028      	movs	r0, r5
 80059ac:	f7fd fdda 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d001      	beq.n	80059b8 <USER_Device_Orientation_Accelerometer_Init+0x24c>
			Error_Handler();
 80059b4:	f002 ffb8 	bl	8008928 <Error_Handler>
		while(memtx==0);
 80059b8:	7823      	ldrb	r3, [r4, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0fc      	beq.n	80059b8 <USER_Device_Orientation_Accelerometer_Init+0x24c>
		memrx=0;
 80059be:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <USER_Device_Orientation_Accelerometer_Init+0x2b4>)
		memrx=0;
 80059c2:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 80059c4:	3301      	adds	r3, #1
 80059c6:	9200      	str	r2, [sp, #0]
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	2213      	movs	r2, #19
 80059cc:	21d6      	movs	r1, #214	; 0xd6
 80059ce:	0028      	movs	r0, r5
 80059d0:	f7fd fe6e 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d001      	beq.n	80059dc <USER_Device_Orientation_Accelerometer_Init+0x270>
			Error_Handler();
 80059d8:	f002 ffa6 	bl	8008928 <Error_Handler>
		while(memrx==0);
 80059dc:	783b      	ldrb	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0fc      	beq.n	80059dc <USER_Device_Orientation_Accelerometer_Init+0x270>
		hexcode|=0x88;
 80059e2:	2278      	movs	r2, #120	; 0x78
		hexcode=acc_ctrl4_c&~0x88;
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <USER_Device_Orientation_Accelerometer_Init+0x2b4>)
		hexcode|=0x88;
 80059e6:	4252      	negs	r2, r2
		hexcode=acc_ctrl4_c&~0x88;
 80059e8:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//bandwidth determined by setting BW_XL[1:0] in CTRL1_XL (10h) register.),Data-ready mask enable. If enabled, when switching from Power-Down to an
 80059ea:	21d6      	movs	r1, #214	; 0xd6
		hexcode|=0x88;
 80059ec:	4313      	orrs	r3, r2
 80059ee:	7033      	strb	r3, [r6, #0]
		memtx=0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//bandwidth determined by setting BW_XL[1:0] in CTRL1_XL (10h) register.),Data-ready mask enable. If enabled, when switching from Power-Down to an
 80059f4:	3301      	adds	r3, #1
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	9600      	str	r6, [sp, #0]
 80059fa:	328b      	adds	r2, #139	; 0x8b
 80059fc:	0028      	movs	r0, r5
 80059fe:	f7fd fdb1 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d001      	beq.n	8005a0a <USER_Device_Orientation_Accelerometer_Init+0x29e>
			Error_Handler();
 8005a06:	f002 ff8f 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8005a0a:	7823      	ldrb	r3, [r4, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0fc      	beq.n	8005a0a <USER_Device_Orientation_Accelerometer_Init+0x29e>
 8005a10:	e6b3      	b.n	800577a <USER_Device_Orientation_Accelerometer_Init+0xe>
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	20000379 	.word	0x20000379
 8005a18:	20000269 	.word	0x20000269
 8005a1c:	200003a0 	.word	0x200003a0
 8005a20:	2000021b 	.word	0x2000021b
 8005a24:	2000026a 	.word	0x2000026a
 8005a28:	2000021c 	.word	0x2000021c
 8005a2c:	2000021a 	.word	0x2000021a
 8005a30:	48000400 	.word	0x48000400
 8005a34:	20000378 	.word	0x20000378
 8005a38:	0800e4a7 	.word	0x0800e4a7
 8005a3c:	20000510 	.word	0x20000510
 8005a40:	00000302 	.word	0x00000302
 8005a44:	2000021d 	.word	0x2000021d

08005a48 <USER_Forward_axes_and_Tilt_Accelerometer_Init>:




void USER_Forward_axes_and_Tilt_Accelerometer_Init(void)
{
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t hexcode;


	if(who_am_i==0x69)
 8005a4a:	4baa      	ldr	r3, [pc, #680]	; (8005cf4 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2ac>)
{
 8005a4c:	b085      	sub	sp, #20
	if(who_am_i==0x69)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b69      	cmp	r3, #105	; 0x69
 8005a52:	d100      	bne.n	8005a56 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xe>
 8005a54:	e0f6      	b.n	8005c44 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1fc>
		while(memtx==0);


	}

	if(who_am_i==0x6a)
 8005a56:	4ba7      	ldr	r3, [pc, #668]	; (8005cf4 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2ac>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b6a      	cmp	r3, #106	; 0x6a
 8005a5c:	d17c      	bne.n	8005b58 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x110>
	{
		memrx=0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4fa5      	ldr	r7, [pc, #660]	; (8005cf8 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005a62:	4da6      	ldr	r5, [pc, #664]	; (8005cfc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b4>)
 8005a64:	4ca6      	ldr	r4, [pc, #664]	; (8005d00 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b8>)
		memrx=0;
 8005a66:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005a68:	3301      	adds	r3, #1
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	9400      	str	r4, [sp, #0]
 8005a6e:	2213      	movs	r2, #19
 8005a70:	21d6      	movs	r1, #214	; 0xd6
 8005a72:	0028      	movs	r0, r5
 8005a74:	f7fd fe1c 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d001      	beq.n	8005a80 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x38>
		{
			Error_Handler();
 8005a7c:	f002 ff54 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005a80:	783b      	ldrb	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0fc      	beq.n	8005a80 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x38>

		hexcode=acc_ctrl4_c&~0x08;
 8005a86:	2308      	movs	r3, #8
		hexcode|=0x08;
 8005a88:	260f      	movs	r6, #15
		hexcode=acc_ctrl4_c&~0x08;
 8005a8a:	7822      	ldrb	r2, [r4, #0]
		hexcode|=0x08;
 8005a8c:	446e      	add	r6, sp
		hexcode=acc_ctrl4_c&~0x08;
 8005a8e:	439a      	bics	r2, r3
		hexcode|=0x08;
 8005a90:	4313      	orrs	r3, r2
 8005a92:	7033      	strb	r3, [r6, #0]

		memtx=0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	4c9b      	ldr	r4, [pc, #620]	; (8005d04 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2bc>)

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8005a98:	2213      	movs	r2, #19
		memtx=0;
 8005a9a:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	9600      	str	r6, [sp, #0]
 8005aa2:	21d6      	movs	r1, #214	; 0xd6
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	f7fd fd5d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d001      	beq.n	8005ab2 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x6a>
			//Data-ready mask enable. If enabled, when switching from Power-Down to an
			//active mode, the accelerometer and gyroscope data-ready signals are masked
			//until the settling of the sensor filters is completed.
		{
			Error_Handler();
 8005aae:	f002 ff3b 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005ab2:	7823      	ldrb	r3, [r4, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0fc      	beq.n	8005ab2 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x6a>
		memrx=0;
 8005ab8:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005aba:	4a93      	ldr	r2, [pc, #588]	; (8005d08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c0>)
		memrx=0;
 8005abc:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005abe:	3301      	adds	r3, #1
 8005ac0:	9200      	str	r2, [sp, #0]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	2217      	movs	r2, #23
 8005ac6:	21d6      	movs	r1, #214	; 0xd6
 8005ac8:	0028      	movs	r0, r5
 8005aca:	f7fd fdf1 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d001      	beq.n	8005ad6 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x8e>
		{
			Error_Handler();
 8005ad2:	f002 ff29 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005ad6:	783b      	ldrb	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0fc      	beq.n	8005ad6 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x8e>

		hexcode=acc_ctrl8_xl&~0b11101100;
 8005adc:	2213      	movs	r2, #19
 8005ade:	4b8a      	ldr	r3, [pc, #552]	; (8005d08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c0>)
		hexcode|=0b11001000;

		memtx=0;
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005ae0:	21d6      	movs	r1, #214	; 0xd6
		hexcode=acc_ctrl8_xl&~0b11101100;
 8005ae2:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005ae4:	0028      	movs	r0, r5
		hexcode=acc_ctrl8_xl&~0b11101100;
 8005ae6:	401a      	ands	r2, r3
		hexcode|=0b11001000;
 8005ae8:	2338      	movs	r3, #56	; 0x38
 8005aea:	425b      	negs	r3, r3
 8005aec:	4313      	orrs	r3, r2
 8005aee:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Accelerometer low-pass filter LPF2 selection.
 8005af4:	3301      	adds	r3, #1
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	9600      	str	r6, [sp, #0]
 8005afa:	2217      	movs	r2, #23
 8005afc:	f7fd fd32 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d001      	beq.n	8005b08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xc0>
			//cut off frequency =ODR/9
			//ODR/4 low pass filtered sent to composite filter  ;LOW NOISE
		{
			Error_Handler();
 8005b04:	f002 ff10 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005b08:	7823      	ldrb	r3, [r4, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0fc      	beq.n	8005b08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xc0>


		memrx=0;
 8005b0e:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005b10:	4a7e      	ldr	r2, [pc, #504]	; (8005d0c <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c4>)
		memrx=0;
 8005b12:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005b14:	3301      	adds	r3, #1
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	21d6      	movs	r1, #214	; 0xd6
 8005b1e:	0028      	movs	r0, r5
 8005b20:	f7fd fdc6 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d001      	beq.n	8005b2c <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xe4>
		{
			Error_Handler();
 8005b28:	f002 fefe 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005b2c:	783b      	ldrb	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0fc      	beq.n	8005b2c <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xe4>

		hexcode=acc_ctrl1_xl&~0xff;
		hexcode|=0x60;
 8005b32:	2360      	movs	r3, #96	; 0x60
 8005b34:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	9600      	str	r6, [sp, #0]
 8005b40:	2210      	movs	r2, #16
 8005b42:	21d6      	movs	r1, #214	; 0xd6
 8005b44:	0028      	movs	r0, r5
 8005b46:	f7fd fd0d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d001      	beq.n	8005b52 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x10a>
																								// ODR_XL = 416 Hz, FS_XL = 2g

		{
			Error_Handler();
 8005b4e:	f002 feeb 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005b52:	7823      	ldrb	r3, [r4, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0fc      	beq.n	8005b52 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x10a>
	}
	if(who_am_i==0x69)
 8005b58:	4b66      	ldr	r3, [pc, #408]	; (8005cf4 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2ac>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b69      	cmp	r3, #105	; 0x69
 8005b5e:	d153      	bne.n	8005c08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1c0>
	{
		memrx=0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	4f65      	ldr	r7, [pc, #404]	; (8005cf8 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005b64:	4d65      	ldr	r5, [pc, #404]	; (8005cfc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b4>)
 8005b66:	4c68      	ldr	r4, [pc, #416]	; (8005d08 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c0>)
		memrx=0;
 8005b68:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9400      	str	r4, [sp, #0]
 8005b70:	2217      	movs	r2, #23
 8005b72:	21d6      	movs	r1, #214	; 0xd6
 8005b74:	0028      	movs	r0, r5
 8005b76:	f7fd fd9b 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d001      	beq.n	8005b82 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x13a>
		{
			Error_Handler();
 8005b7e:	f002 fed3 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005b82:	783b      	ldrb	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0fc      	beq.n	8005b82 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x13a>

		hexcode=acc_ctrl8_xl&~0b11100100;
 8005b88:	221b      	movs	r2, #27
 8005b8a:	7823      	ldrb	r3, [r4, #0]
		hexcode|=0b11000100;
 8005b8c:	260f      	movs	r6, #15
		hexcode=acc_ctrl8_xl&~0b11100100;
 8005b8e:	401a      	ands	r2, r3
		hexcode|=0b11000100;
 8005b90:	233c      	movs	r3, #60	; 0x3c
 8005b92:	425b      	negs	r3, r3
 8005b94:	4313      	orrs	r3, r2
 8005b96:	446e      	add	r6, sp
 8005b98:	7033      	strb	r3, [r6, #0]


		memtx=0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4c59      	ldr	r4, [pc, #356]	; (8005d04 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2bc>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//if both the LPF2_XL_EN bit and the HP_SLOPE_XL_EN bit are set to 1, the LP digital
 8005b9e:	2217      	movs	r2, #23
		memtx=0;
 8005ba0:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//if both the LPF2_XL_EN bit and the HP_SLOPE_XL_EN bit are set to 1, the LP digital
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	9600      	str	r6, [sp, #0]
 8005ba8:	21d6      	movs	r1, #214	; 0xd6
 8005baa:	0028      	movs	r0, r5
 8005bac:	f7fd fcda 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d001      	beq.n	8005bb8 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x170>
			//filter (LPF2) is applied;Accelerometer low-pass filter LPF2 selection.
			//cut off ODR/9
			//Accelerometer slope filter / high-pass filter selection.
		{
			Error_Handler();
 8005bb4:	f002 feb8 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0fc      	beq.n	8005bb8 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x170>

		memrx=0;
 8005bbe:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005bc0:	4a52      	ldr	r2, [pc, #328]	; (8005d0c <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c4>)
		memrx=0;
 8005bc2:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	9200      	str	r2, [sp, #0]
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	21d6      	movs	r1, #214	; 0xd6
 8005bce:	0028      	movs	r0, r5
 8005bd0:	f7fd fd6e 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d001      	beq.n	8005bdc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x194>
		{
			Error_Handler();
 8005bd8:	f002 fea6 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005bdc:	783b      	ldrb	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0fc      	beq.n	8005bdc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x194>

		hexcode=acc_ctrl1_xl&~0xff;
		hexcode|=0x63;
 8005be2:	2363      	movs	r3, #99	; 0x63
 8005be4:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 8005bea:	3301      	adds	r3, #1
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	9600      	str	r6, [sp, #0]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	21d6      	movs	r1, #214	; 0xd6
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	f7fd fcb5 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d001      	beq.n	8005c02 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1ba>
				// ODR_XL = 416 Hz, FS_XL = 2g
			//Anti-aliasing filter bandwidth selection. value: 11 FOR 50Hzin lsm6ds3
		{
			Error_Handler();
 8005bfe:	f002 fe93 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005c02:	7823      	ldrb	r3, [r4, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0fc      	beq.n	8005c02 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1ba>
	}



	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8005c08:	2201      	movs	r2, #1
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	4840      	ldr	r0, [pc, #256]	; (8005d10 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c8>)
 8005c0e:	f7fd facb 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8005c12:	2301      	movs	r3, #1
 8005c14:	4c3f      	ldr	r4, [pc, #252]	; (8005d14 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2cc>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized for Forward Axes and Tilt Recognition......\r\n",strlen("\r\nAccelerometer Output filter Initialized for Forward Axes and Tilt Recognition......\r\n"))!=HAL_OK)
 8005c16:	2257      	movs	r2, #87	; 0x57
 8005c18:	493f      	ldr	r1, [pc, #252]	; (8005d18 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2d0>)
 8005c1a:	4840      	ldr	r0, [pc, #256]	; (8005d1c <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2d4>)
	uarttx_req=1;
 8005c1c:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized for Forward Axes and Tilt Recognition......\r\n",strlen("\r\nAccelerometer Output filter Initialized for Forward Axes and Tilt Recognition......\r\n"))!=HAL_OK)
 8005c1e:	f7ff f84f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d001      	beq.n	8005c2a <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1e2>
	{
		Error_Handler();
 8005c26:	f002 fe7f 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8005c2a:	7823      	ldrb	r3, [r4, #0]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d0fc      	beq.n	8005c2a <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x1e2>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8005c30:	2200      	movs	r2, #0
 8005c32:	2102      	movs	r1, #2
 8005c34:	4836      	ldr	r0, [pc, #216]	; (8005d10 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2c8>)
 8005c36:	f7fd fab7 	bl	80031a8 <HAL_GPIO_WritePin>


	HAL_Delay(770);
 8005c3a:	4839      	ldr	r0, [pc, #228]	; (8005d20 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2d8>)
 8005c3c:	f7fd f89c 	bl	8002d78 <HAL_Delay>

}
 8005c40:	b005      	add	sp, #20
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memrx=0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	4f2c      	ldr	r7, [pc, #176]	; (8005cf8 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 8005c48:	4d2c      	ldr	r5, [pc, #176]	; (8005cfc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b4>)
 8005c4a:	4c36      	ldr	r4, [pc, #216]	; (8005d24 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2dc>)
		memrx=0;
 8005c4c:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 8005c4e:	3301      	adds	r3, #1
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	9400      	str	r4, [sp, #0]
 8005c54:	2218      	movs	r2, #24
 8005c56:	21d6      	movs	r1, #214	; 0xd6
 8005c58:	0028      	movs	r0, r5
 8005c5a:	f7fd fd29 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d001      	beq.n	8005c66 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x21e>
			Error_Handler();
 8005c62:	f002 fe61 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8005c66:	783b      	ldrb	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0fc      	beq.n	8005c66 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x21e>
		hexcode=acc_ctrl9_xl&~0x38;
 8005c6c:	2338      	movs	r3, #56	; 0x38
		hexcode|=0x38;
 8005c6e:	260f      	movs	r6, #15
		hexcode=acc_ctrl9_xl&~0x38;
 8005c70:	7822      	ldrb	r2, [r4, #0]
		hexcode|=0x38;
 8005c72:	446e      	add	r6, sp
		hexcode=acc_ctrl9_xl&~0x38;
 8005c74:	439a      	bics	r2, r3
		hexcode|=0x38;
 8005c76:	4313      	orrs	r3, r2
 8005c78:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4c21      	ldr	r4, [pc, #132]	; (8005d04 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2bc>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)   // Acc X, Y, Z axes enabled
 8005c7e:	2218      	movs	r2, #24
		memtx=0;
 8005c80:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)   // Acc X, Y, Z axes enabled
 8005c82:	3301      	adds	r3, #1
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	9600      	str	r6, [sp, #0]
 8005c88:	21d6      	movs	r1, #214	; 0xd6
 8005c8a:	0028      	movs	r0, r5
 8005c8c:	f7fd fc6a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d001      	beq.n	8005c98 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x250>
			Error_Handler();
 8005c94:	f002 fe48 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8005c98:	7823      	ldrb	r3, [r4, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0fc      	beq.n	8005c98 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x250>
		memrx=0;
 8005c9e:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b8>)
		memrx=0;
 8005ca2:	703b      	strb	r3, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	9200      	str	r2, [sp, #0]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	2213      	movs	r2, #19
 8005cac:	21d6      	movs	r1, #214	; 0xd6
 8005cae:	0028      	movs	r0, r5
 8005cb0:	f7fd fcfe 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d001      	beq.n	8005cbc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x274>
			Error_Handler();
 8005cb8:	f002 fe36 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8005cbc:	783b      	ldrb	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0fc      	beq.n	8005cbc <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x274>
		hexcode|=0x88;
 8005cc2:	2278      	movs	r2, #120	; 0x78
		hexcode=acc_ctrl4_c&~0x88;
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2b8>)
		hexcode|=0x88;
 8005cc6:	4252      	negs	r2, r2
		hexcode=acc_ctrl4_c&~0x88;
 8005cc8:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8005cca:	21d6      	movs	r1, #214	; 0xd6
		hexcode|=0x88;
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	7033      	strb	r3, [r6, #0]
		memtx=0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	9600      	str	r6, [sp, #0]
 8005cda:	328b      	adds	r2, #139	; 0x8b
 8005cdc:	0028      	movs	r0, r5
 8005cde:	f7fd fc41 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d001      	beq.n	8005cea <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2a2>
			Error_Handler();
 8005ce6:	f002 fe1f 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8005cea:	7823      	ldrb	r3, [r4, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0fc      	beq.n	8005cea <USER_Forward_axes_and_Tilt_Accelerometer_Init+0x2a2>
 8005cf0:	e6b1      	b.n	8005a56 <USER_Forward_axes_and_Tilt_Accelerometer_Init+0xe>
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20000379 	.word	0x20000379
 8005cf8:	20000269 	.word	0x20000269
 8005cfc:	200003a0 	.word	0x200003a0
 8005d00:	2000021b 	.word	0x2000021b
 8005d04:	2000026a 	.word	0x2000026a
 8005d08:	2000021c 	.word	0x2000021c
 8005d0c:	2000021a 	.word	0x2000021a
 8005d10:	48000400 	.word	0x48000400
 8005d14:	20000378 	.word	0x20000378
 8005d18:	0800e4d9 	.word	0x0800e4d9
 8005d1c:	20000510 	.word	0x20000510
 8005d20:	00000302 	.word	0x00000302
 8005d24:	2000021d 	.word	0x2000021d

08005d28 <USER_Device_Orientation_Accelerometer_DeInit>:




void USER_Device_Orientation_Accelerometer_DeInit(void)
{
 8005d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(who_am_i==0x69)
 8005d2a:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <USER_Device_Orientation_Accelerometer_DeInit+0xd4>)
 8005d2c:	4c34      	ldr	r4, [pc, #208]	; (8005e00 <USER_Device_Orientation_Accelerometer_DeInit+0xd8>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4d34      	ldr	r5, [pc, #208]	; (8005e04 <USER_Device_Orientation_Accelerometer_DeInit+0xdc>)
 8005d32:	2b69      	cmp	r3, #105	; 0x69
 8005d34:	d04f      	beq.n	8005dd6 <USER_Device_Orientation_Accelerometer_DeInit+0xae>




	}
	memtx=0;
 8005d36:	2300      	movs	r3, #0

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005d38:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <USER_Device_Orientation_Accelerometer_DeInit+0xe0>)
	memtx=0;
 8005d3a:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&acc_ctrl4_c,1)!=HAL_OK)
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	9200      	str	r2, [sp, #0]
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	2213      	movs	r2, #19
 8005d44:	21d6      	movs	r1, #214	; 0xd6
 8005d46:	0028      	movs	r0, r5
 8005d48:	f7fd fc0c 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d001      	beq.n	8005d54 <USER_Device_Orientation_Accelerometer_DeInit+0x2c>
		{
			Error_Handler();
 8005d50:	f002 fdea 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005d54:	7823      	ldrb	r3, [r4, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0fc      	beq.n	8005d54 <USER_Device_Orientation_Accelerometer_DeInit+0x2c>



		memtx=0;
 8005d5a:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <USER_Device_Orientation_Accelerometer_DeInit+0xe4>)
		memtx=0;
 8005d5e:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl8_xl,1)!=HAL_OK)
 8005d60:	3301      	adds	r3, #1
 8005d62:	9200      	str	r2, [sp, #0]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	2217      	movs	r2, #23
 8005d68:	21d6      	movs	r1, #214	; 0xd6
 8005d6a:	0028      	movs	r0, r5
 8005d6c:	f7fd fbfa 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d001      	beq.n	8005d78 <USER_Device_Orientation_Accelerometer_DeInit+0x50>
		{
			Error_Handler();
 8005d74:	f002 fdd8 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8005d78:	7823      	ldrb	r3, [r4, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0fc      	beq.n	8005d78 <USER_Device_Orientation_Accelerometer_DeInit+0x50>



	memtx=0;
 8005d7e:	2300      	movs	r3, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <USER_Device_Orientation_Accelerometer_DeInit+0xe8>)
	memtx=0;
 8005d82:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl1_xl,1)!=HAL_OK)
 8005d84:	3301      	adds	r3, #1
 8005d86:	9200      	str	r2, [sp, #0]
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	21d6      	movs	r1, #214	; 0xd6
 8005d8e:	0028      	movs	r0, r5
 8005d90:	f7fd fbe8 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d001      	beq.n	8005d9c <USER_Device_Orientation_Accelerometer_DeInit+0x74>
	{
		Error_Handler();
 8005d98:	f002 fdc6 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8005d9c:	7823      	ldrb	r3, [r4, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0fc      	beq.n	8005d9c <USER_Device_Orientation_Accelerometer_DeInit+0x74>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8005da2:	2201      	movs	r2, #1
 8005da4:	2102      	movs	r1, #2
 8005da6:	481b      	ldr	r0, [pc, #108]	; (8005e14 <USER_Device_Orientation_Accelerometer_DeInit+0xec>)
 8005da8:	f7fd f9fe 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8005dac:	2301      	movs	r3, #1
 8005dae:	4c1a      	ldr	r4, [pc, #104]	; (8005e18 <USER_Device_Orientation_Accelerometer_DeInit+0xf0>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized to Previous STATE......\r\n",strlen("\r\nAccelerometer Output filter Initialized to Previous STATE......\r\n"))!=HAL_OK)
 8005db0:	2243      	movs	r2, #67	; 0x43
 8005db2:	491a      	ldr	r1, [pc, #104]	; (8005e1c <USER_Device_Orientation_Accelerometer_DeInit+0xf4>)
 8005db4:	481a      	ldr	r0, [pc, #104]	; (8005e20 <USER_Device_Orientation_Accelerometer_DeInit+0xf8>)
	uarttx_req=1;
 8005db6:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output filter Initialized to Previous STATE......\r\n",strlen("\r\nAccelerometer Output filter Initialized to Previous STATE......\r\n"))!=HAL_OK)
 8005db8:	f7fe ff82 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d001      	beq.n	8005dc4 <USER_Device_Orientation_Accelerometer_DeInit+0x9c>
	{
		Error_Handler();
 8005dc0:	f002 fdb2 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8005dc4:	7823      	ldrb	r3, [r4, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d0fc      	beq.n	8005dc4 <USER_Device_Orientation_Accelerometer_DeInit+0x9c>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4811      	ldr	r0, [pc, #68]	; (8005e14 <USER_Device_Orientation_Accelerometer_DeInit+0xec>)
 8005dd0:	f7fd f9ea 	bl	80031a8 <HAL_GPIO_WritePin>

}
 8005dd4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		memtx=0;
 8005dd6:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 8005dd8:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <USER_Device_Orientation_Accelerometer_DeInit+0xfc>)
		memtx=0;
 8005dda:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL9_XL,I2C_MEMADD_SIZE_8BIT,&acc_ctrl9_xl,1)!=HAL_OK)
 8005ddc:	3301      	adds	r3, #1
 8005dde:	9200      	str	r2, [sp, #0]
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	2218      	movs	r2, #24
 8005de4:	21d6      	movs	r1, #214	; 0xd6
 8005de6:	0028      	movs	r0, r5
 8005de8:	f7fd fbbc 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d001      	beq.n	8005df4 <USER_Device_Orientation_Accelerometer_DeInit+0xcc>
			Error_Handler();
 8005df0:	f002 fd9a 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8005df4:	7823      	ldrb	r3, [r4, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0fc      	beq.n	8005df4 <USER_Device_Orientation_Accelerometer_DeInit+0xcc>
 8005dfa:	e79c      	b.n	8005d36 <USER_Device_Orientation_Accelerometer_DeInit+0xe>
 8005dfc:	20000379 	.word	0x20000379
 8005e00:	2000026a 	.word	0x2000026a
 8005e04:	200003a0 	.word	0x200003a0
 8005e08:	2000021b 	.word	0x2000021b
 8005e0c:	2000021c 	.word	0x2000021c
 8005e10:	2000021a 	.word	0x2000021a
 8005e14:	48000400 	.word	0x48000400
 8005e18:	20000378 	.word	0x20000378
 8005e1c:	0800e463 	.word	0x0800e463
 8005e20:	20000510 	.word	0x20000510
 8005e24:	2000021d 	.word	0x2000021d

08005e28 <USER_Accelerometer_Referance_Value_Calculation>:
void USER_Accelerometer_Referance_Value_Calculation(void)
{



	uint8_t status_reg=0,wake_up_src=0;
 8005e28:	230e      	movs	r3, #14
 8005e2a:	2100      	movs	r1, #0
{
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t status_reg=0,wake_up_src=0;
 8005e30:	aa04      	add	r2, sp, #16
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	7019      	strb	r1, [r3, #0]
 8005e36:	230f      	movs	r3, #15
	int16_t array_out_xl[3]={0};
 8005e38:	a808      	add	r0, sp, #32
	uint8_t status_reg=0,wake_up_src=0;
 8005e3a:	189b      	adds	r3, r3, r2
	int16_t array_out_xl[3]={0};
 8005e3c:	2206      	movs	r2, #6
	uint8_t status_reg=0,wake_up_src=0;
 8005e3e:	7019      	strb	r1, [r3, #0]

	for(uint8_t loop=0;loop<NUMBER_OF_ACCELEROMETER_SAMPLES;loop++)
	{

		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005e40:	2401      	movs	r4, #1
	int16_t array_out_xl[3]={0};
 8005e42:	f005 ff58 	bl	800bcf6 <memset>
	HAL_Delay(3);
 8005e46:	2003      	movs	r0, #3
 8005e48:	f7fc ff96 	bl	8002d78 <HAL_Delay>
 8005e4c:	230a      	movs	r3, #10
 8005e4e:	9302      	str	r3, [sp, #8]
	out_xl_ref.z=0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	9305      	str	r3, [sp, #20]
	out_xl_ref.y=0;
 8005e54:	9304      	str	r3, [sp, #16]
	out_xl_ref.x=0;
 8005e56:	9303      	str	r3, [sp, #12]
		memrx=0;
 8005e58:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005e5a:	260f      	movs	r6, #15
		memrx=0;
 8005e5c:	4dca      	ldr	r5, [pc, #808]	; (8006188 <USER_Accelerometer_Referance_Value_Calculation+0x360>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005e5e:	221b      	movs	r2, #27
		memrx=0;
 8005e60:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005e62:	ab04      	add	r3, sp, #16
 8005e64:	18f6      	adds	r6, r6, r3
 8005e66:	9401      	str	r4, [sp, #4]
 8005e68:	9600      	str	r6, [sp, #0]
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	21d6      	movs	r1, #214	; 0xd6
 8005e6e:	48c7      	ldr	r0, [pc, #796]	; (800618c <USER_Accelerometer_Referance_Value_Calculation+0x364>)
 8005e70:	f7fd fc1e 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d001      	beq.n	8005e7c <USER_Accelerometer_Referance_Value_Calculation+0x54>
		{
			Error_Handler();
 8005e78:	f002 fd56 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005e7c:	782b      	ldrb	r3, [r5, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0fc      	beq.n	8005e7c <USER_Accelerometer_Referance_Value_Calculation+0x54>

		if(  (wake_up_src&0x08) == 0x08)
 8005e82:	7833      	ldrb	r3, [r6, #0]
 8005e84:	071b      	lsls	r3, r3, #28
 8005e86:	d4de      	bmi.n	8005e46 <USER_Accelerometer_Referance_Value_Calculation+0x1e>

		}



		wait:			memrx=0;
 8005e88:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8005e8a:	260e      	movs	r6, #14
		wait:			memrx=0;
 8005e8c:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8005e8e:	ab04      	add	r3, sp, #16
 8005e90:	18f6      	adds	r6, r6, r3
 8005e92:	9401      	str	r4, [sp, #4]
 8005e94:	9600      	str	r6, [sp, #0]
 8005e96:	2301      	movs	r3, #1
 8005e98:	221e      	movs	r2, #30
 8005e9a:	21d6      	movs	r1, #214	; 0xd6
 8005e9c:	48bb      	ldr	r0, [pc, #748]	; (800618c <USER_Accelerometer_Referance_Value_Calculation+0x364>)
 8005e9e:	f7fd fc07 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d001      	beq.n	8005eaa <USER_Accelerometer_Referance_Value_Calculation+0x82>
		{
			Error_Handler();
 8005ea6:	f002 fd3f 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005eaa:	782b      	ldrb	r3, [r5, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0fc      	beq.n	8005eaa <USER_Accelerometer_Referance_Value_Calculation+0x82>




		if(status_reg&1 ==1)
 8005eb0:	7833      	ldrb	r3, [r6, #0]
 8005eb2:	4223      	tst	r3, r4
 8005eb4:	d0e8      	beq.n	8005e88 <USER_Accelerometer_Referance_Value_Calculation+0x60>
		{

			memrx=0;
 8005eb6:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 8005eb8:	ae08      	add	r6, sp, #32
			memrx=0;
 8005eba:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 8005ebc:	3306      	adds	r3, #6
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	9600      	str	r6, [sp, #0]
 8005ec2:	0023      	movs	r3, r4
 8005ec4:	2228      	movs	r2, #40	; 0x28
 8005ec6:	21d6      	movs	r1, #214	; 0xd6
 8005ec8:	48b0      	ldr	r0, [pc, #704]	; (800618c <USER_Accelerometer_Referance_Value_Calculation+0x364>)
 8005eca:	f7fd fbf1 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d001      	beq.n	8005ed6 <USER_Accelerometer_Referance_Value_Calculation+0xae>
			{
				Error_Handler();
 8005ed2:	f002 fd29 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 8005ed6:	782b      	ldrb	r3, [r5, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0fc      	beq.n	8005ed6 <USER_Accelerometer_Referance_Value_Calculation+0xae>





			out_xl_ref.x+=array_out_xl[X];
 8005edc:	2300      	movs	r3, #0
 8005ede:	5ef2      	ldrsh	r2, [r6, r3]
 8005ee0:	9b03      	ldr	r3, [sp, #12]
		}
		else
		{
			goto wait;
		}
		sprintf(out_string," \r\nX = %d , Y = %d , Z = %d \r\n",array_out_xl[X],array_out_xl[Y],array_out_xl[Z]);
 8005ee2:	4fab      	ldr	r7, [pc, #684]	; (8006190 <USER_Accelerometer_Referance_Value_Calculation+0x368>)
			out_xl_ref.x+=array_out_xl[X];
 8005ee4:	189b      	adds	r3, r3, r2
 8005ee6:	9303      	str	r3, [sp, #12]
			out_xl_ref.y+=array_out_xl[Y];
 8005ee8:	2102      	movs	r1, #2
 8005eea:	5e73      	ldrsh	r3, [r6, r1]
 8005eec:	9904      	ldr	r1, [sp, #16]
 8005eee:	18c9      	adds	r1, r1, r3
 8005ef0:	9104      	str	r1, [sp, #16]
			out_xl_ref.z+=array_out_xl[Z];
 8005ef2:	2004      	movs	r0, #4
 8005ef4:	5e31      	ldrsh	r1, [r6, r0]
 8005ef6:	9805      	ldr	r0, [sp, #20]
		sprintf(out_string," \r\nX = %d , Y = %d , Z = %d \r\n",array_out_xl[X],array_out_xl[Y],array_out_xl[Z]);
 8005ef8:	9100      	str	r1, [sp, #0]
			out_xl_ref.z+=array_out_xl[Z];
 8005efa:	1840      	adds	r0, r0, r1
 8005efc:	9005      	str	r0, [sp, #20]
		sprintf(out_string," \r\nX = %d , Y = %d , Z = %d \r\n",array_out_xl[X],array_out_xl[Y],array_out_xl[Z]);
 8005efe:	49a5      	ldr	r1, [pc, #660]	; (8006194 <USER_Accelerometer_Referance_Value_Calculation+0x36c>)
 8005f00:	0038      	movs	r0, r7
 8005f02:	f005 ff01 	bl	800bd08 <siprintf>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8005f06:	0022      	movs	r2, r4
 8005f08:	2102      	movs	r1, #2
 8005f0a:	48a3      	ldr	r0, [pc, #652]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8005f0c:	f7fd f94c 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8005f10:	4da2      	ldr	r5, [pc, #648]	; (800619c <USER_Accelerometer_Referance_Value_Calculation+0x374>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8005f12:	0038      	movs	r0, r7
		uarttx_req=1;
 8005f14:	702c      	strb	r4, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8005f16:	f7fa f8f5 	bl	8000104 <strlen>
 8005f1a:	0039      	movs	r1, r7
 8005f1c:	b282      	uxth	r2, r0
 8005f1e:	48a0      	ldr	r0, [pc, #640]	; (80061a0 <USER_Accelerometer_Referance_Value_Calculation+0x378>)
 8005f20:	f7fe fece 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d001      	beq.n	8005f2c <USER_Accelerometer_Referance_Value_Calculation+0x104>
		{
			Error_Handler();
 8005f28:	f002 fcfe 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8005f2c:	782b      	ldrb	r3, [r5, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d0fc      	beq.n	8005f2c <USER_Accelerometer_Referance_Value_Calculation+0x104>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8005f32:	2200      	movs	r2, #0
 8005f34:	2102      	movs	r1, #2
 8005f36:	4898      	ldr	r0, [pc, #608]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8005f38:	f7fd f936 	bl	80031a8 <HAL_GPIO_WritePin>





		memrx=0;
 8005f3c:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005f3e:	250f      	movs	r5, #15
		memrx=0;
 8005f40:	4e91      	ldr	r6, [pc, #580]	; (8006188 <USER_Accelerometer_Referance_Value_Calculation+0x360>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005f42:	221b      	movs	r2, #27
		memrx=0;
 8005f44:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8005f46:	ab04      	add	r3, sp, #16
 8005f48:	18ed      	adds	r5, r5, r3
 8005f4a:	9401      	str	r4, [sp, #4]
 8005f4c:	9500      	str	r5, [sp, #0]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	21d6      	movs	r1, #214	; 0xd6
 8005f52:	488e      	ldr	r0, [pc, #568]	; (800618c <USER_Accelerometer_Referance_Value_Calculation+0x364>)
 8005f54:	f7fd fbac 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d001      	beq.n	8005f60 <USER_Accelerometer_Referance_Value_Calculation+0x138>
		{
			Error_Handler();
 8005f5c:	f002 fce4 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8005f60:	7833      	ldrb	r3, [r6, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0fc      	beq.n	8005f60 <USER_Accelerometer_Referance_Value_Calculation+0x138>

		if(  (wake_up_src&0x08) == 0x08)
 8005f66:	782b      	ldrb	r3, [r5, #0]
 8005f68:	071b      	lsls	r3, r3, #28
 8005f6a:	d500      	bpl.n	8005f6e <USER_Accelerometer_Referance_Value_Calculation+0x146>
 8005f6c:	e76b      	b.n	8005e46 <USER_Accelerometer_Referance_Value_Calculation+0x1e>
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	9302      	str	r3, [sp, #8]
	for(uint8_t loop=0;loop<NUMBER_OF_ACCELEROMETER_SAMPLES;loop++)
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d000      	beq.n	8005f7c <USER_Accelerometer_Referance_Value_Calculation+0x154>
 8005f7a:	e76d      	b.n	8005e58 <USER_Accelerometer_Referance_Value_Calculation+0x30>
		}


	}

	out_xl_ref.x/=NUMBER_OF_ACCELEROMETER_SAMPLES;
 8005f7c:	210a      	movs	r1, #10
 8005f7e:	9803      	ldr	r0, [sp, #12]
 8005f80:	f7fa f970 	bl	8000264 <__divsi3>
	out_xl_ref.y/=NUMBER_OF_ACCELEROMETER_SAMPLES;
	out_xl_ref.z/=NUMBER_OF_ACCELEROMETER_SAMPLES;
	xl_axes_ref[X]=out_xl_ref.x;
 8005f84:	4b87      	ldr	r3, [pc, #540]	; (80061a4 <USER_Accelerometer_Referance_Value_Calculation+0x37c>)
 8005f86:	b204      	sxth	r4, r0
 8005f88:	801c      	strh	r4, [r3, #0]
	out_xl_ref.y/=NUMBER_OF_ACCELEROMETER_SAMPLES;
 8005f8a:	210a      	movs	r1, #10
 8005f8c:	9804      	ldr	r0, [sp, #16]
 8005f8e:	f7fa f969 	bl	8000264 <__divsi3>
	xl_axes_ref[Y]=out_xl_ref.y;
 8005f92:	4b84      	ldr	r3, [pc, #528]	; (80061a4 <USER_Accelerometer_Referance_Value_Calculation+0x37c>)
 8005f94:	b205      	sxth	r5, r0
 8005f96:	805d      	strh	r5, [r3, #2]
	out_xl_ref.z/=NUMBER_OF_ACCELEROMETER_SAMPLES;
 8005f98:	210a      	movs	r1, #10
 8005f9a:	9805      	ldr	r0, [sp, #20]
 8005f9c:	f7fa f962 	bl	8000264 <__divsi3>
	xl_axes_ref[Z]=out_xl_ref.z;
 8005fa0:	4b80      	ldr	r3, [pc, #512]	; (80061a4 <USER_Accelerometer_Referance_Value_Calculation+0x37c>)
 8005fa2:	b200      	sxth	r0, r0
 8005fa4:	8098      	strh	r0, [r3, #4]





	sprintf(out_string," \r\n Reference Values of Accelerometer     X-axis = %d	Y-axis = %d	Z-axis = %d\r\n",*(xl_axes_ref+X),*(xl_axes_ref+Y),*(xl_axes_ref+Z));
 8005fa6:	0022      	movs	r2, r4
 8005fa8:	002b      	movs	r3, r5
 8005faa:	9000      	str	r0, [sp, #0]
 8005fac:	497e      	ldr	r1, [pc, #504]	; (80061a8 <USER_Accelerometer_Referance_Value_Calculation+0x380>)
 8005fae:	0038      	movs	r0, r7
 8005fb0:	f005 feaa 	bl	800bd08 <siprintf>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4877      	ldr	r0, [pc, #476]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8005fba:	f7fd f8f5 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4c76      	ldr	r4, [pc, #472]	; (800619c <USER_Accelerometer_Referance_Value_Calculation+0x374>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8005fc2:	0038      	movs	r0, r7
	uarttx_req=1;
 8005fc4:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8005fc6:	f7fa f89d 	bl	8000104 <strlen>
 8005fca:	4e75      	ldr	r6, [pc, #468]	; (80061a0 <USER_Accelerometer_Referance_Value_Calculation+0x378>)
 8005fcc:	b282      	uxth	r2, r0
 8005fce:	0039      	movs	r1, r7
 8005fd0:	0030      	movs	r0, r6
 8005fd2:	f7fe fe75 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d001      	beq.n	8005fde <USER_Accelerometer_Referance_Value_Calculation+0x1b6>
	{
		Error_Handler();
 8005fda:	f002 fca5 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8005fde:	7823      	ldrb	r3, [r4, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d0fc      	beq.n	8005fde <USER_Accelerometer_Referance_Value_Calculation+0x1b6>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	486b      	ldr	r0, [pc, #428]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8005fea:	f7fd f8dd 	bl	80031a8 <HAL_GPIO_WritePin>



	gravity_axes=USER_Highest_Element_of_an_Array_int16_t(xl_axes_ref,sizeof(xl_axes_ref)/sizeof(xl_axes_ref[X]));
 8005fee:	2103      	movs	r1, #3
 8005ff0:	486c      	ldr	r0, [pc, #432]	; (80061a4 <USER_Accelerometer_Referance_Value_Calculation+0x37c>)
 8005ff2:	f002 fa89 	bl	8008508 <USER_Highest_Element_of_an_Array_int16_t>
 8005ff6:	4b6d      	ldr	r3, [pc, #436]	; (80061ac <USER_Accelerometer_Referance_Value_Calculation+0x384>)
 8005ff8:	b2c5      	uxtb	r5, r0
 8005ffa:	701d      	strb	r5, [r3, #0]


	if(gravity_axes != AXES_NOT_SET)
 8005ffc:	2d03      	cmp	r5, #3
 8005ffe:	d100      	bne.n	8006002 <USER_Accelerometer_Referance_Value_Calculation+0x1da>
 8006000:	e084      	b.n	800610c <USER_Accelerometer_Referance_Value_Calculation+0x2e4>
	{

	if(xl_axes_ref[gravity_axes]>0)
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <USER_Accelerometer_Referance_Value_Calculation+0x37c>)
 8006006:	4010      	ands	r0, r2
 8006008:	0040      	lsls	r0, r0, #1
 800600a:	5e19      	ldrsh	r1, [r3, r0]
 800600c:	4b68      	ldr	r3, [pc, #416]	; (80061b0 <USER_Accelerometer_Referance_Value_Calculation+0x388>)
 800600e:	2900      	cmp	r1, #0
 8006010:	dd00      	ble.n	8006014 <USER_Accelerometer_Referance_Value_Calculation+0x1ec>
	{
		sign_of_gravity=PLUS;
 8006012:	3afe      	subs	r2, #254	; 0xfe
	}
	else
	{
		sign_of_gravity=MINUS;
 8006014:	701a      	strb	r2, [r3, #0]
	}

	}


	switch(gravity_axes)
 8006016:	2d01      	cmp	r5, #1
 8006018:	d043      	beq.n	80060a2 <USER_Accelerometer_Referance_Value_Calculation+0x27a>
 800601a:	2d00      	cmp	r5, #0
 800601c:	d01c      	beq.n	8006058 <USER_Accelerometer_Referance_Value_Calculation+0x230>
 800601e:	2d02      	cmp	r5, #2
 8006020:	d059      	beq.n	80060d6 <USER_Accelerometer_Referance_Value_Calculation+0x2ae>
	}
	while(uarttx_req==1);
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
	break;
	default:
		sprintf(out_string," \r\nSome Logical Error by USER_Accelerometer_Referance_Value_Calculation()...........\r\n");
 8006022:	4964      	ldr	r1, [pc, #400]	; (80061b4 <USER_Accelerometer_Referance_Value_Calculation+0x38c>)
 8006024:	0038      	movs	r0, r7
 8006026:	f005 fe91 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800602a:	2201      	movs	r2, #1
 800602c:	2102      	movs	r1, #2
 800602e:	485a      	ldr	r0, [pc, #360]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8006030:	f7fd f8ba 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8006034:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006036:	0038      	movs	r0, r7
		uarttx_req=1;
 8006038:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800603a:	f7fa f863 	bl	8000104 <strlen>
 800603e:	0039      	movs	r1, r7
 8006040:	b282      	uxth	r2, r0
 8006042:	0030      	movs	r0, r6
 8006044:	f7fe fe3c 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006048:	2800      	cmp	r0, #0
 800604a:	d001      	beq.n	8006050 <USER_Accelerometer_Referance_Value_Calculation+0x228>
		{
			Error_Handler();
 800604c:	f002 fc6c 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8006050:	7823      	ldrb	r3, [r4, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d0fc      	beq.n	8006050 <USER_Accelerometer_Referance_Value_Calculation+0x228>
 8006056:	e019      	b.n	800608c <USER_Accelerometer_Referance_Value_Calculation+0x264>
		sprintf(out_string," \r\nX is Gravity Axes \r\n");
 8006058:	4957      	ldr	r1, [pc, #348]	; (80061b8 <USER_Accelerometer_Referance_Value_Calculation+0x390>)
 800605a:	0038      	movs	r0, r7
 800605c:	f005 fe76 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006060:	2201      	movs	r2, #1
 8006062:	2102      	movs	r1, #2
 8006064:	484c      	ldr	r0, [pc, #304]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8006066:	f7fd f89f 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800606a:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800606c:	0038      	movs	r0, r7
		uarttx_req=1;
 800606e:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006070:	f7fa f848 	bl	8000104 <strlen>
 8006074:	0039      	movs	r1, r7
 8006076:	b282      	uxth	r2, r0
 8006078:	0030      	movs	r0, r6
 800607a:	f7fe fe21 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800607e:	2800      	cmp	r0, #0
 8006080:	d001      	beq.n	8006086 <USER_Accelerometer_Referance_Value_Calculation+0x25e>
			Error_Handler();
 8006082:	f002 fc51 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 8006086:	7823      	ldrb	r3, [r4, #0]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d0fc      	beq.n	8006086 <USER_Accelerometer_Referance_Value_Calculation+0x25e>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800608c:	2200      	movs	r2, #0
 800608e:	2102      	movs	r1, #2
 8006090:	4841      	ldr	r0, [pc, #260]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8006092:	f7fd f889 	bl	80031a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);


	}

	if(gravity_axes != AXES_NOT_SET)
 8006096:	4b45      	ldr	r3, [pc, #276]	; (80061ac <USER_Accelerometer_Referance_Value_Calculation+0x384>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d151      	bne.n	8006142 <USER_Accelerometer_Referance_Value_Calculation+0x31a>
		}
		while(uarttx_req==1);
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
	}

}
 800609e:	b00b      	add	sp, #44	; 0x2c
 80060a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf(out_string," \r\nY is Gravity Axes \r\n");
 80060a2:	4946      	ldr	r1, [pc, #280]	; (80061bc <USER_Accelerometer_Referance_Value_Calculation+0x394>)
 80060a4:	0038      	movs	r0, r7
 80060a6:	f005 fe51 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80060aa:	002a      	movs	r2, r5
 80060ac:	2102      	movs	r1, #2
 80060ae:	483a      	ldr	r0, [pc, #232]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 80060b0:	f7fd f87a 	bl	80031a8 <HAL_GPIO_WritePin>
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80060b4:	0038      	movs	r0, r7
		uarttx_req=1;
 80060b6:	7025      	strb	r5, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80060b8:	f7fa f824 	bl	8000104 <strlen>
 80060bc:	0039      	movs	r1, r7
 80060be:	b282      	uxth	r2, r0
 80060c0:	0030      	movs	r0, r6
 80060c2:	f7fe fdfd 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d001      	beq.n	80060ce <USER_Accelerometer_Referance_Value_Calculation+0x2a6>
			Error_Handler();
 80060ca:	f002 fc2d 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 80060ce:	7823      	ldrb	r3, [r4, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d0fc      	beq.n	80060ce <USER_Accelerometer_Referance_Value_Calculation+0x2a6>
 80060d4:	e7da      	b.n	800608c <USER_Accelerometer_Referance_Value_Calculation+0x264>
		sprintf(out_string," \r\nZ is Gravity Axes \r\n");
 80060d6:	493a      	ldr	r1, [pc, #232]	; (80061c0 <USER_Accelerometer_Referance_Value_Calculation+0x398>)
 80060d8:	0038      	movs	r0, r7
 80060da:	f005 fe37 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80060de:	2201      	movs	r2, #1
 80060e0:	0029      	movs	r1, r5
 80060e2:	482d      	ldr	r0, [pc, #180]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 80060e4:	f7fd f860 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80060e8:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80060ea:	0038      	movs	r0, r7
		uarttx_req=1;
 80060ec:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80060ee:	f7fa f809 	bl	8000104 <strlen>
 80060f2:	0039      	movs	r1, r7
 80060f4:	b282      	uxth	r2, r0
 80060f6:	0030      	movs	r0, r6
 80060f8:	f7fe fde2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d001      	beq.n	8006104 <USER_Accelerometer_Referance_Value_Calculation+0x2dc>
			Error_Handler();
 8006100:	f002 fc12 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 8006104:	7823      	ldrb	r3, [r4, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d0fc      	beq.n	8006104 <USER_Accelerometer_Referance_Value_Calculation+0x2dc>
 800610a:	e7bf      	b.n	800608c <USER_Accelerometer_Referance_Value_Calculation+0x264>
	case AXES_NOT_SET:	sprintf(out_string," \r\nNot able to find Gravity Axes Please try again in CALM condition ...........\r\n");
 800610c:	492d      	ldr	r1, [pc, #180]	; (80061c4 <USER_Accelerometer_Referance_Value_Calculation+0x39c>)
 800610e:	0038      	movs	r0, r7
 8006110:	f005 fe1c 	bl	800bd4c <strcpy>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006114:	2201      	movs	r2, #1
 8006116:	2102      	movs	r1, #2
 8006118:	481f      	ldr	r0, [pc, #124]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 800611a:	f7fd f845 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800611e:	2301      	movs	r3, #1
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006120:	0038      	movs	r0, r7
	uarttx_req=1;
 8006122:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006124:	f7f9 ffee 	bl	8000104 <strlen>
 8006128:	0039      	movs	r1, r7
 800612a:	b282      	uxth	r2, r0
 800612c:	0030      	movs	r0, r6
 800612e:	f7fe fdc7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006132:	2800      	cmp	r0, #0
 8006134:	d001      	beq.n	800613a <USER_Accelerometer_Referance_Value_Calculation+0x312>
		Error_Handler();
 8006136:	f002 fbf7 	bl	8008928 <Error_Handler>
	while(uarttx_req==1);
 800613a:	7823      	ldrb	r3, [r4, #0]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d0fc      	beq.n	800613a <USER_Accelerometer_Referance_Value_Calculation+0x312>
 8006140:	e7a4      	b.n	800608c <USER_Accelerometer_Referance_Value_Calculation+0x264>
	sprintf(out_string," \r\nSign of Gravity	=	%d\r\n",sign_of_gravity);
 8006142:	2200      	movs	r2, #0
 8006144:	4b1a      	ldr	r3, [pc, #104]	; (80061b0 <USER_Accelerometer_Referance_Value_Calculation+0x388>)
 8006146:	4920      	ldr	r1, [pc, #128]	; (80061c8 <USER_Accelerometer_Referance_Value_Calculation+0x3a0>)
 8006148:	569a      	ldrsb	r2, [r3, r2]
 800614a:	0038      	movs	r0, r7
 800614c:	f005 fddc 	bl	800bd08 <siprintf>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006150:	2201      	movs	r2, #1
 8006152:	2102      	movs	r1, #2
 8006154:	4810      	ldr	r0, [pc, #64]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8006156:	f7fd f827 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800615a:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800615c:	0038      	movs	r0, r7
		uarttx_req=1;
 800615e:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006160:	f7f9 ffd0 	bl	8000104 <strlen>
 8006164:	0039      	movs	r1, r7
 8006166:	b282      	uxth	r2, r0
 8006168:	0030      	movs	r0, r6
 800616a:	f7fe fda9 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800616e:	2800      	cmp	r0, #0
 8006170:	d001      	beq.n	8006176 <USER_Accelerometer_Referance_Value_Calculation+0x34e>
			Error_Handler();
 8006172:	f002 fbd9 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 8006176:	7823      	ldrb	r3, [r4, #0]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d0fc      	beq.n	8006176 <USER_Accelerometer_Referance_Value_Calculation+0x34e>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800617c:	2200      	movs	r2, #0
 800617e:	2102      	movs	r1, #2
 8006180:	4805      	ldr	r0, [pc, #20]	; (8006198 <USER_Accelerometer_Referance_Value_Calculation+0x370>)
 8006182:	f7fd f811 	bl	80031a8 <HAL_GPIO_WritePin>
}
 8006186:	e78a      	b.n	800609e <USER_Accelerometer_Referance_Value_Calculation+0x276>
 8006188:	20000269 	.word	0x20000269
 800618c:	200003a0 	.word	0x200003a0
 8006190:	2000026b 	.word	0x2000026b
 8006194:	0800e531 	.word	0x0800e531
 8006198:	48000400 	.word	0x48000400
 800619c:	20000378 	.word	0x20000378
 80061a0:	20000510 	.word	0x20000510
 80061a4:	2000037a 	.word	0x2000037a
 80061a8:	0800e550 	.word	0x0800e550
 80061ac:	20000009 	.word	0x20000009
 80061b0:	20000016 	.word	0x20000016
 80061b4:	0800e63a 	.word	0x0800e63a
 80061b8:	0800e5a0 	.word	0x0800e5a0
 80061bc:	0800e5b8 	.word	0x0800e5b8
 80061c0:	0800e5d0 	.word	0x0800e5d0
 80061c4:	0800e5e8 	.word	0x0800e5e8
 80061c8:	0800e691 	.word	0x0800e691

080061cc <USER_Device_Orientation_WakeUp_init>:
extern volatile uint8_t memtx,memrx,uarttx_req;
extern uint8_t who_am_i;
static uint8_t ori_wake_ctrl1_xl,ori_wake_tap_cfg,ori_wake_wake_up_ths,ori_wake_ctrl8_xl,ori_wake_wake_up_dur,ori_wake_md1_cfg;

void USER_Device_Orientation_WakeUp_init(void)
{
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}


	uint8_t hexcode;
	while(HAL_I2C_IsDeviceReady(&hi2c2,LSM6DS3,100,1000)!=HAL_OK);//check is Device Ready
 80061ce:	24fa      	movs	r4, #250	; 0xfa
{
 80061d0:	b085      	sub	sp, #20
	while(HAL_I2C_IsDeviceReady(&hi2c2,LSM6DS3,100,1000)!=HAL_OK);//check is Device Ready
 80061d2:	00a4      	lsls	r4, r4, #2
 80061d4:	4eb1      	ldr	r6, [pc, #708]	; (800649c <USER_Device_Orientation_WakeUp_init+0x2d0>)
 80061d6:	0023      	movs	r3, r4
 80061d8:	2264      	movs	r2, #100	; 0x64
 80061da:	21d6      	movs	r1, #214	; 0xd6
 80061dc:	0030      	movs	r0, r6
 80061de:	f7fd fb11 	bl	8003804 <HAL_I2C_IsDeviceReady>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d1f6      	bne.n	80061d4 <USER_Device_Orientation_WakeUp_init+0x8>
	memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl1_xl,1)!=HAL_OK)
 80061e6:	2301      	movs	r3, #1
	memrx=0;
 80061e8:	4dad      	ldr	r5, [pc, #692]	; (80064a0 <USER_Device_Orientation_WakeUp_init+0x2d4>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl1_xl,1)!=HAL_OK)
 80061ea:	4fae      	ldr	r7, [pc, #696]	; (80064a4 <USER_Device_Orientation_WakeUp_init+0x2d8>)
	memrx=0;
 80061ec:	7028      	strb	r0, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl1_xl,1)!=HAL_OK)
 80061ee:	2210      	movs	r2, #16
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	9700      	str	r7, [sp, #0]
 80061f4:	21d6      	movs	r1, #214	; 0xd6
 80061f6:	0030      	movs	r0, r6
 80061f8:	f7fd fa5a 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d001      	beq.n	8006204 <USER_Device_Orientation_WakeUp_init+0x38>
		{
			Error_Handler();
 8006200:	f002 fb92 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8006204:	782b      	ldrb	r3, [r5, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0fc      	beq.n	8006204 <USER_Device_Orientation_WakeUp_init+0x38>

		hexcode=ori_wake_ctrl1_xl&~0xfc;
 800620a:	2203      	movs	r2, #3
 800620c:	783b      	ldrb	r3, [r7, #0]
		hexcode|=0x60;
 800620e:	240f      	movs	r4, #15
		hexcode=ori_wake_ctrl1_xl&~0xfc;
 8006210:	401a      	ands	r2, r3
		hexcode|=0x60;
 8006212:	2360      	movs	r3, #96	; 0x60
 8006214:	446c      	add	r4, sp
 8006216:	4313      	orrs	r3, r2
 8006218:	7023      	strb	r3, [r4, #0]

	memtx=0;
 800621a:	2300      	movs	r3, #0
 800621c:	4aa2      	ldr	r2, [pc, #648]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 800621e:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8006220:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 8006222:	3301      	adds	r3, #1
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	9400      	str	r4, [sp, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	0030      	movs	r0, r6
 800622c:	f7fd f99a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006230:	2800      	cmp	r0, #0
 8006232:	d001      	beq.n	8006238 <USER_Device_Orientation_WakeUp_init+0x6c>
		// ODR_XL = 416 Hz, FS_XL = 2g
	{
		Error_Handler();
 8006234:	f002 fb78 	bl	8008928 <Error_Handler>
	}

		while(memtx==0);
 8006238:	4b9b      	ldr	r3, [pc, #620]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0fb      	beq.n	8006238 <USER_Device_Orientation_WakeUp_init+0x6c>

	if(who_am_i==0x69)
 8006240:	4b9a      	ldr	r3, [pc, #616]	; (80064ac <USER_Device_Orientation_WakeUp_init+0x2e0>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b69      	cmp	r3, #105	; 0x69
 8006246:	d100      	bne.n	800624a <USER_Device_Orientation_WakeUp_init+0x7e>
 8006248:	e0f4      	b.n	8006434 <USER_Device_Orientation_WakeUp_init+0x268>

	}



	if(who_am_i==0x6A)
 800624a:	4b98      	ldr	r3, [pc, #608]	; (80064ac <USER_Device_Orientation_WakeUp_init+0x2e0>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b6a      	cmp	r3, #106	; 0x6a
 8006250:	d129      	bne.n	80062a6 <USER_Device_Orientation_WakeUp_init+0xda>
	{
		memrx=0;
 8006252:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 8006254:	4f96      	ldr	r7, [pc, #600]	; (80064b0 <USER_Device_Orientation_WakeUp_init+0x2e4>)
		memrx=0;
 8006256:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 8006258:	3301      	adds	r3, #1
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	9700      	str	r7, [sp, #0]
 800625e:	2258      	movs	r2, #88	; 0x58
 8006260:	21d6      	movs	r1, #214	; 0xd6
 8006262:	0030      	movs	r0, r6
 8006264:	f7fd fa24 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006268:	2800      	cmp	r0, #0
 800626a:	d001      	beq.n	8006270 <USER_Device_Orientation_WakeUp_init+0xa4>
	{
		Error_Handler();
 800626c:	f002 fb5c 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006270:	782b      	ldrb	r3, [r5, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0fc      	beq.n	8006270 <USER_Device_Orientation_WakeUp_init+0xa4>

	hexcode=ori_wake_tap_cfg&~0x91;
	hexcode|=0x91;
 8006276:	226f      	movs	r2, #111	; 0x6f
	hexcode=ori_wake_tap_cfg&~0x91;
 8006278:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0x91;
 800627a:	4252      	negs	r2, r2
 800627c:	4313      	orrs	r3, r2
 800627e:	7023      	strb	r3, [r4, #0]
		memtx=0;
 8006280:	2300      	movs	r3, #0
 8006282:	4a89      	ldr	r2, [pc, #548]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8006284:	21d6      	movs	r1, #214	; 0xd6
		memtx=0;
 8006286:	7013      	strb	r3, [r2, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8006288:	3301      	adds	r3, #1
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	9400      	str	r4, [sp, #0]
 800628e:	2258      	movs	r2, #88	; 0x58
 8006290:	0030      	movs	r0, r6
 8006292:	f7fd f967 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006296:	2800      	cmp	r0, #0
 8006298:	d001      	beq.n	800629e <USER_Device_Orientation_WakeUp_init+0xd2>
		{
			Error_Handler();
 800629a:	f002 fb45 	bl	8008928 <Error_Handler>
		}
		while(memtx==0);
 800629e:	4b82      	ldr	r3, [pc, #520]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0fb      	beq.n	800629e <USER_Device_Orientation_WakeUp_init+0xd2>


	}
	memrx=0;
 80062a6:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_ths,1)!=HAL_OK)
 80062a8:	4f82      	ldr	r7, [pc, #520]	; (80064b4 <USER_Device_Orientation_WakeUp_init+0x2e8>)
	memrx=0;
 80062aa:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_ths,1)!=HAL_OK)
 80062ac:	3301      	adds	r3, #1
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	9700      	str	r7, [sp, #0]
 80062b2:	225b      	movs	r2, #91	; 0x5b
 80062b4:	21d6      	movs	r1, #214	; 0xd6
 80062b6:	0030      	movs	r0, r6
 80062b8:	f7fd f9fa 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d001      	beq.n	80062c4 <USER_Device_Orientation_WakeUp_init+0xf8>
			{
				Error_Handler();
 80062c0:	f002 fb32 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 80062c4:	782b      	ldrb	r3, [r5, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0fc      	beq.n	80062c4 <USER_Device_Orientation_WakeUp_init+0xf8>

			hexcode=ori_wake_wake_up_ths&~0x3f;
 80062ca:	233f      	movs	r3, #63	; 0x3f
 80062cc:	783a      	ldrb	r2, [r7, #0]
			hexcode|=0x01;
	memtx=0;
 80062ce:	4976      	ldr	r1, [pc, #472]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
			hexcode=ori_wake_wake_up_ths&~0x3f;
 80062d0:	439a      	bics	r2, r3
			hexcode|=0x01;
 80062d2:	3b3e      	subs	r3, #62	; 0x3e
 80062d4:	431a      	orrs	r2, r3
 80062d6:	7022      	strb	r2, [r4, #0]
	memtx=0;
 80062d8:	2200      	movs	r2, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold
 80062da:	0030      	movs	r0, r6
	memtx=0;
 80062dc:	700a      	strb	r2, [r1, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	9400      	str	r4, [sp, #0]
 80062e2:	325b      	adds	r2, #91	; 0x5b
 80062e4:	21d6      	movs	r1, #214	; 0xd6
 80062e6:	f7fd f93d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d001      	beq.n	80062f2 <USER_Device_Orientation_WakeUp_init+0x126>
	{
		Error_Handler();
 80062ee:	f002 fb1b 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 80062f2:	4b6d      	ldr	r3, [pc, #436]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0fb      	beq.n	80062f2 <USER_Device_Orientation_WakeUp_init+0x126>

	memrx=0;
 80062fa:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl8_xl,1)!=HAL_OK)
 80062fc:	4f6e      	ldr	r7, [pc, #440]	; (80064b8 <USER_Device_Orientation_WakeUp_init+0x2ec>)
	memrx=0;
 80062fe:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl8_xl,1)!=HAL_OK)
 8006300:	3301      	adds	r3, #1
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	9700      	str	r7, [sp, #0]
 8006306:	2217      	movs	r2, #23
 8006308:	21d6      	movs	r1, #214	; 0xd6
 800630a:	0030      	movs	r0, r6
 800630c:	f7fd f9d0 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006310:	2800      	cmp	r0, #0
 8006312:	d001      	beq.n	8006318 <USER_Device_Orientation_WakeUp_init+0x14c>
			{
				Error_Handler();
 8006314:	f002 fb08 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 8006318:	782b      	ldrb	r3, [r5, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0fc      	beq.n	8006318 <USER_Device_Orientation_WakeUp_init+0x14c>

			if(who_am_i==0x69)
 800631e:	4b63      	ldr	r3, [pc, #396]	; (80064ac <USER_Device_Orientation_WakeUp_init+0x2e0>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b69      	cmp	r3, #105	; 0x69
 8006324:	d000      	beq.n	8006328 <USER_Device_Orientation_WakeUp_init+0x15c>
 8006326:	e0b0      	b.n	800648a <USER_Device_Orientation_WakeUp_init+0x2be>
			{
				hexcode=ori_wake_ctrl8_xl&~0x60;
 8006328:	783a      	ldrb	r2, [r7, #0]
 800632a:	3b09      	subs	r3, #9
 800632c:	439a      	bics	r2, r3
			}
			if(who_am_i==0x6a)
			{
				hexcode=ori_wake_ctrl8_xl&~0x68;

				hexcode|=0x60;//HPF cutoff odr/400;ODR/2 low pass filtered sent to composite filter
 800632e:	4313      	orrs	r3, r2
 8006330:	7023      	strb	r3, [r4, #0]
			}

	memtx=0;
 8006332:	2300      	movs	r3, #0
 8006334:	4a5c      	ldr	r2, [pc, #368]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8006336:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8006338:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800633a:	3301      	adds	r3, #1
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	9400      	str	r4, [sp, #0]
 8006340:	2217      	movs	r2, #23
 8006342:	0030      	movs	r0, r6
 8006344:	f7fd f90e 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006348:	2800      	cmp	r0, #0
 800634a:	d001      	beq.n	8006350 <USER_Device_Orientation_WakeUp_init+0x184>
	{
		Error_Handler();
 800634c:	f002 faec 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006350:	4b55      	ldr	r3, [pc, #340]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0fb      	beq.n	8006350 <USER_Device_Orientation_WakeUp_init+0x184>

	memrx=0;
 8006358:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_dur,1)!=HAL_OK)
 800635a:	4f58      	ldr	r7, [pc, #352]	; (80064bc <USER_Device_Orientation_WakeUp_init+0x2f0>)
	memrx=0;
 800635c:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_dur,1)!=HAL_OK)
 800635e:	3301      	adds	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	9700      	str	r7, [sp, #0]
 8006364:	225c      	movs	r2, #92	; 0x5c
 8006366:	21d6      	movs	r1, #214	; 0xd6
 8006368:	0030      	movs	r0, r6
 800636a:	f7fd f9a1 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800636e:	2800      	cmp	r0, #0
 8006370:	d001      	beq.n	8006376 <USER_Device_Orientation_WakeUp_init+0x1aa>
			{
				Error_Handler();
 8006372:	f002 fad9 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 8006376:	782b      	ldrb	r3, [r5, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0fc      	beq.n	8006376 <USER_Device_Orientation_WakeUp_init+0x1aa>

			hexcode=ori_wake_wake_up_dur&~0x60;
 800637c:	2260      	movs	r2, #96	; 0x60
 800637e:	783b      	ldrb	r3, [r7, #0]
			hexcode|=0;

	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// No duration for wake up
 8006380:	21d6      	movs	r1, #214	; 0xd6
			hexcode=ori_wake_wake_up_dur&~0x60;
 8006382:	4393      	bics	r3, r2
 8006384:	7023      	strb	r3, [r4, #0]
	memtx=0;
 8006386:	2300      	movs	r3, #0
 8006388:	4a47      	ldr	r2, [pc, #284]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// No duration for wake up
 800638a:	0030      	movs	r0, r6
	memtx=0;
 800638c:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// No duration for wake up
 800638e:	3301      	adds	r3, #1
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	9400      	str	r4, [sp, #0]
 8006394:	225c      	movs	r2, #92	; 0x5c
 8006396:	f7fd f8e5 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800639a:	2800      	cmp	r0, #0
 800639c:	d001      	beq.n	80063a2 <USER_Device_Orientation_WakeUp_init+0x1d6>
	{
		Error_Handler();
 800639e:	f002 fac3 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0fb      	beq.n	80063a2 <USER_Device_Orientation_WakeUp_init+0x1d6>

	memrx=0;
 80063aa:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_md1_cfg,1)!=HAL_OK)
 80063ac:	4f44      	ldr	r7, [pc, #272]	; (80064c0 <USER_Device_Orientation_WakeUp_init+0x2f4>)
	memrx=0;
 80063ae:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_md1_cfg,1)!=HAL_OK)
 80063b0:	3301      	adds	r3, #1
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	9700      	str	r7, [sp, #0]
 80063b6:	225e      	movs	r2, #94	; 0x5e
 80063b8:	21d6      	movs	r1, #214	; 0xd6
 80063ba:	0030      	movs	r0, r6
 80063bc:	f7fd f978 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d001      	beq.n	80063c8 <USER_Device_Orientation_WakeUp_init+0x1fc>
			{
				Error_Handler();
 80063c4:	f002 fab0 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 80063c8:	782b      	ldrb	r3, [r5, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0fc      	beq.n	80063c8 <USER_Device_Orientation_WakeUp_init+0x1fc>

			hexcode=ori_wake_md1_cfg&~0x20;
 80063ce:	2320      	movs	r3, #32
 80063d0:	783a      	ldrb	r2, [r7, #0]
			hexcode|=0x20;

	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 80063d2:	21d6      	movs	r1, #214	; 0xd6
			hexcode=ori_wake_md1_cfg&~0x20;
 80063d4:	439a      	bics	r2, r3
			hexcode|=0x20;
 80063d6:	4313      	orrs	r3, r2
 80063d8:	7023      	strb	r3, [r4, #0]
	memtx=0;
 80063da:	2300      	movs	r3, #0
 80063dc:	4a32      	ldr	r2, [pc, #200]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 80063de:	482f      	ldr	r0, [pc, #188]	; (800649c <USER_Device_Orientation_WakeUp_init+0x2d0>)
	memtx=0;
 80063e0:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 80063e2:	3301      	adds	r3, #1
 80063e4:	9301      	str	r3, [sp, #4]
 80063e6:	9400      	str	r4, [sp, #0]
 80063e8:	225e      	movs	r2, #94	; 0x5e
 80063ea:	f7fd f8bb 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d001      	beq.n	80063f6 <USER_Device_Orientation_WakeUp_init+0x22a>
	{
		Error_Handler();
 80063f2:	f002 fa99 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 80063f6:	4b2c      	ldr	r3, [pc, #176]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0fb      	beq.n	80063f6 <USER_Device_Orientation_WakeUp_init+0x22a>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	4830      	ldr	r0, [pc, #192]	; (80064c4 <USER_Device_Orientation_WakeUp_init+0x2f8>)
 8006404:	f7fc fed0 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8006408:	2301      	movs	r3, #1
 800640a:	4c2f      	ldr	r4, [pc, #188]	; (80064c8 <USER_Device_Orientation_WakeUp_init+0x2fc>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nDevice Orientation Function Started..... \r\n\r\nWake up Function Initiated......\r\n",strlen("\r\nDevice Orientation Function Started..... \r\n\r\nWake up Function Initiated......\r\n"))!=HAL_OK)
 800640c:	2251      	movs	r2, #81	; 0x51
 800640e:	492f      	ldr	r1, [pc, #188]	; (80064cc <USER_Device_Orientation_WakeUp_init+0x300>)
 8006410:	482f      	ldr	r0, [pc, #188]	; (80064d0 <USER_Device_Orientation_WakeUp_init+0x304>)
	uarttx_req=1;
 8006412:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nDevice Orientation Function Started..... \r\n\r\nWake up Function Initiated......\r\n",strlen("\r\nDevice Orientation Function Started..... \r\n\r\nWake up Function Initiated......\r\n"))!=HAL_OK)
 8006414:	f7fe fc54 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006418:	2800      	cmp	r0, #0
 800641a:	d001      	beq.n	8006420 <USER_Device_Orientation_WakeUp_init+0x254>
	{
		Error_Handler();
 800641c:	f002 fa84 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8006420:	7823      	ldrb	r3, [r4, #0]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d0fc      	beq.n	8006420 <USER_Device_Orientation_WakeUp_init+0x254>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006426:	2200      	movs	r2, #0
 8006428:	2102      	movs	r1, #2
 800642a:	4826      	ldr	r0, [pc, #152]	; (80064c4 <USER_Device_Orientation_WakeUp_init+0x2f8>)
 800642c:	f7fc febc 	bl	80031a8 <HAL_GPIO_WritePin>





}
 8006430:	b005      	add	sp, #20
 8006432:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memrx=0;
 8006434:	2300      	movs	r3, #0
				if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 8006436:	4f1e      	ldr	r7, [pc, #120]	; (80064b0 <USER_Device_Orientation_WakeUp_init+0x2e4>)
		memrx=0;
 8006438:	702b      	strb	r3, [r5, #0]
				if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 800643a:	3301      	adds	r3, #1
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9700      	str	r7, [sp, #0]
 8006440:	2258      	movs	r2, #88	; 0x58
 8006442:	21d6      	movs	r1, #214	; 0xd6
 8006444:	0030      	movs	r0, r6
 8006446:	f7fd f933 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800644a:	2800      	cmp	r0, #0
 800644c:	d001      	beq.n	8006452 <USER_Device_Orientation_WakeUp_init+0x286>
					Error_Handler();
 800644e:	f002 fa6b 	bl	8008928 <Error_Handler>
				while(memrx==0);
 8006452:	782b      	ldrb	r3, [r5, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0fc      	beq.n	8006452 <USER_Device_Orientation_WakeUp_init+0x286>
				hexcode=ori_wake_tap_cfg&~0x11;
 8006458:	2311      	movs	r3, #17
 800645a:	783a      	ldrb	r2, [r7, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Apply HP filter; latch mode Enabled
 800645c:	21d6      	movs	r1, #214	; 0xd6
				hexcode=ori_wake_tap_cfg&~0x11;
 800645e:	439a      	bics	r2, r3
				hexcode|=0x11;
 8006460:	4313      	orrs	r3, r2
 8006462:	7023      	strb	r3, [r4, #0]
		memtx=0;
 8006464:	2300      	movs	r3, #0
 8006466:	4a10      	ldr	r2, [pc, #64]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Apply HP filter; latch mode Enabled
 8006468:	0030      	movs	r0, r6
		memtx=0;
 800646a:	7013      	strb	r3, [r2, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Apply HP filter; latch mode Enabled
 800646c:	3301      	adds	r3, #1
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	9400      	str	r4, [sp, #0]
 8006472:	2258      	movs	r2, #88	; 0x58
 8006474:	f7fd f876 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006478:	2800      	cmp	r0, #0
 800647a:	d001      	beq.n	8006480 <USER_Device_Orientation_WakeUp_init+0x2b4>
			Error_Handler();
 800647c:	f002 fa54 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <USER_Device_Orientation_WakeUp_init+0x2dc>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0fb      	beq.n	8006480 <USER_Device_Orientation_WakeUp_init+0x2b4>
 8006488:	e6df      	b.n	800624a <USER_Device_Orientation_WakeUp_init+0x7e>
			if(who_am_i==0x6a)
 800648a:	2b6a      	cmp	r3, #106	; 0x6a
 800648c:	d000      	beq.n	8006490 <USER_Device_Orientation_WakeUp_init+0x2c4>
 800648e:	e750      	b.n	8006332 <USER_Device_Orientation_WakeUp_init+0x166>
				hexcode=ori_wake_ctrl8_xl&~0x68;
 8006490:	2268      	movs	r2, #104	; 0x68
 8006492:	783b      	ldrb	r3, [r7, #0]
 8006494:	4393      	bics	r3, r2
 8006496:	001a      	movs	r2, r3
				hexcode|=0x60;//HPF cutoff odr/400;ODR/2 low pass filtered sent to composite filter
 8006498:	2360      	movs	r3, #96	; 0x60
 800649a:	e748      	b.n	800632e <USER_Device_Orientation_WakeUp_init+0x162>
 800649c:	200003a0 	.word	0x200003a0
 80064a0:	20000269 	.word	0x20000269
 80064a4:	2000021e 	.word	0x2000021e
 80064a8:	2000026a 	.word	0x2000026a
 80064ac:	20000379 	.word	0x20000379
 80064b0:	20000221 	.word	0x20000221
 80064b4:	20000223 	.word	0x20000223
 80064b8:	2000021f 	.word	0x2000021f
 80064bc:	20000222 	.word	0x20000222
 80064c0:	20000220 	.word	0x20000220
 80064c4:	48000400 	.word	0x48000400
 80064c8:	20000378 	.word	0x20000378
 80064cc:	0800e712 	.word	0x0800e712
 80064d0:	20000510 	.word	0x20000510

080064d4 <USER_Device_Orientation_WakeUp_DeInit>:


void USER_Device_Orientation_WakeUp_DeInit(void)
{
	uint8_t wake_up_src;
	memtx=0;
 80064d4:	2300      	movs	r3, #0
{
 80064d6:	b5f0      	push	{r4, r5, r6, r7, lr}
	memtx=0;
 80064d8:	4d54      	ldr	r5, [pc, #336]	; (800662c <USER_Device_Orientation_WakeUp_DeInit+0x158>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl1_xl,1)!=HAL_OK)
 80064da:	4a55      	ldr	r2, [pc, #340]	; (8006630 <USER_Device_Orientation_WakeUp_DeInit+0x15c>)
 80064dc:	4c55      	ldr	r4, [pc, #340]	; (8006634 <USER_Device_Orientation_WakeUp_DeInit+0x160>)
{
 80064de:	b085      	sub	sp, #20
	memtx=0;
 80064e0:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl1_xl,1)!=HAL_OK)
 80064e2:	3301      	adds	r3, #1
 80064e4:	9200      	str	r2, [sp, #0]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	2210      	movs	r2, #16
 80064ea:	21d6      	movs	r1, #214	; 0xd6
 80064ec:	0020      	movs	r0, r4
 80064ee:	f7fd f839 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d100      	bne.n	80064f8 <USER_Device_Orientation_WakeUp_DeInit+0x24>
 80064f6:	e095      	b.n	8006624 <USER_Device_Orientation_WakeUp_DeInit+0x150>
	{
		Error_Handler();
 80064f8:	f002 fa16 	bl	8008928 <Error_Handler>





	memtx=0;
 80064fc:	2300      	movs	r3, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 80064fe:	4a4e      	ldr	r2, [pc, #312]	; (8006638 <USER_Device_Orientation_WakeUp_DeInit+0x164>)
	memtx=0;
 8006500:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_tap_cfg,1)!=HAL_OK)
 8006502:	3301      	adds	r3, #1
 8006504:	9200      	str	r2, [sp, #0]
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	2258      	movs	r2, #88	; 0x58
 800650a:	21d6      	movs	r1, #214	; 0xd6
 800650c:	0020      	movs	r0, r4
 800650e:	f7fd f829 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006512:	2800      	cmp	r0, #0
 8006514:	d001      	beq.n	800651a <USER_Device_Orientation_WakeUp_DeInit+0x46>
	{
		Error_Handler();
 8006516:	f002 fa07 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800651a:	782b      	ldrb	r3, [r5, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0fc      	beq.n	800651a <USER_Device_Orientation_WakeUp_DeInit+0x46>





	memtx=0;
 8006520:	2300      	movs	r3, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_ths,1)!=HAL_OK)
 8006522:	4a46      	ldr	r2, [pc, #280]	; (800663c <USER_Device_Orientation_WakeUp_DeInit+0x168>)
	memtx=0;
 8006524:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_ths,1)!=HAL_OK)
 8006526:	3301      	adds	r3, #1
 8006528:	9200      	str	r2, [sp, #0]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	225b      	movs	r2, #91	; 0x5b
 800652e:	21d6      	movs	r1, #214	; 0xd6
 8006530:	0020      	movs	r0, r4
 8006532:	f7fd f817 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006536:	2800      	cmp	r0, #0
 8006538:	d001      	beq.n	800653e <USER_Device_Orientation_WakeUp_DeInit+0x6a>
	{
		Error_Handler();
 800653a:	f002 f9f5 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800653e:	782b      	ldrb	r3, [r5, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0fc      	beq.n	800653e <USER_Device_Orientation_WakeUp_DeInit+0x6a>



	memtx=0;
 8006544:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl8_xl,1)!=HAL_OK)
 8006546:	4a3e      	ldr	r2, [pc, #248]	; (8006640 <USER_Device_Orientation_WakeUp_DeInit+0x16c>)
	memtx=0;
 8006548:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ori_wake_ctrl8_xl,1)!=HAL_OK)
 800654a:	3301      	adds	r3, #1
 800654c:	9200      	str	r2, [sp, #0]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	2217      	movs	r2, #23
 8006552:	21d6      	movs	r1, #214	; 0xd6
 8006554:	0020      	movs	r0, r4
 8006556:	f7fd f805 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800655a:	2800      	cmp	r0, #0
 800655c:	d001      	beq.n	8006562 <USER_Device_Orientation_WakeUp_DeInit+0x8e>
	{
		Error_Handler();
 800655e:	f002 f9e3 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006562:	782b      	ldrb	r3, [r5, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0fc      	beq.n	8006562 <USER_Device_Orientation_WakeUp_DeInit+0x8e>



	memtx=0;
 8006568:	2300      	movs	r3, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_dur,1)!=HAL_OK)
 800656a:	4a36      	ldr	r2, [pc, #216]	; (8006644 <USER_Device_Orientation_WakeUp_DeInit+0x170>)
	memtx=0;
 800656c:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&ori_wake_wake_up_dur,1)!=HAL_OK)
 800656e:	3301      	adds	r3, #1
 8006570:	9200      	str	r2, [sp, #0]
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	225c      	movs	r2, #92	; 0x5c
 8006576:	21d6      	movs	r1, #214	; 0xd6
 8006578:	0020      	movs	r0, r4
 800657a:	f7fc fff3 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800657e:	2800      	cmp	r0, #0
 8006580:	d001      	beq.n	8006586 <USER_Device_Orientation_WakeUp_DeInit+0xb2>
	{
		Error_Handler();
 8006582:	f002 f9d1 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006586:	782b      	ldrb	r3, [r5, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0fc      	beq.n	8006586 <USER_Device_Orientation_WakeUp_DeInit+0xb2>



	memtx=0;
 800658c:	2300      	movs	r3, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_md1_cfg,1)!=HAL_OK)
 800658e:	4a2e      	ldr	r2, [pc, #184]	; (8006648 <USER_Device_Orientation_WakeUp_DeInit+0x174>)
	memtx=0;
 8006590:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&ori_wake_md1_cfg,1)!=HAL_OK)
 8006592:	3301      	adds	r3, #1
 8006594:	9200      	str	r2, [sp, #0]
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	225e      	movs	r2, #94	; 0x5e
 800659a:	21d6      	movs	r1, #214	; 0xd6
 800659c:	0020      	movs	r0, r4
 800659e:	f7fc ffe1 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d001      	beq.n	80065aa <USER_Device_Orientation_WakeUp_DeInit+0xd6>
	{
		Error_Handler();
 80065a6:	f002 f9bf 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 80065aa:	782b      	ldrb	r3, [r5, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0fc      	beq.n	80065aa <USER_Device_Orientation_WakeUp_DeInit+0xd6>





	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80065b0:	2201      	movs	r2, #1
 80065b2:	2102      	movs	r1, #2
 80065b4:	4825      	ldr	r0, [pc, #148]	; (800664c <USER_Device_Orientation_WakeUp_DeInit+0x178>)
 80065b6:	f7fc fdf7 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80065ba:	2301      	movs	r3, #1
 80065bc:	4d24      	ldr	r5, [pc, #144]	; (8006650 <USER_Device_Orientation_WakeUp_DeInit+0x17c>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nWakeup Function Initialized to Previous STATE......\r\n\r\nExit from Device Orientation Function......\r\n",strlen("\r\nWakeup Function Initialized to Previous STATE......\r\n\r\nExit from Device Orientation Function......\r\n"))!=HAL_OK)
 80065be:	2266      	movs	r2, #102	; 0x66
 80065c0:	4924      	ldr	r1, [pc, #144]	; (8006654 <USER_Device_Orientation_WakeUp_DeInit+0x180>)
 80065c2:	4825      	ldr	r0, [pc, #148]	; (8006658 <USER_Device_Orientation_WakeUp_DeInit+0x184>)
	uarttx_req=1;
 80065c4:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nWakeup Function Initialized to Previous STATE......\r\n\r\nExit from Device Orientation Function......\r\n",strlen("\r\nWakeup Function Initialized to Previous STATE......\r\n\r\nExit from Device Orientation Function......\r\n"))!=HAL_OK)
 80065c6:	f7fe fb7b 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d001      	beq.n	80065d2 <USER_Device_Orientation_WakeUp_DeInit+0xfe>
	{
		Error_Handler();
 80065ce:	f002 f9ab 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80065d2:	782b      	ldrb	r3, [r5, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d0fc      	beq.n	80065d2 <USER_Device_Orientation_WakeUp_DeInit+0xfe>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80065d8:	2200      	movs	r2, #0
 80065da:	2102      	movs	r1, #2
 80065dc:	481b      	ldr	r0, [pc, #108]	; (800664c <USER_Device_Orientation_WakeUp_DeInit+0x178>)
	for(uint8_t i=0;i<3;i++)
	{
	HAL_Delay(300);
 80065de:	2796      	movs	r7, #150	; 0x96
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80065e0:	f7fc fde2 	bl	80031a8 <HAL_GPIO_WritePin>
 80065e4:	2503      	movs	r5, #3
	HAL_Delay(300);
 80065e6:	007f      	lsls	r7, r7, #1
 80065e8:	0038      	movs	r0, r7
 80065ea:	f7fc fbc5 	bl	8002d78 <HAL_Delay>
	memrx=0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	4e1a      	ldr	r6, [pc, #104]	; (800665c <USER_Device_Orientation_WakeUp_DeInit+0x188>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 80065f2:	221b      	movs	r2, #27
	memrx=0;
 80065f4:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 80065f6:	3301      	adds	r3, #1
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	330e      	adds	r3, #14
 80065fc:	446b      	add	r3, sp
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	21d6      	movs	r1, #214	; 0xd6
 8006602:	2301      	movs	r3, #1
 8006604:	0020      	movs	r0, r4
 8006606:	f7fd f853 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800660a:	2800      	cmp	r0, #0
 800660c:	d001      	beq.n	8006612 <USER_Device_Orientation_WakeUp_DeInit+0x13e>
	{
		Error_Handler();
 800660e:	f002 f98b 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006612:	7833      	ldrb	r3, [r6, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0fc      	beq.n	8006612 <USER_Device_Orientation_WakeUp_DeInit+0x13e>
 8006618:	3d01      	subs	r5, #1
 800661a:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0;i<3;i++)
 800661c:	2d00      	cmp	r5, #0
 800661e:	d1e3      	bne.n	80065e8 <USER_Device_Orientation_WakeUp_DeInit+0x114>

	}



}
 8006620:	b005      	add	sp, #20
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(memtx==0);
 8006624:	782b      	ldrb	r3, [r5, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0fc      	beq.n	8006624 <USER_Device_Orientation_WakeUp_DeInit+0x150>
 800662a:	e767      	b.n	80064fc <USER_Device_Orientation_WakeUp_DeInit+0x28>
 800662c:	2000026a 	.word	0x2000026a
 8006630:	2000021e 	.word	0x2000021e
 8006634:	200003a0 	.word	0x200003a0
 8006638:	20000221 	.word	0x20000221
 800663c:	20000223 	.word	0x20000223
 8006640:	2000021f 	.word	0x2000021f
 8006644:	20000222 	.word	0x20000222
 8006648:	20000220 	.word	0x20000220
 800664c:	48000400 	.word	0x48000400
 8006650:	20000378 	.word	0x20000378
 8006654:	0800e6ab 	.word	0x0800e6ab
 8006658:	20000510 	.word	0x20000510
 800665c:	20000269 	.word	0x20000269

08006660 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006660:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006662:	2001      	movs	r0, #1
 8006664:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <MX_DMA_Init+0x58>)
 8006666:	6959      	ldr	r1, [r3, #20]
 8006668:	4301      	orrs	r1, r0
 800666a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800666c:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	4002      	ands	r2, r0
 8006672:	9200      	str	r2, [sp, #0]
 8006674:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006676:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8006678:	3008      	adds	r0, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800667a:	430a      	orrs	r2, r1
 800667c:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800667e:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	400b      	ands	r3, r1
 8006684:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8006686:	0011      	movs	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006688:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800668a:	f7fc fb87 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800668e:	2009      	movs	r0, #9
 8006690:	f7fc fbb4 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8006694:	2200      	movs	r2, #0
 8006696:	200a      	movs	r0, #10
 8006698:	0011      	movs	r1, r2
 800669a:	f7fc fb7f 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 800669e:	200a      	movs	r0, #10
 80066a0:	f7fc fbac 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 80066a4:	2200      	movs	r2, #0
 80066a6:	200b      	movs	r0, #11
 80066a8:	0011      	movs	r1, r2
 80066aa:	f7fc fb77 	bl	8002d9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 80066ae:	200b      	movs	r0, #11
 80066b0:	f7fc fba4 	bl	8002dfc <HAL_NVIC_EnableIRQ>

}
 80066b4:	bd07      	pop	{r0, r1, r2, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	40021000 	.word	0x40021000

080066bc <USER_Forward_axes_Find>:

	uint8_t wake_up_src,status_reg;
	int8_t error_int_xl[3]={0};
	int16_t array_out_xl[3],error_current_xl[3]={0};

	memrx=0;
 80066bc:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 80066be:	2216      	movs	r2, #22
{
 80066c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	memrx=0;
 80066c2:	4ca8      	ldr	r4, [pc, #672]	; (8006964 <USER_Forward_axes_Find+0x2a8>)
{
 80066c4:	b08d      	sub	sp, #52	; 0x34
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	4ea7      	ldr	r6, [pc, #668]	; (8006968 <USER_Forward_axes_Find+0x2ac>)
	memrx=0;
 80066ca:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 80066cc:	1852      	adds	r2, r2, r1
 80066ce:	3301      	adds	r3, #1
 80066d0:	9200      	str	r2, [sp, #0]
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	221b      	movs	r2, #27
 80066d6:	21d6      	movs	r1, #214	; 0xd6
 80066d8:	0030      	movs	r0, r6
 80066da:	f7fc ffe9 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d001      	beq.n	80066e6 <USER_Forward_axes_Find+0x2a>
	{
		Error_Handler();
 80066e2:	f002 f921 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 80066e6:	7823      	ldrb	r3, [r4, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0fc      	beq.n	80066e6 <USER_Forward_axes_Find+0x2a>

	if(  (wake_up_src&0x08) == 0x08)
 80066ec:	ab04      	add	r3, sp, #16
 80066ee:	7d9b      	ldrb	r3, [r3, #22]
 80066f0:	071b      	lsls	r3, r3, #28
 80066f2:	d400      	bmi.n	80066f6 <USER_Forward_axes_Find+0x3a>
 80066f4:	e131      	b.n	800695a <USER_Forward_axes_Find+0x29e>
	{

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80066f6:	2201      	movs	r2, #1
 80066f8:	2102      	movs	r1, #2
 80066fa:	489c      	ldr	r0, [pc, #624]	; (800696c <USER_Forward_axes_Find+0x2b0>)
 80066fc:	f7fc fd54 	bl	80031a8 <HAL_GPIO_WritePin>



		wait:		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8006700:	2501      	movs	r5, #1
		wait:		memrx=0;
 8006702:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8006704:	2717      	movs	r7, #23
		wait:		memrx=0;
 8006706:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8006708:	ab04      	add	r3, sp, #16
 800670a:	18ff      	adds	r7, r7, r3
 800670c:	9501      	str	r5, [sp, #4]
 800670e:	9700      	str	r7, [sp, #0]
 8006710:	2301      	movs	r3, #1
 8006712:	221e      	movs	r2, #30
 8006714:	21d6      	movs	r1, #214	; 0xd6
 8006716:	0030      	movs	r0, r6
 8006718:	f7fc ffca 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800671c:	2800      	cmp	r0, #0
 800671e:	d001      	beq.n	8006724 <USER_Forward_axes_Find+0x68>
		{
			Error_Handler();
 8006720:	f002 f902 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8006724:	7823      	ldrb	r3, [r4, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0fc      	beq.n	8006724 <USER_Forward_axes_Find+0x68>



		if((status_reg&1) ==1)
 800672a:	783b      	ldrb	r3, [r7, #0]
 800672c:	422b      	tst	r3, r5
 800672e:	d0e8      	beq.n	8006702 <USER_Forward_axes_Find+0x46>
		{

			memrx=0;
 8006730:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 8006732:	ad0a      	add	r5, sp, #40	; 0x28
			memrx=0;
 8006734:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 8006736:	3306      	adds	r3, #6
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	9500      	str	r5, [sp, #0]
 800673c:	3b05      	subs	r3, #5
 800673e:	2228      	movs	r2, #40	; 0x28
 8006740:	21d6      	movs	r1, #214	; 0xd6
 8006742:	0030      	movs	r0, r6
 8006744:	f7fc ffb4 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006748:	2800      	cmp	r0, #0
 800674a:	d001      	beq.n	8006750 <USER_Forward_axes_Find+0x94>
			{
				Error_Handler();
 800674c:	f002 f8ec 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 8006750:	7823      	ldrb	r3, [r4, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0fc      	beq.n	8006750 <USER_Forward_axes_Find+0x94>





		switch(gravity_axes)
 8006756:	4b86      	ldr	r3, [pc, #536]	; (8006970 <USER_Forward_axes_Find+0x2b4>)
 8006758:	7818      	ldrb	r0, [r3, #0]
 800675a:	2803      	cmp	r0, #3
 800675c:	d900      	bls.n	8006760 <USER_Forward_axes_Find+0xa4>
 800675e:	e1e7      	b.n	8006b30 <USER_Forward_axes_Find+0x474>
 8006760:	f7f9 fcec 	bl	800013c <__gnu_thumb1_case_uhi>
 8006764:	01240004 	.word	0x01240004
 8006768:	01d0017b 	.word	0x01d0017b
		{


		case X:
			if((wake_up_src&0x02) == 0x02)
 800676c:	2202      	movs	r2, #2
 800676e:	ab04      	add	r3, sp, #16
 8006770:	7d9b      	ldrb	r3, [r3, #22]
 8006772:	4013      	ands	r3, r2
 8006774:	d100      	bne.n	8006778 <USER_Forward_axes_Find+0xbc>
 8006776:	e0f2      	b.n	800695e <USER_Forward_axes_Find+0x2a2>
				{
					error_int_xl[Y]=PLUS;
				}
				else
				{
					error_int_xl[Y]=MINUS;
 8006778:	2701      	movs	r7, #1
				error_current_xl[Y]	=	array_out_xl[Y]	-	xl_axes_ref[Y]	;
 800677a:	4a7e      	ldr	r2, [pc, #504]	; (8006974 <USER_Forward_axes_Find+0x2b8>)
 800677c:	886b      	ldrh	r3, [r5, #2]
 800677e:	8852      	ldrh	r2, [r2, #2]
				}


				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006780:	4c7d      	ldr	r4, [pc, #500]	; (8006978 <USER_Forward_axes_Find+0x2bc>)
				error_current_xl[Y]	=	array_out_xl[Y]	-	xl_axes_ref[Y]	;
 8006782:	1a9b      	subs	r3, r3, r2
 8006784:	b21b      	sxth	r3, r3
 8006786:	9304      	str	r3, [sp, #16]
					error_int_xl[Y]=MINUS;
 8006788:	9a04      	ldr	r2, [sp, #16]
 800678a:	3b01      	subs	r3, #1
 800678c:	4313      	orrs	r3, r2
 800678e:	17db      	asrs	r3, r3, #31
 8006790:	433b      	orrs	r3, r7
				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006792:	497a      	ldr	r1, [pc, #488]	; (800697c <USER_Forward_axes_Find+0x2c0>)
 8006794:	0020      	movs	r0, r4
					error_int_xl[Y]=MINUS;
 8006796:	9306      	str	r3, [sp, #24]
				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006798:	f005 fab6 	bl	800bd08 <siprintf>

				uarttx_req=1;
 800679c:	4e78      	ldr	r6, [pc, #480]	; (8006980 <USER_Forward_axes_Find+0x2c4>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800679e:	0020      	movs	r0, r4
				uarttx_req=1;
 80067a0:	7037      	strb	r7, [r6, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80067a2:	f7f9 fcaf 	bl	8000104 <strlen>
 80067a6:	0021      	movs	r1, r4
 80067a8:	b282      	uxth	r2, r0
 80067aa:	4876      	ldr	r0, [pc, #472]	; (8006984 <USER_Forward_axes_Find+0x2c8>)
 80067ac:	f7fe fa88 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d001      	beq.n	80067b8 <USER_Forward_axes_Find+0xfc>
				{
					Error_Handler();
 80067b4:	f002 f8b8 	bl	8008928 <Error_Handler>
				}
				while(uarttx_req==1);
 80067b8:	7833      	ldrb	r3, [r6, #0]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d0fc      	beq.n	80067b8 <USER_Forward_axes_Find+0xfc>

			}

			if((wake_up_src&0x01) == 0x01)
 80067be:	2701      	movs	r7, #1
 80067c0:	ab04      	add	r3, sp, #16
 80067c2:	7d9c      	ldrb	r4, [r3, #22]
 80067c4:	403c      	ands	r4, r7
 80067c6:	d100      	bne.n	80067ca <USER_Forward_axes_Find+0x10e>
 80067c8:	e1c4      	b.n	8006b54 <USER_Forward_axes_Find+0x498>
			{

				error_current_xl[Z]	=	array_out_xl[Z]	-	xl_axes_ref[Z];
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <USER_Forward_axes_Find+0x2b8>)
 80067cc:	88ac      	ldrh	r4, [r5, #4]
 80067ce:	889b      	ldrh	r3, [r3, #4]
				{
					error_int_xl[Z]=MINUS;
				}


				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 80067d0:	4d69      	ldr	r5, [pc, #420]	; (8006978 <USER_Forward_axes_Find+0x2bc>)
				error_current_xl[Z]	=	array_out_xl[Z]	-	xl_axes_ref[Z];
 80067d2:	1ae4      	subs	r4, r4, r3
 80067d4:	b224      	sxth	r4, r4
					error_int_xl[Z]=MINUS;
 80067d6:	1e63      	subs	r3, r4, #1
 80067d8:	4323      	orrs	r3, r4
 80067da:	17db      	asrs	r3, r3, #31
 80067dc:	433b      	orrs	r3, r7
				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 80067de:	0022      	movs	r2, r4
 80067e0:	4969      	ldr	r1, [pc, #420]	; (8006988 <USER_Forward_axes_Find+0x2cc>)
 80067e2:	0028      	movs	r0, r5
					error_int_xl[Z]=MINUS;
 80067e4:	9307      	str	r3, [sp, #28]
				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 80067e6:	f005 fa8f 	bl	800bd08 <siprintf>

				uarttx_req=1;
 80067ea:	4e65      	ldr	r6, [pc, #404]	; (8006980 <USER_Forward_axes_Find+0x2c4>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80067ec:	0028      	movs	r0, r5
				uarttx_req=1;
 80067ee:	7037      	strb	r7, [r6, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80067f0:	f7f9 fc88 	bl	8000104 <strlen>
 80067f4:	0029      	movs	r1, r5
 80067f6:	b282      	uxth	r2, r0
 80067f8:	4862      	ldr	r0, [pc, #392]	; (8006984 <USER_Forward_axes_Find+0x2c8>)
 80067fa:	f7fe fa61 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d001      	beq.n	8006806 <USER_Forward_axes_Find+0x14a>
				{
					Error_Handler();
 8006802:	f002 f891 	bl	8008928 <Error_Handler>
				}
				while(uarttx_req==1);
 8006806:	7833      	ldrb	r3, [r6, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d0fc      	beq.n	8006806 <USER_Forward_axes_Find+0x14a>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 800680c:	2600      	movs	r6, #0
	int8_t error_int_xl[3]={0};
 800680e:	9605      	str	r6, [sp, #20]
		}




		total_error_xl_mg[X]+=(error_current_xl[X]*mg_per_LSB);
 8006810:	4b5e      	ldr	r3, [pc, #376]	; (800698c <USER_Forward_axes_Find+0x2d0>)
 8006812:	4d5f      	ldr	r5, [pc, #380]	; (8006990 <USER_Forward_axes_Find+0x2d4>)
 8006814:	681f      	ldr	r7, [r3, #0]
 8006816:	0030      	movs	r0, r6
 8006818:	f7fa fb68 	bl	8000eec <__aeabi_i2f>
 800681c:	1c39      	adds	r1, r7, #0
 800681e:	f7fa fa25 	bl	8000c6c <__aeabi_fmul>
 8006822:	6829      	ldr	r1, [r5, #0]
 8006824:	f7f9 fea0 	bl	8000568 <__aeabi_fadd>
 8006828:	6028      	str	r0, [r5, #0]
		total_error_xl_mg[Y]+=(error_current_xl[Y]*mg_per_LSB);
 800682a:	9804      	ldr	r0, [sp, #16]
 800682c:	f7fa fb5e 	bl	8000eec <__aeabi_i2f>
 8006830:	1c39      	adds	r1, r7, #0
 8006832:	f7fa fa1b 	bl	8000c6c <__aeabi_fmul>
 8006836:	6869      	ldr	r1, [r5, #4]
 8006838:	f7f9 fe96 	bl	8000568 <__aeabi_fadd>
 800683c:	6068      	str	r0, [r5, #4]
		total_error_xl_mg[Z]+=(error_current_xl[Z]*mg_per_LSB);
 800683e:	0020      	movs	r0, r4
 8006840:	f7fa fb54 	bl	8000eec <__aeabi_i2f>
 8006844:	1c39      	adds	r1, r7, #0
 8006846:	f7fa fa11 	bl	8000c6c <__aeabi_fmul>
 800684a:	68a9      	ldr	r1, [r5, #8]
 800684c:	f7f9 fe8c 	bl	8000568 <__aeabi_fadd>

		total_error_int_xl[X]+=error_int_xl[X];
 8006850:	4c50      	ldr	r4, [pc, #320]	; (8006994 <USER_Forward_axes_Find+0x2d8>)
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	7821      	ldrb	r1, [r4, #0]
		total_error_xl_mg[Z]+=(error_current_xl[Z]*mg_per_LSB);
 8006856:	60a8      	str	r0, [r5, #8]
		total_error_int_xl[X]+=error_int_xl[X];
 8006858:	18c9      	adds	r1, r1, r3
		total_error_int_xl[Y]+=error_int_xl[Y];
 800685a:	7862      	ldrb	r2, [r4, #1]
 800685c:	9b06      	ldr	r3, [sp, #24]
		total_error_int_xl[Z]+=error_int_xl[Z];
 800685e:	9807      	ldr	r0, [sp, #28]
		total_error_int_xl[Y]+=error_int_xl[Y];
 8006860:	18d2      	adds	r2, r2, r3
		total_error_int_xl[Z]+=error_int_xl[Z];
 8006862:	78a3      	ldrb	r3, [r4, #2]
		total_error_int_xl[X]+=error_int_xl[X];
 8006864:	b249      	sxtb	r1, r1
		total_error_int_xl[Z]+=error_int_xl[Z];
 8006866:	181b      	adds	r3, r3, r0




		if((abs(total_error_int_xl[X])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Y])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Z])>FORWARD_AXES_TRESHOLD))
 8006868:	17c8      	asrs	r0, r1, #31
		total_error_int_xl[X]+=error_int_xl[X];
 800686a:	7021      	strb	r1, [r4, #0]
		total_error_int_xl[Y]+=error_int_xl[Y];
 800686c:	b252      	sxtb	r2, r2
		total_error_int_xl[Z]+=error_int_xl[Z];
 800686e:	b25b      	sxtb	r3, r3
		if((abs(total_error_int_xl[X])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Y])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Z])>FORWARD_AXES_TRESHOLD))
 8006870:	1809      	adds	r1, r1, r0
		total_error_int_xl[Y]+=error_int_xl[Y];
 8006872:	7062      	strb	r2, [r4, #1]
		total_error_int_xl[Z]+=error_int_xl[Z];
 8006874:	70a3      	strb	r3, [r4, #2]
		if((abs(total_error_int_xl[X])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Y])>FORWARD_AXES_TRESHOLD	||	abs(total_error_int_xl[Z])>FORWARD_AXES_TRESHOLD))
 8006876:	4041      	eors	r1, r0
 8006878:	290a      	cmp	r1, #10
 800687a:	dc09      	bgt.n	8006890 <USER_Forward_axes_Find+0x1d4>
 800687c:	17d1      	asrs	r1, r2, #31
 800687e:	1852      	adds	r2, r2, r1
 8006880:	404a      	eors	r2, r1
 8006882:	2a0a      	cmp	r2, #10
 8006884:	dc04      	bgt.n	8006890 <USER_Forward_axes_Find+0x1d4>
 8006886:	17da      	asrs	r2, r3, #31
 8006888:	189b      	adds	r3, r3, r2
 800688a:	4053      	eors	r3, r2
 800688c:	2b0a      	cmp	r3, #10
 800688e:	dd5f      	ble.n	8006950 <USER_Forward_axes_Find+0x294>
		{

			forward_axes=USER_Highest_Element_of_an_Array_int8_t(total_error_int_xl,sizeof(total_error_int_xl)/sizeof(total_error_int_xl[X]));
 8006890:	2103      	movs	r1, #3
 8006892:	0020      	movs	r0, r4
 8006894:	f001 fe82 	bl	800859c <USER_Highest_Element_of_an_Array_int8_t>
 8006898:	4f3f      	ldr	r7, [pc, #252]	; (8006998 <USER_Forward_axes_Find+0x2dc>)

			if(total_error_int_xl[forward_axes]>0)
 800689a:	5622      	ldrsb	r2, [r4, r0]
			forward_axes=USER_Highest_Element_of_an_Array_int8_t(total_error_int_xl,sizeof(total_error_int_xl)/sizeof(total_error_int_xl[X]));
 800689c:	7038      	strb	r0, [r7, #0]
 800689e:	4b3f      	ldr	r3, [pc, #252]	; (800699c <USER_Forward_axes_Find+0x2e0>)
			if(total_error_int_xl[forward_axes]>0)
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	dc00      	bgt.n	80068a6 <USER_Forward_axes_Find+0x1ea>
 80068a4:	e159      	b.n	8006b5a <USER_Forward_axes_Find+0x49e>
			{
				sign_of_acceleration=PLUS;
 80068a6:	2201      	movs	r2, #1
			{
				sign_of_acceleration=MINUS;
			}
			else
			{
				sign_of_acceleration=SIGN_NOT_SET;
 80068a8:	701a      	strb	r2, [r3, #0]
			}


			sprintf(out_string,"\r\nDevice mode is now in Acceleration Mode\r\n\r\ntotal_error_xl_mg[X] = %d ,total_error_xl_mg[Y] = %d ,total_error_xl_mg[Z] = %d",(int)total_error_xl_mg[X],(int)total_error_xl_mg[Y],(int)total_error_xl_mg[Z]);
 80068aa:	6868      	ldr	r0, [r5, #4]
 80068ac:	f7fa fafe 	bl	8000eac <__aeabi_f2iz>
 80068b0:	9004      	str	r0, [sp, #16]
 80068b2:	6828      	ldr	r0, [r5, #0]
 80068b4:	f7fa fafa 	bl	8000eac <__aeabi_f2iz>
 80068b8:	9005      	str	r0, [sp, #20]
 80068ba:	68a8      	ldr	r0, [r5, #8]
 80068bc:	f7fa faf6 	bl	8000eac <__aeabi_f2iz>
 80068c0:	4e2d      	ldr	r6, [pc, #180]	; (8006978 <USER_Forward_axes_Find+0x2bc>)
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	9000      	str	r0, [sp, #0]
 80068c6:	9a05      	ldr	r2, [sp, #20]
 80068c8:	4935      	ldr	r1, [pc, #212]	; (80069a0 <USER_Forward_axes_Find+0x2e4>)
 80068ca:	0030      	movs	r0, r6
 80068cc:	f005 fa1c 	bl	800bd08 <siprintf>

			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80068d0:	2201      	movs	r2, #1
 80068d2:	2102      	movs	r1, #2
 80068d4:	4825      	ldr	r0, [pc, #148]	; (800696c <USER_Forward_axes_Find+0x2b0>)
 80068d6:	f7fc fc67 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80068da:	2301      	movs	r3, #1
 80068dc:	4d28      	ldr	r5, [pc, #160]	; (8006980 <USER_Forward_axes_Find+0x2c4>)
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80068de:	0030      	movs	r0, r6
			uarttx_req=1;
 80068e0:	702b      	strb	r3, [r5, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80068e2:	f7f9 fc0f 	bl	8000104 <strlen>
 80068e6:	0031      	movs	r1, r6
 80068e8:	b282      	uxth	r2, r0
 80068ea:	4826      	ldr	r0, [pc, #152]	; (8006984 <USER_Forward_axes_Find+0x2c8>)
 80068ec:	f7fe f9e8 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d001      	beq.n	80068f8 <USER_Forward_axes_Find+0x23c>
			{
				Error_Handler();
 80068f4:	f002 f818 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 80068f8:	782b      	ldrb	r3, [r5, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d0fc      	beq.n	80068f8 <USER_Forward_axes_Find+0x23c>

			sprintf(out_string,"\r\ntotal_error_int_xl[X] = %d , total_error_int_xl[Y] = %d , total_error_int_xl[Z] = %d\r\nforward_axes=%d sign_of_acceleration=%d\r\n\r\n",total_error_int_xl[X],total_error_int_xl[Y],total_error_int_xl[Z],forward_axes,sign_of_acceleration);
 80068fe:	2301      	movs	r3, #1
 8006900:	2200      	movs	r2, #0
 8006902:	4926      	ldr	r1, [pc, #152]	; (800699c <USER_Forward_axes_Find+0x2e0>)
 8006904:	56a2      	ldrsb	r2, [r4, r2]
 8006906:	7809      	ldrb	r1, [r1, #0]
 8006908:	56e3      	ldrsb	r3, [r4, r3]
 800690a:	b249      	sxtb	r1, r1
 800690c:	9102      	str	r1, [sp, #8]
 800690e:	7839      	ldrb	r1, [r7, #0]
 8006910:	4e19      	ldr	r6, [pc, #100]	; (8006978 <USER_Forward_axes_Find+0x2bc>)
 8006912:	9101      	str	r1, [sp, #4]
 8006914:	2102      	movs	r1, #2
 8006916:	5661      	ldrsb	r1, [r4, r1]
 8006918:	0030      	movs	r0, r6
 800691a:	9100      	str	r1, [sp, #0]
 800691c:	4921      	ldr	r1, [pc, #132]	; (80069a4 <USER_Forward_axes_Find+0x2e8>)
 800691e:	f005 f9f3 	bl	800bd08 <siprintf>

			uarttx_req=1;
 8006922:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006924:	0030      	movs	r0, r6
			uarttx_req=1;
 8006926:	702b      	strb	r3, [r5, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006928:	f7f9 fbec 	bl	8000104 <strlen>
 800692c:	0031      	movs	r1, r6
 800692e:	b282      	uxth	r2, r0
 8006930:	4814      	ldr	r0, [pc, #80]	; (8006984 <USER_Forward_axes_Find+0x2c8>)
 8006932:	f7fe f9c5 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006936:	2800      	cmp	r0, #0
 8006938:	d001      	beq.n	800693e <USER_Forward_axes_Find+0x282>
			{
				Error_Handler();
 800693a:	f001 fff5 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 800693e:	4a10      	ldr	r2, [pc, #64]	; (8006980 <USER_Forward_axes_Find+0x2c4>)
 8006940:	7813      	ldrb	r3, [r2, #0]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d0fc      	beq.n	8006940 <USER_Forward_axes_Find+0x284>

			USER_Side_Axes_Find();
 8006946:	f004 f8a9 	bl	800aa9c <USER_Side_Axes_Find>

			device_mode=ACCELERATION;
 800694a:	2202      	movs	r2, #2
 800694c:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <USER_Forward_axes_Find+0x2ec>)
 800694e:	701a      	strb	r2, [r3, #0]
		}




		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006950:	2200      	movs	r2, #0
 8006952:	2102      	movs	r1, #2
 8006954:	4805      	ldr	r0, [pc, #20]	; (800696c <USER_Forward_axes_Find+0x2b0>)
 8006956:	f7fc fc27 	bl	80031a8 <HAL_GPIO_WritePin>





}
 800695a:	b00d      	add	sp, #52	; 0x34
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int16_t array_out_xl[3],error_current_xl[3]={0};
 800695e:	9304      	str	r3, [sp, #16]
	int8_t error_int_xl[3]={0};
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	e72c      	b.n	80067be <USER_Forward_axes_Find+0x102>
 8006964:	20000269 	.word	0x20000269
 8006968:	200003a0 	.word	0x200003a0
 800696c:	48000400 	.word	0x48000400
 8006970:	20000009 	.word	0x20000009
 8006974:	2000037a 	.word	0x2000037a
 8006978:	2000026b 	.word	0x2000026b
 800697c:	0800e764 	.word	0x0800e764
 8006980:	20000378 	.word	0x20000378
 8006984:	20000510 	.word	0x20000510
 8006988:	0800e7a7 	.word	0x0800e7a7
 800698c:	2000047c 	.word	0x2000047c
 8006990:	2000036c 	.word	0x2000036c
 8006994:	20000368 	.word	0x20000368
 8006998:	20000008 	.word	0x20000008
 800699c:	20000015 	.word	0x20000015
 80069a0:	0800e89f 	.word	0x0800e89f
 80069a4:	0800e91c 	.word	0x0800e91c
 80069a8:	2000048a 	.word	0x2000048a
			if((wake_up_src&0x04) == 0x04)
 80069ac:	ab04      	add	r3, sp, #16
 80069ae:	7d9e      	ldrb	r6, [r3, #22]
 80069b0:	2304      	movs	r3, #4
 80069b2:	401e      	ands	r6, r3
 80069b4:	d04f      	beq.n	8006a56 <USER_Forward_axes_Find+0x39a>
					error_int_xl[X]=MINUS;
 80069b6:	2201      	movs	r2, #1
				error_current_xl[X]	=	array_out_xl[X]	-	xl_axes_ref[X];
 80069b8:	4b6b      	ldr	r3, [pc, #428]	; (8006b68 <USER_Forward_axes_Find+0x4ac>)
 80069ba:	882e      	ldrh	r6, [r5, #0]
 80069bc:	881b      	ldrh	r3, [r3, #0]
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 80069be:	4c6b      	ldr	r4, [pc, #428]	; (8006b6c <USER_Forward_axes_Find+0x4b0>)
				error_current_xl[X]	=	array_out_xl[X]	-	xl_axes_ref[X];
 80069c0:	1af6      	subs	r6, r6, r3
 80069c2:	b236      	sxth	r6, r6
					error_int_xl[X]=MINUS;
 80069c4:	1e73      	subs	r3, r6, #1
 80069c6:	4333      	orrs	r3, r6
 80069c8:	17db      	asrs	r3, r3, #31
 80069ca:	431a      	orrs	r2, r3
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 80069cc:	0013      	movs	r3, r2
 80069ce:	4968      	ldr	r1, [pc, #416]	; (8006b70 <USER_Forward_axes_Find+0x4b4>)
					error_int_xl[X]=MINUS;
 80069d0:	9205      	str	r2, [sp, #20]
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 80069d2:	0020      	movs	r0, r4
 80069d4:	0032      	movs	r2, r6
 80069d6:	f005 f997 	bl	800bd08 <siprintf>
				uarttx_req=1;
 80069da:	2301      	movs	r3, #1
 80069dc:	4f65      	ldr	r7, [pc, #404]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80069de:	0020      	movs	r0, r4
				uarttx_req=1;
 80069e0:	703b      	strb	r3, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80069e2:	f7f9 fb8f 	bl	8000104 <strlen>
 80069e6:	0021      	movs	r1, r4
 80069e8:	b282      	uxth	r2, r0
 80069ea:	4863      	ldr	r0, [pc, #396]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
 80069ec:	f7fe f968 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d001      	beq.n	80069f8 <USER_Forward_axes_Find+0x33c>
					Error_Handler();
 80069f4:	f001 ff98 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 80069f8:	783b      	ldrb	r3, [r7, #0]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d0fc      	beq.n	80069f8 <USER_Forward_axes_Find+0x33c>
			if((wake_up_src&0x01) == 0x01)
 80069fe:	2701      	movs	r7, #1
 8006a00:	ab04      	add	r3, sp, #16
 8006a02:	7d9c      	ldrb	r4, [r3, #22]
 8006a04:	403c      	ands	r4, r7
 8006a06:	d100      	bne.n	8006a0a <USER_Forward_axes_Find+0x34e>
 8006a08:	e0a0      	b.n	8006b4c <USER_Forward_axes_Find+0x490>
				error_current_xl[Z]	=	array_out_xl[Z]	-	xl_axes_ref[Z];
 8006a0a:	4b57      	ldr	r3, [pc, #348]	; (8006b68 <USER_Forward_axes_Find+0x4ac>)
 8006a0c:	88ac      	ldrh	r4, [r5, #4]
 8006a0e:	889b      	ldrh	r3, [r3, #4]
				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 8006a10:	4d56      	ldr	r5, [pc, #344]	; (8006b6c <USER_Forward_axes_Find+0x4b0>)
				error_current_xl[Z]	=	array_out_xl[Z]	-	xl_axes_ref[Z];
 8006a12:	1ae4      	subs	r4, r4, r3
 8006a14:	b224      	sxth	r4, r4
					error_int_xl[Z]=MINUS;
 8006a16:	1e63      	subs	r3, r4, #1
 8006a18:	4323      	orrs	r3, r4
 8006a1a:	17db      	asrs	r3, r3, #31
 8006a1c:	433b      	orrs	r3, r7
				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 8006a1e:	0022      	movs	r2, r4
 8006a20:	4956      	ldr	r1, [pc, #344]	; (8006b7c <USER_Forward_axes_Find+0x4c0>)
 8006a22:	0028      	movs	r0, r5
					error_int_xl[Z]=MINUS;
 8006a24:	9307      	str	r3, [sp, #28]
				sprintf(out_string,"\r\nZ Acceleration/break	error_current_xl[Z]=%d,error_int_xl[Z]=%d\r\n",error_current_xl[Z],error_int_xl[Z]);
 8006a26:	f005 f96f 	bl	800bd08 <siprintf>
				uarttx_req=1;
 8006a2a:	4b52      	ldr	r3, [pc, #328]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006a2c:	0028      	movs	r0, r5
				uarttx_req=1;
 8006a2e:	701f      	strb	r7, [r3, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006a30:	f7f9 fb68 	bl	8000104 <strlen>
 8006a34:	0029      	movs	r1, r5
 8006a36:	b282      	uxth	r2, r0
 8006a38:	484f      	ldr	r0, [pc, #316]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
 8006a3a:	f7fe f941 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d001      	beq.n	8006a46 <USER_Forward_axes_Find+0x38a>
					Error_Handler();
 8006a42:	f001 ff71 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8006a46:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d0fb      	beq.n	8006a46 <USER_Forward_axes_Find+0x38a>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006a4e:	2300      	movs	r3, #0
 8006a50:	9304      	str	r3, [sp, #16]
	int8_t error_int_xl[3]={0};
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	e6dc      	b.n	8006810 <USER_Forward_axes_Find+0x154>
 8006a56:	9605      	str	r6, [sp, #20]
 8006a58:	e7d1      	b.n	80069fe <USER_Forward_axes_Find+0x342>
			if((wake_up_src&0x02) == 0x02)
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	ab04      	add	r3, sp, #16
 8006a5e:	7d9b      	ldrb	r3, [r3, #22]
 8006a60:	4013      	ands	r3, r2
 8006a62:	d04c      	beq.n	8006afe <USER_Forward_axes_Find+0x442>
					error_int_xl[Y]=MINUS;
 8006a64:	2701      	movs	r7, #1
				error_current_xl[Y]	=	array_out_xl[Y]	-	xl_axes_ref[Y];
 8006a66:	4a40      	ldr	r2, [pc, #256]	; (8006b68 <USER_Forward_axes_Find+0x4ac>)
 8006a68:	886b      	ldrh	r3, [r5, #2]
 8006a6a:	8852      	ldrh	r2, [r2, #2]
				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006a6c:	4c3f      	ldr	r4, [pc, #252]	; (8006b6c <USER_Forward_axes_Find+0x4b0>)
				error_current_xl[Y]	=	array_out_xl[Y]	-	xl_axes_ref[Y];
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	9304      	str	r3, [sp, #16]
					error_int_xl[Y]=MINUS;
 8006a74:	9a04      	ldr	r2, [sp, #16]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	17db      	asrs	r3, r3, #31
 8006a7c:	433b      	orrs	r3, r7
				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006a7e:	4940      	ldr	r1, [pc, #256]	; (8006b80 <USER_Forward_axes_Find+0x4c4>)
 8006a80:	0020      	movs	r0, r4
					error_int_xl[Y]=MINUS;
 8006a82:	9306      	str	r3, [sp, #24]
				sprintf(out_string,"\r\nY Acceleration/break	error_current_xl[Y]=%d,error_int_xl[Y]=%d\r\n",error_current_xl[Y],error_int_xl[Y]);
 8006a84:	f005 f940 	bl	800bd08 <siprintf>
				uarttx_req=1;
 8006a88:	4e3a      	ldr	r6, [pc, #232]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006a8a:	0020      	movs	r0, r4
				uarttx_req=1;
 8006a8c:	7037      	strb	r7, [r6, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006a8e:	f7f9 fb39 	bl	8000104 <strlen>
 8006a92:	0021      	movs	r1, r4
 8006a94:	b282      	uxth	r2, r0
 8006a96:	4838      	ldr	r0, [pc, #224]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
 8006a98:	f7fe f912 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d001      	beq.n	8006aa4 <USER_Forward_axes_Find+0x3e8>
					Error_Handler();
 8006aa0:	f001 ff42 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8006aa4:	7833      	ldrb	r3, [r6, #0]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d0fc      	beq.n	8006aa4 <USER_Forward_axes_Find+0x3e8>
			if((wake_up_src&0x04) == 0x04)
 8006aaa:	ab04      	add	r3, sp, #16
 8006aac:	7d9c      	ldrb	r4, [r3, #22]
 8006aae:	2304      	movs	r3, #4
 8006ab0:	401c      	ands	r4, r3
 8006ab2:	d04f      	beq.n	8006b54 <USER_Forward_axes_Find+0x498>
					error_int_xl[X]=MINUS;
 8006ab4:	2701      	movs	r7, #1
				error_current_xl[X]	=	array_out_xl[X]	-	xl_axes_ref[X];
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <USER_Forward_axes_Find+0x4ac>)
 8006ab8:	882e      	ldrh	r6, [r5, #0]
 8006aba:	881b      	ldrh	r3, [r3, #0]
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 8006abc:	4c2b      	ldr	r4, [pc, #172]	; (8006b6c <USER_Forward_axes_Find+0x4b0>)
				error_current_xl[X]	=	array_out_xl[X]	-	xl_axes_ref[X];
 8006abe:	1af6      	subs	r6, r6, r3
 8006ac0:	b236      	sxth	r6, r6
					error_int_xl[X]=MINUS;
 8006ac2:	1e73      	subs	r3, r6, #1
 8006ac4:	4333      	orrs	r3, r6
 8006ac6:	17db      	asrs	r3, r3, #31
 8006ac8:	433b      	orrs	r3, r7
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 8006aca:	0032      	movs	r2, r6
 8006acc:	4928      	ldr	r1, [pc, #160]	; (8006b70 <USER_Forward_axes_Find+0x4b4>)
 8006ace:	0020      	movs	r0, r4
					error_int_xl[X]=MINUS;
 8006ad0:	9305      	str	r3, [sp, #20]
				sprintf(out_string,"\r\nX Acceleration/break	error_current_xl[X]=%d,error_int_xl[X]=%d\r\n",error_current_xl[X],error_int_xl[X]);
 8006ad2:	f005 f919 	bl	800bd08 <siprintf>
				uarttx_req=1;
 8006ad6:	4d27      	ldr	r5, [pc, #156]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006ad8:	0020      	movs	r0, r4
				uarttx_req=1;
 8006ada:	702f      	strb	r7, [r5, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006adc:	f7f9 fb12 	bl	8000104 <strlen>
 8006ae0:	0021      	movs	r1, r4
 8006ae2:	b282      	uxth	r2, r0
 8006ae4:	4824      	ldr	r0, [pc, #144]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
 8006ae6:	f7fe f8eb 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d001      	beq.n	8006af2 <USER_Forward_axes_Find+0x436>
					Error_Handler();
 8006aee:	f001 ff1b 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8006af2:	782b      	ldrb	r3, [r5, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d0fc      	beq.n	8006af2 <USER_Forward_axes_Find+0x436>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006af8:	2400      	movs	r4, #0
	int8_t error_int_xl[3]={0};
 8006afa:	9407      	str	r4, [sp, #28]
 8006afc:	e688      	b.n	8006810 <USER_Forward_axes_Find+0x154>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006afe:	9304      	str	r3, [sp, #16]
	int8_t error_int_xl[3]={0};
 8006b00:	9306      	str	r3, [sp, #24]
 8006b02:	e7d2      	b.n	8006aaa <USER_Forward_axes_Find+0x3ee>
			uarttx_req=1;
 8006b04:	2301      	movs	r3, #1
 8006b06:	4c1b      	ldr	r4, [pc, #108]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nPlease Set Device Orientation by USER_Forward_axes_Find()\r\n",strlen("\r\nPlease Set Device Orientation by USER_Forward_axes_Find()\r\n"))!=HAL_OK)
 8006b08:	223d      	movs	r2, #61	; 0x3d
 8006b0a:	491e      	ldr	r1, [pc, #120]	; (8006b84 <USER_Forward_axes_Find+0x4c8>)
 8006b0c:	481a      	ldr	r0, [pc, #104]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
			uarttx_req=1;
 8006b0e:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nPlease Set Device Orientation by USER_Forward_axes_Find()\r\n",strlen("\r\nPlease Set Device Orientation by USER_Forward_axes_Find()\r\n"))!=HAL_OK)
 8006b10:	f7fe f8d6 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d001      	beq.n	8006b1c <USER_Forward_axes_Find+0x460>
				Error_Handler();
 8006b18:	f001 ff06 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8006b1c:	7823      	ldrb	r3, [r4, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d0fc      	beq.n	8006b1c <USER_Forward_axes_Find+0x460>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006b22:	2400      	movs	r4, #0
 8006b24:	0026      	movs	r6, r4
 8006b26:	9404      	str	r4, [sp, #16]
	int8_t error_int_xl[3]={0};
 8006b28:	9407      	str	r4, [sp, #28]
 8006b2a:	9406      	str	r4, [sp, #24]
 8006b2c:	9405      	str	r4, [sp, #20]
 8006b2e:	e66f      	b.n	8006810 <USER_Forward_axes_Find+0x154>
		default:if(HAL_UART_Transmit_DMA(&huart3,"\r\nSomeLogical Error from USER_Forward_axes_Find()\r\n",strlen("\r\nSomeLogical Error from USER_Forward_axes_Find()\r\n"))!=HAL_OK)
 8006b30:	2233      	movs	r2, #51	; 0x33
 8006b32:	4915      	ldr	r1, [pc, #84]	; (8006b88 <USER_Forward_axes_Find+0x4cc>)
 8006b34:	4810      	ldr	r0, [pc, #64]	; (8006b78 <USER_Forward_axes_Find+0x4bc>)
 8006b36:	f7fe f8c3 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d001      	beq.n	8006b42 <USER_Forward_axes_Find+0x486>
			Error_Handler();
 8006b3e:	f001 fef3 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 8006b42:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <USER_Forward_axes_Find+0x4b8>)
 8006b44:	7813      	ldrb	r3, [r2, #0]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d0fc      	beq.n	8006b44 <USER_Forward_axes_Find+0x488>
 8006b4a:	e7ea      	b.n	8006b22 <USER_Forward_axes_Find+0x466>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006b4c:	9404      	str	r4, [sp, #16]
	int8_t error_int_xl[3]={0};
 8006b4e:	9407      	str	r4, [sp, #28]
 8006b50:	9406      	str	r4, [sp, #24]
 8006b52:	e65d      	b.n	8006810 <USER_Forward_axes_Find+0x154>
	int16_t array_out_xl[3],error_current_xl[3]={0};
 8006b54:	0026      	movs	r6, r4
	int8_t error_int_xl[3]={0};
 8006b56:	9407      	str	r4, [sp, #28]
 8006b58:	e7e8      	b.n	8006b2c <USER_Forward_axes_Find+0x470>
			else if(total_error_int_xl[forward_axes]<0)
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	d001      	beq.n	8006b62 <USER_Forward_axes_Find+0x4a6>
				sign_of_acceleration=MINUS;
 8006b5e:	22ff      	movs	r2, #255	; 0xff
 8006b60:	e6a2      	b.n	80068a8 <USER_Forward_axes_Find+0x1ec>
				sign_of_acceleration=SIGN_NOT_SET;
 8006b62:	2202      	movs	r2, #2
 8006b64:	e6a0      	b.n	80068a8 <USER_Forward_axes_Find+0x1ec>
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	2000037a 	.word	0x2000037a
 8006b6c:	2000026b 	.word	0x2000026b
 8006b70:	0800e7ea 	.word	0x0800e7ea
 8006b74:	20000378 	.word	0x20000378
 8006b78:	20000510 	.word	0x20000510
 8006b7c:	0800e7a7 	.word	0x0800e7a7
 8006b80:	0800e764 	.word	0x0800e764
 8006b84:	0800e82d 	.word	0x0800e82d
 8006b88:	0800e86b 	.word	0x0800e86b

08006b8c <USER_forward_axes_sense_Wakeup_Init>:
{
	uint8_t hexcode;
	extern float mg_per_LSB;
	extern uint16_t odr_xl_value;

	memrx=0;
 8006b8c:	2300      	movs	r3, #0
{
 8006b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	memrx=0;
 8006b90:	4ea4      	ldr	r6, [pc, #656]	; (8006e24 <USER_forward_axes_sense_Wakeup_Init+0x298>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&fwd_axes_ctrl1_xl,1)!=HAL_OK)
 8006b92:	4da5      	ldr	r5, [pc, #660]	; (8006e28 <USER_forward_axes_sense_Wakeup_Init+0x29c>)
 8006b94:	4fa5      	ldr	r7, [pc, #660]	; (8006e2c <USER_forward_axes_sense_Wakeup_Init+0x2a0>)
{
 8006b96:	b085      	sub	sp, #20
	memrx=0;
 8006b98:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&fwd_axes_ctrl1_xl,1)!=HAL_OK)
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	9700      	str	r7, [sp, #0]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	21d6      	movs	r1, #214	; 0xd6
 8006ba4:	0028      	movs	r0, r5
 8006ba6:	f7fc fd83 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d001      	beq.n	8006bb2 <USER_forward_axes_sense_Wakeup_Init+0x26>
	{
		Error_Handler();
 8006bae:	f001 febb 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006bb2:	7833      	ldrb	r3, [r6, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0fc      	beq.n	8006bb2 <USER_forward_axes_sense_Wakeup_Init+0x26>

	hexcode=fwd_axes_ctrl1_xl&~0xfc;
 8006bb8:	2203      	movs	r2, #3
 8006bba:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0x60;
 8006bbc:	240f      	movs	r4, #15
	hexcode=fwd_axes_ctrl1_xl&~0xfc;
 8006bbe:	401a      	ands	r2, r3
	hexcode|=0x60;
 8006bc0:	2360      	movs	r3, #96	; 0x60
 8006bc2:	446c      	add	r4, sp
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	7023      	strb	r3, [r4, #0]

	memtx=0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4a99      	ldr	r2, [pc, #612]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 8006bcc:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8006bce:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	9400      	str	r4, [sp, #0]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	0028      	movs	r0, r5
 8006bda:	f7fc fcc3 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d100      	bne.n	8006be4 <USER_forward_axes_sense_Wakeup_Init+0x58>
 8006be2:	e10a      	b.n	8006dfa <USER_forward_axes_sense_Wakeup_Init+0x26e>
		// ODR_XL = 416 Hz, FS_XL = 2g
	{
		Error_Handler();
 8006be4:	f001 fea0 	bl	8008928 <Error_Handler>
	{
		odr_xl_value=416;
		mg_per_LSB = 0.061;
	}

	while(memtx==0);
 8006be8:	4b91      	ldr	r3, [pc, #580]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0fb      	beq.n	8006be8 <USER_forward_axes_sense_Wakeup_Init+0x5c>
	memrx=0;
 8006bf0:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&fwd_axes_tap_cfg,1)!=HAL_OK)
 8006bf2:	4f90      	ldr	r7, [pc, #576]	; (8006e34 <USER_forward_axes_sense_Wakeup_Init+0x2a8>)
	memrx=0;
 8006bf4:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&fwd_axes_tap_cfg,1)!=HAL_OK)
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	9700      	str	r7, [sp, #0]
 8006bfc:	2258      	movs	r2, #88	; 0x58
 8006bfe:	21d6      	movs	r1, #214	; 0xd6
 8006c00:	0028      	movs	r0, r5
 8006c02:	f7fc fd55 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d001      	beq.n	8006c0e <USER_forward_axes_sense_Wakeup_Init+0x82>
	{
		Error_Handler();
 8006c0a:	f001 fe8d 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006c0e:	7833      	ldrb	r3, [r6, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0fc      	beq.n	8006c0e <USER_forward_axes_sense_Wakeup_Init+0x82>

	if(who_am_i==0x69)
 8006c14:	4b88      	ldr	r3, [pc, #544]	; (8006e38 <USER_forward_axes_sense_Wakeup_Init+0x2ac>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b69      	cmp	r3, #105	; 0x69
 8006c1a:	d000      	beq.n	8006c1e <USER_forward_axes_sense_Wakeup_Init+0x92>
 8006c1c:	e0f5      	b.n	8006e0a <USER_forward_axes_sense_Wakeup_Init+0x27e>
	{



		hexcode=fwd_axes_tap_cfg&~0x11;
 8006c1e:	783a      	ldrb	r2, [r7, #0]
 8006c20:	3b58      	subs	r3, #88	; 0x58
 8006c22:	439a      	bics	r2, r3
	if(who_am_i==0x6A)
	{


		hexcode=fwd_axes_tap_cfg&~0x91;
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8006c24:	4313      	orrs	r3, r2
 8006c26:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4a81      	ldr	r2, [pc, #516]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8006c2c:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8006c2e:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8006c30:	3301      	adds	r3, #1
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	9400      	str	r4, [sp, #0]
 8006c36:	2258      	movs	r2, #88	; 0x58
 8006c38:	0028      	movs	r0, r5
 8006c3a:	f7fc fc93 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d001      	beq.n	8006c46 <USER_forward_axes_sense_Wakeup_Init+0xba>
	{
		Error_Handler();
 8006c42:	f001 fe71 	bl	8008928 <Error_Handler>
	}
	while(memtx==0);
 8006c46:	4b7a      	ldr	r3, [pc, #488]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0fb      	beq.n	8006c46 <USER_forward_axes_sense_Wakeup_Init+0xba>



	memrx=0;
 8006c4e:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&fwd_axes_wake_up_ths,1)!=HAL_OK)
 8006c50:	4f7a      	ldr	r7, [pc, #488]	; (8006e3c <USER_forward_axes_sense_Wakeup_Init+0x2b0>)
	memrx=0;
 8006c52:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&fwd_axes_wake_up_ths,1)!=HAL_OK)
 8006c54:	3301      	adds	r3, #1
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	9700      	str	r7, [sp, #0]
 8006c5a:	225b      	movs	r2, #91	; 0x5b
 8006c5c:	21d6      	movs	r1, #214	; 0xd6
 8006c5e:	0028      	movs	r0, r5
 8006c60:	f7fc fd26 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d001      	beq.n	8006c6c <USER_forward_axes_sense_Wakeup_Init+0xe0>
	{
		Error_Handler();
 8006c68:	f001 fe5e 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006c6c:	7833      	ldrb	r3, [r6, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0fc      	beq.n	8006c6c <USER_forward_axes_sense_Wakeup_Init+0xe0>

	hexcode=fwd_axes_wake_up_ths&~0x3f;
 8006c72:	223f      	movs	r2, #63	; 0x3f
 8006c74:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0x03;
	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold as 93 mg
 8006c76:	21d6      	movs	r1, #214	; 0xd6
	hexcode=fwd_axes_wake_up_ths&~0x3f;
 8006c78:	4393      	bics	r3, r2
 8006c7a:	001a      	movs	r2, r3
	hexcode|=0x03;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	7023      	strb	r3, [r4, #0]
	memtx=0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	4a6a      	ldr	r2, [pc, #424]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold as 93 mg
 8006c86:	0028      	movs	r0, r5
	memtx=0;
 8006c88:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold as 93 mg
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	9400      	str	r4, [sp, #0]
 8006c90:	225b      	movs	r2, #91	; 0x5b
 8006c92:	f7fc fc67 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d001      	beq.n	8006c9e <USER_forward_axes_sense_Wakeup_Init+0x112>
	{
		Error_Handler();
 8006c9a:	f001 fe45 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006c9e:	4b64      	ldr	r3, [pc, #400]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0fb      	beq.n	8006c9e <USER_forward_axes_sense_Wakeup_Init+0x112>

	memrx=0;
 8006ca6:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&fwd_axes_ctrl8_xl,1)!=HAL_OK)
 8006ca8:	4f65      	ldr	r7, [pc, #404]	; (8006e40 <USER_forward_axes_sense_Wakeup_Init+0x2b4>)
	memrx=0;
 8006caa:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&fwd_axes_ctrl8_xl,1)!=HAL_OK)
 8006cac:	3301      	adds	r3, #1
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	9700      	str	r7, [sp, #0]
 8006cb2:	2217      	movs	r2, #23
 8006cb4:	21d6      	movs	r1, #214	; 0xd6
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	f7fc fcfa 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d001      	beq.n	8006cc4 <USER_forward_axes_sense_Wakeup_Init+0x138>
	{
		Error_Handler();
 8006cc0:	f001 fe32 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006cc4:	7833      	ldrb	r3, [r6, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0fc      	beq.n	8006cc4 <USER_forward_axes_sense_Wakeup_Init+0x138>

	if(who_am_i==0x69)
 8006cca:	4b5b      	ldr	r3, [pc, #364]	; (8006e38 <USER_forward_axes_sense_Wakeup_Init+0x2ac>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b69      	cmp	r3, #105	; 0x69
 8006cd0:	d000      	beq.n	8006cd4 <USER_forward_axes_sense_Wakeup_Init+0x148>
 8006cd2:	e0a1      	b.n	8006e18 <USER_forward_axes_sense_Wakeup_Init+0x28c>
	{
		hexcode=fwd_axes_ctrl8_xl&~0x60;
 8006cd4:	2260      	movs	r2, #96	; 0x60
 8006cd6:	783b      	ldrb	r3, [r7, #0]

		hexcode|=0x40; //HPF cutoff odr/9
	}
	if(who_am_i==0x6a)
	{
		hexcode=fwd_axes_ctrl8_xl&~0x68;
 8006cd8:	4393      	bics	r3, r2
 8006cda:	001a      	movs	r2, r3

		hexcode|=0x40;//HPF cutoff odr/9;ODR/2 low pass filtered sent to composite filter
 8006cdc:	2340      	movs	r3, #64	; 0x40
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4a52      	ldr	r2, [pc, #328]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8006ce6:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8006ce8:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8006cea:	3301      	adds	r3, #1
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	9400      	str	r4, [sp, #0]
 8006cf0:	2217      	movs	r2, #23
 8006cf2:	0028      	movs	r0, r5
 8006cf4:	f7fc fc36 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d001      	beq.n	8006d00 <USER_forward_axes_sense_Wakeup_Init+0x174>
			{
		Error_Handler();
 8006cfc:	f001 fe14 	bl	8008928 <Error_Handler>
			}


	while(memtx==0);
 8006d00:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0fb      	beq.n	8006d00 <USER_forward_axes_sense_Wakeup_Init+0x174>

	memrx=0;
 8006d08:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&fwd_axes_wake_up_dur,1)!=HAL_OK)
 8006d0a:	4f4e      	ldr	r7, [pc, #312]	; (8006e44 <USER_forward_axes_sense_Wakeup_Init+0x2b8>)
	memrx=0;
 8006d0c:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&fwd_axes_wake_up_dur,1)!=HAL_OK)
 8006d0e:	3301      	adds	r3, #1
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	9700      	str	r7, [sp, #0]
 8006d14:	225c      	movs	r2, #92	; 0x5c
 8006d16:	21d6      	movs	r1, #214	; 0xd6
 8006d18:	0028      	movs	r0, r5
 8006d1a:	f7fc fcc9 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d001      	beq.n	8006d26 <USER_forward_axes_sense_Wakeup_Init+0x19a>
	{
		Error_Handler();
 8006d22:	f001 fe01 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006d26:	7833      	ldrb	r3, [r6, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0fc      	beq.n	8006d26 <USER_forward_axes_sense_Wakeup_Init+0x19a>

	hexcode=fwd_axes_wake_up_dur&~0x60;
 8006d2c:	2360      	movs	r3, #96	; 0x60
 8006d2e:	783a      	ldrb	r2, [r7, #0]
	hexcode|=0x60;

	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 8006d30:	21d6      	movs	r1, #214	; 0xd6
	hexcode=fwd_axes_wake_up_dur&~0x60;
 8006d32:	439a      	bics	r2, r3
	hexcode|=0x60;
 8006d34:	4313      	orrs	r3, r2
 8006d36:	7023      	strb	r3, [r4, #0]
	memtx=0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4a3d      	ldr	r2, [pc, #244]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 8006d3c:	0028      	movs	r0, r5
	memtx=0;
 8006d3e:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Maximum (ODR*3) duration for wake up
 8006d40:	3301      	adds	r3, #1
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	9400      	str	r4, [sp, #0]
 8006d46:	225c      	movs	r2, #92	; 0x5c
 8006d48:	f7fc fc0c 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d001      	beq.n	8006d54 <USER_forward_axes_sense_Wakeup_Init+0x1c8>
	{
		Error_Handler();
 8006d50:	f001 fdea 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006d54:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0fb      	beq.n	8006d54 <USER_forward_axes_sense_Wakeup_Init+0x1c8>

	memrx=0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4e31      	ldr	r6, [pc, #196]	; (8006e24 <USER_forward_axes_sense_Wakeup_Init+0x298>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&fwd_axes_md1_cfg,1)!=HAL_OK)
 8006d60:	4c31      	ldr	r4, [pc, #196]	; (8006e28 <USER_forward_axes_sense_Wakeup_Init+0x29c>)
 8006d62:	4d39      	ldr	r5, [pc, #228]	; (8006e48 <USER_forward_axes_sense_Wakeup_Init+0x2bc>)
	memrx=0;
 8006d64:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&fwd_axes_md1_cfg,1)!=HAL_OK)
 8006d66:	3301      	adds	r3, #1
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	9500      	str	r5, [sp, #0]
 8006d6c:	225e      	movs	r2, #94	; 0x5e
 8006d6e:	21d6      	movs	r1, #214	; 0xd6
 8006d70:	0020      	movs	r0, r4
 8006d72:	f7fc fc9d 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d001      	beq.n	8006d7e <USER_forward_axes_sense_Wakeup_Init+0x1f2>
	{
		Error_Handler();
 8006d7a:	f001 fdd5 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8006d7e:	7833      	ldrb	r3, [r6, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0fc      	beq.n	8006d7e <USER_forward_axes_sense_Wakeup_Init+0x1f2>

	hexcode=fwd_axes_md1_cfg&~0x20;
 8006d84:	2320      	movs	r3, #32
	hexcode|=0x20;
 8006d86:	210f      	movs	r1, #15
	hexcode=fwd_axes_md1_cfg&~0x20;
 8006d88:	782a      	ldrb	r2, [r5, #0]
	hexcode|=0x20;
 8006d8a:	4469      	add	r1, sp
	hexcode=fwd_axes_md1_cfg&~0x20;
 8006d8c:	439a      	bics	r2, r3
	hexcode|=0x20;
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	700b      	strb	r3, [r1, #0]

	memtx=0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	4d26      	ldr	r5, [pc, #152]	; (8006e30 <USER_forward_axes_sense_Wakeup_Init+0x2a4>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 8006d96:	225e      	movs	r2, #94	; 0x5e
	memtx=0;
 8006d98:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	9100      	str	r1, [sp, #0]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	21d6      	movs	r1, #214	; 0xd6
 8006da2:	0020      	movs	r0, r4
 8006da4:	f7fc fbde 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d001      	beq.n	8006db0 <USER_forward_axes_sense_Wakeup_Init+0x224>
	{
		Error_Handler();
 8006dac:	f001 fdbc 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 8006db0:	782b      	ldrb	r3, [r5, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0fc      	beq.n	8006db0 <USER_forward_axes_sense_Wakeup_Init+0x224>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006db6:	2201      	movs	r2, #1
 8006db8:	2102      	movs	r1, #2
 8006dba:	4824      	ldr	r0, [pc, #144]	; (8006e4c <USER_forward_axes_sense_Wakeup_Init+0x2c0>)
 8006dbc:	f7fc f9f4 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4c23      	ldr	r4, [pc, #140]	; (8006e50 <USER_forward_axes_sense_Wakeup_Init+0x2c4>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nDevice Forward axes Sensing Function Started......\r\n",strlen("\r\nDevice Forward axes Sensing Function Started......\r\n"))!=HAL_OK)
 8006dc4:	2236      	movs	r2, #54	; 0x36
 8006dc6:	4923      	ldr	r1, [pc, #140]	; (8006e54 <USER_forward_axes_sense_Wakeup_Init+0x2c8>)
 8006dc8:	4823      	ldr	r0, [pc, #140]	; (8006e58 <USER_forward_axes_sense_Wakeup_Init+0x2cc>)
	uarttx_req=1;
 8006dca:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nDevice Forward axes Sensing Function Started......\r\n",strlen("\r\nDevice Forward axes Sensing Function Started......\r\n"))!=HAL_OK)
 8006dcc:	f7fd ff78 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d001      	beq.n	8006dd8 <USER_forward_axes_sense_Wakeup_Init+0x24c>
	{
		Error_Handler();
 8006dd4:	f001 fda8 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8006dd8:	7823      	ldrb	r3, [r4, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d0fc      	beq.n	8006dd8 <USER_forward_axes_sense_Wakeup_Init+0x24c>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006dde:	2200      	movs	r2, #0
 8006de0:	2102      	movs	r1, #2
 8006de2:	481a      	ldr	r0, [pc, #104]	; (8006e4c <USER_forward_axes_sense_Wakeup_Init+0x2c0>)
 8006de4:	f7fc f9e0 	bl	80031a8 <HAL_GPIO_WritePin>

	forward_axes_wakeup_init_function_status=EXICUTED;
 8006de8:	2301      	movs	r3, #1
 8006dea:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <USER_forward_axes_sense_Wakeup_Init+0x2d0>)
 8006dec:	7013      	strb	r3, [r2, #0]

	wakeup_mode=FORWARD_AXIS;
 8006dee:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <USER_forward_axes_sense_Wakeup_Init+0x2d4>)
 8006df0:	7013      	strb	r3, [r2, #0]
	device_mode=FORWARD_AXIS;
 8006df2:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <USER_forward_axes_sense_Wakeup_Init+0x2d8>)
 8006df4:	7013      	strb	r3, [r2, #0]


}
 8006df6:	b005      	add	sp, #20
 8006df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		odr_xl_value=416;
 8006dfa:	22d0      	movs	r2, #208	; 0xd0
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <USER_forward_axes_sense_Wakeup_Init+0x2dc>)
 8006dfe:	0052      	lsls	r2, r2, #1
 8006e00:	801a      	strh	r2, [r3, #0]
		mg_per_LSB = 0.061;
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <USER_forward_axes_sense_Wakeup_Init+0x2e0>)
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <USER_forward_axes_sense_Wakeup_Init+0x2e4>)
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e6ee      	b.n	8006be8 <USER_forward_axes_sense_Wakeup_Init+0x5c>
	if(who_am_i==0x6A)
 8006e0a:	2b6a      	cmp	r3, #106	; 0x6a
 8006e0c:	d000      	beq.n	8006e10 <USER_forward_axes_sense_Wakeup_Init+0x284>
 8006e0e:	e70b      	b.n	8006c28 <USER_forward_axes_sense_Wakeup_Init+0x9c>
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8006e10:	226f      	movs	r2, #111	; 0x6f
		hexcode=fwd_axes_tap_cfg&~0x91;
 8006e12:	783b      	ldrb	r3, [r7, #0]
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 8006e14:	4252      	negs	r2, r2
 8006e16:	e705      	b.n	8006c24 <USER_forward_axes_sense_Wakeup_Init+0x98>
	if(who_am_i==0x6a)
 8006e18:	2b6a      	cmp	r3, #106	; 0x6a
 8006e1a:	d000      	beq.n	8006e1e <USER_forward_axes_sense_Wakeup_Init+0x292>
 8006e1c:	e761      	b.n	8006ce2 <USER_forward_axes_sense_Wakeup_Init+0x156>
		hexcode=fwd_axes_ctrl8_xl&~0x68;
 8006e1e:	783b      	ldrb	r3, [r7, #0]
 8006e20:	2268      	movs	r2, #104	; 0x68
 8006e22:	e759      	b.n	8006cd8 <USER_forward_axes_sense_Wakeup_Init+0x14c>
 8006e24:	20000269 	.word	0x20000269
 8006e28:	200003a0 	.word	0x200003a0
 8006e2c:	20000224 	.word	0x20000224
 8006e30:	2000026a 	.word	0x2000026a
 8006e34:	20000227 	.word	0x20000227
 8006e38:	20000379 	.word	0x20000379
 8006e3c:	20000229 	.word	0x20000229
 8006e40:	20000225 	.word	0x20000225
 8006e44:	20000228 	.word	0x20000228
 8006e48:	20000226 	.word	0x20000226
 8006e4c:	48000400 	.word	0x48000400
 8006e50:	20000378 	.word	0x20000378
 8006e54:	0800e9a0 	.word	0x0800e9a0
 8006e58:	20000510 	.word	0x20000510
 8006e5c:	20000234 	.word	0x20000234
 8006e60:	20000489 	.word	0x20000489
 8006e64:	2000048a 	.word	0x2000048a
 8006e68:	20000480 	.word	0x20000480
 8006e6c:	3d79db23 	.word	0x3d79db23
 8006e70:	2000047c 	.word	0x2000047c

08006e74 <USER_GET_Command>:
extern float mg_per_LSB,rtt_optimized;
extern uint16_t odr_xl_value,hbt,hat,harsh_accel_brake_function_wakeup_threshold;
extern enum Wakeup_Device_Mode device_mode;

void USER_GET_Command(void)
{
 8006e74:	b5f0      	push	{r4, r5, r6, r7, lr}


	uint8_t ctrl1_xl, wake_up_ths,wake_up_dur,tap_cfg,ctrl8_xl,sleep_dur;


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006e76:	2201      	movs	r2, #1
{
 8006e78:	b087      	sub	sp, #28
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	487e      	ldr	r0, [pc, #504]	; (8007078 <USER_GET_Command+0x204>)
 8006e7e:	f7fc f993 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8006e82:	2301      	movs	r3, #1
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\n",strlen("\r\n\r\n"))!=HAL_OK)
 8006e84:	4d7d      	ldr	r5, [pc, #500]	; (800707c <USER_GET_Command+0x208>)
	uarttx_req=1;
 8006e86:	4c7e      	ldr	r4, [pc, #504]	; (8007080 <USER_GET_Command+0x20c>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\n",strlen("\r\n\r\n"))!=HAL_OK)
 8006e88:	2204      	movs	r2, #4
 8006e8a:	497e      	ldr	r1, [pc, #504]	; (8007084 <USER_GET_Command+0x210>)
 8006e8c:	0028      	movs	r0, r5
	uarttx_req=1;
 8006e8e:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\n",strlen("\r\n\r\n"))!=HAL_OK)
 8006e90:	f7fd ff16 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d001      	beq.n	8006e9c <USER_GET_Command+0x28>
	{
		Error_Handler();
 8006e98:	f001 fd46 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8006e9c:	7823      	ldrb	r3, [r4, #0]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d0fc      	beq.n	8006e9c <USER_GET_Command+0x28>
	uarttx_req=1;
 8006ea2:	2301      	movs	r3, #1
	if(HAL_UART_Transmit_DMA(&huart3,instruction_final,strlen(instruction_final))!=HAL_OK)
 8006ea4:	4e78      	ldr	r6, [pc, #480]	; (8007088 <USER_GET_Command+0x214>)
	uarttx_req=1;
 8006ea6:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,instruction_final,strlen(instruction_final))!=HAL_OK)
 8006ea8:	0030      	movs	r0, r6
 8006eaa:	f7f9 f92b 	bl	8000104 <strlen>
 8006eae:	0031      	movs	r1, r6
 8006eb0:	b282      	uxth	r2, r0
 8006eb2:	0028      	movs	r0, r5
 8006eb4:	f7fd ff04 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d001      	beq.n	8006ec0 <USER_GET_Command+0x4c>
	{
		Error_Handler();
 8006ebc:	f001 fd34 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8006ec0:	7823      	ldrb	r3, [r4, #0]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d0fc      	beq.n	8006ec0 <USER_GET_Command+0x4c>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2102      	movs	r1, #2
 8006eca:	486b      	ldr	r0, [pc, #428]	; (8007078 <USER_GET_Command+0x204>)
 8006ecc:	f7fc f96c 	bl	80031a8 <HAL_GPIO_WritePin>


	if(!strncmp(instruction_final+4,"RTT",3))
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	496e      	ldr	r1, [pc, #440]	; (800708c <USER_GET_Command+0x218>)
 8006ed4:	486e      	ldr	r0, [pc, #440]	; (8007090 <USER_GET_Command+0x21c>)
 8006ed6:	f004 ff41 	bl	800bd5c <strncmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d12b      	bne.n	8006f36 <USER_GET_Command+0xc2>
	{
		sprintf(out_string,"\r\nRASH Turn Threshold is %d and Now it is Optimized to %d\r\n",rtt,(int8_t)rtt_optimized);
 8006ede:	4b6d      	ldr	r3, [pc, #436]	; (8007094 <USER_GET_Command+0x220>)
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	f7f9 ffe3 	bl	8000eac <__aeabi_f2iz>
 8006ee6:	4f6c      	ldr	r7, [pc, #432]	; (8007098 <USER_GET_Command+0x224>)
 8006ee8:	4a6c      	ldr	r2, [pc, #432]	; (800709c <USER_GET_Command+0x228>)
 8006eea:	b243      	sxtb	r3, r0
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	496c      	ldr	r1, [pc, #432]	; (80070a0 <USER_GET_Command+0x22c>)
 8006ef0:	0038      	movs	r0, r7
 8006ef2:	f004 ff09 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2102      	movs	r1, #2
 8006efa:	485f      	ldr	r0, [pc, #380]	; (8007078 <USER_GET_Command+0x204>)
 8006efc:	f7fc f954 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8006f00:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006f02:	0038      	movs	r0, r7
			uarttx_req=1;
 8006f04:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006f06:	f7f9 f8fd 	bl	8000104 <strlen>
 8006f0a:	0039      	movs	r1, r7
 8006f0c:	b282      	uxth	r2, r0
 8006f0e:	0028      	movs	r0, r5
 8006f10:	f7fd fed6 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d001      	beq.n	8006f1c <USER_GET_Command+0xa8>
			{
				Error_Handler();
 8006f18:	f001 fd06 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8006f1c:	7823      	ldrb	r3, [r4, #0]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d0fc      	beq.n	8006f1c <USER_GET_Command+0xa8>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006f22:	2200      	movs	r2, #0
 8006f24:	2102      	movs	r1, #2
 8006f26:	4854      	ldr	r0, [pc, #336]	; (8007078 <USER_GET_Command+0x204>)
 8006f28:	f7fc f93e 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8006f2c:	2219      	movs	r2, #25
 8006f2e:	2100      	movs	r1, #0
 8006f30:	0030      	movs	r0, r6
 8006f32:	f004 fee0 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"HAT",3))
 8006f36:	2203      	movs	r2, #3
 8006f38:	495a      	ldr	r1, [pc, #360]	; (80070a4 <USER_GET_Command+0x230>)
 8006f3a:	4855      	ldr	r0, [pc, #340]	; (8007090 <USER_GET_Command+0x21c>)
 8006f3c:	f004 ff0e 	bl	800bd5c <strncmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d128      	bne.n	8006f96 <USER_GET_Command+0x122>
	{
		sprintf(out_string,"\r\nHARSH Acceleration Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hat,harsh_accel_brake_function_wakeup_threshold);
 8006f44:	4f54      	ldr	r7, [pc, #336]	; (8007098 <USER_GET_Command+0x224>)
 8006f46:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <USER_GET_Command+0x234>)
 8006f48:	4a58      	ldr	r2, [pc, #352]	; (80070ac <USER_GET_Command+0x238>)
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	8812      	ldrh	r2, [r2, #0]
 8006f4e:	4958      	ldr	r1, [pc, #352]	; (80070b0 <USER_GET_Command+0x23c>)
 8006f50:	0038      	movs	r0, r7
 8006f52:	f004 fed9 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006f56:	2201      	movs	r2, #1
 8006f58:	2102      	movs	r1, #2
 8006f5a:	4847      	ldr	r0, [pc, #284]	; (8007078 <USER_GET_Command+0x204>)
 8006f5c:	f7fc f924 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8006f60:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006f62:	0038      	movs	r0, r7
		uarttx_req=1;
 8006f64:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006f66:	f7f9 f8cd 	bl	8000104 <strlen>
 8006f6a:	0039      	movs	r1, r7
 8006f6c:	b282      	uxth	r2, r0
 8006f6e:	0028      	movs	r0, r5
 8006f70:	f7fd fea6 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d001      	beq.n	8006f7c <USER_GET_Command+0x108>
		{
			Error_Handler();
 8006f78:	f001 fcd6 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8006f7c:	7823      	ldrb	r3, [r4, #0]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d0fc      	beq.n	8006f7c <USER_GET_Command+0x108>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006f82:	2200      	movs	r2, #0
 8006f84:	2102      	movs	r1, #2
 8006f86:	483c      	ldr	r0, [pc, #240]	; (8007078 <USER_GET_Command+0x204>)
 8006f88:	f7fc f90e 	bl	80031a8 <HAL_GPIO_WritePin>

		memset(instruction_final,0,25);
 8006f8c:	2219      	movs	r2, #25
 8006f8e:	2100      	movs	r1, #0
 8006f90:	0030      	movs	r0, r6
 8006f92:	f004 feb0 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"HBT",3))
 8006f96:	2203      	movs	r2, #3
 8006f98:	4946      	ldr	r1, [pc, #280]	; (80070b4 <USER_GET_Command+0x240>)
 8006f9a:	483d      	ldr	r0, [pc, #244]	; (8007090 <USER_GET_Command+0x21c>)
 8006f9c:	f004 fede 	bl	800bd5c <strncmp>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d128      	bne.n	8006ff6 <USER_GET_Command+0x182>
	{
		sprintf(out_string,"\r\nHARSH Brake Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hbt,harsh_accel_brake_function_wakeup_threshold);
 8006fa4:	4f3c      	ldr	r7, [pc, #240]	; (8007098 <USER_GET_Command+0x224>)
 8006fa6:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <USER_GET_Command+0x234>)
 8006fa8:	4a43      	ldr	r2, [pc, #268]	; (80070b8 <USER_GET_Command+0x244>)
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	8812      	ldrh	r2, [r2, #0]
 8006fae:	4943      	ldr	r1, [pc, #268]	; (80070bc <USER_GET_Command+0x248>)
 8006fb0:	0038      	movs	r0, r7
 8006fb2:	f004 fea9 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	2102      	movs	r1, #2
 8006fba:	482f      	ldr	r0, [pc, #188]	; (8007078 <USER_GET_Command+0x204>)
 8006fbc:	f7fc f8f4 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8006fc0:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006fc2:	0038      	movs	r0, r7
		uarttx_req=1;
 8006fc4:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8006fc6:	f7f9 f89d 	bl	8000104 <strlen>
 8006fca:	0039      	movs	r1, r7
 8006fcc:	b282      	uxth	r2, r0
 8006fce:	0028      	movs	r0, r5
 8006fd0:	f7fd fe76 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d001      	beq.n	8006fdc <USER_GET_Command+0x168>
		{
			Error_Handler();
 8006fd8:	f001 fca6 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8006fdc:	7823      	ldrb	r3, [r4, #0]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d0fc      	beq.n	8006fdc <USER_GET_Command+0x168>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	4824      	ldr	r0, [pc, #144]	; (8007078 <USER_GET_Command+0x204>)
 8006fe8:	f7fc f8de 	bl	80031a8 <HAL_GPIO_WritePin>

		memset(instruction_final,0,25);
 8006fec:	2219      	movs	r2, #25
 8006fee:	2100      	movs	r1, #0
 8006ff0:	0030      	movs	r0, r6
 8006ff2:	f004 fe80 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"TILT_THRESHOLD",14))
 8006ff6:	220e      	movs	r2, #14
 8006ff8:	4931      	ldr	r1, [pc, #196]	; (80070c0 <USER_GET_Command+0x24c>)
 8006ffa:	4825      	ldr	r0, [pc, #148]	; (8007090 <USER_GET_Command+0x21c>)
 8006ffc:	f004 feae 	bl	800bd5c <strncmp>
 8007000:	2800      	cmp	r0, #0
 8007002:	d126      	bne.n	8007052 <USER_GET_Command+0x1de>
	{
		sprintf(out_string,"\r\n Tilt Angle Threshold is %d degree\r\n",tilt_threshold);
 8007004:	4b2f      	ldr	r3, [pc, #188]	; (80070c4 <USER_GET_Command+0x250>)
 8007006:	4f24      	ldr	r7, [pc, #144]	; (8007098 <USER_GET_Command+0x224>)
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	492f      	ldr	r1, [pc, #188]	; (80070c8 <USER_GET_Command+0x254>)
 800700c:	0038      	movs	r0, r7
 800700e:	f004 fe7b 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007012:	2201      	movs	r2, #1
 8007014:	2102      	movs	r1, #2
 8007016:	4818      	ldr	r0, [pc, #96]	; (8007078 <USER_GET_Command+0x204>)
 8007018:	f7fc f8c6 	bl	80031a8 <HAL_GPIO_WritePin>


		uarttx_req=1;
 800701c:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800701e:	0038      	movs	r0, r7
		uarttx_req=1;
 8007020:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007022:	f7f9 f86f 	bl	8000104 <strlen>
 8007026:	0039      	movs	r1, r7
 8007028:	b282      	uxth	r2, r0
 800702a:	0028      	movs	r0, r5
 800702c:	f7fd fe48 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007030:	2800      	cmp	r0, #0
 8007032:	d001      	beq.n	8007038 <USER_GET_Command+0x1c4>
		{
			Error_Handler();
 8007034:	f001 fc78 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8007038:	7823      	ldrb	r3, [r4, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d0fc      	beq.n	8007038 <USER_GET_Command+0x1c4>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800703e:	2200      	movs	r2, #0
 8007040:	2102      	movs	r1, #2
 8007042:	480d      	ldr	r0, [pc, #52]	; (8007078 <USER_GET_Command+0x204>)
 8007044:	f7fc f8b0 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 8007048:	2219      	movs	r2, #25
 800704a:	2100      	movs	r1, #0
 800704c:	0030      	movs	r0, r6
 800704e:	f004 fe52 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"DEVICE_MODE",11))
 8007052:	220b      	movs	r2, #11
 8007054:	491d      	ldr	r1, [pc, #116]	; (80070cc <USER_GET_Command+0x258>)
 8007056:	480e      	ldr	r0, [pc, #56]	; (8007090 <USER_GET_Command+0x21c>)
 8007058:	f004 fe80 	bl	800bd5c <strncmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	d15f      	bne.n	8007120 <USER_GET_Command+0x2ac>
	{

		switch(device_mode)
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <USER_GET_Command+0x25c>)
 8007062:	4f0d      	ldr	r7, [pc, #52]	; (8007098 <USER_GET_Command+0x224>)
 8007064:	7818      	ldrb	r0, [r3, #0]

		break;
		case ORIENTATION:sprintf(out_string,"\r\nDevice in    ORIENTATION	Mode\r\n");

		break;
		default:sprintf(out_string,"\r\nSome Logical Error by DEVICE_MODE command\r\n");
 8007066:	491b      	ldr	r1, [pc, #108]	; (80070d4 <USER_GET_Command+0x260>)
		switch(device_mode)
 8007068:	2803      	cmp	r0, #3
 800706a:	d836      	bhi.n	80070da <USER_GET_Command+0x266>
 800706c:	f7f9 f866 	bl	800013c <__gnu_thumb1_case_uhi>
 8007070:	01bf0034 	.word	0x01bf0034
 8007074:	01c301c1 	.word	0x01c301c1
 8007078:	48000400 	.word	0x48000400
 800707c:	20000510 	.word	0x20000510
 8007080:	20000378 	.word	0x20000378
 8007084:	0800f999 	.word	0x0800f999
 8007088:	20000236 	.word	0x20000236
 800708c:	0800e9d7 	.word	0x0800e9d7
 8007090:	2000023a 	.word	0x2000023a
 8007094:	20000484 	.word	0x20000484
 8007098:	2000026b 	.word	0x2000026b
 800709c:	20000013 	.word	0x20000013
 80070a0:	0800e9db 	.word	0x0800e9db
 80070a4:	0800ea17 	.word	0x0800ea17
 80070a8:	2000000c 	.word	0x2000000c
 80070ac:	2000000e 	.word	0x2000000e
 80070b0:	0800ea1b 	.word	0x0800ea1b
 80070b4:	0800ea73 	.word	0x0800ea73
 80070b8:	20000010 	.word	0x20000010
 80070bc:	0800ea77 	.word	0x0800ea77
 80070c0:	0800eac8 	.word	0x0800eac8
 80070c4:	2000001a 	.word	0x2000001a
 80070c8:	0800ead7 	.word	0x0800ead7
 80070cc:	0800eafe 	.word	0x0800eafe
 80070d0:	2000048a 	.word	0x2000048a
 80070d4:	0800eb8e 	.word	0x0800eb8e
			sprintf(out_string,"\r\nDevice in    SLEEP	Mode\r\n");
 80070d8:	49c8      	ldr	r1, [pc, #800]	; (80073fc <USER_GET_Command+0x588>)
		default:sprintf(out_string,"\r\nSome Logical Error by DEVICE_MODE command\r\n");
 80070da:	0038      	movs	r0, r7
 80070dc:	f004 fe36 	bl	800bd4c <strcpy>
		}
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80070e0:	2201      	movs	r2, #1
 80070e2:	2102      	movs	r1, #2
 80070e4:	48c6      	ldr	r0, [pc, #792]	; (8007400 <USER_GET_Command+0x58c>)
 80070e6:	f7fc f85f 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80070ea:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80070ec:	0038      	movs	r0, r7
		uarttx_req=1;
 80070ee:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80070f0:	f7f9 f808 	bl	8000104 <strlen>
 80070f4:	0039      	movs	r1, r7
 80070f6:	b282      	uxth	r2, r0
 80070f8:	0028      	movs	r0, r5
 80070fa:	f7fd fde1 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d001      	beq.n	8007106 <USER_GET_Command+0x292>
		{
			Error_Handler();
 8007102:	f001 fc11 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8007106:	7823      	ldrb	r3, [r4, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d0fc      	beq.n	8007106 <USER_GET_Command+0x292>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800710c:	2200      	movs	r2, #0
 800710e:	2102      	movs	r1, #2
 8007110:	48bb      	ldr	r0, [pc, #748]	; (8007400 <USER_GET_Command+0x58c>)
 8007112:	f7fc f849 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 8007116:	2219      	movs	r2, #25
 8007118:	2100      	movs	r1, #0
 800711a:	0030      	movs	r0, r6
 800711c:	f004 fdeb 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"DEVICE_ORIENTATION",18))
 8007120:	2212      	movs	r2, #18
 8007122:	49b8      	ldr	r1, [pc, #736]	; (8007404 <USER_GET_Command+0x590>)
 8007124:	48b8      	ldr	r0, [pc, #736]	; (8007408 <USER_GET_Command+0x594>)
 8007126:	f004 fe19 	bl	800bd5c <strncmp>
 800712a:	2800      	cmp	r0, #0
 800712c:	d129      	bne.n	8007182 <USER_GET_Command+0x30e>
	{
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800712e:	2201      	movs	r2, #1
 8007130:	2102      	movs	r1, #2
 8007132:	48b3      	ldr	r0, [pc, #716]	; (8007400 <USER_GET_Command+0x58c>)
 8007134:	f7fc f838 	bl	80031a8 <HAL_GPIO_WritePin>

		if(gravity_axes	==	AXES_NOT_SET)
 8007138:	4bb4      	ldr	r3, [pc, #720]	; (800740c <USER_GET_Command+0x598>)
 800713a:	4eb5      	ldr	r6, [pc, #724]	; (8007410 <USER_GET_Command+0x59c>)
 800713c:	781f      	ldrb	r7, [r3, #0]
 800713e:	2f03      	cmp	r7, #3
 8007140:	d000      	beq.n	8007144 <USER_GET_Command+0x2d0>
 8007142:	e18f      	b.n	8007464 <USER_GET_Command+0x5f0>
		{

			sprintf(out_string,"\r\nReferance Value are 0 for All AXES of Accelerometer\r\nReferance Value are 0 for All AXES of Gyroscope\r\nReferance Tilt Angle are 0 for All AXES\r\n");
 8007144:	49b3      	ldr	r1, [pc, #716]	; (8007414 <USER_GET_Command+0x5a0>)
 8007146:	0030      	movs	r0, r6
 8007148:	f004 fe00 	bl	800bd4c <strcpy>

			uarttx_req=1;
 800714c:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800714e:	0030      	movs	r0, r6
			uarttx_req=1;
 8007150:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007152:	f7f8 ffd7 	bl	8000104 <strlen>
 8007156:	0031      	movs	r1, r6
 8007158:	b282      	uxth	r2, r0
 800715a:	0028      	movs	r0, r5
 800715c:	f7fd fdb0 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007160:	2800      	cmp	r0, #0
 8007162:	d001      	beq.n	8007168 <USER_GET_Command+0x2f4>
			{
				Error_Handler();
 8007164:	f001 fbe0 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8007168:	7823      	ldrb	r3, [r4, #0]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d0fc      	beq.n	8007168 <USER_GET_Command+0x2f4>
			while(uarttx_req==1);

		}


		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800716e:	2200      	movs	r2, #0
 8007170:	2102      	movs	r1, #2
 8007172:	48a3      	ldr	r0, [pc, #652]	; (8007400 <USER_GET_Command+0x58c>)
 8007174:	f7fc f818 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 8007178:	2219      	movs	r2, #25
 800717a:	2100      	movs	r1, #0
 800717c:	48a6      	ldr	r0, [pc, #664]	; (8007418 <USER_GET_Command+0x5a4>)
 800717e:	f004 fdba 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"SLEEP_DUR_DEVICE",16))
 8007182:	4da1      	ldr	r5, [pc, #644]	; (8007408 <USER_GET_Command+0x594>)
 8007184:	2210      	movs	r2, #16
 8007186:	49a5      	ldr	r1, [pc, #660]	; (800741c <USER_GET_Command+0x5a8>)
 8007188:	0028      	movs	r0, r5
 800718a:	f004 fde7 	bl	800bd5c <strncmp>
 800718e:	2800      	cmp	r0, #0
 8007190:	d127      	bne.n	80071e2 <USER_GET_Command+0x36e>
	{


		sprintf(out_string,"\r\n Duration for Device turn to Sleep Mode %d s\r\n",sleep_dur_device);
 8007192:	4ba3      	ldr	r3, [pc, #652]	; (8007420 <USER_GET_Command+0x5ac>)
 8007194:	4e9e      	ldr	r6, [pc, #632]	; (8007410 <USER_GET_Command+0x59c>)
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	49a2      	ldr	r1, [pc, #648]	; (8007424 <USER_GET_Command+0x5b0>)
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	0030      	movs	r0, r6
 800719e:	f004 fdb3 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80071a2:	2201      	movs	r2, #1
 80071a4:	2102      	movs	r1, #2
 80071a6:	4896      	ldr	r0, [pc, #600]	; (8007400 <USER_GET_Command+0x58c>)
 80071a8:	f7fb fffe 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80071ac:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80071ae:	0030      	movs	r0, r6
		uarttx_req=1;
 80071b0:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80071b2:	f7f8 ffa7 	bl	8000104 <strlen>
 80071b6:	0031      	movs	r1, r6
 80071b8:	b282      	uxth	r2, r0
 80071ba:	489b      	ldr	r0, [pc, #620]	; (8007428 <USER_GET_Command+0x5b4>)
 80071bc:	f7fd fd80 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d001      	beq.n	80071c8 <USER_GET_Command+0x354>
		{
			Error_Handler();
 80071c4:	f001 fbb0 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 80071c8:	7823      	ldrb	r3, [r4, #0]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d0fc      	beq.n	80071c8 <USER_GET_Command+0x354>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80071ce:	2200      	movs	r2, #0
 80071d0:	2102      	movs	r1, #2
 80071d2:	488b      	ldr	r0, [pc, #556]	; (8007400 <USER_GET_Command+0x58c>)
 80071d4:	f7fb ffe8 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 80071d8:	2219      	movs	r2, #25
 80071da:	2100      	movs	r1, #0
 80071dc:	488e      	ldr	r0, [pc, #568]	; (8007418 <USER_GET_Command+0x5a4>)
 80071de:	f004 fd8a 	bl	800bcf6 <memset>

	}

	if(!strncmp(instruction_final+4,"SLEEP_DUR",9))
 80071e2:	2209      	movs	r2, #9
 80071e4:	4991      	ldr	r1, [pc, #580]	; (800742c <USER_GET_Command+0x5b8>)
 80071e6:	0028      	movs	r0, r5
 80071e8:	f004 fdb8 	bl	800bd5c <strncmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d149      	bne.n	8007284 <USER_GET_Command+0x410>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80071f0:	260d      	movs	r6, #13
 80071f2:	2301      	movs	r3, #1
 80071f4:	aa02      	add	r2, sp, #8
		memrx=0;
 80071f6:	4f8e      	ldr	r7, [pc, #568]	; (8007430 <USER_GET_Command+0x5bc>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80071f8:	18b6      	adds	r6, r6, r2
		memrx=0;
 80071fa:	7038      	strb	r0, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80071fc:	225c      	movs	r2, #92	; 0x5c
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	9600      	str	r6, [sp, #0]
 8007202:	21d6      	movs	r1, #214	; 0xd6
 8007204:	488b      	ldr	r0, [pc, #556]	; (8007434 <USER_GET_Command+0x5c0>)
 8007206:	f7fc fa53 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800720a:	2800      	cmp	r0, #0
 800720c:	d001      	beq.n	8007212 <USER_GET_Command+0x39e>
		{
			Error_Handler();
 800720e:	f001 fb8b 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007212:	783b      	ldrb	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0fc      	beq.n	8007212 <USER_GET_Command+0x39e>


		sleep_dur=wake_up_dur&0x0f;
 8007218:	230f      	movs	r3, #15
 800721a:	7830      	ldrb	r0, [r6, #0]
 800721c:	4a86      	ldr	r2, [pc, #536]	; (8007438 <USER_GET_Command+0x5c4>)
 800721e:	4018      	ands	r0, r3


		sprintf(out_string,"\r\n Duration for Inactivity detection is %d ms\r\n",sleep_dur==0 && who_am_i==0x6a?16000/odr_xl_value:(int)sleep_dur*512*1000/odr_xl_value);
 8007220:	d000      	beq.n	8007224 <USER_GET_Command+0x3b0>
 8007222:	e223      	b.n	800766c <USER_GET_Command+0x7f8>
 8007224:	4b85      	ldr	r3, [pc, #532]	; (800743c <USER_GET_Command+0x5c8>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b6a      	cmp	r3, #106	; 0x6a
 800722a:	d000      	beq.n	800722e <USER_GET_Command+0x3ba>
 800722c:	e21e      	b.n	800766c <USER_GET_Command+0x7f8>
 800722e:	20fa      	movs	r0, #250	; 0xfa
 8007230:	8811      	ldrh	r1, [r2, #0]
 8007232:	0180      	lsls	r0, r0, #6
 8007234:	f7f9 f816 	bl	8000264 <__divsi3>
 8007238:	4e75      	ldr	r6, [pc, #468]	; (8007410 <USER_GET_Command+0x59c>)
 800723a:	0002      	movs	r2, r0
 800723c:	4980      	ldr	r1, [pc, #512]	; (8007440 <USER_GET_Command+0x5cc>)
 800723e:	0030      	movs	r0, r6
 8007240:	f004 fd62 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007244:	2201      	movs	r2, #1
 8007246:	2102      	movs	r1, #2
 8007248:	486d      	ldr	r0, [pc, #436]	; (8007400 <USER_GET_Command+0x58c>)
 800724a:	f7fb ffad 	bl	80031a8 <HAL_GPIO_WritePin>


		uarttx_req=1;
 800724e:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007250:	0030      	movs	r0, r6
		uarttx_req=1;
 8007252:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007254:	f7f8 ff56 	bl	8000104 <strlen>
 8007258:	0031      	movs	r1, r6
 800725a:	b282      	uxth	r2, r0
 800725c:	4872      	ldr	r0, [pc, #456]	; (8007428 <USER_GET_Command+0x5b4>)
 800725e:	f7fd fd2f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007262:	2800      	cmp	r0, #0
 8007264:	d001      	beq.n	800726a <USER_GET_Command+0x3f6>
		{
			Error_Handler();
 8007266:	f001 fb5f 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 800726a:	7823      	ldrb	r3, [r4, #0]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d0fc      	beq.n	800726a <USER_GET_Command+0x3f6>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007270:	2200      	movs	r2, #0
 8007272:	2102      	movs	r1, #2
 8007274:	4862      	ldr	r0, [pc, #392]	; (8007400 <USER_GET_Command+0x58c>)
 8007276:	f7fb ff97 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 800727a:	2219      	movs	r2, #25
 800727c:	2100      	movs	r1, #0
 800727e:	4866      	ldr	r0, [pc, #408]	; (8007418 <USER_GET_Command+0x5a4>)
 8007280:	f004 fd39 	bl	800bcf6 <memset>





	if(!strncmp(instruction_final+4,"FILTER_CUTOFF",13))
 8007284:	220d      	movs	r2, #13
 8007286:	496f      	ldr	r1, [pc, #444]	; (8007444 <USER_GET_Command+0x5d0>)
 8007288:	0028      	movs	r0, r5
 800728a:	f004 fd67 	bl	800bd5c <strncmp>
 800728e:	2800      	cmp	r0, #0
 8007290:	d11e      	bne.n	80072d0 <USER_GET_Command+0x45c>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8007292:	260f      	movs	r6, #15
 8007294:	2301      	movs	r3, #1
 8007296:	aa02      	add	r2, sp, #8
		memrx=0;
 8007298:	4f65      	ldr	r7, [pc, #404]	; (8007430 <USER_GET_Command+0x5bc>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 800729a:	18b6      	adds	r6, r6, r2
		memrx=0;
 800729c:	7038      	strb	r0, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 800729e:	2217      	movs	r2, #23
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	9600      	str	r6, [sp, #0]
 80072a4:	21d6      	movs	r1, #214	; 0xd6
 80072a6:	4863      	ldr	r0, [pc, #396]	; (8007434 <USER_GET_Command+0x5c0>)
 80072a8:	f7fc fa02 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d001      	beq.n	80072b4 <USER_GET_Command+0x440>
		{
			Error_Handler();
 80072b0:	f001 fb3a 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80072b4:	783b      	ldrb	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0fc      	beq.n	80072b4 <USER_GET_Command+0x440>



		switch(ctrl8_xl&0b01100000)
 80072ba:	2260      	movs	r2, #96	; 0x60
 80072bc:	7833      	ldrb	r3, [r6, #0]
 80072be:	4013      	ands	r3, r2
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d100      	bne.n	80072c6 <USER_GET_Command+0x452>
 80072c4:	e228      	b.n	8007718 <USER_GET_Command+0x8a4>
 80072c6:	d900      	bls.n	80072ca <USER_GET_Command+0x456>
 80072c8:	e1d5      	b.n	8007676 <USER_GET_Command+0x802>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d100      	bne.n	80072d0 <USER_GET_Command+0x45c>
 80072ce:	e1fa      	b.n	80076c6 <USER_GET_Command+0x852>

		}

	}

	if(!strncmp(instruction_final+4,"FILTER",6))
 80072d0:	2206      	movs	r2, #6
 80072d2:	495d      	ldr	r1, [pc, #372]	; (8007448 <USER_GET_Command+0x5d4>)
 80072d4:	0028      	movs	r0, r5
 80072d6:	f004 fd41 	bl	800bd5c <strncmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d155      	bne.n	800738a <USER_GET_Command+0x516>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 80072de:	260e      	movs	r6, #14
 80072e0:	2301      	movs	r3, #1
 80072e2:	aa02      	add	r2, sp, #8
		memrx=0;
 80072e4:	4f52      	ldr	r7, [pc, #328]	; (8007430 <USER_GET_Command+0x5bc>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 80072e6:	18b6      	adds	r6, r6, r2
		memrx=0;
 80072e8:	7038      	strb	r0, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 80072ea:	2258      	movs	r2, #88	; 0x58
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	9600      	str	r6, [sp, #0]
 80072f0:	21d6      	movs	r1, #214	; 0xd6
 80072f2:	4850      	ldr	r0, [pc, #320]	; (8007434 <USER_GET_Command+0x5c0>)
 80072f4:	f7fc f9dc 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d001      	beq.n	8007300 <USER_GET_Command+0x48c>
		{
			Error_Handler();
 80072fc:	f001 fb14 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007300:	783b      	ldrb	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0fc      	beq.n	8007300 <USER_GET_Command+0x48c>
		tap_cfg&=0b00010000;
 8007306:	2210      	movs	r2, #16
 8007308:	7833      	ldrb	r3, [r6, #0]
 800730a:	4013      	ands	r3, r2
 800730c:	7033      	strb	r3, [r6, #0]


		if(tap_cfg==0)
 800730e:	d11c      	bne.n	800734a <USER_GET_Command+0x4d6>
		{

			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007310:	3a0f      	subs	r2, #15
 8007312:	2102      	movs	r1, #2
 8007314:	483a      	ldr	r0, [pc, #232]	; (8007400 <USER_GET_Command+0x58c>)
 8007316:	f7fb ff47 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800731a:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the slope filter \r\n",strlen("\r\nthe wake-up feature implemented using the slope filter \r\n"))!=HAL_OK)
 800731c:	223b      	movs	r2, #59	; 0x3b
 800731e:	494b      	ldr	r1, [pc, #300]	; (800744c <USER_GET_Command+0x5d8>)
 8007320:	4841      	ldr	r0, [pc, #260]	; (8007428 <USER_GET_Command+0x5b4>)
			uarttx_req=1;
 8007322:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the slope filter \r\n",strlen("\r\nthe wake-up feature implemented using the slope filter \r\n"))!=HAL_OK)
 8007324:	f7fd fccc 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007328:	2800      	cmp	r0, #0
 800732a:	d001      	beq.n	8007330 <USER_GET_Command+0x4bc>
			{
				Error_Handler();
 800732c:	f001 fafc 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8007330:	7823      	ldrb	r3, [r4, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d0fc      	beq.n	8007330 <USER_GET_Command+0x4bc>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007336:	2200      	movs	r2, #0
 8007338:	2102      	movs	r1, #2
 800733a:	4831      	ldr	r0, [pc, #196]	; (8007400 <USER_GET_Command+0x58c>)
 800733c:	f7fb ff34 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8007340:	2219      	movs	r2, #25
 8007342:	2100      	movs	r1, #0
 8007344:	4834      	ldr	r0, [pc, #208]	; (8007418 <USER_GET_Command+0x5a4>)
 8007346:	f004 fcd6 	bl	800bcf6 <memset>

		}
		if(tap_cfg==0b00010000)
 800734a:	7833      	ldrb	r3, [r6, #0]
 800734c:	2b10      	cmp	r3, #16
 800734e:	d11c      	bne.n	800738a <USER_GET_Command+0x516>
		{

			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007350:	2201      	movs	r2, #1
 8007352:	2102      	movs	r1, #2
 8007354:	482a      	ldr	r0, [pc, #168]	; (8007400 <USER_GET_Command+0x58c>)
 8007356:	f7fb ff27 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800735a:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the High-Pass  filter\r\n",strlen("\r\nthe wake-up feature implemented using the High-Pass  filter\r\n"))!=HAL_OK)
 800735c:	223f      	movs	r2, #63	; 0x3f
 800735e:	493c      	ldr	r1, [pc, #240]	; (8007450 <USER_GET_Command+0x5dc>)
 8007360:	4831      	ldr	r0, [pc, #196]	; (8007428 <USER_GET_Command+0x5b4>)
			uarttx_req=1;
 8007362:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the High-Pass  filter\r\n",strlen("\r\nthe wake-up feature implemented using the High-Pass  filter\r\n"))!=HAL_OK)
 8007364:	f7fd fcac 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007368:	2800      	cmp	r0, #0
 800736a:	d001      	beq.n	8007370 <USER_GET_Command+0x4fc>
			{
				Error_Handler();
 800736c:	f001 fadc 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8007370:	7823      	ldrb	r3, [r4, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d0fc      	beq.n	8007370 <USER_GET_Command+0x4fc>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007376:	2200      	movs	r2, #0
 8007378:	2102      	movs	r1, #2
 800737a:	4821      	ldr	r0, [pc, #132]	; (8007400 <USER_GET_Command+0x58c>)
 800737c:	f7fb ff14 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8007380:	2219      	movs	r2, #25
 8007382:	2100      	movs	r1, #0
 8007384:	4824      	ldr	r0, [pc, #144]	; (8007418 <USER_GET_Command+0x5a4>)
 8007386:	f004 fcb6 	bl	800bcf6 <memset>
		}


	}

	if(!strncmp(instruction_final+4,"ACCEL_SCALE",11))
 800738a:	220b      	movs	r2, #11
 800738c:	4931      	ldr	r1, [pc, #196]	; (8007454 <USER_GET_Command+0x5e0>)
 800738e:	0028      	movs	r0, r5
 8007390:	f004 fce4 	bl	800bd5c <strncmp>
 8007394:	2800      	cmp	r0, #0
 8007396:	d000      	beq.n	800739a <USER_GET_Command+0x526>
 8007398:	e245      	b.n	8007826 <USER_GET_Command+0x9b2>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800739a:	260b      	movs	r6, #11
 800739c:	2301      	movs	r3, #1
 800739e:	aa02      	add	r2, sp, #8
		memrx=0;
 80073a0:	4f23      	ldr	r7, [pc, #140]	; (8007430 <USER_GET_Command+0x5bc>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 80073a2:	18b6      	adds	r6, r6, r2
		memrx=0;
 80073a4:	7038      	strb	r0, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 80073a6:	2210      	movs	r2, #16
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	9600      	str	r6, [sp, #0]
 80073ac:	21d6      	movs	r1, #214	; 0xd6
 80073ae:	4821      	ldr	r0, [pc, #132]	; (8007434 <USER_GET_Command+0x5c0>)
 80073b0:	f7fc f97e 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d001      	beq.n	80073bc <USER_GET_Command+0x548>
		{
			Error_Handler();
 80073b8:	f001 fab6 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80073bc:	783b      	ldrb	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0fc      	beq.n	80073bc <USER_GET_Command+0x548>

		ctrl1_xl&=0b1100;
 80073c2:	230c      	movs	r3, #12
 80073c4:	7830      	ldrb	r0, [r6, #0]
 80073c6:	4018      	ands	r0, r3
 80073c8:	7030      	strb	r0, [r6, #0]



		switch(ctrl1_xl)
 80073ca:	4298      	cmp	r0, r3
 80073cc:	d900      	bls.n	80073d0 <USER_GET_Command+0x55c>
 80073ce:	e22a      	b.n	8007826 <USER_GET_Command+0x9b2>
 80073d0:	f7f8 feb4 	bl	800013c <__gnu_thumb1_case_uhi>
 80073d4:	0229020c 	.word	0x0229020c
 80073d8:	02290229 	.word	0x02290229
 80073dc:	02290322 	.word	0x02290322
 80073e0:	02290229 	.word	0x02290229
 80073e4:	022902f4 	.word	0x022902f4
 80073e8:	02290229 	.word	0x02290229
 80073ec:	030b      	.short	0x030b
		case FORWARD_AXIS:sprintf(out_string,"\r\nDevice in    FORWARD AXES	Mode\r\n");
 80073ee:	491a      	ldr	r1, [pc, #104]	; (8007458 <USER_GET_Command+0x5e4>)
 80073f0:	e673      	b.n	80070da <USER_GET_Command+0x266>
		case ACCELERATION:sprintf(out_string,"\r\nDevice in    ACCELERATION	Mode\r\n");
 80073f2:	491a      	ldr	r1, [pc, #104]	; (800745c <USER_GET_Command+0x5e8>)
 80073f4:	e671      	b.n	80070da <USER_GET_Command+0x266>
		case ORIENTATION:sprintf(out_string,"\r\nDevice in    ORIENTATION	Mode\r\n");
 80073f6:	491a      	ldr	r1, [pc, #104]	; (8007460 <USER_GET_Command+0x5ec>)
 80073f8:	e66f      	b.n	80070da <USER_GET_Command+0x266>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	0800eb0a 	.word	0x0800eb0a
 8007400:	48000400 	.word	0x48000400
 8007404:	0800ebbc 	.word	0x0800ebbc
 8007408:	2000023a 	.word	0x2000023a
 800740c:	20000009 	.word	0x20000009
 8007410:	2000026b 	.word	0x2000026b
 8007414:	0800ebcf 	.word	0x0800ebcf
 8007418:	20000236 	.word	0x20000236
 800741c:	0800eea8 	.word	0x0800eea8
 8007420:	20000018 	.word	0x20000018
 8007424:	0800eeb9 	.word	0x0800eeb9
 8007428:	20000510 	.word	0x20000510
 800742c:	0800eeea 	.word	0x0800eeea
 8007430:	20000269 	.word	0x20000269
 8007434:	200003a0 	.word	0x200003a0
 8007438:	20000480 	.word	0x20000480
 800743c:	20000379 	.word	0x20000379
 8007440:	0800eef4 	.word	0x0800eef4
 8007444:	0800ef24 	.word	0x0800ef24
 8007448:	0800ef8a 	.word	0x0800ef8a
 800744c:	0800ef91 	.word	0x0800ef91
 8007450:	0800efcd 	.word	0x0800efcd
 8007454:	0800f00d 	.word	0x0800f00d
 8007458:	0800eb26 	.word	0x0800eb26
 800745c:	0800eb49 	.word	0x0800eb49
 8007460:	0800eb6c 	.word	0x0800eb6c
		else if(gravity_axes	!=	AXES_NOT_SET	&&	forward_axes == AXES_NOT_SET)
 8007464:	4bce      	ldr	r3, [pc, #824]	; (80077a0 <USER_GET_Command+0x92c>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d000      	beq.n	8007470 <USER_GET_Command+0x5fc>
 800746e:	e088      	b.n	8007582 <USER_GET_Command+0x70e>
			sprintf(out_string,"\r\n X - 0	Y - 1	Z - 2 \r\nForward / side axes 1 of Accelerometer is %d and forward / Side axes 2 is  %d Gravity axes is %d\r\n",(gravity_axes+1)%3,(gravity_axes+2)%3,gravity_axes);
 8007470:	0019      	movs	r1, r3
 8007472:	1cb8      	adds	r0, r7, #2
 8007474:	f7f8 ffdc 	bl	8000430 <__aeabi_idivmod>
 8007478:	1c78      	adds	r0, r7, #1
 800747a:	9103      	str	r1, [sp, #12]
 800747c:	9902      	ldr	r1, [sp, #8]
 800747e:	f7f8 ffd7 	bl	8000430 <__aeabi_idivmod>
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	000a      	movs	r2, r1
 8007486:	9700      	str	r7, [sp, #0]
 8007488:	49c6      	ldr	r1, [pc, #792]	; (80077a4 <USER_GET_Command+0x930>)
 800748a:	0030      	movs	r0, r6
 800748c:	f004 fc3c 	bl	800bd08 <siprintf>
			uarttx_req=1;
 8007490:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007492:	0030      	movs	r0, r6
			uarttx_req=1;
 8007494:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007496:	f7f8 fe35 	bl	8000104 <strlen>
 800749a:	0031      	movs	r1, r6
 800749c:	b282      	uxth	r2, r0
 800749e:	0028      	movs	r0, r5
 80074a0:	f7fd fc0e 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d001      	beq.n	80074ac <USER_GET_Command+0x638>
				Error_Handler();
 80074a8:	f001 fa3e 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80074ac:	7823      	ldrb	r3, [r4, #0]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d0fc      	beq.n	80074ac <USER_GET_Command+0x638>
			sprintf(out_string,"\r\nReferance Value of Gravity axes = %d , Forward / Side axes 1 = %d , Forward / Side axes 2 = %d\r\n",xl_axes_ref[gravity_axes],xl_axes_ref[(gravity_axes+1)%3],xl_axes_ref[(gravity_axes+2)%3]);
 80074b2:	4bbd      	ldr	r3, [pc, #756]	; (80077a8 <USER_GET_Command+0x934>)
 80074b4:	2103      	movs	r1, #3
 80074b6:	781d      	ldrb	r5, [r3, #0]
 80074b8:	4fbc      	ldr	r7, [pc, #752]	; (80077ac <USER_GET_Command+0x938>)
 80074ba:	1c68      	adds	r0, r5, #1
 80074bc:	f7f8 ffb8 	bl	8000430 <__aeabi_idivmod>
 80074c0:	0049      	lsls	r1, r1, #1
 80074c2:	5fcb      	ldrsh	r3, [r1, r7]
 80074c4:	1ca8      	adds	r0, r5, #2
 80074c6:	9302      	str	r3, [sp, #8]
 80074c8:	006b      	lsls	r3, r5, #1
 80074ca:	5fdb      	ldrsh	r3, [r3, r7]
 80074cc:	2103      	movs	r1, #3
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	f7f8 ffae 	bl	8000430 <__aeabi_idivmod>
 80074d4:	0049      	lsls	r1, r1, #1
 80074d6:	5fcb      	ldrsh	r3, [r1, r7]
 80074d8:	4eb5      	ldr	r6, [pc, #724]	; (80077b0 <USER_GET_Command+0x93c>)
 80074da:	9a03      	ldr	r2, [sp, #12]
 80074dc:	49b5      	ldr	r1, [pc, #724]	; (80077b4 <USER_GET_Command+0x940>)
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	0030      	movs	r0, r6
 80074e2:	9b02      	ldr	r3, [sp, #8]
 80074e4:	f004 fc10 	bl	800bd08 <siprintf>
			uarttx_req=1;
 80074e8:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80074ea:	0030      	movs	r0, r6
			uarttx_req=1;
 80074ec:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80074ee:	f7f8 fe09 	bl	8000104 <strlen>
 80074f2:	0031      	movs	r1, r6
 80074f4:	b282      	uxth	r2, r0
 80074f6:	48b0      	ldr	r0, [pc, #704]	; (80077b8 <USER_GET_Command+0x944>)
 80074f8:	f7fd fbe2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d001      	beq.n	8007504 <USER_GET_Command+0x690>
				Error_Handler();
 8007500:	f001 fa12 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007504:	7823      	ldrb	r3, [r4, #0]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d0fc      	beq.n	8007504 <USER_GET_Command+0x690>
			sprintf(out_string,"\r\nReferance of Gravity Angle = %d , Forward / Side Angle 1 = %d , Forward / Side Angle 2 = %d\r\n",(int16_t)referance_tilt_angle[gravity_axes],(int16_t)referance_tilt_angle[(gravity_axes+1)%3],(int16_t)referance_tilt_angle[(gravity_axes+2)%3]);
 800750a:	4ba7      	ldr	r3, [pc, #668]	; (80077a8 <USER_GET_Command+0x934>)
 800750c:	2103      	movs	r1, #3
 800750e:	781e      	ldrb	r6, [r3, #0]
 8007510:	4daa      	ldr	r5, [pc, #680]	; (80077bc <USER_GET_Command+0x948>)
 8007512:	1c70      	adds	r0, r6, #1
 8007514:	f7f8 ff8c 	bl	8000430 <__aeabi_idivmod>
 8007518:	00c9      	lsls	r1, r1, #3
 800751a:	1869      	adds	r1, r5, r1
 800751c:	6808      	ldr	r0, [r1, #0]
 800751e:	6849      	ldr	r1, [r1, #4]
 8007520:	f7fb fa74 	bl	8002a0c <__aeabi_d2iz>
 8007524:	b203      	sxth	r3, r0
 8007526:	9302      	str	r3, [sp, #8]
 8007528:	00f3      	lsls	r3, r6, #3
 800752a:	18eb      	adds	r3, r5, r3
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	6859      	ldr	r1, [r3, #4]
 8007530:	f7fb fa6c 	bl	8002a0c <__aeabi_d2iz>
 8007534:	2103      	movs	r1, #3
 8007536:	b203      	sxth	r3, r0
 8007538:	1cb0      	adds	r0, r6, #2
 800753a:	9303      	str	r3, [sp, #12]
 800753c:	f7f8 ff78 	bl	8000430 <__aeabi_idivmod>
 8007540:	00c9      	lsls	r1, r1, #3
 8007542:	186d      	adds	r5, r5, r1
 8007544:	6828      	ldr	r0, [r5, #0]
 8007546:	6869      	ldr	r1, [r5, #4]
 8007548:	f7fb fa60 	bl	8002a0c <__aeabi_d2iz>
 800754c:	4f98      	ldr	r7, [pc, #608]	; (80077b0 <USER_GET_Command+0x93c>)
 800754e:	b200      	sxth	r0, r0
 8007550:	9a03      	ldr	r2, [sp, #12]
 8007552:	499b      	ldr	r1, [pc, #620]	; (80077c0 <USER_GET_Command+0x94c>)
 8007554:	9000      	str	r0, [sp, #0]
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	0038      	movs	r0, r7
 800755a:	f004 fbd5 	bl	800bd08 <siprintf>
			uarttx_req=1;
 800755e:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007560:	0038      	movs	r0, r7
			uarttx_req=1;
 8007562:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007564:	f7f8 fdce 	bl	8000104 <strlen>
 8007568:	0039      	movs	r1, r7
 800756a:	b282      	uxth	r2, r0
 800756c:	4892      	ldr	r0, [pc, #584]	; (80077b8 <USER_GET_Command+0x944>)
 800756e:	f7fd fba7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007572:	2800      	cmp	r0, #0
 8007574:	d001      	beq.n	800757a <USER_GET_Command+0x706>
				Error_Handler();
 8007576:	f001 f9d7 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 800757a:	7823      	ldrb	r3, [r4, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d0fc      	beq.n	800757a <USER_GET_Command+0x706>
 8007580:	e5f5      	b.n	800716e <USER_GET_Command+0x2fa>
			sprintf(out_string,"\r\n X - 0	Y - 1	Z - 2 \r\nForward axes of Accelerometer is %d and  Side axes is  %d Gravity axes is %d\r\n",forward_axes,side_axes,gravity_axes);
 8007582:	4b90      	ldr	r3, [pc, #576]	; (80077c4 <USER_GET_Command+0x950>)
 8007584:	9a02      	ldr	r2, [sp, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	498f      	ldr	r1, [pc, #572]	; (80077c8 <USER_GET_Command+0x954>)
 800758a:	9700      	str	r7, [sp, #0]
 800758c:	0030      	movs	r0, r6
 800758e:	f004 fbbb 	bl	800bd08 <siprintf>
			uarttx_req=1;
 8007592:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007594:	0030      	movs	r0, r6
			uarttx_req=1;
 8007596:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007598:	f7f8 fdb4 	bl	8000104 <strlen>
 800759c:	0031      	movs	r1, r6
 800759e:	b282      	uxth	r2, r0
 80075a0:	0028      	movs	r0, r5
 80075a2:	f7fd fb8d 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d001      	beq.n	80075ae <USER_GET_Command+0x73a>
				Error_Handler();
 80075aa:	f001 f9bd 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80075ae:	7823      	ldrb	r3, [r4, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d0fc      	beq.n	80075ae <USER_GET_Command+0x73a>
			sprintf(out_string," \r\n Reference Values of Accelerometer	Forward axis = %d		Side axis = %d	Gravity axis = %d \r\n",*(xl_axes_ref+forward_axes),*(xl_axes_ref+side_axes),*(xl_axes_ref+gravity_axes));
 80075b4:	4b83      	ldr	r3, [pc, #524]	; (80077c4 <USER_GET_Command+0x950>)
 80075b6:	487d      	ldr	r0, [pc, #500]	; (80077ac <USER_GET_Command+0x938>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4e7d      	ldr	r6, [pc, #500]	; (80077b0 <USER_GET_Command+0x93c>)
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	5ec3      	ldrsh	r3, [r0, r3]
 80075c0:	4a77      	ldr	r2, [pc, #476]	; (80077a0 <USER_GET_Command+0x92c>)
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	0052      	lsls	r2, r2, #1
 80075c6:	5e82      	ldrsh	r2, [r0, r2]
 80075c8:	4977      	ldr	r1, [pc, #476]	; (80077a8 <USER_GET_Command+0x934>)
 80075ca:	7809      	ldrb	r1, [r1, #0]
 80075cc:	0049      	lsls	r1, r1, #1
 80075ce:	5e41      	ldrsh	r1, [r0, r1]
 80075d0:	0030      	movs	r0, r6
 80075d2:	9100      	str	r1, [sp, #0]
 80075d4:	497d      	ldr	r1, [pc, #500]	; (80077cc <USER_GET_Command+0x958>)
 80075d6:	f004 fb97 	bl	800bd08 <siprintf>
			uarttx_req=1;
 80075da:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80075dc:	0030      	movs	r0, r6
			uarttx_req=1;
 80075de:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80075e0:	f7f8 fd90 	bl	8000104 <strlen>
 80075e4:	0031      	movs	r1, r6
 80075e6:	b282      	uxth	r2, r0
 80075e8:	0028      	movs	r0, r5
 80075ea:	f7fd fb69 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	d001      	beq.n	80075f6 <USER_GET_Command+0x782>
				Error_Handler();
 80075f2:	f001 f999 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80075f6:	7823      	ldrb	r3, [r4, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d0fc      	beq.n	80075f6 <USER_GET_Command+0x782>
			sprintf(out_string,"\r\nReferance of Forward Angle = %d	Side Angle = %d	Gravity Angle = %d\r\n",(int16_t)referance_tilt_angle_Optimized[forward_axes],(int16_t)referance_tilt_angle_Optimized[side_axes],(int16_t)referance_tilt_angle_Optimized[gravity_axes]);
 80075fc:	4b71      	ldr	r3, [pc, #452]	; (80077c4 <USER_GET_Command+0x950>)
 80075fe:	4e74      	ldr	r6, [pc, #464]	; (80077d0 <USER_GET_Command+0x95c>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	18f3      	adds	r3, r6, r3
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	6859      	ldr	r1, [r3, #4]
 800760a:	f7fb f9ff 	bl	8002a0c <__aeabi_d2iz>
 800760e:	b203      	sxth	r3, r0
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	4b63      	ldr	r3, [pc, #396]	; (80077a0 <USER_GET_Command+0x92c>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	18f3      	adds	r3, r6, r3
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	f7fb f9f5 	bl	8002a0c <__aeabi_d2iz>
 8007622:	b203      	sxth	r3, r0
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	4b60      	ldr	r3, [pc, #384]	; (80077a8 <USER_GET_Command+0x934>)
 8007628:	4f61      	ldr	r7, [pc, #388]	; (80077b0 <USER_GET_Command+0x93c>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	18f6      	adds	r6, r6, r3
 8007630:	6830      	ldr	r0, [r6, #0]
 8007632:	6871      	ldr	r1, [r6, #4]
 8007634:	f7fb f9ea 	bl	8002a0c <__aeabi_d2iz>
 8007638:	b200      	sxth	r0, r0
 800763a:	9a03      	ldr	r2, [sp, #12]
 800763c:	4965      	ldr	r1, [pc, #404]	; (80077d4 <USER_GET_Command+0x960>)
 800763e:	9000      	str	r0, [sp, #0]
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	0038      	movs	r0, r7
 8007644:	f004 fb60 	bl	800bd08 <siprintf>
			uarttx_req=1;
 8007648:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800764a:	0038      	movs	r0, r7
			uarttx_req=1;
 800764c:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800764e:	f7f8 fd59 	bl	8000104 <strlen>
 8007652:	0039      	movs	r1, r7
 8007654:	b282      	uxth	r2, r0
 8007656:	0028      	movs	r0, r5
 8007658:	f7fd fb32 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800765c:	2800      	cmp	r0, #0
 800765e:	d001      	beq.n	8007664 <USER_GET_Command+0x7f0>
				Error_Handler();
 8007660:	f001 f962 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007664:	7823      	ldrb	r3, [r4, #0]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d0fc      	beq.n	8007664 <USER_GET_Command+0x7f0>
 800766a:	e580      	b.n	800716e <USER_GET_Command+0x2fa>
		sprintf(out_string,"\r\n Duration for Inactivity detection is %d ms\r\n",sleep_dur==0 && who_am_i==0x6a?16000/odr_xl_value:(int)sleep_dur*512*1000/odr_xl_value);
 800766c:	23fa      	movs	r3, #250	; 0xfa
 800766e:	02db      	lsls	r3, r3, #11
 8007670:	4358      	muls	r0, r3
 8007672:	8811      	ldrh	r1, [r2, #0]
 8007674:	e5de      	b.n	8007234 <USER_GET_Command+0x3c0>
		switch(ctrl8_xl&0b01100000)
 8007676:	2b40      	cmp	r3, #64	; 0x40
 8007678:	d070      	beq.n	800775c <USER_GET_Command+0x8e8>
 800767a:	2b60      	cmp	r3, #96	; 0x60
 800767c:	d000      	beq.n	8007680 <USER_GET_Command+0x80c>
 800767e:	e627      	b.n	80072d0 <USER_GET_Command+0x45c>
			sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/400);
 8007680:	21c8      	movs	r1, #200	; 0xc8
 8007682:	4b55      	ldr	r3, [pc, #340]	; (80077d8 <USER_GET_Command+0x964>)
 8007684:	0049      	lsls	r1, r1, #1
 8007686:	8818      	ldrh	r0, [r3, #0]
 8007688:	f7f8 fd62 	bl	8000150 <__udivsi3>
 800768c:	4e48      	ldr	r6, [pc, #288]	; (80077b0 <USER_GET_Command+0x93c>)
 800768e:	b282      	uxth	r2, r0
 8007690:	4952      	ldr	r1, [pc, #328]	; (80077dc <USER_GET_Command+0x968>)
 8007692:	0030      	movs	r0, r6
 8007694:	f004 fb38 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007698:	2201      	movs	r2, #1
 800769a:	2102      	movs	r1, #2
 800769c:	4850      	ldr	r0, [pc, #320]	; (80077e0 <USER_GET_Command+0x96c>)
 800769e:	f7fb fd83 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80076a2:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80076a4:	0030      	movs	r0, r6
			uarttx_req=1;
 80076a6:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80076a8:	f7f8 fd2c 	bl	8000104 <strlen>
 80076ac:	0031      	movs	r1, r6
 80076ae:	b282      	uxth	r2, r0
 80076b0:	4841      	ldr	r0, [pc, #260]	; (80077b8 <USER_GET_Command+0x944>)
 80076b2:	f7fd fb05 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d001      	beq.n	80076be <USER_GET_Command+0x84a>
				Error_Handler();
 80076ba:	f001 f935 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80076be:	7823      	ldrb	r3, [r4, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d0fc      	beq.n	80076be <USER_GET_Command+0x84a>
 80076c4:	e01d      	b.n	8007702 <USER_GET_Command+0x88e>
			sprintf(out_string,"\r\nSlope Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/4);
 80076c6:	4b44      	ldr	r3, [pc, #272]	; (80077d8 <USER_GET_Command+0x964>)
 80076c8:	4e39      	ldr	r6, [pc, #228]	; (80077b0 <USER_GET_Command+0x93c>)
 80076ca:	881a      	ldrh	r2, [r3, #0]
 80076cc:	4945      	ldr	r1, [pc, #276]	; (80077e4 <USER_GET_Command+0x970>)
 80076ce:	0892      	lsrs	r2, r2, #2
 80076d0:	0030      	movs	r0, r6
 80076d2:	f004 fb19 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80076d6:	2201      	movs	r2, #1
 80076d8:	2102      	movs	r1, #2
 80076da:	4841      	ldr	r0, [pc, #260]	; (80077e0 <USER_GET_Command+0x96c>)
 80076dc:	f7fb fd64 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80076e0:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80076e2:	0030      	movs	r0, r6
			uarttx_req=1;
 80076e4:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80076e6:	f7f8 fd0d 	bl	8000104 <strlen>
 80076ea:	0031      	movs	r1, r6
 80076ec:	b282      	uxth	r2, r0
 80076ee:	4832      	ldr	r0, [pc, #200]	; (80077b8 <USER_GET_Command+0x944>)
 80076f0:	f7fd fae6 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d001      	beq.n	80076fc <USER_GET_Command+0x888>
				Error_Handler();
 80076f8:	f001 f916 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d0fc      	beq.n	80076fc <USER_GET_Command+0x888>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007702:	2200      	movs	r2, #0
 8007704:	2102      	movs	r1, #2
 8007706:	4836      	ldr	r0, [pc, #216]	; (80077e0 <USER_GET_Command+0x96c>)
 8007708:	f7fb fd4e 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 800770c:	2219      	movs	r2, #25
 800770e:	2100      	movs	r1, #0
 8007710:	4835      	ldr	r0, [pc, #212]	; (80077e8 <USER_GET_Command+0x974>)
 8007712:	f004 faf0 	bl	800bcf6 <memset>
			break;
 8007716:	e5db      	b.n	80072d0 <USER_GET_Command+0x45c>
			sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/100);
 8007718:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <USER_GET_Command+0x964>)
 800771a:	2164      	movs	r1, #100	; 0x64
 800771c:	8818      	ldrh	r0, [r3, #0]
 800771e:	f7f8 fd17 	bl	8000150 <__udivsi3>
 8007722:	4e23      	ldr	r6, [pc, #140]	; (80077b0 <USER_GET_Command+0x93c>)
 8007724:	b282      	uxth	r2, r0
 8007726:	492d      	ldr	r1, [pc, #180]	; (80077dc <USER_GET_Command+0x968>)
 8007728:	0030      	movs	r0, r6
 800772a:	f004 faed 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800772e:	2201      	movs	r2, #1
 8007730:	2102      	movs	r1, #2
 8007732:	482b      	ldr	r0, [pc, #172]	; (80077e0 <USER_GET_Command+0x96c>)
 8007734:	f7fb fd38 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007738:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800773a:	0030      	movs	r0, r6
			uarttx_req=1;
 800773c:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800773e:	f7f8 fce1 	bl	8000104 <strlen>
 8007742:	0031      	movs	r1, r6
 8007744:	b282      	uxth	r2, r0
 8007746:	481c      	ldr	r0, [pc, #112]	; (80077b8 <USER_GET_Command+0x944>)
 8007748:	f7fd faba 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800774c:	2800      	cmp	r0, #0
 800774e:	d001      	beq.n	8007754 <USER_GET_Command+0x8e0>
				Error_Handler();
 8007750:	f001 f8ea 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007754:	7823      	ldrb	r3, [r4, #0]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d0fc      	beq.n	8007754 <USER_GET_Command+0x8e0>
 800775a:	e7d2      	b.n	8007702 <USER_GET_Command+0x88e>
			sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/9);
 800775c:	4b1e      	ldr	r3, [pc, #120]	; (80077d8 <USER_GET_Command+0x964>)
 800775e:	2109      	movs	r1, #9
 8007760:	8818      	ldrh	r0, [r3, #0]
 8007762:	f7f8 fcf5 	bl	8000150 <__udivsi3>
 8007766:	4e12      	ldr	r6, [pc, #72]	; (80077b0 <USER_GET_Command+0x93c>)
 8007768:	b282      	uxth	r2, r0
 800776a:	491c      	ldr	r1, [pc, #112]	; (80077dc <USER_GET_Command+0x968>)
 800776c:	0030      	movs	r0, r6
 800776e:	f004 facb 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007772:	2201      	movs	r2, #1
 8007774:	2102      	movs	r1, #2
 8007776:	481a      	ldr	r0, [pc, #104]	; (80077e0 <USER_GET_Command+0x96c>)
 8007778:	f7fb fd16 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800777c:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800777e:	0030      	movs	r0, r6
			uarttx_req=1;
 8007780:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007782:	f7f8 fcbf 	bl	8000104 <strlen>
 8007786:	0031      	movs	r1, r6
 8007788:	b282      	uxth	r2, r0
 800778a:	480b      	ldr	r0, [pc, #44]	; (80077b8 <USER_GET_Command+0x944>)
 800778c:	f7fd fa98 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007790:	2800      	cmp	r0, #0
 8007792:	d001      	beq.n	8007798 <USER_GET_Command+0x924>
				Error_Handler();
 8007794:	f001 f8c8 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007798:	7823      	ldrb	r3, [r4, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d0fc      	beq.n	8007798 <USER_GET_Command+0x924>
 800779e:	e7b0      	b.n	8007702 <USER_GET_Command+0x88e>
 80077a0:	20000008 	.word	0x20000008
 80077a4:	0800ec61 	.word	0x0800ec61
 80077a8:	20000009 	.word	0x20000009
 80077ac:	2000037a 	.word	0x2000037a
 80077b0:	2000026b 	.word	0x2000026b
 80077b4:	0800ecdb 	.word	0x0800ecdb
 80077b8:	20000510 	.word	0x20000510
 80077bc:	20000338 	.word	0x20000338
 80077c0:	0800ed3e 	.word	0x0800ed3e
 80077c4:	20000014 	.word	0x20000014
 80077c8:	0800ed9e 	.word	0x0800ed9e
 80077cc:	0800ee04 	.word	0x0800ee04
 80077d0:	20000350 	.word	0x20000350
 80077d4:	0800ee61 	.word	0x0800ee61
 80077d8:	20000480 	.word	0x20000480
 80077dc:	0800ef5c 	.word	0x0800ef5c
 80077e0:	48000400 	.word	0x48000400
 80077e4:	0800ef32 	.word	0x0800ef32
 80077e8:	20000236 	.word	0x20000236
		{
		case 0:

			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80077ec:	2201      	movs	r2, #1
 80077ee:	2102      	movs	r1, #2
 80077f0:	48c7      	ldr	r0, [pc, #796]	; (8007b10 <USER_GET_Command+0xc9c>)
 80077f2:	f7fb fcd9 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80077f6:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 2 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 80077f8:	2232      	movs	r2, #50	; 0x32
 80077fa:	49c6      	ldr	r1, [pc, #792]	; (8007b14 <USER_GET_Command+0xca0>)
 80077fc:	48c6      	ldr	r0, [pc, #792]	; (8007b18 <USER_GET_Command+0xca4>)
			uarttx_req=1;
 80077fe:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 2 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 8007800:	f7fd fa5e 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007804:	2800      	cmp	r0, #0
 8007806:	d001      	beq.n	800780c <USER_GET_Command+0x998>
			{
				Error_Handler();
 8007808:	f001 f88e 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 800780c:	7823      	ldrb	r3, [r4, #0]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d0fc      	beq.n	800780c <USER_GET_Command+0x998>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007812:	2200      	movs	r2, #0
 8007814:	2102      	movs	r1, #2
 8007816:	48be      	ldr	r0, [pc, #760]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007818:	f7fb fcc6 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 800781c:	2219      	movs	r2, #25
 800781e:	2100      	movs	r1, #0
 8007820:	48be      	ldr	r0, [pc, #760]	; (8007b1c <USER_GET_Command+0xca8>)
 8007822:	f004 fa68 	bl	800bcf6 <memset>
	}




	if(!strncmp(instruction_final+4,"WK_THS",6))
 8007826:	2206      	movs	r2, #6
 8007828:	49bd      	ldr	r1, [pc, #756]	; (8007b20 <USER_GET_Command+0xcac>)
 800782a:	0028      	movs	r0, r5
 800782c:	f004 fa96 	bl	800bd5c <strncmp>
 8007830:	2800      	cmp	r0, #0
 8007832:	d147      	bne.n	80078c4 <USER_GET_Command+0xa50>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 8007834:	2301      	movs	r3, #1
		memrx=0;
 8007836:	4ebb      	ldr	r6, [pc, #748]	; (8007b24 <USER_GET_Command+0xcb0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 8007838:	af05      	add	r7, sp, #20
		memrx=0;
 800783a:	7030      	strb	r0, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800783c:	225b      	movs	r2, #91	; 0x5b
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	9700      	str	r7, [sp, #0]
 8007842:	21d6      	movs	r1, #214	; 0xd6
 8007844:	48b8      	ldr	r0, [pc, #736]	; (8007b28 <USER_GET_Command+0xcb4>)
 8007846:	f7fb ff33 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800784a:	2800      	cmp	r0, #0
 800784c:	d001      	beq.n	8007852 <USER_GET_Command+0x9de>
		{
			Error_Handler();
 800784e:	f001 f86b 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007852:	7833      	ldrb	r3, [r6, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0fc      	beq.n	8007852 <USER_GET_Command+0x9de>


		wake_up_ths&=0b00111111;
 8007858:	263f      	movs	r6, #63	; 0x3f
 800785a:	7838      	ldrb	r0, [r7, #0]
 800785c:	4030      	ands	r0, r6
 800785e:	7038      	strb	r0, [r7, #0]


		sprintf(out_string,"\r\nActivity/Inactivity threshold Now is %d mg \r\n",((int)(wake_up_ths*32768*mg_per_LSB)/64));
 8007860:	03c0      	lsls	r0, r0, #15
 8007862:	f7f9 fb43 	bl	8000eec <__aeabi_i2f>
 8007866:	4bb1      	ldr	r3, [pc, #708]	; (8007b2c <USER_GET_Command+0xcb8>)
 8007868:	6819      	ldr	r1, [r3, #0]
 800786a:	f7f9 f9ff 	bl	8000c6c <__aeabi_fmul>
 800786e:	f7f9 fb1d 	bl	8000eac <__aeabi_f2iz>
 8007872:	17c2      	asrs	r2, r0, #31
 8007874:	4032      	ands	r2, r6
 8007876:	4eae      	ldr	r6, [pc, #696]	; (8007b30 <USER_GET_Command+0xcbc>)
 8007878:	1812      	adds	r2, r2, r0
 800787a:	1192      	asrs	r2, r2, #6
 800787c:	49ad      	ldr	r1, [pc, #692]	; (8007b34 <USER_GET_Command+0xcc0>)
 800787e:	0030      	movs	r0, r6
 8007880:	f004 fa42 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007884:	2201      	movs	r2, #1
 8007886:	2102      	movs	r1, #2
 8007888:	48a1      	ldr	r0, [pc, #644]	; (8007b10 <USER_GET_Command+0xc9c>)
 800788a:	f7fb fc8d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800788e:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007890:	0030      	movs	r0, r6
		uarttx_req=1;
 8007892:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007894:	f7f8 fc36 	bl	8000104 <strlen>
 8007898:	0031      	movs	r1, r6
 800789a:	b282      	uxth	r2, r0
 800789c:	489e      	ldr	r0, [pc, #632]	; (8007b18 <USER_GET_Command+0xca4>)
 800789e:	f7fd fa0f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d001      	beq.n	80078aa <USER_GET_Command+0xa36>
		{
			Error_Handler();
 80078a6:	f001 f83f 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 80078aa:	7823      	ldrb	r3, [r4, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d0fc      	beq.n	80078aa <USER_GET_Command+0xa36>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80078b0:	2200      	movs	r2, #0
 80078b2:	2102      	movs	r1, #2
 80078b4:	4896      	ldr	r0, [pc, #600]	; (8007b10 <USER_GET_Command+0xc9c>)
 80078b6:	f7fb fc77 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 80078ba:	2219      	movs	r2, #25
 80078bc:	2100      	movs	r1, #0
 80078be:	4897      	ldr	r0, [pc, #604]	; (8007b1c <USER_GET_Command+0xca8>)
 80078c0:	f004 fa19 	bl	800bcf6 <memset>


	}

	if(!strncmp(instruction_final+4,"WAKE_DUR",8))
 80078c4:	2208      	movs	r2, #8
 80078c6:	499c      	ldr	r1, [pc, #624]	; (8007b38 <USER_GET_Command+0xcc4>)
 80078c8:	0028      	movs	r0, r5
 80078ca:	f004 fa47 	bl	800bd5c <strncmp>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d143      	bne.n	800795a <USER_GET_Command+0xae6>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80078d2:	260d      	movs	r6, #13
 80078d4:	2301      	movs	r3, #1
 80078d6:	aa02      	add	r2, sp, #8
		memrx=0;
 80078d8:	4f92      	ldr	r7, [pc, #584]	; (8007b24 <USER_GET_Command+0xcb0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80078da:	18b6      	adds	r6, r6, r2
		memrx=0;
 80078dc:	7038      	strb	r0, [r7, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 80078de:	225c      	movs	r2, #92	; 0x5c
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	9600      	str	r6, [sp, #0]
 80078e4:	21d6      	movs	r1, #214	; 0xd6
 80078e6:	4890      	ldr	r0, [pc, #576]	; (8007b28 <USER_GET_Command+0xcb4>)
 80078e8:	f7fb fee2 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d001      	beq.n	80078f4 <USER_GET_Command+0xa80>
		{
			Error_Handler();
 80078f0:	f001 f81a 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80078f4:	783b      	ldrb	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0fc      	beq.n	80078f4 <USER_GET_Command+0xa80>


		wake_up_dur&=0b01100000;
		wake_up_dur>>=5;
 80078fa:	7830      	ldrb	r0, [r6, #0]


		sprintf(out_string,"\r\n Duration for Activity detection is %d us\r\n",(int)wake_up_dur*1000*1000/odr_xl_value);
 80078fc:	4b8f      	ldr	r3, [pc, #572]	; (8007b3c <USER_GET_Command+0xcc8>)
		wake_up_dur>>=5;
 80078fe:	0640      	lsls	r0, r0, #25
 8007900:	0f80      	lsrs	r0, r0, #30
 8007902:	7030      	strb	r0, [r6, #0]
		sprintf(out_string,"\r\n Duration for Activity detection is %d us\r\n",(int)wake_up_dur*1000*1000/odr_xl_value);
 8007904:	4358      	muls	r0, r3
 8007906:	4b8e      	ldr	r3, [pc, #568]	; (8007b40 <USER_GET_Command+0xccc>)
 8007908:	8819      	ldrh	r1, [r3, #0]
 800790a:	f7f8 fcab 	bl	8000264 <__divsi3>
 800790e:	4e88      	ldr	r6, [pc, #544]	; (8007b30 <USER_GET_Command+0xcbc>)
 8007910:	0002      	movs	r2, r0
 8007912:	498c      	ldr	r1, [pc, #560]	; (8007b44 <USER_GET_Command+0xcd0>)
 8007914:	0030      	movs	r0, r6
 8007916:	f004 f9f7 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800791a:	2201      	movs	r2, #1
 800791c:	2102      	movs	r1, #2
 800791e:	487c      	ldr	r0, [pc, #496]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007920:	f7fb fc42 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8007924:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8007926:	0030      	movs	r0, r6
		uarttx_req=1;
 8007928:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800792a:	f7f8 fbeb 	bl	8000104 <strlen>
 800792e:	0031      	movs	r1, r6
 8007930:	b282      	uxth	r2, r0
 8007932:	4879      	ldr	r0, [pc, #484]	; (8007b18 <USER_GET_Command+0xca4>)
 8007934:	f7fd f9c4 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007938:	2800      	cmp	r0, #0
 800793a:	d001      	beq.n	8007940 <USER_GET_Command+0xacc>
		{
			Error_Handler();
 800793c:	f000 fff4 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 8007940:	7823      	ldrb	r3, [r4, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d0fc      	beq.n	8007940 <USER_GET_Command+0xacc>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007946:	2200      	movs	r2, #0
 8007948:	2102      	movs	r1, #2
 800794a:	4871      	ldr	r0, [pc, #452]	; (8007b10 <USER_GET_Command+0xc9c>)
 800794c:	f7fb fc2c 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 8007950:	2219      	movs	r2, #25
 8007952:	2100      	movs	r1, #0
 8007954:	4871      	ldr	r0, [pc, #452]	; (8007b1c <USER_GET_Command+0xca8>)
 8007956:	f004 f9ce 	bl	800bcf6 <memset>





	if(!strncmp(instruction_final+4,"ODR_XL",6))
 800795a:	2206      	movs	r2, #6
 800795c:	497a      	ldr	r1, [pc, #488]	; (8007b48 <USER_GET_Command+0xcd4>)
 800795e:	0028      	movs	r0, r5
 8007960:	f004 f9fc 	bl	800bd5c <strncmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	d000      	beq.n	800796a <USER_GET_Command+0xaf6>
 8007968:	e088      	b.n	8007a7c <USER_GET_Command+0xc08>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800796a:	250b      	movs	r5, #11
 800796c:	2301      	movs	r3, #1
 800796e:	aa02      	add	r2, sp, #8
		memrx=0;
 8007970:	4e6c      	ldr	r6, [pc, #432]	; (8007b24 <USER_GET_Command+0xcb0>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8007972:	18ad      	adds	r5, r5, r2
		memrx=0;
 8007974:	7030      	strb	r0, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8007976:	2210      	movs	r2, #16
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	9500      	str	r5, [sp, #0]
 800797c:	21d6      	movs	r1, #214	; 0xd6
 800797e:	486a      	ldr	r0, [pc, #424]	; (8007b28 <USER_GET_Command+0xcb4>)
 8007980:	f7fb fe96 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007984:	2800      	cmp	r0, #0
 8007986:	d001      	beq.n	800798c <USER_GET_Command+0xb18>
		{
			Error_Handler();
 8007988:	f000 ffce 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800798c:	7833      	ldrb	r3, [r6, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0fc      	beq.n	800798c <USER_GET_Command+0xb18>
 8007992:	7828      	ldrb	r0, [r5, #0]
 8007994:	0900      	lsrs	r0, r0, #4

		ctrl1_xl&=0xf0;
		ctrl1_xl>>=4;
 8007996:	7028      	strb	r0, [r5, #0]


		switch(ctrl1_xl)
 8007998:	280a      	cmp	r0, #10
 800799a:	d86f      	bhi.n	8007a7c <USER_GET_Command+0xc08>
 800799c:	4d5e      	ldr	r5, [pc, #376]	; (8007b18 <USER_GET_Command+0xca4>)

			break;
		case 10:


			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800799e:	2201      	movs	r2, #1
 80079a0:	2102      	movs	r1, #2
		switch(ctrl1_xl)
 80079a2:	f7f8 fbcb 	bl	800013c <__gnu_thumb1_case_uhi>
 80079a6:	0050      	.short	0x0050
 80079a8:	007f006d 	.word	0x007f006d
 80079ac:	00a30091 	.word	0x00a30091
 80079b0:	00fb00e9 	.word	0x00fb00e9
 80079b4:	011f010d 	.word	0x011f010d
 80079b8:	01430131 	.word	0x01430131
			mg_per_LSB =  0.122;
 80079bc:	4b5b      	ldr	r3, [pc, #364]	; (8007b2c <USER_GET_Command+0xcb8>)
 80079be:	4a63      	ldr	r2, [pc, #396]	; (8007b4c <USER_GET_Command+0xcd8>)
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80079c0:	2102      	movs	r1, #2
			mg_per_LSB =  0.122;
 80079c2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80079c4:	4852      	ldr	r0, [pc, #328]	; (8007b10 <USER_GET_Command+0xc9c>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	f7fb fbee 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80079cc:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 4 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 4 g \r\n"))!=HAL_OK)
 80079ce:	2232      	movs	r2, #50	; 0x32
 80079d0:	495f      	ldr	r1, [pc, #380]	; (8007b50 <USER_GET_Command+0xcdc>)
 80079d2:	4851      	ldr	r0, [pc, #324]	; (8007b18 <USER_GET_Command+0xca4>)
			uarttx_req=1;
 80079d4:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 4 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 4 g \r\n"))!=HAL_OK)
 80079d6:	f7fd f973 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80079da:	2800      	cmp	r0, #0
 80079dc:	d001      	beq.n	80079e2 <USER_GET_Command+0xb6e>
				Error_Handler();
 80079de:	f000 ffa3 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80079e2:	7823      	ldrb	r3, [r4, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d0fc      	beq.n	80079e2 <USER_GET_Command+0xb6e>
 80079e8:	e713      	b.n	8007812 <USER_GET_Command+0x99e>
			mg_per_LSB = 0.244;
 80079ea:	4b50      	ldr	r3, [pc, #320]	; (8007b2c <USER_GET_Command+0xcb8>)
 80079ec:	4a59      	ldr	r2, [pc, #356]	; (8007b54 <USER_GET_Command+0xce0>)
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80079ee:	2102      	movs	r1, #2
			mg_per_LSB = 0.244;
 80079f0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80079f2:	4847      	ldr	r0, [pc, #284]	; (8007b10 <USER_GET_Command+0xc9c>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	f7fb fbd7 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80079fa:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 8 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 80079fc:	2232      	movs	r2, #50	; 0x32
 80079fe:	4956      	ldr	r1, [pc, #344]	; (8007b58 <USER_GET_Command+0xce4>)
 8007a00:	4845      	ldr	r0, [pc, #276]	; (8007b18 <USER_GET_Command+0xca4>)
			uarttx_req=1;
 8007a02:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 8 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 8007a04:	f7fd f95c 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d001      	beq.n	8007a10 <USER_GET_Command+0xb9c>
				Error_Handler();
 8007a0c:	f000 ff8c 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007a10:	7823      	ldrb	r3, [r4, #0]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d0fc      	beq.n	8007a10 <USER_GET_Command+0xb9c>
 8007a16:	e6fc      	b.n	8007812 <USER_GET_Command+0x99e>
			mg_per_LSB =  0.488;
 8007a18:	4b44      	ldr	r3, [pc, #272]	; (8007b2c <USER_GET_Command+0xcb8>)
 8007a1a:	4a50      	ldr	r2, [pc, #320]	; (8007b5c <USER_GET_Command+0xce8>)
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007a1c:	2102      	movs	r1, #2
			mg_per_LSB =  0.488;
 8007a1e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007a20:	483b      	ldr	r0, [pc, #236]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	f7fb fbc0 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007a28:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 16 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 16 g \r\n"))!=HAL_OK)
 8007a2a:	2233      	movs	r2, #51	; 0x33
 8007a2c:	494c      	ldr	r1, [pc, #304]	; (8007b60 <USER_GET_Command+0xcec>)
 8007a2e:	483a      	ldr	r0, [pc, #232]	; (8007b18 <USER_GET_Command+0xca4>)
			uarttx_req=1;
 8007a30:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 16 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 16 g \r\n"))!=HAL_OK)
 8007a32:	f7fd f945 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d001      	beq.n	8007a3e <USER_GET_Command+0xbca>
				Error_Handler();
 8007a3a:	f000 ff75 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007a3e:	7823      	ldrb	r3, [r4, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d0fc      	beq.n	8007a3e <USER_GET_Command+0xbca>
 8007a44:	e6e5      	b.n	8007812 <USER_GET_Command+0x99e>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007a46:	4832      	ldr	r0, [pc, #200]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007a48:	f7fb fbae 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007a4c:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n",strlen("\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n"))!=HAL_OK)
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	4944      	ldr	r1, [pc, #272]	; (8007b64 <USER_GET_Command+0xcf0>)
 8007a52:	0028      	movs	r0, r5
			uarttx_req=1;
 8007a54:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n",strlen("\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n"))!=HAL_OK)
 8007a56:	f7fd f933 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d001      	beq.n	8007a62 <USER_GET_Command+0xbee>
				Error_Handler();
 8007a5e:	f000 ff63 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007a62:	7823      	ldrb	r3, [r4, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d0fc      	beq.n	8007a62 <USER_GET_Command+0xbee>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	4828      	ldr	r0, [pc, #160]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007a6e:	f7fb fb9b 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8007a72:	2219      	movs	r2, #25
 8007a74:	2100      	movs	r1, #0
 8007a76:	4829      	ldr	r0, [pc, #164]	; (8007b1c <USER_GET_Command+0xca8>)
 8007a78:	f004 f93d 	bl	800bcf6 <memset>



	}

}
 8007a7c:	b007      	add	sp, #28
 8007a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007a80:	4823      	ldr	r0, [pc, #140]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007a82:	f7fb fb91 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007a86:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 13 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 13 Hz\r\n"))!=HAL_OK)
 8007a88:	222b      	movs	r2, #43	; 0x2b
 8007a8a:	4937      	ldr	r1, [pc, #220]	; (8007b68 <USER_GET_Command+0xcf4>)
 8007a8c:	0028      	movs	r0, r5
			uarttx_req=1;
 8007a8e:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 13 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 13 Hz\r\n"))!=HAL_OK)
 8007a90:	f7fd f916 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d001      	beq.n	8007a9c <USER_GET_Command+0xc28>
				Error_Handler();
 8007a98:	f000 ff46 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007a9c:	7823      	ldrb	r3, [r4, #0]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d0fc      	beq.n	8007a9c <USER_GET_Command+0xc28>
 8007aa2:	e7e1      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007aa4:	481a      	ldr	r0, [pc, #104]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007aa6:	f7fb fb7f 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007aaa:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 26 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 26 Hz\r\n"))!=HAL_OK)
 8007aac:	222b      	movs	r2, #43	; 0x2b
 8007aae:	492f      	ldr	r1, [pc, #188]	; (8007b6c <USER_GET_Command+0xcf8>)
 8007ab0:	0028      	movs	r0, r5
			uarttx_req=1;
 8007ab2:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 26 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 26 Hz\r\n"))!=HAL_OK)
 8007ab4:	f7fd f904 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d001      	beq.n	8007ac0 <USER_GET_Command+0xc4c>
				Error_Handler();
 8007abc:	f000 ff34 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007ac0:	7823      	ldrb	r3, [r4, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d0fc      	beq.n	8007ac0 <USER_GET_Command+0xc4c>
 8007ac6:	e7cf      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007ac8:	4811      	ldr	r0, [pc, #68]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007aca:	f7fb fb6d 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007ace:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 52 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 52 Hz\r\n"))!=HAL_OK)
 8007ad0:	222b      	movs	r2, #43	; 0x2b
 8007ad2:	4927      	ldr	r1, [pc, #156]	; (8007b70 <USER_GET_Command+0xcfc>)
 8007ad4:	0028      	movs	r0, r5
			uarttx_req=1;
 8007ad6:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 52 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 52 Hz\r\n"))!=HAL_OK)
 8007ad8:	f7fd f8f2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d001      	beq.n	8007ae4 <USER_GET_Command+0xc70>
				Error_Handler();
 8007ae0:	f000 ff22 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007ae4:	7823      	ldrb	r3, [r4, #0]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d0fc      	beq.n	8007ae4 <USER_GET_Command+0xc70>
 8007aea:	e7bd      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007aec:	4808      	ldr	r0, [pc, #32]	; (8007b10 <USER_GET_Command+0xc9c>)
 8007aee:	f7fb fb5b 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007af2:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 104 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 104 Hz\r\n"))!=HAL_OK)
 8007af4:	222c      	movs	r2, #44	; 0x2c
 8007af6:	491f      	ldr	r1, [pc, #124]	; (8007b74 <USER_GET_Command+0xd00>)
 8007af8:	0028      	movs	r0, r5
			uarttx_req=1;
 8007afa:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 104 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 104 Hz\r\n"))!=HAL_OK)
 8007afc:	f7fd f8e0 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d001      	beq.n	8007b08 <USER_GET_Command+0xc94>
				Error_Handler();
 8007b04:	f000 ff10 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007b08:	7823      	ldrb	r3, [r4, #0]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d0fc      	beq.n	8007b08 <USER_GET_Command+0xc94>
 8007b0e:	e7ab      	b.n	8007a68 <USER_GET_Command+0xbf4>
 8007b10:	48000400 	.word	0x48000400
 8007b14:	0800f019 	.word	0x0800f019
 8007b18:	20000510 	.word	0x20000510
 8007b1c:	20000236 	.word	0x20000236
 8007b20:	0800f0e6 	.word	0x0800f0e6
 8007b24:	20000269 	.word	0x20000269
 8007b28:	200003a0 	.word	0x200003a0
 8007b2c:	2000047c 	.word	0x2000047c
 8007b30:	2000026b 	.word	0x2000026b
 8007b34:	0800f0ed 	.word	0x0800f0ed
 8007b38:	0800f11d 	.word	0x0800f11d
 8007b3c:	000f4240 	.word	0x000f4240
 8007b40:	20000480 	.word	0x20000480
 8007b44:	0800f126 	.word	0x0800f126
 8007b48:	0800f154 	.word	0x0800f154
 8007b4c:	3df9db23 	.word	0x3df9db23
 8007b50:	0800f04c 	.word	0x0800f04c
 8007b54:	3e79db23 	.word	0x3e79db23
 8007b58:	0800f07f 	.word	0x0800f07f
 8007b5c:	3ef9db23 	.word	0x3ef9db23
 8007b60:	0800f0b2 	.word	0x0800f0b2
 8007b64:	0800f15b 	.word	0x0800f15b
 8007b68:	0800f19c 	.word	0x0800f19c
 8007b6c:	0800f1c8 	.word	0x0800f1c8
 8007b70:	0800f1f4 	.word	0x0800f1f4
 8007b74:	0800f220 	.word	0x0800f220
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007b78:	4835      	ldr	r0, [pc, #212]	; (8007c50 <USER_GET_Command+0xddc>)
 8007b7a:	f7fb fb15 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007b7e:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 208 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 208 Hz\r\n"))!=HAL_OK)
 8007b80:	222c      	movs	r2, #44	; 0x2c
 8007b82:	4934      	ldr	r1, [pc, #208]	; (8007c54 <USER_GET_Command+0xde0>)
 8007b84:	0028      	movs	r0, r5
			uarttx_req=1;
 8007b86:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 208 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 208 Hz\r\n"))!=HAL_OK)
 8007b88:	f7fd f89a 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d001      	beq.n	8007b94 <USER_GET_Command+0xd20>
				Error_Handler();
 8007b90:	f000 feca 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007b94:	7823      	ldrb	r3, [r4, #0]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d0fc      	beq.n	8007b94 <USER_GET_Command+0xd20>
 8007b9a:	e765      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007b9c:	482c      	ldr	r0, [pc, #176]	; (8007c50 <USER_GET_Command+0xddc>)
 8007b9e:	f7fb fb03 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007ba2:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 416 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 416 Hz\r\n"))!=HAL_OK)
 8007ba4:	222c      	movs	r2, #44	; 0x2c
 8007ba6:	492c      	ldr	r1, [pc, #176]	; (8007c58 <USER_GET_Command+0xde4>)
 8007ba8:	0028      	movs	r0, r5
			uarttx_req=1;
 8007baa:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 416 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 416 Hz\r\n"))!=HAL_OK)
 8007bac:	f7fd f888 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d001      	beq.n	8007bb8 <USER_GET_Command+0xd44>
				Error_Handler();
 8007bb4:	f000 feb8 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007bb8:	7823      	ldrb	r3, [r4, #0]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d0fc      	beq.n	8007bb8 <USER_GET_Command+0xd44>
 8007bbe:	e753      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007bc0:	4823      	ldr	r0, [pc, #140]	; (8007c50 <USER_GET_Command+0xddc>)
 8007bc2:	f7fb faf1 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007bc6:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 833 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 833 Hz\r\n"))!=HAL_OK)
 8007bc8:	222c      	movs	r2, #44	; 0x2c
 8007bca:	4924      	ldr	r1, [pc, #144]	; (8007c5c <USER_GET_Command+0xde8>)
 8007bcc:	0028      	movs	r0, r5
			uarttx_req=1;
 8007bce:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 833 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 833 Hz\r\n"))!=HAL_OK)
 8007bd0:	f7fd f876 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d001      	beq.n	8007bdc <USER_GET_Command+0xd68>
				Error_Handler();
 8007bd8:	f000 fea6 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007bdc:	7823      	ldrb	r3, [r4, #0]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d0fc      	beq.n	8007bdc <USER_GET_Command+0xd68>
 8007be2:	e741      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007be4:	481a      	ldr	r0, [pc, #104]	; (8007c50 <USER_GET_Command+0xddc>)
 8007be6:	f7fb fadf 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007bea:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 1660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 1660 Hz\r\n"))!=HAL_OK)
 8007bec:	222d      	movs	r2, #45	; 0x2d
 8007bee:	491c      	ldr	r1, [pc, #112]	; (8007c60 <USER_GET_Command+0xdec>)
 8007bf0:	0028      	movs	r0, r5
			uarttx_req=1;
 8007bf2:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 1660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 1660 Hz\r\n"))!=HAL_OK)
 8007bf4:	f7fd f864 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d001      	beq.n	8007c00 <USER_GET_Command+0xd8c>
				Error_Handler();
 8007bfc:	f000 fe94 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007c00:	7823      	ldrb	r3, [r4, #0]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d0fc      	beq.n	8007c00 <USER_GET_Command+0xd8c>
 8007c06:	e72f      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007c08:	4811      	ldr	r0, [pc, #68]	; (8007c50 <USER_GET_Command+0xddc>)
 8007c0a:	f7fb facd 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007c0e:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 3330 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 3330 Hz\r\n"))!=HAL_OK)
 8007c10:	222d      	movs	r2, #45	; 0x2d
 8007c12:	4914      	ldr	r1, [pc, #80]	; (8007c64 <USER_GET_Command+0xdf0>)
 8007c14:	0028      	movs	r0, r5
			uarttx_req=1;
 8007c16:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 3330 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 3330 Hz\r\n"))!=HAL_OK)
 8007c18:	f7fd f852 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d001      	beq.n	8007c24 <USER_GET_Command+0xdb0>
				Error_Handler();
 8007c20:	f000 fe82 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007c24:	7823      	ldrb	r3, [r4, #0]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d0fc      	beq.n	8007c24 <USER_GET_Command+0xdb0>
 8007c2a:	e71d      	b.n	8007a68 <USER_GET_Command+0xbf4>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007c2c:	4808      	ldr	r0, [pc, #32]	; (8007c50 <USER_GET_Command+0xddc>)
 8007c2e:	f7fb fabb 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8007c32:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 6660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 6660 Hz\r\n"))!=HAL_OK)
 8007c34:	222d      	movs	r2, #45	; 0x2d
 8007c36:	490c      	ldr	r1, [pc, #48]	; (8007c68 <USER_GET_Command+0xdf4>)
 8007c38:	0028      	movs	r0, r5
			uarttx_req=1;
 8007c3a:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 6660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 6660 Hz\r\n"))!=HAL_OK)
 8007c3c:	f7fd f840 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d001      	beq.n	8007c48 <USER_GET_Command+0xdd4>
				Error_Handler();
 8007c44:	f000 fe70 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8007c48:	7823      	ldrb	r3, [r4, #0]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d0fc      	beq.n	8007c48 <USER_GET_Command+0xdd4>
 8007c4e:	e70b      	b.n	8007a68 <USER_GET_Command+0xbf4>
 8007c50:	48000400 	.word	0x48000400
 8007c54:	0800f24d 	.word	0x0800f24d
 8007c58:	0800f27a 	.word	0x0800f27a
 8007c5c:	0800f2a7 	.word	0x0800f2a7
 8007c60:	0800f2d4 	.word	0x0800f2d4
 8007c64:	0800f302 	.word	0x0800f302
 8007c68:	0800f330 	.word	0x0800f330

08007c6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c70:	2214      	movs	r2, #20
 8007c72:	2100      	movs	r1, #0
 8007c74:	a803      	add	r0, sp, #12
 8007c76:	f004 f83e 	bl	800bcf6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c7a:	2080      	movs	r0, #128	; 0x80
 8007c7c:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <MX_GPIO_Init+0x90>)
 8007c7e:	0300      	lsls	r0, r0, #12
 8007c80:	6959      	ldr	r1, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port, D_CON_RS485_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_LED_GPIO_Port, ST_LED_Pin, GPIO_PIN_RESET);
 8007c82:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c84:	4301      	orrs	r1, r0
 8007c86:	6159      	str	r1, [r3, #20]
 8007c88:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port, D_CON_RS485_Pin, GPIO_PIN_RESET);
 8007c8a:	4f1d      	ldr	r7, [pc, #116]	; (8007d00 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c8c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c90:	9200      	str	r2, [sp, #0]
 8007c92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c94:	6959      	ldr	r1, [r3, #20]
 8007c96:	02c0      	lsls	r0, r0, #11
 8007c98:	4301      	orrs	r1, r0
 8007c9a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c9e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca0:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ca2:	4002      	ands	r2, r0
 8007ca4:	9201      	str	r2, [sp, #4]
 8007ca6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(ST_LED_GPIO_Port, ST_LED_Pin, GPIO_PIN_RESET);
 8007caa:	4d16      	ldr	r5, [pc, #88]	; (8007d04 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cac:	430a      	orrs	r2, r1
 8007cae:	615a      	str	r2, [r3, #20]
 8007cb0:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port, D_CON_RS485_Pin, GPIO_PIN_RESET);
 8007cb2:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(ST_LED_GPIO_Port, ST_LED_Pin, GPIO_PIN_RESET);
 8007cb8:	0136      	lsls	r6, r6, #4
  HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port, D_CON_RS485_Pin, GPIO_PIN_RESET);
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cbe:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port, D_CON_RS485_Pin, GPIO_PIN_RESET);
 8007cc0:	f7fb fa72 	bl	80031a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST_LED_GPIO_Port, ST_LED_Pin, GPIO_PIN_RESET);
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	0031      	movs	r1, r6
 8007cc8:	0028      	movs	r0, r5
 8007cca:	f7fb fa6d 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D_CON_RS485_Pin;
 8007cce:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd0:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = D_CON_RS485_Pin;
 8007cd2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(D_CON_RS485_GPIO_Port, &GPIO_InitStruct);
 8007cd4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cd6:	3b01      	subs	r3, #1
  HAL_GPIO_Init(D_CON_RS485_GPIO_Port, &GPIO_InitStruct);
 8007cd8:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cda:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cdc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cde:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(D_CON_RS485_GPIO_Port, &GPIO_InitStruct);
 8007ce0:	f7fb f9a6 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ST_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ce4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ST_LED_GPIO_Port, &GPIO_InitStruct);
 8007ce6:	a903      	add	r1, sp, #12
 8007ce8:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ST_LED_Pin;
 8007cea:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ST_LED_GPIO_Port, &GPIO_InitStruct);
 8007cf2:	f7fb f99d 	bl	8003030 <HAL_GPIO_Init>

}
 8007cf6:	b009      	add	sp, #36	; 0x24
 8007cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	48000400 	.word	0x48000400
 8007d04:	48000800 	.word	0x48000800

08007d08 <USER_Rash_Turn_Gyroscope_Init>:

	HAL_Delay(160);
}

void USER_Rash_Turn_Gyroscope_Init(void)
{
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t hexcode;


	if(who_am_i==0x69)
 8007d0a:	4baf      	ldr	r3, [pc, #700]	; (8007fc8 <USER_Rash_Turn_Gyroscope_Init+0x2c0>)
{
 8007d0c:	b085      	sub	sp, #20
	if(who_am_i==0x69)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4dae      	ldr	r5, [pc, #696]	; (8007fcc <USER_Rash_Turn_Gyroscope_Init+0x2c4>)
 8007d12:	4caf      	ldr	r4, [pc, #700]	; (8007fd0 <USER_Rash_Turn_Gyroscope_Init+0x2c8>)
 8007d14:	2b69      	cmp	r3, #105	; 0x69
 8007d16:	d100      	bne.n	8007d1a <USER_Rash_Turn_Gyroscope_Init+0x12>
 8007d18:	e0d0      	b.n	8007ebc <USER_Rash_Turn_Gyroscope_Init+0x1b4>
		}


		while(memtx==0);
	}
	if(who_am_i==0x6a)
 8007d1a:	4bab      	ldr	r3, [pc, #684]	; (8007fc8 <USER_Rash_Turn_Gyroscope_Init+0x2c0>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b6a      	cmp	r3, #106	; 0x6a
 8007d20:	d000      	beq.n	8007d24 <USER_Rash_Turn_Gyroscope_Init+0x1c>
 8007d22:	e081      	b.n	8007e28 <USER_Rash_Turn_Gyroscope_Init+0x120>
	{
		memrx=0;
 8007d24:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl7_g,1)!=HAL_OK)
 8007d26:	4eab      	ldr	r6, [pc, #684]	; (8007fd4 <USER_Rash_Turn_Gyroscope_Init+0x2cc>)
		memrx=0;
 8007d28:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl7_g,1)!=HAL_OK)
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	9600      	str	r6, [sp, #0]
 8007d30:	2216      	movs	r2, #22
 8007d32:	21d6      	movs	r1, #214	; 0xd6
 8007d34:	0020      	movs	r0, r4
 8007d36:	f7fb fcbb 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d001      	beq.n	8007d42 <USER_Rash_Turn_Gyroscope_Init+0x3a>
		{
			Error_Handler();
 8007d3e:	f000 fdf3 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007d42:	782b      	ldrb	r3, [r5, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0fc      	beq.n	8007d42 <USER_Rash_Turn_Gyroscope_Init+0x3a>

		hexcode=gyro_ctrl7_g&~0xf0;
 8007d48:	220f      	movs	r2, #15
 8007d4a:	7833      	ldrb	r3, [r6, #0]
		hexcode|=0x50;	//high-performance operating mode enabled,HPF enabled,HPF Cutoff 65 mHz
 8007d4c:	270f      	movs	r7, #15
		hexcode=gyro_ctrl7_g&~0xf0;
 8007d4e:	401a      	ands	r2, r3
		hexcode|=0x50;	//high-performance operating mode enabled,HPF enabled,HPF Cutoff 65 mHz
 8007d50:	2350      	movs	r3, #80	; 0x50
 8007d52:	446f      	add	r7, sp
 8007d54:	4313      	orrs	r3, r2
 8007d56:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4e9f      	ldr	r6, [pc, #636]	; (8007fd8 <USER_Rash_Turn_Gyroscope_Init+0x2d0>)

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007d5c:	2216      	movs	r2, #22
		memtx=0;
 8007d5e:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007d60:	3301      	adds	r3, #1
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	9700      	str	r7, [sp, #0]
 8007d66:	21d6      	movs	r1, #214	; 0xd6
 8007d68:	0020      	movs	r0, r4
 8007d6a:	f7fb fbfb 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d001      	beq.n	8007d76 <USER_Rash_Turn_Gyroscope_Init+0x6e>
		{
			Error_Handler();
 8007d72:	f000 fdd9 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8007d76:	7833      	ldrb	r3, [r6, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0fc      	beq.n	8007d76 <USER_Rash_Turn_Gyroscope_Init+0x6e>

		memrx=0;
 8007d7c:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl4_c,1)!=HAL_OK)
 8007d7e:	4a97      	ldr	r2, [pc, #604]	; (8007fdc <USER_Rash_Turn_Gyroscope_Init+0x2d4>)
		memrx=0;
 8007d80:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl4_c,1)!=HAL_OK)
 8007d82:	3301      	adds	r3, #1
 8007d84:	9200      	str	r2, [sp, #0]
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	2213      	movs	r2, #19
 8007d8a:	21d6      	movs	r1, #214	; 0xd6
 8007d8c:	0020      	movs	r0, r4
 8007d8e:	f7fb fc8f 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d001      	beq.n	8007d9a <USER_Rash_Turn_Gyroscope_Init+0x92>
		{
			Error_Handler();
 8007d96:	f000 fdc7 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007d9a:	782b      	ldrb	r3, [r5, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0fc      	beq.n	8007d9a <USER_Rash_Turn_Gyroscope_Init+0x92>

		hexcode=gyro_ctrl4_c&~0b01001010;
 8007da0:	224a      	movs	r2, #74	; 0x4a
 8007da2:	4b8e      	ldr	r3, [pc, #568]	; (8007fdc <USER_Rash_Turn_Gyroscope_Init+0x2d4>)
		//until the settling of the sensor filters is completed.


		memtx=0;

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007da4:	21d6      	movs	r1, #214	; 0xd6
		hexcode=gyro_ctrl4_c&~0b01001010;
 8007da6:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007da8:	0020      	movs	r0, r4
		hexcode=gyro_ctrl4_c&~0b01001010;
 8007daa:	4393      	bics	r3, r2
 8007dac:	001a      	movs	r2, r3
		hexcode|=0x0A;	//Gyroscope sleep mode disabled,Enable gyroscope digital LPF1.,Configuration 1 data available enable bit,
 8007dae:	230a      	movs	r3, #10
 8007db0:	4313      	orrs	r3, r2
 8007db2:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007db8:	3301      	adds	r3, #1
 8007dba:	9301      	str	r3, [sp, #4]
 8007dbc:	9700      	str	r7, [sp, #0]
 8007dbe:	2213      	movs	r2, #19
 8007dc0:	f7fb fbd0 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d001      	beq.n	8007dcc <USER_Rash_Turn_Gyroscope_Init+0xc4>
		{
			Error_Handler();
 8007dc8:	f000 fdae 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8007dcc:	7833      	ldrb	r3, [r6, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0fc      	beq.n	8007dcc <USER_Rash_Turn_Gyroscope_Init+0xc4>

		memrx=0;
 8007dd2:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL6_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl6_c,1)!=HAL_OK)
 8007dd4:	4a82      	ldr	r2, [pc, #520]	; (8007fe0 <USER_Rash_Turn_Gyroscope_Init+0x2d8>)
		memrx=0;
 8007dd6:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL6_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl6_c,1)!=HAL_OK)
 8007dd8:	3301      	adds	r3, #1
 8007dda:	9200      	str	r2, [sp, #0]
 8007ddc:	9301      	str	r3, [sp, #4]
 8007dde:	2215      	movs	r2, #21
 8007de0:	21d6      	movs	r1, #214	; 0xd6
 8007de2:	0020      	movs	r0, r4
 8007de4:	f7fb fc64 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d001      	beq.n	8007df0 <USER_Rash_Turn_Gyroscope_Init+0xe8>
		{
			Error_Handler();
 8007dec:	f000 fd9c 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8007df0:	782b      	ldrb	r3, [r5, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0fc      	beq.n	8007df0 <USER_Rash_Turn_Gyroscope_Init+0xe8>

		hexcode=gyro_ctrl6_c&~0x03;
 8007df6:	2203      	movs	r2, #3
 8007df8:	4b79      	ldr	r3, [pc, #484]	; (8007fe0 <USER_Rash_Turn_Gyroscope_Init+0x2d8>)
		hexcode|=0x02;//LPF Cutoff 4
		memtx=0;

		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL6_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007dfa:	21d6      	movs	r1, #214	; 0xd6
		hexcode=gyro_ctrl6_c&~0x03;
 8007dfc:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL6_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007dfe:	0020      	movs	r0, r4
		hexcode=gyro_ctrl6_c&~0x03;
 8007e00:	4393      	bics	r3, r2
 8007e02:	001a      	movs	r2, r3
		hexcode|=0x02;//LPF Cutoff 4
 8007e04:	2302      	movs	r3, #2
 8007e06:	4313      	orrs	r3, r2
 8007e08:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL6_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007e0e:	3301      	adds	r3, #1
 8007e10:	9301      	str	r3, [sp, #4]
 8007e12:	9700      	str	r7, [sp, #0]
 8007e14:	2215      	movs	r2, #21
 8007e16:	f7fb fba5 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d001      	beq.n	8007e22 <USER_Rash_Turn_Gyroscope_Init+0x11a>
		{
			Error_Handler();
 8007e1e:	f000 fd83 	bl	8008928 <Error_Handler>
		}


		while(memtx==0);
 8007e22:	7833      	ldrb	r3, [r6, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0fc      	beq.n	8007e22 <USER_Rash_Turn_Gyroscope_Init+0x11a>

	}
	memrx=0;
 8007e28:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL2_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl2_g,1)!=HAL_OK)
 8007e2a:	4e6e      	ldr	r6, [pc, #440]	; (8007fe4 <USER_Rash_Turn_Gyroscope_Init+0x2dc>)
	memrx=0;
 8007e2c:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL2_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl2_g,1)!=HAL_OK)
 8007e2e:	3301      	adds	r3, #1
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	9600      	str	r6, [sp, #0]
 8007e34:	2211      	movs	r2, #17
 8007e36:	21d6      	movs	r1, #214	; 0xd6
 8007e38:	0020      	movs	r0, r4
 8007e3a:	f7fb fc39 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d001      	beq.n	8007e46 <USER_Rash_Turn_Gyroscope_Init+0x13e>
	{
		Error_Handler();
 8007e42:	f000 fd71 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8007e46:	782b      	ldrb	r3, [r5, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0fc      	beq.n	8007e46 <USER_Rash_Turn_Gyroscope_Init+0x13e>

	hexcode=gyro_ctrl2_g&0x1;
 8007e4c:	2301      	movs	r3, #1
	hexcode|=0x12;
 8007e4e:	200f      	movs	r0, #15
 8007e50:	2212      	movs	r2, #18
	hexcode=gyro_ctrl2_g&0x1;
 8007e52:	7831      	ldrb	r1, [r6, #0]
	hexcode|=0x12;
 8007e54:	4468      	add	r0, sp
	hexcode=gyro_ctrl2_g&0x1;
 8007e56:	4019      	ands	r1, r3
	hexcode|=0x12;
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	7002      	strb	r2, [r0, #0]

	memtx=0;
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4d5e      	ldr	r5, [pc, #376]	; (8007fd8 <USER_Rash_Turn_Gyroscope_Init+0x2d0>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL2_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//// Gyro = 12.5Hz (High-Performance mode),125dps
 8007e60:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 8007e62:	702a      	strb	r2, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL2_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//// Gyro = 12.5Hz (High-Performance mode),125dps
 8007e64:	9000      	str	r0, [sp, #0]
 8007e66:	9301      	str	r3, [sp, #4]
 8007e68:	3211      	adds	r2, #17
 8007e6a:	0020      	movs	r0, r4
 8007e6c:	f7fb fb7a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d100      	bne.n	8007e76 <USER_Rash_Turn_Gyroscope_Init+0x16e>
 8007e74:	e0a3      	b.n	8007fbe <USER_Rash_Turn_Gyroscope_Init+0x2b6>
	{
		Error_Handler();
 8007e76:	f000 fd57 	bl	8008928 <Error_Handler>
	else
	{
		mdps_per_LSB=4.375;
	}

	while(memtx==0);
 8007e7a:	782b      	ldrb	r3, [r5, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0fc      	beq.n	8007e7a <USER_Rash_Turn_Gyroscope_Init+0x172>



	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8007e80:	2201      	movs	r2, #1
 8007e82:	2102      	movs	r1, #2
 8007e84:	4858      	ldr	r0, [pc, #352]	; (8007fe8 <USER_Rash_Turn_Gyroscope_Init+0x2e0>)
 8007e86:	f7fb f98f 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4c57      	ldr	r4, [pc, #348]	; (8007fec <USER_Rash_Turn_Gyroscope_Init+0x2e4>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nGyroscope Output filter Initialized for RASH Turn Sensing......\r\n",strlen("\r\nGyroscope Output filter Initialized for RASH Turn Sensing......\r\n"))!=HAL_OK)
 8007e8e:	2243      	movs	r2, #67	; 0x43
 8007e90:	4957      	ldr	r1, [pc, #348]	; (8007ff0 <USER_Rash_Turn_Gyroscope_Init+0x2e8>)
 8007e92:	4858      	ldr	r0, [pc, #352]	; (8007ff4 <USER_Rash_Turn_Gyroscope_Init+0x2ec>)
	uarttx_req=1;
 8007e94:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\nGyroscope Output filter Initialized for RASH Turn Sensing......\r\n",strlen("\r\nGyroscope Output filter Initialized for RASH Turn Sensing......\r\n"))!=HAL_OK)
 8007e96:	f7fc ff13 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d001      	beq.n	8007ea2 <USER_Rash_Turn_Gyroscope_Init+0x19a>
	{
		Error_Handler();
 8007e9e:	f000 fd43 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8007ea2:	7823      	ldrb	r3, [r4, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d0fc      	beq.n	8007ea2 <USER_Rash_Turn_Gyroscope_Init+0x19a>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2102      	movs	r1, #2
 8007eac:	484e      	ldr	r0, [pc, #312]	; (8007fe8 <USER_Rash_Turn_Gyroscope_Init+0x2e0>)
 8007eae:	f7fb f97b 	bl	80031a8 <HAL_GPIO_WritePin>

	HAL_Delay(160);
 8007eb2:	20a0      	movs	r0, #160	; 0xa0
 8007eb4:	f7fa ff60 	bl	8002d78 <HAL_Delay>
}
 8007eb8:	b005      	add	sp, #20
 8007eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memrx=0;
 8007ebc:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl4_c,1)!=HAL_OK)
 8007ebe:	4e47      	ldr	r6, [pc, #284]	; (8007fdc <USER_Rash_Turn_Gyroscope_Init+0x2d4>)
		memrx=0;
 8007ec0:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl4_c,1)!=HAL_OK)
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	9600      	str	r6, [sp, #0]
 8007ec8:	2213      	movs	r2, #19
 8007eca:	21d6      	movs	r1, #214	; 0xd6
 8007ecc:	0020      	movs	r0, r4
 8007ece:	f7fb fbef 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d001      	beq.n	8007eda <USER_Rash_Turn_Gyroscope_Init+0x1d2>
			Error_Handler();
 8007ed6:	f000 fd27 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8007eda:	782b      	ldrb	r3, [r5, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0fc      	beq.n	8007eda <USER_Rash_Turn_Gyroscope_Init+0x1d2>
		hexcode=gyro_ctrl4_c&(~0x48);
 8007ee0:	2248      	movs	r2, #72	; 0x48
 8007ee2:	7833      	ldrb	r3, [r6, #0]
		hexcode|=0x08;
 8007ee4:	270f      	movs	r7, #15
		hexcode=gyro_ctrl4_c&(~0x48);
 8007ee6:	4393      	bics	r3, r2
 8007ee8:	001a      	movs	r2, r3
		hexcode|=0x08;
 8007eea:	2308      	movs	r3, #8
 8007eec:	446f      	add	r7, sp
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4e38      	ldr	r6, [pc, #224]	; (8007fd8 <USER_Rash_Turn_Gyroscope_Init+0x2d0>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Data-ready mask enable. If enabled, when switching from Power-Down to an
 8007ef6:	2213      	movs	r2, #19
		memtx=0;
 8007ef8:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL4_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)//Data-ready mask enable. If enabled, when switching from Power-Down to an
 8007efa:	3301      	adds	r3, #1
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	9700      	str	r7, [sp, #0]
 8007f00:	21d6      	movs	r1, #214	; 0xd6
 8007f02:	0020      	movs	r0, r4
 8007f04:	f7fb fb2e 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d001      	beq.n	8007f10 <USER_Rash_Turn_Gyroscope_Init+0x208>
			Error_Handler();
 8007f0c:	f000 fd0c 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8007f10:	7833      	ldrb	r3, [r6, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0fc      	beq.n	8007f10 <USER_Rash_Turn_Gyroscope_Init+0x208>
		memrx=0;
 8007f16:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL10_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl10_c,1)!=HAL_OK)
 8007f18:	4a37      	ldr	r2, [pc, #220]	; (8007ff8 <USER_Rash_Turn_Gyroscope_Init+0x2f0>)
		memrx=0;
 8007f1a:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL10_C,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl10_c,1)!=HAL_OK)
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	9200      	str	r2, [sp, #0]
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	2219      	movs	r2, #25
 8007f24:	21d6      	movs	r1, #214	; 0xd6
 8007f26:	0020      	movs	r0, r4
 8007f28:	f7fb fbc2 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d001      	beq.n	8007f34 <USER_Rash_Turn_Gyroscope_Init+0x22c>
			Error_Handler();
 8007f30:	f000 fcfa 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8007f34:	782b      	ldrb	r3, [r5, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0fc      	beq.n	8007f34 <USER_Rash_Turn_Gyroscope_Init+0x22c>
		hexcode=gyro_ctrl10_c&~0x38;
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <USER_Rash_Turn_Gyroscope_Init+0x2f0>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL10_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007f3c:	21d6      	movs	r1, #214	; 0xd6
		hexcode=gyro_ctrl10_c&~0x38;
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	2338      	movs	r3, #56	; 0x38
 8007f42:	439a      	bics	r2, r3
		hexcode|=0x38;																// Gyro X, Y, Z axes enabled
 8007f44:	4313      	orrs	r3, r2
 8007f46:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL10_C,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	9700      	str	r7, [sp, #0]
 8007f52:	2219      	movs	r2, #25
 8007f54:	0020      	movs	r0, r4
 8007f56:	f7fb fb05 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d001      	beq.n	8007f62 <USER_Rash_Turn_Gyroscope_Init+0x25a>
			Error_Handler();
 8007f5e:	f000 fce3 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8007f62:	7833      	ldrb	r3, [r6, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0fc      	beq.n	8007f62 <USER_Rash_Turn_Gyroscope_Init+0x25a>
		memrx=0;
 8007f68:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl7_g,1)!=HAL_OK)
 8007f6a:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <USER_Rash_Turn_Gyroscope_Init+0x2cc>)
		memrx=0;
 8007f6c:	702b      	strb	r3, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&gyro_ctrl7_g,1)!=HAL_OK)
 8007f6e:	3301      	adds	r3, #1
 8007f70:	9200      	str	r2, [sp, #0]
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	2216      	movs	r2, #22
 8007f76:	21d6      	movs	r1, #214	; 0xd6
 8007f78:	0020      	movs	r0, r4
 8007f7a:	f7fb fb99 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d001      	beq.n	8007f86 <USER_Rash_Turn_Gyroscope_Init+0x27e>
			Error_Handler();
 8007f82:	f000 fcd1 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8007f86:	782b      	ldrb	r3, [r5, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d0fc      	beq.n	8007f86 <USER_Rash_Turn_Gyroscope_Init+0x27e>
		hexcode=gyro_ctrl7_g&~0xf8;
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <USER_Rash_Turn_Gyroscope_Init+0x2cc>)
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007f90:	21d6      	movs	r1, #214	; 0xd6
		hexcode=gyro_ctrl7_g&~0xf8;
 8007f92:	781b      	ldrb	r3, [r3, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007f94:	0020      	movs	r0, r4
		hexcode=gyro_ctrl7_g&~0xf8;
 8007f96:	401a      	ands	r2, r3
		hexcode|=0x58;						//high-performance operating mode enabled,HPF enabled,HPF Cutoff 0.0324 Hz
 8007f98:	2358      	movs	r3, #88	; 0x58
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	703b      	strb	r3, [r7, #0]
		memtx=0;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL7_G,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	9700      	str	r7, [sp, #0]
 8007fa8:	2216      	movs	r2, #22
 8007faa:	f7fb fadb 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d001      	beq.n	8007fb6 <USER_Rash_Turn_Gyroscope_Init+0x2ae>
			Error_Handler();
 8007fb2:	f000 fcb9 	bl	8008928 <Error_Handler>
		while(memtx==0);
 8007fb6:	7833      	ldrb	r3, [r6, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0fc      	beq.n	8007fb6 <USER_Rash_Turn_Gyroscope_Init+0x2ae>
 8007fbc:	e6ad      	b.n	8007d1a <USER_Rash_Turn_Gyroscope_Init+0x12>
		mdps_per_LSB=4.375;
 8007fbe:	4a0f      	ldr	r2, [pc, #60]	; (8007ffc <USER_Rash_Turn_Gyroscope_Init+0x2f4>)
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <USER_Rash_Turn_Gyroscope_Init+0x2f8>)
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e759      	b.n	8007e7a <USER_Rash_Turn_Gyroscope_Init+0x172>
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	20000379 	.word	0x20000379
 8007fcc:	20000269 	.word	0x20000269
 8007fd0:	200003a0 	.word	0x200003a0
 8007fd4:	2000022e 	.word	0x2000022e
 8007fd8:	2000026a 	.word	0x2000026a
 8007fdc:	2000022c 	.word	0x2000022c
 8007fe0:	2000022d 	.word	0x2000022d
 8007fe4:	2000022b 	.word	0x2000022b
 8007fe8:	48000400 	.word	0x48000400
 8007fec:	20000378 	.word	0x20000378
 8007ff0:	0800f35e 	.word	0x0800f35e
 8007ff4:	20000510 	.word	0x20000510
 8007ff8:	2000022a 	.word	0x2000022a
 8007ffc:	408c0000 	.word	0x408c0000
 8008000:	20000478 	.word	0x20000478

08008004 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize>:
uint8_t USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize(void)
{
	uint8_t i;
	extern uint16_t harsh_accel_brake_function_wakeup_threshold_optimized;

	harsh_accel_brake_function_wakeup_threshold_optimized=harsh_accel_brake_function_wakeup_threshold*cos(degToRad(referance_tilt_angle[forward_axes]));
 8008004:	4b41      	ldr	r3, [pc, #260]	; (800810c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x108>)
{
 8008006:	b5f0      	push	{r4, r5, r6, r7, lr}
	harsh_accel_brake_function_wakeup_threshold_optimized=harsh_accel_brake_function_wakeup_threshold*cos(degToRad(referance_tilt_angle[forward_axes]));
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	4941      	ldr	r1, [pc, #260]	; (8008110 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x10c>)
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	18c9      	adds	r1, r1, r3
{
 8008010:	b085      	sub	sp, #20
	harsh_accel_brake_function_wakeup_threshold_optimized=harsh_accel_brake_function_wakeup_threshold*cos(degToRad(referance_tilt_angle[forward_axes]));
 8008012:	4a40      	ldr	r2, [pc, #256]	; (8008114 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x110>)
 8008014:	4b40      	ldr	r3, [pc, #256]	; (8008118 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x114>)
 8008016:	6808      	ldr	r0, [r1, #0]
 8008018:	6849      	ldr	r1, [r1, #4]
 800801a:	f7f9 ff41 	bl	8001ea0 <__aeabi_dmul>
 800801e:	2200      	movs	r2, #0
 8008020:	4b3e      	ldr	r3, [pc, #248]	; (800811c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x118>)
 8008022:	f7f9 fb09 	bl	8001638 <__aeabi_ddiv>
 8008026:	f004 fb93 	bl	800c750 <cos>
 800802a:	0004      	movs	r4, r0
 800802c:	000d      	movs	r5, r1
 800802e:	4b3c      	ldr	r3, [pc, #240]	; (8008120 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x11c>)
 8008030:	8818      	ldrh	r0, [r3, #0]
 8008032:	f7fa fd1f 	bl	8002a74 <__aeabi_i2d>
 8008036:	0022      	movs	r2, r4
 8008038:	002b      	movs	r3, r5
 800803a:	f7f9 ff31 	bl	8001ea0 <__aeabi_dmul>
 800803e:	f7f8 fa75 	bl	800052c <__aeabi_d2uiz>
 8008042:	4b38      	ldr	r3, [pc, #224]	; (8008124 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x120>)
 8008044:	b285      	uxth	r5, r0
 8008046:	801d      	strh	r5, [r3, #0]
	for(i=0;i*pow(2,15)*mg_per_LSB/pow(2,6) < harsh_accel_brake_function_wakeup_threshold_optimized+1 ;i++)
 8008048:	4b37      	ldr	r3, [pc, #220]	; (8008128 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x124>)
 800804a:	2400      	movs	r4, #0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7fa fd53 	bl	8002af8 <__aeabi_f2d>
 8008052:	0006      	movs	r6, r0
 8008054:	000f      	movs	r7, r1
 8008056:	1c6b      	adds	r3, r5, #1
 8008058:	9303      	str	r3, [sp, #12]
 800805a:	0020      	movs	r0, r4
 800805c:	f7fa fd0a 	bl	8002a74 <__aeabi_i2d>
 8008060:	2200      	movs	r2, #0
 8008062:	4b32      	ldr	r3, [pc, #200]	; (800812c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x128>)
 8008064:	f7f9 ff1c 	bl	8001ea0 <__aeabi_dmul>
 8008068:	0032      	movs	r2, r6
 800806a:	003b      	movs	r3, r7
 800806c:	f7f9 ff18 	bl	8001ea0 <__aeabi_dmul>
 8008070:	2200      	movs	r2, #0
 8008072:	4b2f      	ldr	r3, [pc, #188]	; (8008130 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x12c>)
 8008074:	f7f9 ff14 	bl	8001ea0 <__aeabi_dmul>
 8008078:	9000      	str	r0, [sp, #0]
 800807a:	9101      	str	r1, [sp, #4]
 800807c:	9803      	ldr	r0, [sp, #12]
 800807e:	f7fa fcf9 	bl	8002a74 <__aeabi_i2d>
 8008082:	0002      	movs	r2, r0
 8008084:	000b      	movs	r3, r1
 8008086:	9800      	ldr	r0, [sp, #0]
 8008088:	9901      	ldr	r1, [sp, #4]
 800808a:	f7f8 f9ed 	bl	8000468 <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d138      	bne.n	8008104 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x100>
	{

	}

	sprintf(out_string,"\r\nOptimized Harsh Acceleration and Brake Wakeup Threshold is %d mg and it is set to %d mg\r\n",harsh_accel_brake_function_wakeup_threshold_optimized,(int16_t)(--i*pow(2,15)*mg_per_LSB/pow(2,6)));
 8008092:	3c01      	subs	r4, #1
 8008094:	b2e4      	uxtb	r4, r4
 8008096:	0020      	movs	r0, r4
 8008098:	f7fa fcec 	bl	8002a74 <__aeabi_i2d>
 800809c:	2200      	movs	r2, #0
 800809e:	4b23      	ldr	r3, [pc, #140]	; (800812c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x128>)
 80080a0:	f7f9 fefe 	bl	8001ea0 <__aeabi_dmul>
 80080a4:	0032      	movs	r2, r6
 80080a6:	003b      	movs	r3, r7
 80080a8:	f7f9 fefa 	bl	8001ea0 <__aeabi_dmul>
 80080ac:	2200      	movs	r2, #0
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x12c>)
 80080b0:	f7f9 fef6 	bl	8001ea0 <__aeabi_dmul>
 80080b4:	f7fa fcaa 	bl	8002a0c <__aeabi_d2iz>
 80080b8:	4e1e      	ldr	r6, [pc, #120]	; (8008134 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x130>)
 80080ba:	b203      	sxth	r3, r0
 80080bc:	002a      	movs	r2, r5
 80080be:	491e      	ldr	r1, [pc, #120]	; (8008138 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x134>)
 80080c0:	0030      	movs	r0, r6
 80080c2:	f003 fe21 	bl	800bd08 <siprintf>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80080c6:	2201      	movs	r2, #1
 80080c8:	2102      	movs	r1, #2
 80080ca:	481c      	ldr	r0, [pc, #112]	; (800813c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x138>)
 80080cc:	f7fb f86c 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80080d0:	2301      	movs	r3, #1
 80080d2:	4d1b      	ldr	r5, [pc, #108]	; (8008140 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x13c>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80080d4:	0030      	movs	r0, r6
	uarttx_req=1;
 80080d6:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80080d8:	f7f8 f814 	bl	8000104 <strlen>
 80080dc:	0031      	movs	r1, r6
 80080de:	b282      	uxth	r2, r0
 80080e0:	4818      	ldr	r0, [pc, #96]	; (8008144 <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x140>)
 80080e2:	f7fc fded 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d001      	beq.n	80080ee <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0xea>
	{
		Error_Handler();
 80080ea:	f000 fc1d 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80080ee:	782b      	ldrb	r3, [r5, #0]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d0fc      	beq.n	80080ee <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0xea>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80080f4:	2200      	movs	r2, #0
 80080f6:	2102      	movs	r1, #2
 80080f8:	4810      	ldr	r0, [pc, #64]	; (800813c <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x138>)
 80080fa:	f7fb f855 	bl	80031a8 <HAL_GPIO_WritePin>
	return i;
}
 80080fe:	0020      	movs	r0, r4
 8008100:	b005      	add	sp, #20
 8008102:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i=0;i*pow(2,15)*mg_per_LSB/pow(2,6) < harsh_accel_brake_function_wakeup_threshold_optimized+1 ;i++)
 8008104:	3401      	adds	r4, #1
 8008106:	b2e4      	uxtb	r4, r4
 8008108:	e7a7      	b.n	800805a <USER_Harsh_Acceleration_Brake_Function_Wakeup_Threshold_Optimize+0x56>
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	20000008 	.word	0x20000008
 8008110:	20000338 	.word	0x20000338
 8008114:	54442d18 	.word	0x54442d18
 8008118:	400921fb 	.word	0x400921fb
 800811c:	40668000 	.word	0x40668000
 8008120:	2000000c 	.word	0x2000000c
 8008124:	20000474 	.word	0x20000474
 8008128:	2000047c 	.word	0x2000047c
 800812c:	40e00000 	.word	0x40e00000
 8008130:	3f900000 	.word	0x3f900000
 8008134:	2000026b 	.word	0x2000026b
 8008138:	0800f3a2 	.word	0x0800f3a2
 800813c:	48000400 	.word	0x48000400
 8008140:	20000378 	.word	0x20000378
 8008144:	20000510 	.word	0x20000510

08008148 <USER_Harsh_Acceleration_Harsh_brake_Find>:
static uint8_t harsh_accel_itration=0,harsh_brake_itration=0,not_harsh_itration=0;



enum Acceleration_Brake USER_Harsh_Acceleration_Harsh_brake_Find(void)
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t wake_up_src,status_reg;
	int8_t error_int_xl;
	int16_t array_out_xl[3],error_current_xl;


	memrx=0;
 800814a:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800814c:	250e      	movs	r5, #14
	memrx=0;
 800814e:	4cc6      	ldr	r4, [pc, #792]	; (8008468 <USER_Harsh_Acceleration_Harsh_brake_Find+0x320>)
{
 8008150:	b087      	sub	sp, #28
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8008152:	4ec6      	ldr	r6, [pc, #792]	; (800846c <USER_Harsh_Acceleration_Harsh_brake_Find+0x324>)
	memrx=0;
 8008154:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8008156:	446d      	add	r5, sp
 8008158:	3301      	adds	r3, #1
 800815a:	9301      	str	r3, [sp, #4]
 800815c:	9500      	str	r5, [sp, #0]
 800815e:	221b      	movs	r2, #27
 8008160:	21d6      	movs	r1, #214	; 0xd6
 8008162:	0030      	movs	r0, r6
 8008164:	f7fb faa4 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8008168:	2800      	cmp	r0, #0
 800816a:	d001      	beq.n	8008170 <USER_Harsh_Acceleration_Harsh_brake_Find+0x28>
	{
		Error_Handler();
 800816c:	f000 fbdc 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8008170:	7823      	ldrb	r3, [r4, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0fc      	beq.n	8008170 <USER_Harsh_Acceleration_Harsh_brake_Find+0x28>

	if(  (wake_up_src&0x08) == 0x08)
 8008176:	782b      	ldrb	r3, [r5, #0]
 8008178:	071b      	lsls	r3, r3, #28
 800817a:	d400      	bmi.n	800817e <USER_Harsh_Acceleration_Harsh_brake_Find+0x36>
 800817c:	e0f6      	b.n	800836c <USER_Harsh_Acceleration_Harsh_brake_Find+0x224>
	{




		wait:	memrx=0;
 800817e:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008180:	270f      	movs	r7, #15
		wait:	memrx=0;
 8008182:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008184:	446f      	add	r7, sp
 8008186:	3301      	adds	r3, #1
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	9700      	str	r7, [sp, #0]
 800818c:	221e      	movs	r2, #30
 800818e:	21d6      	movs	r1, #214	; 0xd6
 8008190:	0030      	movs	r0, r6
 8008192:	f7fb fa8d 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8008196:	2800      	cmp	r0, #0
 8008198:	d001      	beq.n	800819e <USER_Harsh_Acceleration_Harsh_brake_Find+0x56>
		{
			Error_Handler();
 800819a:	f000 fbc5 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800819e:	7823      	ldrb	r3, [r4, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0fc      	beq.n	800819e <USER_Harsh_Acceleration_Harsh_brake_Find+0x56>



		if((status_reg&1) ==1)
 80081a4:	2201      	movs	r2, #1
 80081a6:	783b      	ldrb	r3, [r7, #0]
 80081a8:	4213      	tst	r3, r2
 80081aa:	d0e8      	beq.n	800817e <USER_Harsh_Acceleration_Harsh_brake_Find+0x36>
		{

			memrx=0;
 80081ac:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 80081ae:	af04      	add	r7, sp, #16
			memrx=0;
 80081b0:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 80081b2:	3306      	adds	r3, #6
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	9700      	str	r7, [sp, #0]
 80081b8:	0013      	movs	r3, r2
 80081ba:	21d6      	movs	r1, #214	; 0xd6
 80081bc:	3227      	adds	r2, #39	; 0x27
 80081be:	0030      	movs	r0, r6
 80081c0:	f7fb fa76 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d001      	beq.n	80081cc <USER_Harsh_Acceleration_Harsh_brake_Find+0x84>
			{
				Error_Handler();
 80081c8:	f000 fbae 	bl	8008928 <Error_Handler>
			}

			while(memrx==0);
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0fc      	beq.n	80081cc <USER_Harsh_Acceleration_Harsh_brake_Find+0x84>
		}




		switch (forward_axes)
 80081d2:	4ba7      	ldr	r3, [pc, #668]	; (8008470 <USER_Harsh_Acceleration_Harsh_brake_Find+0x328>)
 80081d4:	7818      	ldrb	r0, [r3, #0]
 80081d6:	2803      	cmp	r0, #3
 80081d8:	d900      	bls.n	80081dc <USER_Harsh_Acceleration_Harsh_brake_Find+0x94>
 80081da:	e128      	b.n	800842e <USER_Harsh_Acceleration_Harsh_brake_Find+0x2e6>
 80081dc:	f7f7 ffae 	bl	800013c <__gnu_thumb1_case_uhi>
 80081e0:	008c0004 	.word	0x008c0004
 80081e4:	010500ce 	.word	0x010500ce
		{

		case X: 	if((wake_up_src&0x04)==0x04)
 80081e8:	2204      	movs	r2, #4
 80081ea:	782b      	ldrb	r3, [r5, #0]
 80081ec:	4013      	ands	r3, r2
 80081ee:	d100      	bne.n	80081f2 <USER_Harsh_Acceleration_Harsh_brake_Find+0xaa>
 80081f0:	e074      	b.n	80082dc <USER_Harsh_Acceleration_Harsh_brake_Find+0x194>
		{
			error_current_xl	=	array_out_xl[X]	-	xl_axes_ref[X];
 80081f2:	4ba0      	ldr	r3, [pc, #640]	; (8008474 <USER_Harsh_Acceleration_Harsh_brake_Find+0x32c>)
 80081f4:	8838      	ldrh	r0, [r7, #0]
 80081f6:	881b      	ldrh	r3, [r3, #0]
				error_int_xl=PLUS;

			}
			else
			{
				error_int_xl=MINUS;
 80081f8:	2501      	movs	r5, #1
			error_current_xl	=	array_out_xl[X]	-	xl_axes_ref[X];
 80081fa:	1ac0      	subs	r0, r0, r3
 80081fc:	b200      	sxth	r0, r0
				error_int_xl=MINUS;
 80081fe:	1e44      	subs	r4, r0, #1
 8008200:	4304      	orrs	r4, r0
			}

			sprintf(out_string,"\r\X - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 8008202:	f7f8 fe73 	bl	8000eec <__aeabi_i2f>
 8008206:	4b9c      	ldr	r3, [pc, #624]	; (8008478 <USER_Harsh_Acceleration_Harsh_brake_Find+0x330>)
				error_int_xl=MINUS;
 8008208:	17e4      	asrs	r4, r4, #31
			sprintf(out_string,"\r\X - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	f7f8 fd2e 	bl	8000c6c <__aeabi_fmul>
 8008210:	f7f8 fe4c 	bl	8000eac <__aeabi_f2iz>
 8008214:	4e99      	ldr	r6, [pc, #612]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 8008216:	b202      	sxth	r2, r0
 8008218:	4999      	ldr	r1, [pc, #612]	; (8008480 <USER_Harsh_Acceleration_Harsh_brake_Find+0x338>)
 800821a:	0030      	movs	r0, r6
 800821c:	f003 fd74 	bl	800bd08 <siprintf>


			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008220:	002a      	movs	r2, r5
 8008222:	2102      	movs	r1, #2
 8008224:	4897      	ldr	r0, [pc, #604]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 8008226:	f7fa ffbf 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800822a:	4f97      	ldr	r7, [pc, #604]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800822c:	0030      	movs	r0, r6
			uarttx_req=1;
 800822e:	703d      	strb	r5, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008230:	f7f7 ff68 	bl	8000104 <strlen>
 8008234:	0031      	movs	r1, r6
 8008236:	b282      	uxth	r2, r0
 8008238:	4894      	ldr	r0, [pc, #592]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
				error_int_xl=MINUS;
 800823a:	432c      	orrs	r4, r5
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800823c:	f7fc fd40 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008240:	2800      	cmp	r0, #0
 8008242:	d001      	beq.n	8008248 <USER_Harsh_Acceleration_Harsh_brake_Find+0x100>
			{
				Error_Handler();
 8008244:	f000 fb70 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8008248:	783b      	ldrb	r3, [r7, #0]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d0fc      	beq.n	8008248 <USER_Harsh_Acceleration_Harsh_brake_Find+0x100>
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
			{
				Error_Handler();
			}
			while(uarttx_req==1);
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800824e:	2200      	movs	r2, #0
 8008250:	2102      	movs	r1, #2
 8008252:	488c      	ldr	r0, [pc, #560]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 8008254:	f7fa ffa8 	bl	80031a8 <HAL_GPIO_WritePin>

			if(error_int_xl==sign_of_acceleration)
 8008258:	2100      	movs	r1, #0
 800825a:	4b8d      	ldr	r3, [pc, #564]	; (8008490 <USER_Harsh_Acceleration_Harsh_brake_Find+0x348>)
 800825c:	4a8d      	ldr	r2, [pc, #564]	; (8008494 <USER_Harsh_Acceleration_Harsh_brake_Find+0x34c>)
 800825e:	5659      	ldrsb	r1, [r3, r1]
 8008260:	4b8d      	ldr	r3, [pc, #564]	; (8008498 <USER_Harsh_Acceleration_Harsh_brake_Find+0x350>)
 8008262:	42a1      	cmp	r1, r4
 8008264:	d000      	beq.n	8008268 <USER_Harsh_Acceleration_Harsh_brake_Find+0x120>
 8008266:	e0bb      	b.n	80083e0 <USER_Harsh_Acceleration_Harsh_brake_Find+0x298>
			{
				harsh_accel_itration++;
 8008268:	7811      	ldrb	r1, [r2, #0]
 800826a:	3101      	adds	r1, #1
 800826c:	7011      	strb	r1, [r2, #0]
				harsh_brake_itration=0;
 800826e:	2100      	movs	r1, #0

			}
			else
			{
				harsh_accel_itration=0;
				harsh_brake_itration++;
 8008270:	7019      	strb	r1, [r3, #0]
			}

			if(harsh_accel_itration >= HARSH_ACCELERATION_HARSH_BRAKE_ITRATION_THRESHOLD)
 8008272:	7811      	ldrb	r1, [r2, #0]
 8008274:	2400      	movs	r4, #0
 8008276:	2902      	cmp	r1, #2
 8008278:	d901      	bls.n	800827e <USER_Harsh_Acceleration_Harsh_brake_Find+0x136>
			{
				harsh_accel_itration=0;
 800827a:	7014      	strb	r4, [r2, #0]
				current_acceleration_brake_status=HARSH_ACCELERATION;
 800827c:	3401      	adds	r4, #1



			}
			if(harsh_brake_itration >= HARSH_ACCELERATION_HARSH_BRAKE_ITRATION_THRESHOLD)
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	2a02      	cmp	r2, #2
 8008282:	d902      	bls.n	800828a <USER_Harsh_Acceleration_Harsh_brake_Find+0x142>
			{
				harsh_brake_itration=0;
 8008284:	2200      	movs	r2, #0

				current_acceleration_brake_status=HARSH_BRAKING;
 8008286:	2402      	movs	r4, #2
				harsh_brake_itration=0;
 8008288:	701a      	strb	r2, [r3, #0]

			}



			not_harsh_itration=0;
 800828a:	2200      	movs	r2, #0
 800828c:	4b83      	ldr	r3, [pc, #524]	; (800849c <USER_Harsh_Acceleration_Harsh_brake_Find+0x354>)
 800828e:	701a      	strb	r2, [r3, #0]
		harsh_accel_itration=0;
		harsh_brake_itration=0;
	}


	if(current_acceleration_brake_status==HARSH_ACCELERATION)
 8008290:	2c01      	cmp	r4, #1
 8008292:	d000      	beq.n	8008296 <USER_Harsh_Acceleration_Harsh_brake_Find+0x14e>
 8008294:	e10e      	b.n	80084b4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x36c>
	{
		sprintf(out_string,"\r\nHARSH Acceleration\r\n");
 8008296:	4d79      	ldr	r5, [pc, #484]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 8008298:	4981      	ldr	r1, [pc, #516]	; (80084a0 <USER_Harsh_Acceleration_Harsh_brake_Find+0x358>)
 800829a:	0028      	movs	r0, r5
 800829c:	f003 fd56 	bl	800bd4c <strcpy>


		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80082a0:	0022      	movs	r2, r4
 80082a2:	2102      	movs	r1, #2
 80082a4:	4877      	ldr	r0, [pc, #476]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 80082a6:	f7fa ff7f 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80082aa:	4e77      	ldr	r6, [pc, #476]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80082ac:	0028      	movs	r0, r5
		uarttx_req=1;
 80082ae:	7034      	strb	r4, [r6, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80082b0:	f7f7 ff28 	bl	8000104 <strlen>
 80082b4:	0029      	movs	r1, r5
 80082b6:	b282      	uxth	r2, r0
 80082b8:	4874      	ldr	r0, [pc, #464]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
 80082ba:	f7fc fd01 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d001      	beq.n	80082c6 <USER_Harsh_Acceleration_Harsh_brake_Find+0x17e>
		{
			Error_Handler();
 80082c2:	f000 fb31 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 80082c6:	7833      	ldrb	r3, [r6, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d0fc      	beq.n	80082c6 <USER_Harsh_Acceleration_Harsh_brake_Find+0x17e>
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
		{
			Error_Handler();
		}
		while(uarttx_req==1);
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80082cc:	2200      	movs	r2, #0
 80082ce:	2102      	movs	r1, #2
 80082d0:	486c      	ldr	r0, [pc, #432]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 80082d2:	f7fa ff69 	bl	80031a8 <HAL_GPIO_WritePin>
	}

	return current_acceleration_brake_status;
}
 80082d6:	0020      	movs	r0, r4
 80082d8:	b007      	add	sp, #28
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			not_harsh_itration++;
 80082dc:	496f      	ldr	r1, [pc, #444]	; (800849c <USER_Harsh_Acceleration_Harsh_brake_Find+0x354>)
 80082de:	780a      	ldrb	r2, [r1, #0]
 80082e0:	3201      	adds	r2, #1
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	700a      	strb	r2, [r1, #0]
			if(not_harsh_itration	>= NOT_HARSH_ITRATION_THRESHOLD)
 80082e6:	2a04      	cmp	r2, #4
 80082e8:	d904      	bls.n	80082f4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x1ac>
				harsh_accel_itration=0;
 80082ea:	4a6a      	ldr	r2, [pc, #424]	; (8008494 <USER_Harsh_Acceleration_Harsh_brake_Find+0x34c>)
				not_harsh_itration=0;
 80082ec:	700b      	strb	r3, [r1, #0]
				harsh_accel_itration=0;
 80082ee:	7013      	strb	r3, [r2, #0]
				harsh_brake_itration=0;
 80082f0:	4a69      	ldr	r2, [pc, #420]	; (8008498 <USER_Harsh_Acceleration_Harsh_brake_Find+0x350>)
 80082f2:	7013      	strb	r3, [r2, #0]
				current_acceleration_brake_status=HARSH_BRAKING;
 80082f4:	2400      	movs	r4, #0
	return current_acceleration_brake_status;
 80082f6:	e7ee      	b.n	80082d6 <USER_Harsh_Acceleration_Harsh_brake_Find+0x18e>
		case Y:	if((wake_up_src&0x02)==0x02)
 80082f8:	782b      	ldrb	r3, [r5, #0]
 80082fa:	2502      	movs	r5, #2
 80082fc:	422b      	tst	r3, r5
 80082fe:	d02e      	beq.n	800835e <USER_Harsh_Acceleration_Harsh_brake_Find+0x216>
			error_current_xl=	array_out_xl[Y]	-	xl_axes_ref[Y];
 8008300:	4b5c      	ldr	r3, [pc, #368]	; (8008474 <USER_Harsh_Acceleration_Harsh_brake_Find+0x32c>)
 8008302:	8878      	ldrh	r0, [r7, #2]
 8008304:	885b      	ldrh	r3, [r3, #2]
				error_int_xl	=	MINUS;
 8008306:	2601      	movs	r6, #1
			error_current_xl=	array_out_xl[Y]	-	xl_axes_ref[Y];
 8008308:	1ac0      	subs	r0, r0, r3
 800830a:	b200      	sxth	r0, r0
				error_int_xl	=	MINUS;
 800830c:	1e44      	subs	r4, r0, #1
 800830e:	4304      	orrs	r4, r0
			sprintf(out_string,"\r\Y - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 8008310:	f7f8 fdec 	bl	8000eec <__aeabi_i2f>
 8008314:	4b58      	ldr	r3, [pc, #352]	; (8008478 <USER_Harsh_Acceleration_Harsh_brake_Find+0x330>)
				error_int_xl	=	MINUS;
 8008316:	17e4      	asrs	r4, r4, #31
			sprintf(out_string,"\r\Y - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 8008318:	6819      	ldr	r1, [r3, #0]
 800831a:	f7f8 fca7 	bl	8000c6c <__aeabi_fmul>
 800831e:	f7f8 fdc5 	bl	8000eac <__aeabi_f2iz>
 8008322:	4f56      	ldr	r7, [pc, #344]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 8008324:	b202      	sxth	r2, r0
 8008326:	495f      	ldr	r1, [pc, #380]	; (80084a4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x35c>)
 8008328:	0038      	movs	r0, r7
 800832a:	f003 fced 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800832e:	0029      	movs	r1, r5
 8008330:	0032      	movs	r2, r6
 8008332:	4854      	ldr	r0, [pc, #336]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 8008334:	f7fa ff38 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8008338:	4d53      	ldr	r5, [pc, #332]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800833a:	0038      	movs	r0, r7
			uarttx_req=1;
 800833c:	702e      	strb	r6, [r5, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800833e:	f7f7 fee1 	bl	8000104 <strlen>
 8008342:	0039      	movs	r1, r7
 8008344:	b282      	uxth	r2, r0
 8008346:	4851      	ldr	r0, [pc, #324]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
				error_int_xl	=	MINUS;
 8008348:	4334      	orrs	r4, r6
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800834a:	f7fc fcb9 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800834e:	2800      	cmp	r0, #0
 8008350:	d001      	beq.n	8008356 <USER_Harsh_Acceleration_Harsh_brake_Find+0x20e>
				Error_Handler();
 8008352:	f000 fae9 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8008356:	782b      	ldrb	r3, [r5, #0]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d0fc      	beq.n	8008356 <USER_Harsh_Acceleration_Harsh_brake_Find+0x20e>
 800835c:	e777      	b.n	800824e <USER_Harsh_Acceleration_Harsh_brake_Find+0x106>
				not_harsh_itration++;
 800835e:	4a4f      	ldr	r2, [pc, #316]	; (800849c <USER_Harsh_Acceleration_Harsh_brake_Find+0x354>)
 8008360:	7813      	ldrb	r3, [r2, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	b2db      	uxtb	r3, r3
 8008366:	7013      	strb	r3, [r2, #0]
				if(not_harsh_itration	>= NOT_HARSH_ITRATION_THRESHOLD)
 8008368:	2b04      	cmp	r3, #4
 800836a:	d9c3      	bls.n	80082f4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x1ac>
					not_harsh_itration=0;
 800836c:	2300      	movs	r3, #0
 800836e:	4a4b      	ldr	r2, [pc, #300]	; (800849c <USER_Harsh_Acceleration_Harsh_brake_Find+0x354>)
 8008370:	7013      	strb	r3, [r2, #0]
					harsh_accel_itration=0;
 8008372:	4a48      	ldr	r2, [pc, #288]	; (8008494 <USER_Harsh_Acceleration_Harsh_brake_Find+0x34c>)
 8008374:	7013      	strb	r3, [r2, #0]
					harsh_brake_itration=0;
 8008376:	4a48      	ldr	r2, [pc, #288]	; (8008498 <USER_Harsh_Acceleration_Harsh_brake_Find+0x350>)
 8008378:	7013      	strb	r3, [r2, #0]
 800837a:	e7bb      	b.n	80082f4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x1ac>
		case Z:	if((wake_up_src&0x01)==0x01)
 800837c:	782b      	ldrb	r3, [r5, #0]
 800837e:	2501      	movs	r5, #1
 8008380:	422b      	tst	r3, r5
 8008382:	d0ec      	beq.n	800835e <USER_Harsh_Acceleration_Harsh_brake_Find+0x216>
			error_current_xl	=	array_out_xl[Z]	-	xl_axes_ref[Z];
 8008384:	4b3b      	ldr	r3, [pc, #236]	; (8008474 <USER_Harsh_Acceleration_Harsh_brake_Find+0x32c>)
 8008386:	88b8      	ldrh	r0, [r7, #4]
 8008388:	889b      	ldrh	r3, [r3, #4]
 800838a:	1ac0      	subs	r0, r0, r3
 800838c:	b200      	sxth	r0, r0
				error_int_xl=MINUS;
 800838e:	1e44      	subs	r4, r0, #1
 8008390:	4304      	orrs	r4, r0
			sprintf(out_string,"\r\Z - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 8008392:	f7f8 fdab 	bl	8000eec <__aeabi_i2f>
 8008396:	4b38      	ldr	r3, [pc, #224]	; (8008478 <USER_Harsh_Acceleration_Harsh_brake_Find+0x330>)
				error_int_xl=MINUS;
 8008398:	17e4      	asrs	r4, r4, #31
			sprintf(out_string,"\r\Z - error_current_xl=%d\r\n",(int16_t)(error_current_xl*mg_per_LSB));
 800839a:	6819      	ldr	r1, [r3, #0]
 800839c:	f7f8 fc66 	bl	8000c6c <__aeabi_fmul>
 80083a0:	f7f8 fd84 	bl	8000eac <__aeabi_f2iz>
 80083a4:	4e35      	ldr	r6, [pc, #212]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 80083a6:	b202      	sxth	r2, r0
 80083a8:	493f      	ldr	r1, [pc, #252]	; (80084a8 <USER_Harsh_Acceleration_Harsh_brake_Find+0x360>)
 80083aa:	0030      	movs	r0, r6
 80083ac:	f003 fcac 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80083b0:	002a      	movs	r2, r5
 80083b2:	2102      	movs	r1, #2
 80083b4:	4833      	ldr	r0, [pc, #204]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 80083b6:	f7fa fef7 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80083ba:	4f33      	ldr	r7, [pc, #204]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80083bc:	0030      	movs	r0, r6
			uarttx_req=1;
 80083be:	703d      	strb	r5, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80083c0:	f7f7 fea0 	bl	8000104 <strlen>
 80083c4:	0031      	movs	r1, r6
 80083c6:	b282      	uxth	r2, r0
 80083c8:	4830      	ldr	r0, [pc, #192]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
				error_int_xl=MINUS;
 80083ca:	432c      	orrs	r4, r5
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80083cc:	f7fc fc78 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d001      	beq.n	80083d8 <USER_Harsh_Acceleration_Harsh_brake_Find+0x290>
				Error_Handler();
 80083d4:	f000 faa8 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 80083d8:	783b      	ldrb	r3, [r7, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d0fc      	beq.n	80083d8 <USER_Harsh_Acceleration_Harsh_brake_Find+0x290>
 80083de:	e736      	b.n	800824e <USER_Harsh_Acceleration_Harsh_brake_Find+0x106>
				harsh_accel_itration=0;
 80083e0:	2100      	movs	r1, #0
 80083e2:	7011      	strb	r1, [r2, #0]
				harsh_brake_itration++;
 80083e4:	7819      	ldrb	r1, [r3, #0]
 80083e6:	3101      	adds	r1, #1
 80083e8:	e742      	b.n	8008270 <USER_Harsh_Acceleration_Harsh_brake_Find+0x128>
		case AXES_NOT_SET:sprintf(out_string,"\r\n forward Axes is not Set\r\n");
 80083ea:	4c24      	ldr	r4, [pc, #144]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 80083ec:	492f      	ldr	r1, [pc, #188]	; (80084ac <USER_Harsh_Acceleration_Harsh_brake_Find+0x364>)
 80083ee:	0020      	movs	r0, r4
 80083f0:	f003 fcac 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80083f4:	2201      	movs	r2, #1
 80083f6:	2102      	movs	r1, #2
 80083f8:	4822      	ldr	r0, [pc, #136]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 80083fa:	f7fa fed5 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80083fe:	2301      	movs	r3, #1
 8008400:	4d21      	ldr	r5, [pc, #132]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008402:	0020      	movs	r0, r4
		uarttx_req=1;
 8008404:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008406:	f7f7 fe7d 	bl	8000104 <strlen>
 800840a:	0021      	movs	r1, r4
 800840c:	b282      	uxth	r2, r0
 800840e:	481f      	ldr	r0, [pc, #124]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
 8008410:	f7fc fc56 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008414:	2800      	cmp	r0, #0
 8008416:	d001      	beq.n	800841c <USER_Harsh_Acceleration_Harsh_brake_Find+0x2d4>
			Error_Handler();
 8008418:	f000 fa86 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 800841c:	782b      	ldrb	r3, [r5, #0]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d0fc      	beq.n	800841c <USER_Harsh_Acceleration_Harsh_brake_Find+0x2d4>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8008422:	2200      	movs	r2, #0
 8008424:	2102      	movs	r1, #2
 8008426:	4817      	ldr	r0, [pc, #92]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 8008428:	f7fa febe 	bl	80031a8 <HAL_GPIO_WritePin>
		break;
 800842c:	e762      	b.n	80082f4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x1ac>
		default:sprintf(out_string,"\r\nSome Logical Error from USER_Harsh_Acceleration_Harsh_brake_Find()\r\n");
 800842e:	4c13      	ldr	r4, [pc, #76]	; (800847c <USER_Harsh_Acceleration_Harsh_brake_Find+0x334>)
 8008430:	491f      	ldr	r1, [pc, #124]	; (80084b0 <USER_Harsh_Acceleration_Harsh_brake_Find+0x368>)
 8008432:	0020      	movs	r0, r4
 8008434:	f003 fc8a 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008438:	2201      	movs	r2, #1
 800843a:	2102      	movs	r1, #2
 800843c:	4811      	ldr	r0, [pc, #68]	; (8008484 <USER_Harsh_Acceleration_Harsh_brake_Find+0x33c>)
 800843e:	f7fa feb3 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8008442:	2301      	movs	r3, #1
 8008444:	4d10      	ldr	r5, [pc, #64]	; (8008488 <USER_Harsh_Acceleration_Harsh_brake_Find+0x340>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008446:	0020      	movs	r0, r4
		uarttx_req=1;
 8008448:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800844a:	f7f7 fe5b 	bl	8000104 <strlen>
 800844e:	0021      	movs	r1, r4
 8008450:	b282      	uxth	r2, r0
 8008452:	480e      	ldr	r0, [pc, #56]	; (800848c <USER_Harsh_Acceleration_Harsh_brake_Find+0x344>)
 8008454:	f7fc fc34 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008458:	2800      	cmp	r0, #0
 800845a:	d001      	beq.n	8008460 <USER_Harsh_Acceleration_Harsh_brake_Find+0x318>
			Error_Handler();
 800845c:	f000 fa64 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 8008460:	782b      	ldrb	r3, [r5, #0]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d0fc      	beq.n	8008460 <USER_Harsh_Acceleration_Harsh_brake_Find+0x318>
 8008466:	e7dc      	b.n	8008422 <USER_Harsh_Acceleration_Harsh_brake_Find+0x2da>
 8008468:	20000269 	.word	0x20000269
 800846c:	200003a0 	.word	0x200003a0
 8008470:	20000008 	.word	0x20000008
 8008474:	2000037a 	.word	0x2000037a
 8008478:	2000047c 	.word	0x2000047c
 800847c:	2000026b 	.word	0x2000026b
 8008480:	0800f3fe 	.word	0x0800f3fe
 8008484:	48000400 	.word	0x48000400
 8008488:	20000378 	.word	0x20000378
 800848c:	20000510 	.word	0x20000510
 8008490:	20000015 	.word	0x20000015
 8008494:	2000022f 	.word	0x2000022f
 8008498:	20000230 	.word	0x20000230
 800849c:	20000231 	.word	0x20000231
 80084a0:	0800f4b3 	.word	0x0800f4b3
 80084a4:	0800f419 	.word	0x0800f419
 80084a8:	0800f434 	.word	0x0800f434
 80084ac:	0800f44f 	.word	0x0800f44f
 80084b0:	0800f46c 	.word	0x0800f46c
	if(current_acceleration_brake_status==HARSH_BRAKING)
 80084b4:	2c02      	cmp	r4, #2
 80084b6:	d000      	beq.n	80084ba <USER_Harsh_Acceleration_Harsh_brake_Find+0x372>
 80084b8:	e70d      	b.n	80082d6 <USER_Harsh_Acceleration_Harsh_brake_Find+0x18e>
		sprintf(out_string,"\r\nHARSH Braking\r\n");
 80084ba:	4d0e      	ldr	r5, [pc, #56]	; (80084f4 <USER_Harsh_Acceleration_Harsh_brake_Find+0x3ac>)
 80084bc:	490e      	ldr	r1, [pc, #56]	; (80084f8 <USER_Harsh_Acceleration_Harsh_brake_Find+0x3b0>)
 80084be:	0028      	movs	r0, r5
 80084c0:	f003 fc44 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80084c4:	2201      	movs	r2, #1
 80084c6:	0021      	movs	r1, r4
 80084c8:	480c      	ldr	r0, [pc, #48]	; (80084fc <USER_Harsh_Acceleration_Harsh_brake_Find+0x3b4>)
 80084ca:	f7fa fe6d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80084ce:	2301      	movs	r3, #1
 80084d0:	4e0b      	ldr	r6, [pc, #44]	; (8008500 <USER_Harsh_Acceleration_Harsh_brake_Find+0x3b8>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80084d2:	0028      	movs	r0, r5
		uarttx_req=1;
 80084d4:	7033      	strb	r3, [r6, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80084d6:	f7f7 fe15 	bl	8000104 <strlen>
 80084da:	0029      	movs	r1, r5
 80084dc:	b282      	uxth	r2, r0
 80084de:	4809      	ldr	r0, [pc, #36]	; (8008504 <USER_Harsh_Acceleration_Harsh_brake_Find+0x3bc>)
 80084e0:	f7fc fbee 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d001      	beq.n	80084ec <USER_Harsh_Acceleration_Harsh_brake_Find+0x3a4>
			Error_Handler();
 80084e8:	f000 fa1e 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 80084ec:	7833      	ldrb	r3, [r6, #0]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d0fc      	beq.n	80084ec <USER_Harsh_Acceleration_Harsh_brake_Find+0x3a4>
 80084f2:	e6eb      	b.n	80082cc <USER_Harsh_Acceleration_Harsh_brake_Find+0x184>
 80084f4:	2000026b 	.word	0x2000026b
 80084f8:	0800f4ca 	.word	0x0800f4ca
 80084fc:	48000400 	.word	0x48000400
 8008500:	20000378 	.word	0x20000378
 8008504:	20000510 	.word	0x20000510

08008508 <USER_Highest_Element_of_an_Array_int16_t>:
#include "highest_element.h"
#include "usart.h"
#include <math.h>

uint8_t USER_Highest_Element_of_an_Array_int16_t(int16_t* array,uint8_t no_of_element)
{
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	extern volatile uint8_t memrx,uarttx_req;
	extern char out_string[200];
	uint16_t max;
	uint8_t order;
	max=abs(array[0]);
 800850a:	2300      	movs	r3, #0
 800850c:	5ec2      	ldrsh	r2, [r0, r3]
	order=0;
 800850e:	2400      	movs	r4, #0
	max=abs(array[0]);
 8008510:	17d3      	asrs	r3, r2, #31
 8008512:	18d2      	adds	r2, r2, r3
 8008514:	405a      	eors	r2, r3
	for(uint8_t j=1;j<no_of_element;j++)
 8008516:	2301      	movs	r3, #1
	max=abs(array[0]);
 8008518:	b292      	uxth	r2, r2
 800851a:	1c86      	adds	r6, r0, #2
	for(uint8_t j=1;j<no_of_element;j++)
 800851c:	428b      	cmp	r3, r1
 800851e:	d325      	bcc.n	800856c <USER_Highest_Element_of_an_Array_int16_t+0x64>
		{
			max=abs(array[j]);
			order=j;
		}
	}
	sprintf(out_string," \r\nMax Value = %d		order = %d\r\n",array[order],order);
 8008520:	4d19      	ldr	r5, [pc, #100]	; (8008588 <USER_Highest_Element_of_an_Array_int16_t+0x80>)
 8008522:	0063      	lsls	r3, r4, #1
 8008524:	5e1a      	ldrsh	r2, [r3, r0]
 8008526:	4919      	ldr	r1, [pc, #100]	; (800858c <USER_Highest_Element_of_an_Array_int16_t+0x84>)
 8008528:	0023      	movs	r3, r4
 800852a:	0028      	movs	r0, r5
 800852c:	f003 fbec 	bl	800bd08 <siprintf>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008530:	2201      	movs	r2, #1
 8008532:	2102      	movs	r1, #2
 8008534:	4816      	ldr	r0, [pc, #88]	; (8008590 <USER_Highest_Element_of_an_Array_int16_t+0x88>)
 8008536:	f7fa fe37 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800853a:	2301      	movs	r3, #1
 800853c:	4e15      	ldr	r6, [pc, #84]	; (8008594 <USER_Highest_Element_of_an_Array_int16_t+0x8c>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800853e:	0028      	movs	r0, r5
	uarttx_req=1;
 8008540:	7033      	strb	r3, [r6, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008542:	f7f7 fddf 	bl	8000104 <strlen>
 8008546:	0029      	movs	r1, r5
 8008548:	b282      	uxth	r2, r0
 800854a:	4813      	ldr	r0, [pc, #76]	; (8008598 <USER_Highest_Element_of_an_Array_int16_t+0x90>)
 800854c:	f7fc fbb8 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008550:	2800      	cmp	r0, #0
 8008552:	d001      	beq.n	8008558 <USER_Highest_Element_of_an_Array_int16_t+0x50>
	{
		Error_Handler();
 8008554:	f000 f9e8 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8008558:	7833      	ldrb	r3, [r6, #0]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d0fc      	beq.n	8008558 <USER_Highest_Element_of_an_Array_int16_t+0x50>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800855e:	2200      	movs	r2, #0
 8008560:	2102      	movs	r1, #2
 8008562:	480b      	ldr	r0, [pc, #44]	; (8008590 <USER_Highest_Element_of_an_Array_int16_t+0x88>)
 8008564:	f7fa fe20 	bl	80031a8 <HAL_GPIO_WritePin>

	return order;
}
 8008568:	0020      	movs	r0, r4
 800856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(abs(array[j]) > max)
 800856c:	2700      	movs	r7, #0
 800856e:	5ff5      	ldrsh	r5, [r6, r7]
 8008570:	17ef      	asrs	r7, r5, #31
 8008572:	19ed      	adds	r5, r5, r7
 8008574:	407d      	eors	r5, r7
 8008576:	4295      	cmp	r5, r2
 8008578:	dd01      	ble.n	800857e <USER_Highest_Element_of_an_Array_int16_t+0x76>
			max=abs(array[j]);
 800857a:	001c      	movs	r4, r3
 800857c:	b2aa      	uxth	r2, r5
	for(uint8_t j=1;j<no_of_element;j++)
 800857e:	3301      	adds	r3, #1
 8008580:	b2db      	uxtb	r3, r3
 8008582:	3602      	adds	r6, #2
 8008584:	e7ca      	b.n	800851c <USER_Highest_Element_of_an_Array_int16_t+0x14>
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	2000026b 	.word	0x2000026b
 800858c:	0800f4dc 	.word	0x0800f4dc
 8008590:	48000400 	.word	0x48000400
 8008594:	20000378 	.word	0x20000378
 8008598:	20000510 	.word	0x20000510

0800859c <USER_Highest_Element_of_an_Array_int8_t>:
	uint8_t max;
	uint8_t order;



	max=abs(array[0]);
 800859c:	2200      	movs	r2, #0
{
 800859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	max=abs(array[0]);
 80085a0:	5682      	ldrsb	r2, [r0, r2]
	order=0;
 80085a2:	2400      	movs	r4, #0
	max=abs(array[0]);
 80085a4:	17d3      	asrs	r3, r2, #31
 80085a6:	18d2      	adds	r2, r2, r3
 80085a8:	405a      	eors	r2, r3
	for(uint8_t j=1;j<no_of_element;j++)
 80085aa:	2301      	movs	r3, #1
	max=abs(array[0]);
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	1c46      	adds	r6, r0, #1
	for(uint8_t j=1;j<no_of_element;j++)
 80085b0:	428b      	cmp	r3, r1
 80085b2:	d324      	bcc.n	80085fe <USER_Highest_Element_of_an_Array_int8_t+0x62>
		{
			max=abs(array[j]);
			order=j;
		}
	}
	sprintf(out_string," \r\nMax Value = %d		order = %d\r\n",array[order],order);
 80085b4:	4d18      	ldr	r5, [pc, #96]	; (8008618 <USER_Highest_Element_of_an_Array_int8_t+0x7c>)
 80085b6:	5702      	ldrsb	r2, [r0, r4]
 80085b8:	0023      	movs	r3, r4
 80085ba:	4918      	ldr	r1, [pc, #96]	; (800861c <USER_Highest_Element_of_an_Array_int8_t+0x80>)
 80085bc:	0028      	movs	r0, r5
 80085be:	f003 fba3 	bl	800bd08 <siprintf>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80085c2:	2201      	movs	r2, #1
 80085c4:	2102      	movs	r1, #2
 80085c6:	4816      	ldr	r0, [pc, #88]	; (8008620 <USER_Highest_Element_of_an_Array_int8_t+0x84>)
 80085c8:	f7fa fdee 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80085cc:	2301      	movs	r3, #1
 80085ce:	4e15      	ldr	r6, [pc, #84]	; (8008624 <USER_Highest_Element_of_an_Array_int8_t+0x88>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80085d0:	0028      	movs	r0, r5
	uarttx_req=1;
 80085d2:	7033      	strb	r3, [r6, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80085d4:	f7f7 fd96 	bl	8000104 <strlen>
 80085d8:	0029      	movs	r1, r5
 80085da:	b282      	uxth	r2, r0
 80085dc:	4812      	ldr	r0, [pc, #72]	; (8008628 <USER_Highest_Element_of_an_Array_int8_t+0x8c>)
 80085de:	f7fc fb6f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d001      	beq.n	80085ea <USER_Highest_Element_of_an_Array_int8_t+0x4e>
	{
		Error_Handler();
 80085e6:	f000 f99f 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80085ea:	7833      	ldrb	r3, [r6, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d0fc      	beq.n	80085ea <USER_Highest_Element_of_an_Array_int8_t+0x4e>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80085f0:	2200      	movs	r2, #0
 80085f2:	2102      	movs	r1, #2
 80085f4:	480a      	ldr	r0, [pc, #40]	; (8008620 <USER_Highest_Element_of_an_Array_int8_t+0x84>)
 80085f6:	f7fa fdd7 	bl	80031a8 <HAL_GPIO_WritePin>

	return order;
}
 80085fa:	0020      	movs	r0, r4
 80085fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(abs(array[j]) > max)
 80085fe:	2500      	movs	r5, #0
 8008600:	5775      	ldrsb	r5, [r6, r5]
 8008602:	17ef      	asrs	r7, r5, #31
 8008604:	19ed      	adds	r5, r5, r7
 8008606:	407d      	eors	r5, r7
 8008608:	4295      	cmp	r5, r2
 800860a:	dd01      	ble.n	8008610 <USER_Highest_Element_of_an_Array_int8_t+0x74>
			max=abs(array[j]);
 800860c:	001c      	movs	r4, r3
 800860e:	b2ea      	uxtb	r2, r5
	for(uint8_t j=1;j<no_of_element;j++)
 8008610:	3301      	adds	r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	3601      	adds	r6, #1
 8008616:	e7cb      	b.n	80085b0 <USER_Highest_Element_of_an_Array_int8_t+0x14>
 8008618:	2000026b 	.word	0x2000026b
 800861c:	0800f4dc 	.word	0x0800f4dc
 8008620:	48000400 	.word	0x48000400
 8008624:	20000378 	.word	0x20000378
 8008628:	20000510 	.word	0x20000510

0800862c <MX_I2C2_Init>:
{

  hi2c2.Instance = I2C2;
  hi2c2.Init.Timing = 0x20303E5D;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800862c:	2201      	movs	r2, #1
{
 800862e:	b510      	push	{r4, lr}
  hi2c2.Instance = I2C2;
 8008630:	4b13      	ldr	r3, [pc, #76]	; (8008680 <MX_I2C2_Init+0x54>)
 8008632:	4c14      	ldr	r4, [pc, #80]	; (8008684 <MX_I2C2_Init+0x58>)
 8008634:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <MX_I2C2_Init+0x5c>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008638:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800863a:	2280      	movs	r2, #128	; 0x80
  hi2c2.Init.Timing = 0x20303E5D;
 800863c:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800863e:	2300      	movs	r3, #0
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8008640:	0312      	lsls	r2, r2, #12
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008642:	0020      	movs	r0, r4
  hi2c2.Init.OwnAddress1 = 0;
 8008644:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008646:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008648:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800864a:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800864c:	61e2      	str	r2, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800864e:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008650:	f7fa ff32 	bl	80034b8 <HAL_I2C_Init>
 8008654:	2800      	cmp	r0, #0
 8008656:	d001      	beq.n	800865c <MX_I2C2_Init+0x30>
  {
    Error_Handler();
 8008658:	f000 f966 	bl	8008928 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800865c:	2100      	movs	r1, #0
 800865e:	0020      	movs	r0, r4
 8008660:	f7fb fdae 	bl	80041c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008664:	2800      	cmp	r0, #0
 8008666:	d001      	beq.n	800866c <MX_I2C2_Init+0x40>
  {
    Error_Handler();
 8008668:	f000 f95e 	bl	8008928 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800866c:	2100      	movs	r1, #0
 800866e:	0020      	movs	r0, r4
 8008670:	f7fb fdcc 	bl	800420c <HAL_I2CEx_ConfigDigitalFilter>
 8008674:	2800      	cmp	r0, #0
 8008676:	d001      	beq.n	800867c <MX_I2C2_Init+0x50>
  {
    Error_Handler();
 8008678:	f000 f956 	bl	8008928 <Error_Handler>
  }

}
 800867c:	bd10      	pop	{r4, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	40005800 	.word	0x40005800
 8008684:	200003a0 	.word	0x200003a0
 8008688:	20303e5d 	.word	0x20303e5d

0800868c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800868c:	b530      	push	{r4, r5, lr}
 800868e:	0005      	movs	r5, r0
 8008690:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008692:	2214      	movs	r2, #20
 8008694:	2100      	movs	r1, #0
 8008696:	a803      	add	r0, sp, #12
 8008698:	f003 fb2d 	bl	800bcf6 <memset>
  if(i2cHandle->Instance==I2C2)
 800869c:	4b36      	ldr	r3, [pc, #216]	; (8008778 <HAL_I2C_MspInit+0xec>)
 800869e:	682a      	ldr	r2, [r5, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d166      	bne.n	8008772 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086a4:	2180      	movs	r1, #128	; 0x80
 80086a6:	4c35      	ldr	r4, [pc, #212]	; (800877c <HAL_I2C_MspInit+0xf0>)
 80086a8:	02c9      	lsls	r1, r1, #11
 80086aa:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086ac:	4834      	ldr	r0, [pc, #208]	; (8008780 <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086ae:	430a      	orrs	r2, r1
 80086b0:	6162      	str	r2, [r4, #20]
 80086b2:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086b4:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086b6:	400b      	ands	r3, r1
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80086bc:	23c0      	movs	r3, #192	; 0xc0
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086c2:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086c6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80086c8:	3b11      	subs	r3, #17
 80086ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80086cc:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80086ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086d0:	f7fa fcae 	bl	8003030 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80086d4:	2180      	movs	r1, #128	; 0x80
 80086d6:	69e2      	ldr	r2, [r4, #28]
 80086d8:	03c9      	lsls	r1, r1, #15
 80086da:	430a      	orrs	r2, r1
 80086dc:	61e2      	str	r2, [r4, #28]
 80086de:	69e3      	ldr	r3, [r4, #28]
  
    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80086e0:	4c28      	ldr	r4, [pc, #160]	; (8008784 <HAL_I2C_MspInit+0xf8>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 80086e2:	400b      	ands	r3, r1
 80086e4:	9302      	str	r3, [sp, #8]
 80086e6:	9b02      	ldr	r3, [sp, #8]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80086e8:	4b27      	ldr	r3, [pc, #156]	; (8008788 <HAL_I2C_MspInit+0xfc>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086ea:	2280      	movs	r2, #128	; 0x80
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80086ec:	6023      	str	r3, [r4, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086ee:	2300      	movs	r3, #0
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80086f0:	0020      	movs	r0, r4
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086f2:	6063      	str	r3, [r4, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80086f4:	60a3      	str	r3, [r4, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80086f6:	60e2      	str	r2, [r4, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80086f8:	6123      	str	r3, [r4, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80086fa:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80086fc:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80086fe:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8008700:	f7fa fbc6 	bl	8002e90 <HAL_DMA_Init>
 8008704:	2800      	cmp	r0, #0
 8008706:	d001      	beq.n	800870c <HAL_I2C_MspInit+0x80>
    {
      Error_Handler();
 8008708:	f000 f90e 	bl	8008928 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH5_I2C2_RX);
 800870c:	4b1f      	ldr	r3, [pc, #124]	; (800878c <HAL_I2C_MspInit+0x100>)
 800870e:	4920      	ldr	r1, [pc, #128]	; (8008790 <HAL_I2C_MspInit+0x104>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	400a      	ands	r2, r1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	2280      	movs	r2, #128	; 0x80
 8008718:	6819      	ldr	r1, [r3, #0]
 800871a:	0292      	lsls	r2, r2, #10
 800871c:	430a      	orrs	r2, r1
 800871e:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA2_Channel1;
 8008720:	4b1c      	ldr	r3, [pc, #112]	; (8008794 <HAL_I2C_MspInit+0x108>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8008722:	63ec      	str	r4, [r5, #60]	; 0x3c
 8008724:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2c2_tx.Instance = DMA2_Channel1;
 8008726:	4c1c      	ldr	r4, [pc, #112]	; (8008798 <HAL_I2C_MspInit+0x10c>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008728:	2280      	movs	r2, #128	; 0x80
    hdma_i2c2_tx.Instance = DMA2_Channel1;
 800872a:	6023      	str	r3, [r4, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800872c:	2310      	movs	r3, #16
 800872e:	6063      	str	r3, [r4, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008730:	2300      	movs	r3, #0
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8008732:	0020      	movs	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008734:	60a3      	str	r3, [r4, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008736:	60e2      	str	r2, [r4, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008738:	6123      	str	r3, [r4, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800873a:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800873c:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800873e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8008740:	f7fa fba6 	bl	8002e90 <HAL_DMA_Init>
 8008744:	2800      	cmp	r0, #0
 8008746:	d001      	beq.n	800874c <HAL_I2C_MspInit+0xc0>
    {
      Error_Handler();
 8008748:	f000 f8ee 	bl	8008928 <Error_Handler>
    }

    __HAL_DMA2_REMAP(HAL_DMA2_CH1_I2C2_TX);
 800874c:	210f      	movs	r1, #15
 800874e:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_I2C_MspInit+0x110>)

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8008750:	2018      	movs	r0, #24
    __HAL_DMA2_REMAP(HAL_DMA2_CH1_I2C2_TX);
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	438a      	bics	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	2202      	movs	r2, #2
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8008760:	2200      	movs	r2, #0
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8008762:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8008764:	0011      	movs	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8008766:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8008768:	f7fa fb18 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800876c:	2018      	movs	r0, #24
 800876e:	f7fa fb45 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008772:	b009      	add	sp, #36	; 0x24
 8008774:	bd30      	pop	{r4, r5, pc}
 8008776:	46c0      	nop			; (mov r8, r8)
 8008778:	40005800 	.word	0x40005800
 800877c:	40021000 	.word	0x40021000
 8008780:	48000400 	.word	0x48000400
 8008784:	200003ec 	.word	0x200003ec
 8008788:	40020058 	.word	0x40020058
 800878c:	400200a8 	.word	0x400200a8
 8008790:	fff0ffff 	.word	0xfff0ffff
 8008794:	40020408 	.word	0x40020408
 8008798:	20000430 	.word	0x20000430
 800879c:	400204a8 	.word	0x400204a8

080087a0 <USER_IMU_Init>:
#include "lsm6ds3_l.h"
#include "lsm6ds3_l.h"
#include "i2c.h"

void USER_IMU_Init(void)
{
 80087a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	extern uint8_t who_am_i;
	extern volatile uint8_t memrx;


	while(HAL_I2C_IsDeviceReady(&hi2c2,LSM6DS3,100,1000)!=HAL_OK);//check is Device Ready
 80087a2:	24fa      	movs	r4, #250	; 0xfa
 80087a4:	00a4      	lsls	r4, r4, #2
 80087a6:	4d0e      	ldr	r5, [pc, #56]	; (80087e0 <USER_IMU_Init+0x40>)
 80087a8:	0023      	movs	r3, r4
 80087aa:	2264      	movs	r2, #100	; 0x64
 80087ac:	21d6      	movs	r1, #214	; 0xd6
 80087ae:	0028      	movs	r0, r5
 80087b0:	f7fb f828 	bl	8003804 <HAL_I2C_IsDeviceReady>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d1f6      	bne.n	80087a6 <USER_IMU_Init+0x6>

	memrx=0;

	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WHO_AM_I,I2C_MEMADD_SIZE_8BIT,&who_am_i,1)!=HAL_OK)//read device's WHO_AM_I Register
 80087b8:	2301      	movs	r3, #1
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <USER_IMU_Init+0x44>)
	memrx=0;
 80087bc:	4c0a      	ldr	r4, [pc, #40]	; (80087e8 <USER_IMU_Init+0x48>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WHO_AM_I,I2C_MEMADD_SIZE_8BIT,&who_am_i,1)!=HAL_OK)//read device's WHO_AM_I Register
 80087be:	21d6      	movs	r1, #214	; 0xd6
	memrx=0;
 80087c0:	7020      	strb	r0, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WHO_AM_I,I2C_MEMADD_SIZE_8BIT,&who_am_i,1)!=HAL_OK)//read device's WHO_AM_I Register
 80087c2:	9200      	str	r2, [sp, #0]
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	220f      	movs	r2, #15
 80087c8:	0028      	movs	r0, r5
 80087ca:	f7fa ff71 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d001      	beq.n	80087d6 <USER_IMU_Init+0x36>
	{
		Error_Handler();
 80087d2:	f000 f8a9 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 80087d6:	7823      	ldrb	r3, [r4, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0fc      	beq.n	80087d6 <USER_IMU_Init+0x36>
}
 80087dc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	200003a0 	.word	0x200003a0
 80087e4:	20000379 	.word	0x20000379
 80087e8:	20000269 	.word	0x20000269

080087ec <USER_Instruction_CHECK>:
#include "instruction_check.h"

void USER_Instruction_CHECK(void)
{
 80087ec:	b510      	push	{r4, lr}
	extern volatile char instruction_final[25];
	if(!strncmp(instruction_final,"SET ",4))
 80087ee:	4c0a      	ldr	r4, [pc, #40]	; (8008818 <USER_Instruction_CHECK+0x2c>)
 80087f0:	2204      	movs	r2, #4
 80087f2:	490a      	ldr	r1, [pc, #40]	; (800881c <USER_Instruction_CHECK+0x30>)
 80087f4:	0020      	movs	r0, r4
 80087f6:	f003 fab1 	bl	800bd5c <strncmp>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d101      	bne.n	8008802 <USER_Instruction_CHECK+0x16>
	{
		USER_SET_Command();
 80087fe:	f000 febf 	bl	8009580 <USER_SET_Command>
	}
	if(!strncmp(instruction_final,"GET ",4))
 8008802:	2204      	movs	r2, #4
 8008804:	4906      	ldr	r1, [pc, #24]	; (8008820 <USER_Instruction_CHECK+0x34>)
 8008806:	0020      	movs	r0, r4
 8008808:	f003 faa8 	bl	800bd5c <strncmp>
 800880c:	2800      	cmp	r0, #0
 800880e:	d101      	bne.n	8008814 <USER_Instruction_CHECK+0x28>
	{
		USER_GET_Command();
 8008810:	f7fe fb30 	bl	8006e74 <USER_GET_Command>
	}

}
 8008814:	bd10      	pop	{r4, pc}
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	20000236 	.word	0x20000236
 800881c:	0800f4fc 	.word	0x0800f4fc
 8008820:	0800f501 	.word	0x0800f501

08008824 <USER_Instruction_Sense>:
#include "instuction_sense.h"
#include "stdint.h"
void USER_Instruction_Sense(void)
{
 8008824:	b510      	push	{r4, lr}
	extern volatile uint8_t uartrx_req,i;
	extern volatile char instruction_raw[25],c;
	if(uartrx_req==0&&i<25)
 8008826:	4b0a      	ldr	r3, [pc, #40]	; (8008850 <USER_Instruction_Sense+0x2c>)
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	2a00      	cmp	r2, #0
 800882c:	d10f      	bne.n	800884e <USER_Instruction_Sense+0x2a>
 800882e:	4c09      	ldr	r4, [pc, #36]	; (8008854 <USER_Instruction_Sense+0x30>)
 8008830:	7822      	ldrb	r2, [r4, #0]
 8008832:	2a18      	cmp	r2, #24
 8008834:	d80b      	bhi.n	800884e <USER_Instruction_Sense+0x2a>
	{
		uartrx_req=1;
 8008836:	2201      	movs	r2, #1
 8008838:	701a      	strb	r2, [r3, #0]
		strncpy(instruction_raw+i,&c,1);
 800883a:	7823      	ldrb	r3, [r4, #0]
 800883c:	4806      	ldr	r0, [pc, #24]	; (8008858 <USER_Instruction_Sense+0x34>)
 800883e:	4907      	ldr	r1, [pc, #28]	; (800885c <USER_Instruction_Sense+0x38>)
 8008840:	18c0      	adds	r0, r0, r3
 8008842:	f003 fa9c 	bl	800bd7e <strncpy>
		// instruction_raw[i]=c;
		i++;
 8008846:	7823      	ldrb	r3, [r4, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	b2db      	uxtb	r3, r3
 800884c:	7023      	strb	r3, [r4, #0]

	}
}
 800884e:	bd10      	pop	{r4, pc}
 8008850:	2000001b 	.word	0x2000001b
 8008854:	20000235 	.word	0x20000235
 8008858:	20000250 	.word	0x20000250
 800885c:	20000488 	.word	0x20000488

08008860 <HAL_I2C_MemTxCpltCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	memtx=1;
 8008860:	2201      	movs	r2, #1
 8008862:	4b01      	ldr	r3, [pc, #4]	; (8008868 <HAL_I2C_MemTxCpltCallback+0x8>)
 8008864:	701a      	strb	r2, [r3, #0]
}
 8008866:	4770      	bx	lr
 8008868:	2000026a 	.word	0x2000026a

0800886c <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{

	memrx=1;
 800886c:	2201      	movs	r2, #1
 800886e:	4b01      	ldr	r3, [pc, #4]	; (8008874 <HAL_I2C_MemRxCpltCallback+0x8>)
 8008870:	701a      	strb	r2, [r3, #0]


}
 8008872:	4770      	bx	lr
 8008874:	20000269 	.word	0x20000269

08008878 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008878:	b510      	push	{r4, lr}
	while(1)
	{
		HAL_GPIO_TogglePin(ST_LED_GPIO_Port,ST_LED_Pin);
 800887a:	2480      	movs	r4, #128	; 0x80
 800887c:	0124      	lsls	r4, r4, #4
 800887e:	0021      	movs	r1, r4
 8008880:	4803      	ldr	r0, [pc, #12]	; (8008890 <HAL_I2C_ErrorCallback+0x18>)
 8008882:	f7fa fc97 	bl	80031b4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8008886:	20c8      	movs	r0, #200	; 0xc8
 8008888:	f7fa fa76 	bl	8002d78 <HAL_Delay>
 800888c:	e7f7      	b.n	800887e <HAL_I2C_ErrorCallback+0x6>
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	48000800 	.word	0x48000800

08008894 <HAL_UART_TxCpltCallback>:
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

	uarttx_req=0;
 8008894:	2200      	movs	r2, #0
 8008896:	4b01      	ldr	r3, [pc, #4]	; (800889c <HAL_UART_TxCpltCallback+0x8>)
 8008898:	701a      	strb	r2, [r3, #0]

}
 800889a:	4770      	bx	lr
 800889c:	20000378 	.word	0x20000378

080088a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uartrx_req=0;
 80088a0:	2200      	movs	r2, #0
 80088a2:	4b01      	ldr	r3, [pc, #4]	; (80088a8 <HAL_UART_RxCpltCallback+0x8>)
 80088a4:	701a      	strb	r2, [r3, #0]
}
 80088a6:	4770      	bx	lr
 80088a8:	2000001b 	.word	0x2000001b

080088ac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if(htim->Instance == TIM6)
 80088ae:	6802      	ldr	r2, [r0, #0]
 80088b0:	4b16      	ldr	r3, [pc, #88]	; (800890c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d126      	bne.n	8008904 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		//HAL_GPIO_TogglePin(ST_LED_GPIO_Port,ST_LED_Pin);
		memset(instruction_final,0,25);
 80088b6:	4e16      	ldr	r6, [pc, #88]	; (8008910 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80088b8:	2219      	movs	r2, #25
 80088ba:	2100      	movs	r1, #0
 80088bc:	0030      	movs	r0, r6
 80088be:	f003 fa1a 	bl	800bcf6 <memset>
		instruction_length=i>strlen(instruction_raw)?i:strlen(instruction_raw);
 80088c2:	4c14      	ldr	r4, [pc, #80]	; (8008914 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80088c4:	4d14      	ldr	r5, [pc, #80]	; (8008918 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80088c6:	7827      	ldrb	r7, [r4, #0]
 80088c8:	0028      	movs	r0, r5
 80088ca:	b2ff      	uxtb	r7, r7
 80088cc:	f7f7 fc1a 	bl	8000104 <strlen>
 80088d0:	4287      	cmp	r7, r0
 80088d2:	d818      	bhi.n	8008906 <HAL_TIM_PeriodElapsedCallback+0x5a>
 80088d4:	4f11      	ldr	r7, [pc, #68]	; (800891c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80088d6:	b2c0      	uxtb	r0, r0
 80088d8:	7038      	strb	r0, [r7, #0]
		strncpy(instruction_final,strupr(instruction_raw),instruction_length);
 80088da:	0028      	movs	r0, r5
 80088dc:	f003 fafe 	bl	800bedc <strupr>
 80088e0:	0001      	movs	r1, r0
 80088e2:	0030      	movs	r0, r6
		tilt_req=1;
 80088e4:	2601      	movs	r6, #1
		strncpy(instruction_final,strupr(instruction_raw),instruction_length);
 80088e6:	783a      	ldrb	r2, [r7, #0]
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	f003 fa48 	bl	800bd7e <strncpy>
		tilt_req=1;
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <HAL_TIM_PeriodElapsedCallback+0x74>)
		memset(instruction_raw,0,25);
 80088f0:	2219      	movs	r2, #25
 80088f2:	2100      	movs	r1, #0
 80088f4:	0028      	movs	r0, r5
		tilt_req=1;
 80088f6:	701e      	strb	r6, [r3, #0]
		memset(instruction_raw,0,25);
 80088f8:	f003 f9fd 	bl	800bcf6 <memset>
		i=0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	7023      	strb	r3, [r4, #0]
		output_enable=1;
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8008902:	701e      	strb	r6, [r3, #0]


	}


}
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		instruction_length=i>strlen(instruction_raw)?i:strlen(instruction_raw);
 8008906:	7820      	ldrb	r0, [r4, #0]
 8008908:	e7e4      	b.n	80088d4 <HAL_TIM_PeriodElapsedCallback+0x28>
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	40001000 	.word	0x40001000
 8008910:	20000236 	.word	0x20000236
 8008914:	20000235 	.word	0x20000235
 8008918:	20000250 	.word	0x20000250
 800891c:	2000024f 	.word	0x2000024f
 8008920:	20000019 	.word	0x20000019
 8008924:	20000012 	.word	0x20000012

08008928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008928:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		HAL_GPIO_TogglePin(ST_LED_GPIO_Port,ST_LED_Pin);
 800892a:	2480      	movs	r4, #128	; 0x80
 800892c:	0124      	lsls	r4, r4, #4
 800892e:	0021      	movs	r1, r4
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <Error_Handler+0x18>)
 8008932:	f7fa fc3f 	bl	80031b4 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8008936:	20c8      	movs	r0, #200	; 0xc8
 8008938:	f7fa fa1e 	bl	8002d78 <HAL_Delay>
 800893c:	e7f7      	b.n	800892e <Error_Handler+0x6>
 800893e:	46c0      	nop			; (mov r8, r8)
 8008940:	48000800 	.word	0x48000800

08008944 <SystemClock_Config>:
{
 8008944:	b510      	push	{r4, lr}
 8008946:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008948:	2234      	movs	r2, #52	; 0x34
 800894a:	2100      	movs	r1, #0
 800894c:	a80b      	add	r0, sp, #44	; 0x2c
 800894e:	f003 f9d2 	bl	800bcf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008952:	2210      	movs	r2, #16
 8008954:	2100      	movs	r1, #0
 8008956:	4668      	mov	r0, sp
 8008958:	f003 f9cd 	bl	800bcf6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800895c:	221c      	movs	r2, #28
 800895e:	2100      	movs	r1, #0
 8008960:	a804      	add	r0, sp, #16
 8008962:	f003 f9c8 	bl	800bcf6 <memset>
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008966:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8008968:	2320      	movs	r3, #32
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800896a:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800896c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800896e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008970:	f7fb fc70 	bl	8004254 <HAL_RCC_OscConfig>
 8008974:	2800      	cmp	r0, #0
 8008976:	d001      	beq.n	800897c <SystemClock_Config+0x38>
    Error_Handler();
 8008978:	f7ff ffd6 	bl	8008928 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800897c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800897e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008980:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008982:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8008984:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008986:	0021      	movs	r1, r4
 8008988:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800898a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800898c:	f7fb feee 	bl	800476c <HAL_RCC_ClockConfig>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1f1      	bne.n	8008978 <SystemClock_Config+0x34>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008994:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008996:	9008      	str	r0, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008998:	02db      	lsls	r3, r3, #11
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800899a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800899c:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800899e:	f7fb ff81 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d1e8      	bne.n	8008978 <SystemClock_Config+0x34>
}
 80089a6:	b018      	add	sp, #96	; 0x60
 80089a8:	bd10      	pop	{r4, pc}
	...

080089ac <main>:
{
 80089ac:	b510      	push	{r4, lr}
  HAL_Init();
 80089ae:	f7fa f9c1 	bl	8002d34 <HAL_Init>
  SystemClock_Config();
 80089b2:	f7ff ffc7 	bl	8008944 <SystemClock_Config>
  MX_GPIO_Init();
 80089b6:	f7ff f959 	bl	8007c6c <MX_GPIO_Init>
  MX_DMA_Init();
 80089ba:	f7fd fe51 	bl	8006660 <MX_DMA_Init>
  MX_I2C2_Init();
 80089be:	f7ff fe35 	bl	800862c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80089c2:	f002 fed3 	bl	800b76c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80089c6:	f002 fe7b 	bl	800b6c0 <MX_TIM6_Init>
	USER_IMU_Init();
 80089ca:	f7ff fee9 	bl	80087a0 <USER_IMU_Init>
	USER_Wakeup_Init();
 80089ce:	f002 ffbf 	bl	800b950 <USER_Wakeup_Init>
	USER_Referance_Tilt_Calculation();
 80089d2:	f000 fdbf 	bl	8009554 <USER_Referance_Tilt_Calculation>
	USER_Forward_axes_and_Tilt_Accelerometer_Init();
 80089d6:	f7fd f837 	bl	8005a48 <USER_Forward_axes_and_Tilt_Accelerometer_Init>
	USER_Rash_Turn_Gyroscope_Init();
 80089da:	f7ff f995 	bl	8007d08 <USER_Rash_Turn_Gyroscope_Init>
	if(HAL_TIM_Base_Start_IT(&htim6)!=HAL_OK)
 80089de:	482a      	ldr	r0, [pc, #168]	; (8008a88 <main+0xdc>)
 80089e0:	f7fc f802 	bl	80049e8 <HAL_TIM_Base_Start_IT>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d001      	beq.n	80089ec <main+0x40>
		Error_Handler();
 80089e8:	f7ff ff9e 	bl	8008928 <Error_Handler>
	USER_UART_DMA_start();
 80089ec:	f002 feac 	bl	800b748 <USER_UART_DMA_start>
	rtt_optimized=rtt;
 80089f0:	4b26      	ldr	r3, [pc, #152]	; (8008a8c <main+0xe0>)
 80089f2:	7818      	ldrb	r0, [r3, #0]
 80089f4:	f7f8 faca 	bl	8000f8c <__aeabi_ui2f>
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <main+0xe4>)
 80089fa:	6018      	str	r0, [r3, #0]
		USER_Instruction_Sense();
 80089fc:	f7ff ff12 	bl	8008824 <USER_Instruction_Sense>
		if (output_enable)
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <main+0xe8>)
 8008a02:	781a      	ldrb	r2, [r3, #0]
 8008a04:	2a00      	cmp	r2, #0
 8008a06:	d0f9      	beq.n	80089fc <main+0x50>
			output_enable = 0;
 8008a08:	2200      	movs	r2, #0
			if(device_mode==SLEEP)
 8008a0a:	4c23      	ldr	r4, [pc, #140]	; (8008a98 <main+0xec>)
			output_enable = 0;
 8008a0c:	701a      	strb	r2, [r3, #0]
			if(device_mode==SLEEP)
 8008a0e:	7823      	ldrb	r3, [r4, #0]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d102      	bne.n	8008a1a <main+0x6e>
				device_mode=USER_Wakeup_Detection();
 8008a14:	f002 ff48 	bl	800b8a8 <USER_Wakeup_Detection>
 8008a18:	7020      	strb	r0, [r4, #0]
			if(gravity_axes	!=	AXES_NOT_SET	&&	forward_axes_wakeup_init_function_status==NOT_EXICUTED	&&	device_mode==FORWARD_AXIS)
 8008a1a:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <main+0xf0>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d008      	beq.n	8008a34 <main+0x88>
 8008a22:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <main+0xf4>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <main+0x88>
 8008a2a:	7823      	ldrb	r3, [r4, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <main+0x88>
				USER_forward_axes_sense_Wakeup_Init();
 8008a30:	f7fe f8ac 	bl	8006b8c <USER_forward_axes_sense_Wakeup_Init>
			if(device_mode==FORWARD_AXIS)
 8008a34:	7823      	ldrb	r3, [r4, #0]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d105      	bne.n	8008a46 <main+0x9a>
				tilt_status	=	USER_Tilt_Calculation();
 8008a3a:	f002 fa0b 	bl	800ae54 <USER_Tilt_Calculation>
				rash_turn_status=USER_Rash_Turn_Detection();
 8008a3e:	f000 f837 	bl	8008ab0 <USER_Rash_Turn_Detection>
				USER_Forward_axes_Find();
 8008a42:	f7fd fe3b 	bl	80066bc <USER_Forward_axes_Find>
			if(forward_axes!= AXES_NOT_SET	&&	sign_of_acceleration!=SIGN_NOT_SET &&	acceleration_wakeup_init_function_status==NOT_EXICUTED	&&	device_mode==ACCELERATION)
 8008a46:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <main+0xf8>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d00f      	beq.n	8008a6e <main+0xc2>
 8008a4e:	4b16      	ldr	r3, [pc, #88]	; (8008aa8 <main+0xfc>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d00a      	beq.n	8008a6e <main+0xc2>
 8008a58:	4b14      	ldr	r3, [pc, #80]	; (8008aac <main+0x100>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d106      	bne.n	8008a6e <main+0xc2>
 8008a60:	7823      	ldrb	r3, [r4, #0]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d103      	bne.n	8008a6e <main+0xc2>
				USER_Referance_Tilt_Calculation();
 8008a66:	f000 fd75 	bl	8009554 <USER_Referance_Tilt_Calculation>
				USER_Acceleration_Wakeup_Init();
 8008a6a:	f7fc fcfd 	bl	8005468 <USER_Acceleration_Wakeup_Init>
			if(device_mode==ACCELERATION)
 8008a6e:	7823      	ldrb	r3, [r4, #0]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d105      	bne.n	8008a80 <main+0xd4>
				tilt_status	=	USER_Tilt_Calculation();
 8008a74:	f002 f9ee 	bl	800ae54 <USER_Tilt_Calculation>
				rash_turn_status=USER_Rash_Turn_Detection();
 8008a78:	f000 f81a 	bl	8008ab0 <USER_Rash_Turn_Detection>
				acceleration_brake_status=USER_Harsh_Acceleration_Harsh_brake_Find();
 8008a7c:	f7ff fb64 	bl	8008148 <USER_Harsh_Acceleration_Harsh_brake_Find>
			USER_Instruction_CHECK();
 8008a80:	f7ff feb4 	bl	80087ec <USER_Instruction_CHECK>
 8008a84:	e7ba      	b.n	80089fc <main+0x50>
 8008a86:	46c0      	nop			; (mov r8, r8)
 8008a88:	2000048c 	.word	0x2000048c
 8008a8c:	20000013 	.word	0x20000013
 8008a90:	20000484 	.word	0x20000484
 8008a94:	20000012 	.word	0x20000012
 8008a98:	2000048a 	.word	0x2000048a
 8008a9c:	20000009 	.word	0x20000009
 8008aa0:	20000234 	.word	0x20000234
 8008aa4:	20000008 	.word	0x20000008
 8008aa8:	20000015 	.word	0x20000015
 8008aac:	20000232 	.word	0x20000232

08008ab0 <USER_Rash_Turn_Detection>:
extern float mdps_per_LSB,rtt_optimized;
static uint8_t rash_turn_itration=0;
static float avg_yaw_dps=0;

enum Rash_Turn USER_Rash_Turn_Detection(void)
{
 8008ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status_reg;
	float current_yaw_dps;
	enum Rash_Turn rash_turn_status =NO_RASH_TURN;

	wait:memrx=0;
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008ab2:	2601      	movs	r6, #1
{
 8008ab4:	b089      	sub	sp, #36	; 0x24
	wait:memrx=0;
 8008ab6:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008ab8:	270f      	movs	r7, #15
	wait:memrx=0;
 8008aba:	4c91      	ldr	r4, [pc, #580]	; (8008d00 <USER_Rash_Turn_Detection+0x250>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008abc:	4d91      	ldr	r5, [pc, #580]	; (8008d04 <USER_Rash_Turn_Detection+0x254>)
	wait:memrx=0;
 8008abe:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 8008ac0:	ab02      	add	r3, sp, #8
 8008ac2:	18ff      	adds	r7, r7, r3
 8008ac4:	9601      	str	r6, [sp, #4]
 8008ac6:	9700      	str	r7, [sp, #0]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	221e      	movs	r2, #30
 8008acc:	21d6      	movs	r1, #214	; 0xd6
 8008ace:	0028      	movs	r0, r5
 8008ad0:	f7fa fdee 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d001      	beq.n	8008adc <USER_Rash_Turn_Detection+0x2c>
	{
		Error_Handler();
 8008ad8:	f7ff ff26 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 8008adc:	7823      	ldrb	r3, [r4, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0fc      	beq.n	8008adc <USER_Rash_Turn_Detection+0x2c>

	if(status_reg&2 ==2)
 8008ae2:	783b      	ldrb	r3, [r7, #0]
 8008ae4:	4233      	tst	r3, r6
 8008ae6:	d0e6      	beq.n	8008ab6 <USER_Rash_Turn_Detection+0x6>
	{

		memrx=0;
 8008ae8:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_G,I2C_MEMADD_SIZE_8BIT,array_out_g,6)!=HAL_OK)
 8008aea:	ae06      	add	r6, sp, #24
		memrx=0;
 8008aec:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_G,I2C_MEMADD_SIZE_8BIT,array_out_g,6)!=HAL_OK)
 8008aee:	3306      	adds	r3, #6
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	9600      	str	r6, [sp, #0]
 8008af4:	3b05      	subs	r3, #5
 8008af6:	2222      	movs	r2, #34	; 0x22
 8008af8:	21d6      	movs	r1, #214	; 0xd6
 8008afa:	0028      	movs	r0, r5
 8008afc:	f7fa fdd8 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d001      	beq.n	8008b08 <USER_Rash_Turn_Detection+0x58>
		{
			Error_Handler();
 8008b04:	f7ff ff10 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8008b08:	7823      	ldrb	r3, [r4, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0fc      	beq.n	8008b08 <USER_Rash_Turn_Detection+0x58>
	else
	{
		goto wait;
	}

	if(gravity_axes!=AXES_NOT_SET)
 8008b0e:	4b7e      	ldr	r3, [pc, #504]	; (8008d08 <USER_Rash_Turn_Detection+0x258>)
 8008b10:	4f7e      	ldr	r7, [pc, #504]	; (8008d0c <USER_Rash_Turn_Detection+0x25c>)
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4d7e      	ldr	r5, [pc, #504]	; (8008d10 <USER_Rash_Turn_Detection+0x260>)
 8008b16:	4c7f      	ldr	r4, [pc, #508]	; (8008d14 <USER_Rash_Turn_Detection+0x264>)
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d100      	bne.n	8008b1e <USER_Rash_Turn_Detection+0x6e>
 8008b1c:	e082      	b.n	8008c24 <USER_Rash_Turn_Detection+0x174>
	{
		current_yaw_dps=sign_of_gravity*array_out_g[gravity_axes]*mdps_per_LSB/1000;
 8008b1e:	4a7e      	ldr	r2, [pc, #504]	; (8008d18 <USER_Rash_Turn_Detection+0x268>)
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	7812      	ldrb	r2, [r2, #0]
 8008b24:	5ef0      	ldrsh	r0, [r6, r3]
 8008b26:	b252      	sxtb	r2, r2
 8008b28:	4350      	muls	r0, r2
 8008b2a:	f7f8 f9df 	bl	8000eec <__aeabi_i2f>
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	f7f8 f89c 	bl	8000c6c <__aeabi_fmul>
 8008b34:	4979      	ldr	r1, [pc, #484]	; (8008d1c <USER_Rash_Turn_Detection+0x26c>)
 8008b36:	f7f7 fea9 	bl	800088c <__aeabi_fdiv>

		if(abs((int16_t)current_yaw_dps) > rtt_optimized)
 8008b3a:	4b79      	ldr	r3, [pc, #484]	; (8008d20 <USER_Rash_Turn_Detection+0x270>)
		current_yaw_dps=sign_of_gravity*array_out_g[gravity_axes]*mdps_per_LSB/1000;
 8008b3c:	1c06      	adds	r6, r0, #0
		if(abs((int16_t)current_yaw_dps) > rtt_optimized)
 8008b3e:	681f      	ldr	r7, [r3, #0]
 8008b40:	f7f8 f9b4 	bl	8000eac <__aeabi_f2iz>
 8008b44:	b200      	sxth	r0, r0
 8008b46:	17c3      	asrs	r3, r0, #31
 8008b48:	18c0      	adds	r0, r0, r3
 8008b4a:	4058      	eors	r0, r3
 8008b4c:	f7f8 f9ce 	bl	8000eec <__aeabi_i2f>
 8008b50:	1c39      	adds	r1, r7, #0
 8008b52:	f7f7 fcd7 	bl	8000504 <__aeabi_fcmpgt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d05f      	beq.n	8008c1a <USER_Rash_Turn_Detection+0x16a>
		{
			rash_turn_itration++;
 8008b5a:	782b      	ldrb	r3, [r5, #0]
			avg_yaw_dps+=current_yaw_dps;
 8008b5c:	1c30      	adds	r0, r6, #0
			rash_turn_itration++;
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	466b      	mov	r3, sp
 8008b66:	7b1b      	ldrb	r3, [r3, #12]
			avg_yaw_dps+=current_yaw_dps;
 8008b68:	6821      	ldr	r1, [r4, #0]
			rash_turn_itration++;
 8008b6a:	702b      	strb	r3, [r5, #0]
			avg_yaw_dps+=current_yaw_dps;
 8008b6c:	f7f7 fcfc 	bl	8000568 <__aeabi_fadd>

			if(rash_turn_itration > RASH_TURN_ITRATION_TRESHOLD)
 8008b70:	9b03      	ldr	r3, [sp, #12]
			avg_yaw_dps+=current_yaw_dps;
 8008b72:	1c06      	adds	r6, r0, #0
			if(rash_turn_itration > RASH_TURN_ITRATION_TRESHOLD)
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d804      	bhi.n	8008b82 <USER_Rash_Turn_Detection+0xd2>
			avg_yaw_dps+=current_yaw_dps;
 8008b78:	6026      	str	r6, [r4, #0]
	enum Rash_Turn rash_turn_status =NO_RASH_TURN;
 8008b7a:	2600      	movs	r6, #0
			rash_turn_itration=0;
		}

	}
	return rash_turn_status;
}
 8008b7c:	0030      	movs	r0, r6
 8008b7e:	b009      	add	sp, #36	; 0x24
 8008b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
				avg_yaw_dps/=rash_turn_itration;
 8008b82:	9803      	ldr	r0, [sp, #12]
 8008b84:	f7f8 f9b2 	bl	8000eec <__aeabi_i2f>
 8008b88:	1c01      	adds	r1, r0, #0
 8008b8a:	1c30      	adds	r0, r6, #0
 8008b8c:	f7f7 fe7e 	bl	800088c <__aeabi_fdiv>
				if(avg_yaw_dps < 0)
 8008b90:	2100      	movs	r1, #0
				avg_yaw_dps/=rash_turn_itration;
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	1c06      	adds	r6, r0, #0
				if(avg_yaw_dps < 0)
 8008b96:	f7f7 fca1 	bl	80004dc <__aeabi_fcmplt>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d02e      	beq.n	8008bfc <USER_Rash_Turn_Detection+0x14c>
					sprintf(out_string,"\r\n\r\nRASH Right Turn Detected		Angle Rate is %d	>	%d\r\n\r\n",(int16_t)avg_yaw_dps,(int8_t)rtt_optimized);
 8008b9e:	1c38      	adds	r0, r7, #0
 8008ba0:	f7f8 f984 	bl	8000eac <__aeabi_f2iz>
 8008ba4:	b247      	sxtb	r7, r0
 8008ba6:	1c30      	adds	r0, r6, #0
 8008ba8:	f7f8 f980 	bl	8000eac <__aeabi_f2iz>
 8008bac:	003b      	movs	r3, r7
 8008bae:	b202      	sxth	r2, r0
 8008bb0:	495c      	ldr	r1, [pc, #368]	; (8008d24 <USER_Rash_Turn_Detection+0x274>)
 8008bb2:	485d      	ldr	r0, [pc, #372]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008bb4:	f003 f8a8 	bl	800bd08 <siprintf>
					rash_turn_status	=	RASH_TURN_RIGHT;
 8008bb8:	2601      	movs	r6, #1
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008bba:	2201      	movs	r2, #1
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	485b      	ldr	r0, [pc, #364]	; (8008d2c <USER_Rash_Turn_Detection+0x27c>)
 8008bc0:	f7fa faf2 	bl	80031a8 <HAL_GPIO_WritePin>
				uarttx_req=1;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4f5a      	ldr	r7, [pc, #360]	; (8008d30 <USER_Rash_Turn_Detection+0x280>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008bc8:	4857      	ldr	r0, [pc, #348]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
				uarttx_req=1;
 8008bca:	703b      	strb	r3, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008bcc:	f7f7 fa9a 	bl	8000104 <strlen>
 8008bd0:	4955      	ldr	r1, [pc, #340]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008bd2:	b282      	uxth	r2, r0
 8008bd4:	4857      	ldr	r0, [pc, #348]	; (8008d34 <USER_Rash_Turn_Detection+0x284>)
 8008bd6:	f7fc f873 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d001      	beq.n	8008be2 <USER_Rash_Turn_Detection+0x132>
					Error_Handler();
 8008bde:	f7ff fea3 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8008be2:	783b      	ldrb	r3, [r7, #0]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d0fc      	beq.n	8008be2 <USER_Rash_Turn_Detection+0x132>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8008be8:	2200      	movs	r2, #0
 8008bea:	2102      	movs	r1, #2
 8008bec:	484f      	ldr	r0, [pc, #316]	; (8008d2c <USER_Rash_Turn_Detection+0x27c>)
 8008bee:	f7fa fadb 	bl	80031a8 <HAL_GPIO_WritePin>
				avg_yaw_dps=0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6023      	str	r3, [r4, #0]
				rash_turn_itration=0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	702b      	strb	r3, [r5, #0]
 8008bfa:	e7bf      	b.n	8008b7c <USER_Rash_Turn_Detection+0xcc>
					sprintf(out_string,"\r\n\r\nRASH Left Turn Detected		Angle Rate is %d	>	%d\r\n\r\n",(int16_t)avg_yaw_dps,(int8_t)rtt_optimized);
 8008bfc:	1c38      	adds	r0, r7, #0
 8008bfe:	f7f8 f955 	bl	8000eac <__aeabi_f2iz>
 8008c02:	b247      	sxtb	r7, r0
 8008c04:	1c30      	adds	r0, r6, #0
 8008c06:	f7f8 f951 	bl	8000eac <__aeabi_f2iz>
 8008c0a:	003b      	movs	r3, r7
 8008c0c:	b202      	sxth	r2, r0
 8008c0e:	494a      	ldr	r1, [pc, #296]	; (8008d38 <USER_Rash_Turn_Detection+0x288>)
 8008c10:	4845      	ldr	r0, [pc, #276]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008c12:	f003 f879 	bl	800bd08 <siprintf>
					rash_turn_status	=	RASH_TURN_LEFT;
 8008c16:	2602      	movs	r6, #2
 8008c18:	e7cf      	b.n	8008bba <USER_Rash_Turn_Detection+0x10a>
			avg_yaw_dps=0;
 8008c1a:	2300      	movs	r3, #0
			rash_turn_itration=0;
 8008c1c:	2600      	movs	r6, #0
			avg_yaw_dps=0;
 8008c1e:	6023      	str	r3, [r4, #0]
			rash_turn_itration=0;
 8008c20:	702e      	strb	r6, [r5, #0]
 8008c22:	e7ab      	b.n	8008b7c <USER_Rash_Turn_Detection+0xcc>
		current_yaw_dps=array_out_g[Z]*mdps_per_LSB/1000;
 8008c24:	2304      	movs	r3, #4
 8008c26:	5ef0      	ldrsh	r0, [r6, r3]
 8008c28:	f7f8 f960 	bl	8000eec <__aeabi_i2f>
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	f7f8 f81d 	bl	8000c6c <__aeabi_fmul>
 8008c32:	493a      	ldr	r1, [pc, #232]	; (8008d1c <USER_Rash_Turn_Detection+0x26c>)
 8008c34:	f7f7 fe2a 	bl	800088c <__aeabi_fdiv>
		if(abs((int16_t)current_yaw_dps) > rtt_optimized)
 8008c38:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <USER_Rash_Turn_Detection+0x270>)
		current_yaw_dps=array_out_g[Z]*mdps_per_LSB/1000;
 8008c3a:	1c06      	adds	r6, r0, #0
		if(abs((int16_t)current_yaw_dps) > rtt_optimized)
 8008c3c:	681f      	ldr	r7, [r3, #0]
 8008c3e:	f7f8 f935 	bl	8000eac <__aeabi_f2iz>
 8008c42:	b200      	sxth	r0, r0
 8008c44:	17c3      	asrs	r3, r0, #31
 8008c46:	18c0      	adds	r0, r0, r3
 8008c48:	4058      	eors	r0, r3
 8008c4a:	f7f8 f94f 	bl	8000eec <__aeabi_i2f>
 8008c4e:	1c39      	adds	r1, r7, #0
 8008c50:	f7f7 fc58 	bl	8000504 <__aeabi_fcmpgt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0e0      	beq.n	8008c1a <USER_Rash_Turn_Detection+0x16a>
			rash_turn_itration++;
 8008c58:	782b      	ldrb	r3, [r5, #0]
			avg_yaw_dps+=current_yaw_dps;
 8008c5a:	1c30      	adds	r0, r6, #0
			rash_turn_itration++;
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	466b      	mov	r3, sp
 8008c64:	7b1b      	ldrb	r3, [r3, #12]
			avg_yaw_dps+=current_yaw_dps;
 8008c66:	6821      	ldr	r1, [r4, #0]
			rash_turn_itration++;
 8008c68:	702b      	strb	r3, [r5, #0]
			avg_yaw_dps+=current_yaw_dps;
 8008c6a:	f7f7 fc7d 	bl	8000568 <__aeabi_fadd>
			if(rash_turn_itration > RASH_TURN_ITRATION_TRESHOLD)
 8008c6e:	9b03      	ldr	r3, [sp, #12]
			avg_yaw_dps+=current_yaw_dps;
 8008c70:	1c06      	adds	r6, r0, #0
			if(rash_turn_itration > RASH_TURN_ITRATION_TRESHOLD)
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d800      	bhi.n	8008c78 <USER_Rash_Turn_Detection+0x1c8>
 8008c76:	e77f      	b.n	8008b78 <USER_Rash_Turn_Detection+0xc8>
				avg_yaw_dps/=rash_turn_itration;
 8008c78:	9803      	ldr	r0, [sp, #12]
 8008c7a:	f7f8 f937 	bl	8000eec <__aeabi_i2f>
 8008c7e:	1c01      	adds	r1, r0, #0
 8008c80:	1c30      	adds	r0, r6, #0
 8008c82:	f7f7 fe03 	bl	800088c <__aeabi_fdiv>
				if(avg_yaw_dps < 0)
 8008c86:	2100      	movs	r1, #0
				avg_yaw_dps/=rash_turn_itration;
 8008c88:	6020      	str	r0, [r4, #0]
 8008c8a:	1c06      	adds	r6, r0, #0
				if(avg_yaw_dps < 0)
 8008c8c:	f7f7 fc26 	bl	80004dc <__aeabi_fcmplt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d025      	beq.n	8008ce0 <USER_Rash_Turn_Detection+0x230>
					sprintf(out_string,"\r\n\r\nRASH Right Turn Detected		Angle Rate is %d	>	%d\r\n\r\n",(int16_t)avg_yaw_dps,(int8_t)rtt_optimized);
 8008c94:	1c38      	adds	r0, r7, #0
 8008c96:	f7f8 f909 	bl	8000eac <__aeabi_f2iz>
 8008c9a:	b247      	sxtb	r7, r0
 8008c9c:	1c30      	adds	r0, r6, #0
 8008c9e:	f7f8 f905 	bl	8000eac <__aeabi_f2iz>
 8008ca2:	003b      	movs	r3, r7
 8008ca4:	b202      	sxth	r2, r0
 8008ca6:	491f      	ldr	r1, [pc, #124]	; (8008d24 <USER_Rash_Turn_Detection+0x274>)
 8008ca8:	481f      	ldr	r0, [pc, #124]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008caa:	f003 f82d 	bl	800bd08 <siprintf>
					rash_turn_status	=	RASH_TURN_RIGHT;
 8008cae:	2601      	movs	r6, #1
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	481d      	ldr	r0, [pc, #116]	; (8008d2c <USER_Rash_Turn_Detection+0x27c>)
 8008cb6:	f7fa fa77 	bl	80031a8 <HAL_GPIO_WritePin>
				uarttx_req=1;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4f1c      	ldr	r7, [pc, #112]	; (8008d30 <USER_Rash_Turn_Detection+0x280>)
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008cbe:	481a      	ldr	r0, [pc, #104]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
				uarttx_req=1;
 8008cc0:	703b      	strb	r3, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008cc2:	f7f7 fa1f 	bl	8000104 <strlen>
 8008cc6:	4918      	ldr	r1, [pc, #96]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008cc8:	b282      	uxth	r2, r0
 8008cca:	481a      	ldr	r0, [pc, #104]	; (8008d34 <USER_Rash_Turn_Detection+0x284>)
 8008ccc:	f7fb fff8 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d001      	beq.n	8008cd8 <USER_Rash_Turn_Detection+0x228>
					Error_Handler();
 8008cd4:	f7ff fe28 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8008cd8:	783b      	ldrb	r3, [r7, #0]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d0fc      	beq.n	8008cd8 <USER_Rash_Turn_Detection+0x228>
 8008cde:	e783      	b.n	8008be8 <USER_Rash_Turn_Detection+0x138>
					sprintf(out_string,"\r\n\r\nRASH Left Turn Detected		Angle Rate is %d	>	%d\r\n\r\n",(int16_t)avg_yaw_dps,(int8_t)rtt_optimized);
 8008ce0:	1c38      	adds	r0, r7, #0
 8008ce2:	f7f8 f8e3 	bl	8000eac <__aeabi_f2iz>
 8008ce6:	b247      	sxtb	r7, r0
 8008ce8:	1c30      	adds	r0, r6, #0
 8008cea:	f7f8 f8df 	bl	8000eac <__aeabi_f2iz>
 8008cee:	003b      	movs	r3, r7
 8008cf0:	b202      	sxth	r2, r0
 8008cf2:	4911      	ldr	r1, [pc, #68]	; (8008d38 <USER_Rash_Turn_Detection+0x288>)
 8008cf4:	480c      	ldr	r0, [pc, #48]	; (8008d28 <USER_Rash_Turn_Detection+0x278>)
 8008cf6:	f003 f807 	bl	800bd08 <siprintf>
					rash_turn_status	=	RASH_TURN_LEFT;
 8008cfa:	2602      	movs	r6, #2
 8008cfc:	e7d8      	b.n	8008cb0 <USER_Rash_Turn_Detection+0x200>
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	20000269 	.word	0x20000269
 8008d04:	200003a0 	.word	0x200003a0
 8008d08:	20000009 	.word	0x20000009
 8008d0c:	20000478 	.word	0x20000478
 8008d10:	20000384 	.word	0x20000384
 8008d14:	20000380 	.word	0x20000380
 8008d18:	20000016 	.word	0x20000016
 8008d1c:	447a0000 	.word	0x447a0000
 8008d20:	20000484 	.word	0x20000484
 8008d24:	0800f506 	.word	0x0800f506
 8008d28:	2000026b 	.word	0x2000026b
 8008d2c:	48000400 	.word	0x48000400
 8008d30:	20000378 	.word	0x20000378
 8008d34:	20000510 	.word	0x20000510
 8008d38:	0800f53e 	.word	0x0800f53e

08008d3c <RASH_Turn_Threshold_Optimize>:
extern enum AXES gravity_axes;
extern double referance_tilt_angle[3];
extern float rtt_optimized;
extern char out_string[200];
void RASH_Turn_Threshold_Optimize(void)
{
 8008d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(gravity_axes	!=	AXES_NOT_SET)
 8008d3e:	4b3b      	ldr	r3, [pc, #236]	; (8008e2c <RASH_Turn_Threshold_Optimize+0xf0>)
{
 8008d40:	b085      	sub	sp, #20
	if(gravity_axes	!=	AXES_NOT_SET)
 8008d42:	781e      	ldrb	r6, [r3, #0]
 8008d44:	4c3a      	ldr	r4, [pc, #232]	; (8008e30 <RASH_Turn_Threshold_Optimize+0xf4>)
 8008d46:	4d3b      	ldr	r5, [pc, #236]	; (8008e34 <RASH_Turn_Threshold_Optimize+0xf8>)
 8008d48:	2e03      	cmp	r6, #3
 8008d4a:	d100      	bne.n	8008d4e <RASH_Turn_Threshold_Optimize+0x12>
 8008d4c:	e06a      	b.n	8008e24 <RASH_Turn_Threshold_Optimize+0xe8>
		{
			if(abs((int8_t)referance_tilt_angle[(gravity_axes+1)%3])	>	abs((int8_t)referance_tilt_angle[(gravity_axes+2)%3]))
 8008d4e:	1c70      	adds	r0, r6, #1
 8008d50:	2103      	movs	r1, #3
 8008d52:	f7f7 fb6d 	bl	8000430 <__aeabi_idivmod>
 8008d56:	4f38      	ldr	r7, [pc, #224]	; (8008e38 <RASH_Turn_Threshold_Optimize+0xfc>)
 8008d58:	00c9      	lsls	r1, r1, #3
 8008d5a:	1879      	adds	r1, r7, r1
 8008d5c:	680a      	ldr	r2, [r1, #0]
 8008d5e:	684b      	ldr	r3, [r1, #4]
 8008d60:	1cb0      	adds	r0, r6, #2
 8008d62:	2103      	movs	r1, #3
 8008d64:	9200      	str	r2, [sp, #0]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	f7f7 fb62 	bl	8000430 <__aeabi_idivmod>
 8008d6c:	00c9      	lsls	r1, r1, #3
 8008d6e:	187f      	adds	r7, r7, r1
 8008d70:	9800      	ldr	r0, [sp, #0]
 8008d72:	9901      	ldr	r1, [sp, #4]
 8008d74:	f7f9 fe4a 	bl	8002a0c <__aeabi_d2iz>
 8008d78:	683e      	ldr	r6, [r7, #0]
 8008d7a:	687f      	ldr	r7, [r7, #4]
 8008d7c:	b240      	sxtb	r0, r0
 8008d7e:	17c2      	asrs	r2, r0, #31
 8008d80:	1883      	adds	r3, r0, r2
 8008d82:	4053      	eors	r3, r2
 8008d84:	0030      	movs	r0, r6
 8008d86:	0039      	movs	r1, r7
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	f7f9 fe3f 	bl	8002a0c <__aeabi_d2iz>
 8008d8e:	b240      	sxtb	r0, r0
 8008d90:	17c3      	asrs	r3, r0, #31
 8008d92:	18c0      	adds	r0, r0, r3
 8008d94:	4058      	eors	r0, r3
 8008d96:	9b03      	ldr	r3, [sp, #12]
			{
				rtt_optimized=rtt*cos(degToRad(referance_tilt_angle[(gravity_axes+1)%3]));
 8008d98:	4a28      	ldr	r2, [pc, #160]	; (8008e3c <RASH_Turn_Threshold_Optimize+0x100>)
			if(abs((int8_t)referance_tilt_angle[(gravity_axes+1)%3])	>	abs((int8_t)referance_tilt_angle[(gravity_axes+2)%3]))
 8008d9a:	4283      	cmp	r3, r0
 8008d9c:	dd3e      	ble.n	8008e1c <RASH_Turn_Threshold_Optimize+0xe0>
				rtt_optimized=rtt*cos(degToRad(referance_tilt_angle[(gravity_axes+1)%3]));
 8008d9e:	9800      	ldr	r0, [sp, #0]
 8008da0:	9901      	ldr	r1, [sp, #4]
 8008da2:	4b27      	ldr	r3, [pc, #156]	; (8008e40 <RASH_Turn_Threshold_Optimize+0x104>)
			}
			else
			{
				rtt_optimized=rtt*cos(degToRad(referance_tilt_angle[(gravity_axes+2)%3]));
 8008da4:	f7f9 f87c 	bl	8001ea0 <__aeabi_dmul>
 8008da8:	2200      	movs	r2, #0
 8008daa:	4b26      	ldr	r3, [pc, #152]	; (8008e44 <RASH_Turn_Threshold_Optimize+0x108>)
 8008dac:	f7f8 fc44 	bl	8001638 <__aeabi_ddiv>
 8008db0:	f003 fcce 	bl	800c750 <cos>
 8008db4:	0006      	movs	r6, r0
 8008db6:	000f      	movs	r7, r1
 8008db8:	7828      	ldrb	r0, [r5, #0]
 8008dba:	f7f9 fe5b 	bl	8002a74 <__aeabi_i2d>
 8008dbe:	0032      	movs	r2, r6
 8008dc0:	003b      	movs	r3, r7
 8008dc2:	f7f9 f86d 	bl	8001ea0 <__aeabi_dmul>
 8008dc6:	f7f9 fee9 	bl	8002b9c <__aeabi_d2f>
			}
		}
		else
		{

			rtt_optimized=rtt;
 8008dca:	6020      	str	r0, [r4, #0]
		}

		sprintf(out_string,"\r\nRASH Turn Threshold is %d and Now it is Optimized to %d\r\n",rtt,(int8_t)rtt_optimized);
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	f7f8 f86d 	bl	8000eac <__aeabi_f2iz>
 8008dd2:	4c1d      	ldr	r4, [pc, #116]	; (8008e48 <RASH_Turn_Threshold_Optimize+0x10c>)
 8008dd4:	b243      	sxtb	r3, r0
 8008dd6:	782a      	ldrb	r2, [r5, #0]
 8008dd8:	491c      	ldr	r1, [pc, #112]	; (8008e4c <RASH_Turn_Threshold_Optimize+0x110>)
 8008dda:	0020      	movs	r0, r4
 8008ddc:	f002 ff94 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008de0:	2201      	movs	r2, #1
 8008de2:	2102      	movs	r1, #2
 8008de4:	481a      	ldr	r0, [pc, #104]	; (8008e50 <RASH_Turn_Threshold_Optimize+0x114>)
 8008de6:	f7fa f9df 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	4d19      	ldr	r5, [pc, #100]	; (8008e54 <RASH_Turn_Threshold_Optimize+0x118>)
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008dee:	0020      	movs	r0, r4
			uarttx_req=1;
 8008df0:	702b      	strb	r3, [r5, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008df2:	f7f7 f987 	bl	8000104 <strlen>
 8008df6:	0021      	movs	r1, r4
 8008df8:	b282      	uxth	r2, r0
 8008dfa:	4817      	ldr	r0, [pc, #92]	; (8008e58 <RASH_Turn_Threshold_Optimize+0x11c>)
 8008dfc:	f7fb ff60 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d001      	beq.n	8008e08 <RASH_Turn_Threshold_Optimize+0xcc>
			{
				Error_Handler();
 8008e04:	f7ff fd90 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8008e08:	782b      	ldrb	r3, [r5, #0]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d0fc      	beq.n	8008e08 <RASH_Turn_Threshold_Optimize+0xcc>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2102      	movs	r1, #2
 8008e12:	480f      	ldr	r0, [pc, #60]	; (8008e50 <RASH_Turn_Threshold_Optimize+0x114>)
 8008e14:	f7fa f9c8 	bl	80031a8 <HAL_GPIO_WritePin>
}
 8008e18:	b005      	add	sp, #20
 8008e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				rtt_optimized=rtt*cos(degToRad(referance_tilt_angle[(gravity_axes+2)%3]));
 8008e1c:	4b08      	ldr	r3, [pc, #32]	; (8008e40 <RASH_Turn_Threshold_Optimize+0x104>)
 8008e1e:	0030      	movs	r0, r6
 8008e20:	0039      	movs	r1, r7
 8008e22:	e7bf      	b.n	8008da4 <RASH_Turn_Threshold_Optimize+0x68>
			rtt_optimized=rtt;
 8008e24:	7828      	ldrb	r0, [r5, #0]
 8008e26:	f7f8 f8b1 	bl	8000f8c <__aeabi_ui2f>
 8008e2a:	e7ce      	b.n	8008dca <RASH_Turn_Threshold_Optimize+0x8e>
 8008e2c:	20000009 	.word	0x20000009
 8008e30:	20000484 	.word	0x20000484
 8008e34:	20000013 	.word	0x20000013
 8008e38:	20000338 	.word	0x20000338
 8008e3c:	54442d18 	.word	0x54442d18
 8008e40:	400921fb 	.word	0x400921fb
 8008e44:	40668000 	.word	0x40668000
 8008e48:	2000026b 	.word	0x2000026b
 8008e4c:	0800e9db 	.word	0x0800e9db
 8008e50:	48000400 	.word	0x48000400
 8008e54:	20000378 	.word	0x20000378
 8008e58:	20000510 	.word	0x20000510

08008e5c <USER_Referance_Tilt_Calculation_without_Gravity_axes>:
		USER_Referance_Tilt_Calculation_with_Forward_axes();
	}
}

void USER_Referance_Tilt_Calculation_without_Gravity_axes(void)
{
 8008e5c:	b570      	push	{r4, r5, r6, lr}
	memset(referance_tilt_angle,0,sizeof(referance_tilt_angle));
	current_referance_tilt_function =NO_GRAVITY_AXES;
 8008e5e:	2601      	movs	r6, #1
	memset(referance_tilt_angle,0,sizeof(referance_tilt_angle));
 8008e60:	2218      	movs	r2, #24
 8008e62:	2100      	movs	r1, #0
 8008e64:	4812      	ldr	r0, [pc, #72]	; (8008eb0 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x54>)
 8008e66:	f002 ff46 	bl	800bcf6 <memset>

	sprintf(out_string,"\r\nReferance Tilt Angle set to 0 for All AXES\r\n");
 8008e6a:	4c12      	ldr	r4, [pc, #72]	; (8008eb4 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x58>)
	current_referance_tilt_function =NO_GRAVITY_AXES;
 8008e6c:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x5c>)
	sprintf(out_string,"\r\nReferance Tilt Angle set to 0 for All AXES\r\n");
 8008e6e:	4913      	ldr	r1, [pc, #76]	; (8008ebc <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x60>)
 8008e70:	0020      	movs	r0, r4
	current_referance_tilt_function =NO_GRAVITY_AXES;
 8008e72:	701e      	strb	r6, [r3, #0]
	sprintf(out_string,"\r\nReferance Tilt Angle set to 0 for All AXES\r\n");
 8008e74:	f002 ff6a 	bl	800bd4c <strcpy>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8008e78:	0032      	movs	r2, r6
 8008e7a:	2102      	movs	r1, #2
 8008e7c:	4810      	ldr	r0, [pc, #64]	; (8008ec0 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x64>)
 8008e7e:	f7fa f993 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8008e82:	4d10      	ldr	r5, [pc, #64]	; (8008ec4 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x68>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008e84:	0020      	movs	r0, r4
	uarttx_req=1;
 8008e86:	702e      	strb	r6, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8008e88:	f7f7 f93c 	bl	8000104 <strlen>
 8008e8c:	0021      	movs	r1, r4
 8008e8e:	b282      	uxth	r2, r0
 8008e90:	480d      	ldr	r0, [pc, #52]	; (8008ec8 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x6c>)
 8008e92:	f7fb ff15 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d001      	beq.n	8008e9e <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x42>
	{
		Error_Handler();
 8008e9a:	f7ff fd45 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8008e9e:	782b      	ldrb	r3, [r5, #0]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d0fc      	beq.n	8008e9e <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x42>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2102      	movs	r1, #2
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <USER_Referance_Tilt_Calculation_without_Gravity_axes+0x64>)
 8008eaa:	f7fa f97d 	bl	80031a8 <HAL_GPIO_WritePin>
}
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	20000338 	.word	0x20000338
 8008eb4:	2000026b 	.word	0x2000026b
 8008eb8:	20000233 	.word	0x20000233
 8008ebc:	0800f615 	.word	0x0800f615
 8008ec0:	48000400 	.word	0x48000400
 8008ec4:	20000378 	.word	0x20000378
 8008ec8:	20000510 	.word	0x20000510

08008ecc <USER_Referance_Tilt_Calculation_without_Forward_axes>:
void USER_Referance_Tilt_Calculation_without_Forward_axes(void)
{
 8008ecc:	b5f0      	push	{r4, r5, r6, r7, lr}

	switch(gravity_axes)
 8008ece:	4bcb      	ldr	r3, [pc, #812]	; (80091fc <USER_Referance_Tilt_Calculation_without_Forward_axes+0x330>)
{
 8008ed0:	b089      	sub	sp, #36	; 0x24
	switch(gravity_axes)
 8008ed2:	7818      	ldrb	r0, [r3, #0]
 8008ed4:	4cca      	ldr	r4, [pc, #808]	; (8009200 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x334>)
 8008ed6:	4dcb      	ldr	r5, [pc, #812]	; (8009204 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x338>)
 8008ed8:	4ecb      	ldr	r6, [pc, #812]	; (8009208 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x33c>)
 8008eda:	2803      	cmp	r0, #3
 8008edc:	d900      	bls.n	8008ee0 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x14>
 8008ede:	e28a      	b.n	80093f6 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x52a>
 8008ee0:	f7f7 f92c 	bl	800013c <__gnu_thumb1_case_uhi>
 8008ee4:	01080004 	.word	0x01080004
 8008ee8:	026901a4 	.word	0x026901a4
	{
	case X:
		referance_tilt_angle[X]=radToDeg(acos(xl_axes_ref[X]/sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
 8008eec:	4ec7      	ldr	r6, [pc, #796]	; (800920c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x340>)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	5ef0      	ldrsh	r0, [r6, r3]
 8008ef2:	f7f9 fdbf 	bl	8002a74 <__aeabi_i2d>
 8008ef6:	9002      	str	r0, [sp, #8]
 8008ef8:	9103      	str	r1, [sp, #12]
 8008efa:	2302      	movs	r3, #2
 8008efc:	5ef0      	ldrsh	r0, [r6, r3]
 8008efe:	f7f9 fdb9 	bl	8002a74 <__aeabi_i2d>
 8008f02:	0004      	movs	r4, r0
 8008f04:	2304      	movs	r3, #4
 8008f06:	5ef0      	ldrsh	r0, [r6, r3]
 8008f08:	000d      	movs	r5, r1
 8008f0a:	f7f9 fdb3 	bl	8002a74 <__aeabi_i2d>
 8008f0e:	9a02      	ldr	r2, [sp, #8]
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	9004      	str	r0, [sp, #16]
 8008f14:	9105      	str	r1, [sp, #20]
 8008f16:	0010      	movs	r0, r2
 8008f18:	0019      	movs	r1, r3
 8008f1a:	f7f8 ffc1 	bl	8001ea0 <__aeabi_dmul>
 8008f1e:	0022      	movs	r2, r4
 8008f20:	9006      	str	r0, [sp, #24]
 8008f22:	9107      	str	r1, [sp, #28]
 8008f24:	002b      	movs	r3, r5
 8008f26:	0020      	movs	r0, r4
 8008f28:	0029      	movs	r1, r5
 8008f2a:	f7f8 ffb9 	bl	8001ea0 <__aeabi_dmul>
 8008f2e:	0002      	movs	r2, r0
 8008f30:	000b      	movs	r3, r1
 8008f32:	9806      	ldr	r0, [sp, #24]
 8008f34:	9907      	ldr	r1, [sp, #28]
 8008f36:	f7f8 f86f 	bl	8001018 <__aeabi_dadd>
 8008f3a:	9a04      	ldr	r2, [sp, #16]
 8008f3c:	9b05      	ldr	r3, [sp, #20]
 8008f3e:	0004      	movs	r4, r0
 8008f40:	000d      	movs	r5, r1
 8008f42:	0010      	movs	r0, r2
 8008f44:	0019      	movs	r1, r3
 8008f46:	f7f8 ffab 	bl	8001ea0 <__aeabi_dmul>
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	000b      	movs	r3, r1
 8008f4e:	0020      	movs	r0, r4
 8008f50:	0029      	movs	r1, r5
 8008f52:	f7f8 f861 	bl	8001018 <__aeabi_dadd>
 8008f56:	f003 fc95 	bl	800c884 <sqrt>
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	000b      	movs	r3, r1
 8008f5e:	9802      	ldr	r0, [sp, #8]
 8008f60:	9903      	ldr	r1, [sp, #12]
 8008f62:	f7f8 fb69 	bl	8001638 <__aeabi_ddiv>
 8008f66:	f003 fc35 	bl	800c7d4 <acos>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4ba8      	ldr	r3, [pc, #672]	; (8009210 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x344>)
 8008f6e:	f7f8 ff97 	bl	8001ea0 <__aeabi_dmul>
 8008f72:	4ba8      	ldr	r3, [pc, #672]	; (8009214 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x348>)
 8008f74:	4aa8      	ldr	r2, [pc, #672]	; (8009218 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x34c>)
 8008f76:	f7f8 fb5f 	bl	8001638 <__aeabi_ddiv>
 8008f7a:	4fa8      	ldr	r7, [pc, #672]	; (800921c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x350>)
 8008f7c:	6038      	str	r0, [r7, #0]
 8008f7e:	6079      	str	r1, [r7, #4]
		referance_tilt_angle[Y]=radToDeg(atan2(xl_axes_ref[Y],sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Z],2))));
 8008f80:	2302      	movs	r3, #2
 8008f82:	5ef0      	ldrsh	r0, [r6, r3]
 8008f84:	f7f9 fd76 	bl	8002a74 <__aeabi_i2d>
 8008f88:	9004      	str	r0, [sp, #16]
 8008f8a:	9105      	str	r1, [sp, #20]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	5ef0      	ldrsh	r0, [r6, r3]
 8008f90:	f7f9 fd70 	bl	8002a74 <__aeabi_i2d>
 8008f94:	0004      	movs	r4, r0
 8008f96:	2304      	movs	r3, #4
 8008f98:	5ef0      	ldrsh	r0, [r6, r3]
 8008f9a:	000d      	movs	r5, r1
 8008f9c:	f7f9 fd6a 	bl	8002a74 <__aeabi_i2d>
 8008fa0:	0022      	movs	r2, r4
 8008fa2:	9002      	str	r0, [sp, #8]
 8008fa4:	9103      	str	r1, [sp, #12]
 8008fa6:	002b      	movs	r3, r5
 8008fa8:	0020      	movs	r0, r4
 8008faa:	0029      	movs	r1, r5
 8008fac:	f7f8 ff78 	bl	8001ea0 <__aeabi_dmul>
 8008fb0:	9a02      	ldr	r2, [sp, #8]
 8008fb2:	9b03      	ldr	r3, [sp, #12]
 8008fb4:	0004      	movs	r4, r0
 8008fb6:	000d      	movs	r5, r1
 8008fb8:	0010      	movs	r0, r2
 8008fba:	0019      	movs	r1, r3
 8008fbc:	f7f8 ff70 	bl	8001ea0 <__aeabi_dmul>
 8008fc0:	0002      	movs	r2, r0
 8008fc2:	000b      	movs	r3, r1
 8008fc4:	0020      	movs	r0, r4
 8008fc6:	0029      	movs	r1, r5
 8008fc8:	f7f8 f826 	bl	8001018 <__aeabi_dadd>
 8008fcc:	f003 fc5a 	bl	800c884 <sqrt>
 8008fd0:	0002      	movs	r2, r0
 8008fd2:	000b      	movs	r3, r1
 8008fd4:	9804      	ldr	r0, [sp, #16]
 8008fd6:	9905      	ldr	r1, [sp, #20]
 8008fd8:	f003 fc50 	bl	800c87c <atan2>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4b8c      	ldr	r3, [pc, #560]	; (8009210 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x344>)
 8008fe0:	f7f8 ff5e 	bl	8001ea0 <__aeabi_dmul>
 8008fe4:	4a8c      	ldr	r2, [pc, #560]	; (8009218 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x34c>)
 8008fe6:	4b8b      	ldr	r3, [pc, #556]	; (8009214 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x348>)
 8008fe8:	f7f8 fb26 	bl	8001638 <__aeabi_ddiv>
 8008fec:	60b8      	str	r0, [r7, #8]
 8008fee:	60f9      	str	r1, [r7, #12]

		break;
	case Y:
		referance_tilt_angle[Y]=radToDeg(acos(xl_axes_ref[Y]/sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
		referance_tilt_angle[X]=radToDeg(atan2(xl_axes_ref[X],sqrt(pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
		referance_tilt_angle[Z]=radToDeg(atan2(xl_axes_ref[Z],sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Y],2))));
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	5ef0      	ldrsh	r0, [r6, r3]
 8008ff4:	f7f9 fd3e 	bl	8002a74 <__aeabi_i2d>
 8008ff8:	9004      	str	r0, [sp, #16]
 8008ffa:	9105      	str	r1, [sp, #20]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	5ef0      	ldrsh	r0, [r6, r3]
 8009000:	f7f9 fd38 	bl	8002a74 <__aeabi_i2d>
 8009004:	0004      	movs	r4, r0
 8009006:	2302      	movs	r3, #2
 8009008:	5ef0      	ldrsh	r0, [r6, r3]
 800900a:	000d      	movs	r5, r1
 800900c:	f7f9 fd32 	bl	8002a74 <__aeabi_i2d>
 8009010:	0022      	movs	r2, r4
 8009012:	9002      	str	r0, [sp, #8]
 8009014:	9103      	str	r1, [sp, #12]
 8009016:	002b      	movs	r3, r5
 8009018:	0020      	movs	r0, r4
 800901a:	0029      	movs	r1, r5
 800901c:	f7f8 ff40 	bl	8001ea0 <__aeabi_dmul>
 8009020:	9a02      	ldr	r2, [sp, #8]
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	0004      	movs	r4, r0
 8009026:	000d      	movs	r5, r1
 8009028:	0010      	movs	r0, r2
 800902a:	0019      	movs	r1, r3
 800902c:	f7f8 ff38 	bl	8001ea0 <__aeabi_dmul>
 8009030:	0002      	movs	r2, r0
 8009032:	000b      	movs	r3, r1
 8009034:	0020      	movs	r0, r4
 8009036:	0029      	movs	r1, r5
 8009038:	f7f7 ffee 	bl	8001018 <__aeabi_dadd>
 800903c:	f003 fc22 	bl	800c884 <sqrt>
 8009040:	0002      	movs	r2, r0
 8009042:	000b      	movs	r3, r1
 8009044:	9804      	ldr	r0, [sp, #16]
 8009046:	9905      	ldr	r1, [sp, #20]
 8009048:	f003 fc18 	bl	800c87c <atan2>
 800904c:	2200      	movs	r2, #0
 800904e:	4b70      	ldr	r3, [pc, #448]	; (8009210 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x344>)
 8009050:	f7f8 ff26 	bl	8001ea0 <__aeabi_dmul>
 8009054:	4a70      	ldr	r2, [pc, #448]	; (8009218 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x34c>)
 8009056:	4b6f      	ldr	r3, [pc, #444]	; (8009214 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x348>)
 8009058:	f7f8 faee 	bl	8001638 <__aeabi_ddiv>
 800905c:	6138      	str	r0, [r7, #16]
 800905e:	6179      	str	r1, [r7, #20]


	}


	sprintf(out_string,"\r\nReferance of Gravity Angle = %d , Forward / Side Angle 1 = %d , Forward / Side Angle 2 = %d\r\n",(int16_t)referance_tilt_angle[gravity_axes],(int16_t)referance_tilt_angle[(gravity_axes+1)%3],(int16_t)referance_tilt_angle[(gravity_axes+2)%3]);
 8009060:	4b66      	ldr	r3, [pc, #408]	; (80091fc <USER_Referance_Tilt_Calculation_without_Forward_axes+0x330>)
 8009062:	2103      	movs	r1, #3
 8009064:	781d      	ldrb	r5, [r3, #0]
 8009066:	4c6d      	ldr	r4, [pc, #436]	; (800921c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x350>)
 8009068:	1c68      	adds	r0, r5, #1
 800906a:	f7f7 f9e1 	bl	8000430 <__aeabi_idivmod>
 800906e:	00c9      	lsls	r1, r1, #3
 8009070:	1861      	adds	r1, r4, r1
 8009072:	6808      	ldr	r0, [r1, #0]
 8009074:	6849      	ldr	r1, [r1, #4]
 8009076:	f7f9 fcc9 	bl	8002a0c <__aeabi_d2iz>
 800907a:	00eb      	lsls	r3, r5, #3
 800907c:	18e3      	adds	r3, r4, r3
 800907e:	b207      	sxth	r7, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	6859      	ldr	r1, [r3, #4]
 8009084:	f7f9 fcc2 	bl	8002a0c <__aeabi_d2iz>
 8009088:	2103      	movs	r1, #3
 800908a:	b203      	sxth	r3, r0
 800908c:	1ca8      	adds	r0, r5, #2
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	f7f7 f9ce 	bl	8000430 <__aeabi_idivmod>
 8009094:	00c9      	lsls	r1, r1, #3
 8009096:	1864      	adds	r4, r4, r1
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	6861      	ldr	r1, [r4, #4]
 800909c:	f7f9 fcb6 	bl	8002a0c <__aeabi_d2iz>
 80090a0:	4e57      	ldr	r6, [pc, #348]	; (8009200 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x334>)
 80090a2:	b200      	sxth	r0, r0
 80090a4:	003b      	movs	r3, r7
 80090a6:	9000      	str	r0, [sp, #0]
 80090a8:	9a02      	ldr	r2, [sp, #8]
 80090aa:	495d      	ldr	r1, [pc, #372]	; (8009220 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x354>)
 80090ac:	0030      	movs	r0, r6
 80090ae:	f002 fe2b 	bl	800bd08 <siprintf>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80090b2:	2201      	movs	r2, #1
 80090b4:	2102      	movs	r1, #2
 80090b6:	485b      	ldr	r0, [pc, #364]	; (8009224 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x358>)
 80090b8:	f7fa f876 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80090bc:	2301      	movs	r3, #1
 80090be:	4c51      	ldr	r4, [pc, #324]	; (8009204 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x338>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80090c0:	0030      	movs	r0, r6
	uarttx_req=1;
 80090c2:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80090c4:	f7f7 f81e 	bl	8000104 <strlen>
 80090c8:	0031      	movs	r1, r6
 80090ca:	b282      	uxth	r2, r0
 80090cc:	484e      	ldr	r0, [pc, #312]	; (8009208 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x33c>)
 80090ce:	f7fb fdf7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d001      	beq.n	80090da <USER_Referance_Tilt_Calculation_without_Forward_axes+0x20e>
	{
		Error_Handler();
 80090d6:	f7ff fc27 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80090da:	7823      	ldrb	r3, [r4, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d0fc      	beq.n	80090da <USER_Referance_Tilt_Calculation_without_Forward_axes+0x20e>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80090e0:	2200      	movs	r2, #0
 80090e2:	2102      	movs	r1, #2
 80090e4:	484f      	ldr	r0, [pc, #316]	; (8009224 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x358>)
 80090e6:	f7fa f85f 	bl	80031a8 <HAL_GPIO_WritePin>

	current_referance_tilt_function	=	ONLY_GRAVITY_AXES;
 80090ea:	2202      	movs	r2, #2
 80090ec:	4b4e      	ldr	r3, [pc, #312]	; (8009228 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x35c>)
 80090ee:	701a      	strb	r2, [r3, #0]

}
 80090f0:	b009      	add	sp, #36	; 0x24
 80090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		referance_tilt_angle[Y]=radToDeg(acos(xl_axes_ref[Y]/sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
 80090f4:	4e45      	ldr	r6, [pc, #276]	; (800920c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x340>)
 80090f6:	2300      	movs	r3, #0
 80090f8:	5ef0      	ldrsh	r0, [r6, r3]
 80090fa:	f7f9 fcbb 	bl	8002a74 <__aeabi_i2d>
 80090fe:	0004      	movs	r4, r0
 8009100:	2302      	movs	r3, #2
 8009102:	5ef0      	ldrsh	r0, [r6, r3]
 8009104:	000d      	movs	r5, r1
 8009106:	f7f9 fcb5 	bl	8002a74 <__aeabi_i2d>
 800910a:	9002      	str	r0, [sp, #8]
 800910c:	9103      	str	r1, [sp, #12]
 800910e:	2304      	movs	r3, #4
 8009110:	5ef0      	ldrsh	r0, [r6, r3]
 8009112:	f7f9 fcaf 	bl	8002a74 <__aeabi_i2d>
 8009116:	0022      	movs	r2, r4
 8009118:	9004      	str	r0, [sp, #16]
 800911a:	9105      	str	r1, [sp, #20]
 800911c:	002b      	movs	r3, r5
 800911e:	0020      	movs	r0, r4
 8009120:	0029      	movs	r1, r5
 8009122:	f7f8 febd 	bl	8001ea0 <__aeabi_dmul>
 8009126:	9a02      	ldr	r2, [sp, #8]
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	0004      	movs	r4, r0
 800912c:	000d      	movs	r5, r1
 800912e:	0010      	movs	r0, r2
 8009130:	0019      	movs	r1, r3
 8009132:	f7f8 feb5 	bl	8001ea0 <__aeabi_dmul>
 8009136:	0002      	movs	r2, r0
 8009138:	000b      	movs	r3, r1
 800913a:	0020      	movs	r0, r4
 800913c:	0029      	movs	r1, r5
 800913e:	f7f7 ff6b 	bl	8001018 <__aeabi_dadd>
 8009142:	9a04      	ldr	r2, [sp, #16]
 8009144:	9b05      	ldr	r3, [sp, #20]
 8009146:	0004      	movs	r4, r0
 8009148:	000d      	movs	r5, r1
 800914a:	0010      	movs	r0, r2
 800914c:	0019      	movs	r1, r3
 800914e:	f7f8 fea7 	bl	8001ea0 <__aeabi_dmul>
 8009152:	0002      	movs	r2, r0
 8009154:	000b      	movs	r3, r1
 8009156:	0020      	movs	r0, r4
 8009158:	0029      	movs	r1, r5
 800915a:	f7f7 ff5d 	bl	8001018 <__aeabi_dadd>
 800915e:	f003 fb91 	bl	800c884 <sqrt>
 8009162:	0002      	movs	r2, r0
 8009164:	000b      	movs	r3, r1
 8009166:	9802      	ldr	r0, [sp, #8]
 8009168:	9903      	ldr	r1, [sp, #12]
 800916a:	f7f8 fa65 	bl	8001638 <__aeabi_ddiv>
 800916e:	f003 fb31 	bl	800c7d4 <acos>
 8009172:	2200      	movs	r2, #0
 8009174:	4b26      	ldr	r3, [pc, #152]	; (8009210 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x344>)
 8009176:	f7f8 fe93 	bl	8001ea0 <__aeabi_dmul>
 800917a:	4b26      	ldr	r3, [pc, #152]	; (8009214 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x348>)
 800917c:	4a26      	ldr	r2, [pc, #152]	; (8009218 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x34c>)
 800917e:	f7f8 fa5b 	bl	8001638 <__aeabi_ddiv>
 8009182:	4f26      	ldr	r7, [pc, #152]	; (800921c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x350>)
 8009184:	60b8      	str	r0, [r7, #8]
 8009186:	60f9      	str	r1, [r7, #12]
		referance_tilt_angle[X]=radToDeg(atan2(xl_axes_ref[X],sqrt(pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
 8009188:	2300      	movs	r3, #0
 800918a:	5ef0      	ldrsh	r0, [r6, r3]
 800918c:	f7f9 fc72 	bl	8002a74 <__aeabi_i2d>
 8009190:	9004      	str	r0, [sp, #16]
 8009192:	9105      	str	r1, [sp, #20]
 8009194:	2302      	movs	r3, #2
 8009196:	5ef0      	ldrsh	r0, [r6, r3]
 8009198:	f7f9 fc6c 	bl	8002a74 <__aeabi_i2d>
 800919c:	0004      	movs	r4, r0
 800919e:	2304      	movs	r3, #4
 80091a0:	5ef0      	ldrsh	r0, [r6, r3]
 80091a2:	000d      	movs	r5, r1
 80091a4:	f7f9 fc66 	bl	8002a74 <__aeabi_i2d>
 80091a8:	0022      	movs	r2, r4
 80091aa:	9002      	str	r0, [sp, #8]
 80091ac:	9103      	str	r1, [sp, #12]
 80091ae:	002b      	movs	r3, r5
 80091b0:	0020      	movs	r0, r4
 80091b2:	0029      	movs	r1, r5
 80091b4:	f7f8 fe74 	bl	8001ea0 <__aeabi_dmul>
 80091b8:	9a02      	ldr	r2, [sp, #8]
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	0004      	movs	r4, r0
 80091be:	000d      	movs	r5, r1
 80091c0:	0010      	movs	r0, r2
 80091c2:	0019      	movs	r1, r3
 80091c4:	f7f8 fe6c 	bl	8001ea0 <__aeabi_dmul>
 80091c8:	0002      	movs	r2, r0
 80091ca:	000b      	movs	r3, r1
 80091cc:	0020      	movs	r0, r4
 80091ce:	0029      	movs	r1, r5
 80091d0:	f7f7 ff22 	bl	8001018 <__aeabi_dadd>
 80091d4:	f003 fb56 	bl	800c884 <sqrt>
 80091d8:	0002      	movs	r2, r0
 80091da:	000b      	movs	r3, r1
 80091dc:	9804      	ldr	r0, [sp, #16]
 80091de:	9905      	ldr	r1, [sp, #20]
 80091e0:	f003 fb4c 	bl	800c87c <atan2>
 80091e4:	2200      	movs	r2, #0
 80091e6:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x344>)
 80091e8:	f7f8 fe5a 	bl	8001ea0 <__aeabi_dmul>
 80091ec:	4a0a      	ldr	r2, [pc, #40]	; (8009218 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x34c>)
 80091ee:	4b09      	ldr	r3, [pc, #36]	; (8009214 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x348>)
 80091f0:	f7f8 fa22 	bl	8001638 <__aeabi_ddiv>
 80091f4:	6038      	str	r0, [r7, #0]
 80091f6:	6079      	str	r1, [r7, #4]
 80091f8:	e6fa      	b.n	8008ff0 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x124>
 80091fa:	46c0      	nop			; (mov r8, r8)
 80091fc:	20000009 	.word	0x20000009
 8009200:	2000026b 	.word	0x2000026b
 8009204:	20000378 	.word	0x20000378
 8009208:	20000510 	.word	0x20000510
 800920c:	2000037a 	.word	0x2000037a
 8009210:	40668000 	.word	0x40668000
 8009214:	400921fb 	.word	0x400921fb
 8009218:	54442d18 	.word	0x54442d18
 800921c:	20000338 	.word	0x20000338
 8009220:	0800ed3e 	.word	0x0800ed3e
 8009224:	48000400 	.word	0x48000400
 8009228:	20000233 	.word	0x20000233
		referance_tilt_angle[Z]=radToDeg(acos(xl_axes_ref[Z]/sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
 800922c:	4b7f      	ldr	r3, [pc, #508]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 800922e:	2000      	movs	r0, #0
 8009230:	5e18      	ldrsh	r0, [r3, r0]
 8009232:	f7f9 fc1f 	bl	8002a74 <__aeabi_i2d>
 8009236:	4b7d      	ldr	r3, [pc, #500]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 8009238:	0004      	movs	r4, r0
 800923a:	2002      	movs	r0, #2
 800923c:	5e18      	ldrsh	r0, [r3, r0]
 800923e:	000d      	movs	r5, r1
 8009240:	f7f9 fc18 	bl	8002a74 <__aeabi_i2d>
 8009244:	9002      	str	r0, [sp, #8]
 8009246:	9103      	str	r1, [sp, #12]
 8009248:	4b78      	ldr	r3, [pc, #480]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 800924a:	2004      	movs	r0, #4
 800924c:	5e18      	ldrsh	r0, [r3, r0]
 800924e:	f7f9 fc11 	bl	8002a74 <__aeabi_i2d>
 8009252:	0022      	movs	r2, r4
 8009254:	0006      	movs	r6, r0
 8009256:	000f      	movs	r7, r1
 8009258:	002b      	movs	r3, r5
 800925a:	0020      	movs	r0, r4
 800925c:	0029      	movs	r1, r5
 800925e:	f7f8 fe1f 	bl	8001ea0 <__aeabi_dmul>
 8009262:	9a02      	ldr	r2, [sp, #8]
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	0004      	movs	r4, r0
 8009268:	000d      	movs	r5, r1
 800926a:	0010      	movs	r0, r2
 800926c:	0019      	movs	r1, r3
 800926e:	f7f8 fe17 	bl	8001ea0 <__aeabi_dmul>
 8009272:	0002      	movs	r2, r0
 8009274:	000b      	movs	r3, r1
 8009276:	0020      	movs	r0, r4
 8009278:	0029      	movs	r1, r5
 800927a:	f7f7 fecd 	bl	8001018 <__aeabi_dadd>
 800927e:	0032      	movs	r2, r6
 8009280:	0004      	movs	r4, r0
 8009282:	000d      	movs	r5, r1
 8009284:	003b      	movs	r3, r7
 8009286:	0030      	movs	r0, r6
 8009288:	0039      	movs	r1, r7
 800928a:	f7f8 fe09 	bl	8001ea0 <__aeabi_dmul>
 800928e:	0002      	movs	r2, r0
 8009290:	000b      	movs	r3, r1
 8009292:	0020      	movs	r0, r4
 8009294:	0029      	movs	r1, r5
 8009296:	f7f7 febf 	bl	8001018 <__aeabi_dadd>
 800929a:	f003 faf3 	bl	800c884 <sqrt>
 800929e:	0002      	movs	r2, r0
 80092a0:	000b      	movs	r3, r1
 80092a2:	0030      	movs	r0, r6
 80092a4:	0039      	movs	r1, r7
 80092a6:	f7f8 f9c7 	bl	8001638 <__aeabi_ddiv>
 80092aa:	f003 fa93 	bl	800c7d4 <acos>
 80092ae:	2200      	movs	r2, #0
 80092b0:	4b5f      	ldr	r3, [pc, #380]	; (8009430 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x564>)
 80092b2:	f7f8 fdf5 	bl	8001ea0 <__aeabi_dmul>
 80092b6:	4a5f      	ldr	r2, [pc, #380]	; (8009434 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x568>)
 80092b8:	4b5f      	ldr	r3, [pc, #380]	; (8009438 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x56c>)
 80092ba:	f7f8 f9bd 	bl	8001638 <__aeabi_ddiv>
 80092be:	4b5f      	ldr	r3, [pc, #380]	; (800943c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x570>)
 80092c0:	6118      	str	r0, [r3, #16]
 80092c2:	6159      	str	r1, [r3, #20]
		referance_tilt_angle[X]=radToDeg(atan2(xl_axes_ref[X],sqrt(pow(xl_axes_ref[Y],2)+pow(xl_axes_ref[Z],2))));
 80092c4:	4b59      	ldr	r3, [pc, #356]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 80092c6:	2000      	movs	r0, #0
 80092c8:	5e18      	ldrsh	r0, [r3, r0]
 80092ca:	f7f9 fbd3 	bl	8002a74 <__aeabi_i2d>
 80092ce:	9002      	str	r0, [sp, #8]
 80092d0:	9103      	str	r1, [sp, #12]
 80092d2:	4b56      	ldr	r3, [pc, #344]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 80092d4:	2002      	movs	r0, #2
 80092d6:	5e18      	ldrsh	r0, [r3, r0]
 80092d8:	f7f9 fbcc 	bl	8002a74 <__aeabi_i2d>
 80092dc:	4b53      	ldr	r3, [pc, #332]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 80092de:	0004      	movs	r4, r0
 80092e0:	2004      	movs	r0, #4
 80092e2:	5e18      	ldrsh	r0, [r3, r0]
 80092e4:	000d      	movs	r5, r1
 80092e6:	f7f9 fbc5 	bl	8002a74 <__aeabi_i2d>
 80092ea:	0022      	movs	r2, r4
 80092ec:	0006      	movs	r6, r0
 80092ee:	000f      	movs	r7, r1
 80092f0:	002b      	movs	r3, r5
 80092f2:	0020      	movs	r0, r4
 80092f4:	0029      	movs	r1, r5
 80092f6:	f7f8 fdd3 	bl	8001ea0 <__aeabi_dmul>
 80092fa:	0032      	movs	r2, r6
 80092fc:	0004      	movs	r4, r0
 80092fe:	000d      	movs	r5, r1
 8009300:	003b      	movs	r3, r7
 8009302:	0030      	movs	r0, r6
 8009304:	0039      	movs	r1, r7
 8009306:	f7f8 fdcb 	bl	8001ea0 <__aeabi_dmul>
 800930a:	0002      	movs	r2, r0
 800930c:	000b      	movs	r3, r1
 800930e:	0020      	movs	r0, r4
 8009310:	0029      	movs	r1, r5
 8009312:	f7f7 fe81 	bl	8001018 <__aeabi_dadd>
 8009316:	f003 fab5 	bl	800c884 <sqrt>
 800931a:	0002      	movs	r2, r0
 800931c:	000b      	movs	r3, r1
 800931e:	9802      	ldr	r0, [sp, #8]
 8009320:	9903      	ldr	r1, [sp, #12]
 8009322:	f003 faab 	bl	800c87c <atan2>
 8009326:	2200      	movs	r2, #0
 8009328:	4b41      	ldr	r3, [pc, #260]	; (8009430 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x564>)
 800932a:	f7f8 fdb9 	bl	8001ea0 <__aeabi_dmul>
 800932e:	4a41      	ldr	r2, [pc, #260]	; (8009434 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x568>)
 8009330:	4b41      	ldr	r3, [pc, #260]	; (8009438 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x56c>)
 8009332:	f7f8 f981 	bl	8001638 <__aeabi_ddiv>
 8009336:	4b41      	ldr	r3, [pc, #260]	; (800943c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x570>)
 8009338:	6018      	str	r0, [r3, #0]
 800933a:	6059      	str	r1, [r3, #4]
		referance_tilt_angle[Y]=radToDeg(atan2(xl_axes_ref[Y],sqrt(pow(xl_axes_ref[X],2)+pow(xl_axes_ref[Z],2))));
 800933c:	4b3b      	ldr	r3, [pc, #236]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 800933e:	2002      	movs	r0, #2
 8009340:	5e18      	ldrsh	r0, [r3, r0]
 8009342:	f7f9 fb97 	bl	8002a74 <__aeabi_i2d>
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 8009348:	9002      	str	r0, [sp, #8]
 800934a:	9103      	str	r1, [sp, #12]
 800934c:	2000      	movs	r0, #0
 800934e:	5e18      	ldrsh	r0, [r3, r0]
 8009350:	f7f9 fb90 	bl	8002a74 <__aeabi_i2d>
 8009354:	4b35      	ldr	r3, [pc, #212]	; (800942c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x560>)
 8009356:	0004      	movs	r4, r0
 8009358:	2004      	movs	r0, #4
 800935a:	5e18      	ldrsh	r0, [r3, r0]
 800935c:	000d      	movs	r5, r1
 800935e:	f7f9 fb89 	bl	8002a74 <__aeabi_i2d>
 8009362:	0022      	movs	r2, r4
 8009364:	0006      	movs	r6, r0
 8009366:	000f      	movs	r7, r1
 8009368:	002b      	movs	r3, r5
 800936a:	0020      	movs	r0, r4
 800936c:	0029      	movs	r1, r5
 800936e:	f7f8 fd97 	bl	8001ea0 <__aeabi_dmul>
 8009372:	0032      	movs	r2, r6
 8009374:	0004      	movs	r4, r0
 8009376:	000d      	movs	r5, r1
 8009378:	003b      	movs	r3, r7
 800937a:	0030      	movs	r0, r6
 800937c:	0039      	movs	r1, r7
 800937e:	f7f8 fd8f 	bl	8001ea0 <__aeabi_dmul>
 8009382:	0002      	movs	r2, r0
 8009384:	000b      	movs	r3, r1
 8009386:	0020      	movs	r0, r4
 8009388:	0029      	movs	r1, r5
 800938a:	f7f7 fe45 	bl	8001018 <__aeabi_dadd>
 800938e:	f003 fa79 	bl	800c884 <sqrt>
 8009392:	0002      	movs	r2, r0
 8009394:	000b      	movs	r3, r1
 8009396:	9802      	ldr	r0, [sp, #8]
 8009398:	9903      	ldr	r1, [sp, #12]
 800939a:	f003 fa6f 	bl	800c87c <atan2>
 800939e:	2200      	movs	r2, #0
 80093a0:	4b23      	ldr	r3, [pc, #140]	; (8009430 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x564>)
 80093a2:	f7f8 fd7d 	bl	8001ea0 <__aeabi_dmul>
 80093a6:	4b24      	ldr	r3, [pc, #144]	; (8009438 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x56c>)
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x568>)
 80093aa:	f7f8 f945 	bl	8001638 <__aeabi_ddiv>
 80093ae:	4b23      	ldr	r3, [pc, #140]	; (800943c <USER_Referance_Tilt_Calculation_without_Forward_axes+0x570>)
 80093b0:	6098      	str	r0, [r3, #8]
 80093b2:	60d9      	str	r1, [r3, #12]
		break;
 80093b4:	e654      	b.n	8009060 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x194>
		sprintf(out_string,"\r\nPlease Set Device Orientation to find Reference Tilt Angle\r\n");
 80093b6:	4922      	ldr	r1, [pc, #136]	; (8009440 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x574>)
 80093b8:	0020      	movs	r0, r4
 80093ba:	f002 fcc7 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80093be:	2201      	movs	r2, #1
 80093c0:	2102      	movs	r1, #2
 80093c2:	4820      	ldr	r0, [pc, #128]	; (8009444 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x578>)
 80093c4:	f7f9 fef0 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80093c8:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80093ca:	0020      	movs	r0, r4
		uarttx_req=1;
 80093cc:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80093ce:	f7f6 fe99 	bl	8000104 <strlen>
 80093d2:	0021      	movs	r1, r4
 80093d4:	b282      	uxth	r2, r0
 80093d6:	0030      	movs	r0, r6
 80093d8:	f7fb fc72 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d001      	beq.n	80093e4 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x518>
			Error_Handler();
 80093e0:	f7ff faa2 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 80093e4:	782b      	ldrb	r3, [r5, #0]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d0fc      	beq.n	80093e4 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x518>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80093ea:	2200      	movs	r2, #0
 80093ec:	2102      	movs	r1, #2
 80093ee:	4815      	ldr	r0, [pc, #84]	; (8009444 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x578>)
 80093f0:	f7f9 feda 	bl	80031a8 <HAL_GPIO_WritePin>
		break;
 80093f4:	e634      	b.n	8009060 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x194>
	default:sprintf(out_string,"\r\nSome Logical Error\r\n");
 80093f6:	4914      	ldr	r1, [pc, #80]	; (8009448 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x57c>)
 80093f8:	0020      	movs	r0, r4
 80093fa:	f002 fca7 	bl	800bd4c <strcpy>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80093fe:	2201      	movs	r2, #1
 8009400:	2102      	movs	r1, #2
 8009402:	4810      	ldr	r0, [pc, #64]	; (8009444 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x578>)
 8009404:	f7f9 fed0 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 8009408:	2301      	movs	r3, #1
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800940a:	0020      	movs	r0, r4
	uarttx_req=1;
 800940c:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800940e:	f7f6 fe79 	bl	8000104 <strlen>
 8009412:	0021      	movs	r1, r4
 8009414:	b282      	uxth	r2, r0
 8009416:	0030      	movs	r0, r6
 8009418:	f7fb fc52 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800941c:	2800      	cmp	r0, #0
 800941e:	d001      	beq.n	8009424 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x558>
		Error_Handler();
 8009420:	f7ff fa82 	bl	8008928 <Error_Handler>
	while(uarttx_req==1);
 8009424:	782b      	ldrb	r3, [r5, #0]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d0fc      	beq.n	8009424 <USER_Referance_Tilt_Calculation_without_Forward_axes+0x558>
 800942a:	e7de      	b.n	80093ea <USER_Referance_Tilt_Calculation_without_Forward_axes+0x51e>
 800942c:	2000037a 	.word	0x2000037a
 8009430:	40668000 	.word	0x40668000
 8009434:	54442d18 	.word	0x54442d18
 8009438:	400921fb 	.word	0x400921fb
 800943c:	20000338 	.word	0x20000338
 8009440:	0800f5bf 	.word	0x0800f5bf
 8009444:	48000400 	.word	0x48000400
 8009448:	0800f5fe 	.word	0x0800f5fe

0800944c <USER_Referance_Tilt_Calculation_with_Forward_axes>:

void USER_Referance_Tilt_Calculation_with_Forward_axes(void)
{

	referance_tilt_angle_Optimized[gravity_axes]	=	referance_tilt_angle[gravity_axes];
	referance_tilt_angle_Optimized[forward_axes]	=	sign_of_acceleration*referance_tilt_angle[forward_axes];
 800944c:	2000      	movs	r0, #0
	referance_tilt_angle_Optimized[gravity_axes]	=	referance_tilt_angle[gravity_axes];
 800944e:	4b34      	ldr	r3, [pc, #208]	; (8009520 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xd4>)
{
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
	referance_tilt_angle_Optimized[gravity_axes]	=	referance_tilt_angle[gravity_axes];
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4c33      	ldr	r4, [pc, #204]	; (8009524 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xd8>)
 8009456:	4d34      	ldr	r5, [pc, #208]	; (8009528 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xdc>)
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	18e6      	adds	r6, r4, r3
 800945c:	18eb      	adds	r3, r5, r3
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	6032      	str	r2, [r6, #0]
 8009464:	6073      	str	r3, [r6, #4]
	referance_tilt_angle_Optimized[forward_axes]	=	sign_of_acceleration*referance_tilt_angle[forward_axes];
 8009466:	4b31      	ldr	r3, [pc, #196]	; (800952c <USER_Referance_Tilt_Calculation_with_Forward_axes+0xe0>)
{
 8009468:	b085      	sub	sp, #20
	referance_tilt_angle_Optimized[forward_axes]	=	sign_of_acceleration*referance_tilt_angle[forward_axes];
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	18e7      	adds	r7, r4, r3
 8009470:	9303      	str	r3, [sp, #12]
 8009472:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xe4>)
 8009474:	5618      	ldrsb	r0, [r3, r0]
 8009476:	f7f9 fafd 	bl	8002a74 <__aeabi_i2d>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	18eb      	adds	r3, r5, r3
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f7f8 fd0d 	bl	8001ea0 <__aeabi_dmul>
 8009486:	6038      	str	r0, [r7, #0]
 8009488:	6079      	str	r1, [r7, #4]
	referance_tilt_angle_Optimized[side_axes]		=	sign_of_side_axes*referance_tilt_angle[side_axes];
 800948a:	2000      	movs	r0, #0
 800948c:	4b29      	ldr	r3, [pc, #164]	; (8009534 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xe8>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xec>)
 8009494:	5618      	ldrsb	r0, [r3, r0]
 8009496:	f7f9 faed 	bl	8002a74 <__aeabi_i2d>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	00db      	lsls	r3, r3, #3
 800949e:	18ed      	adds	r5, r5, r3
 80094a0:	9303      	str	r3, [sp, #12]
 80094a2:	682a      	ldr	r2, [r5, #0]
 80094a4:	686b      	ldr	r3, [r5, #4]
 80094a6:	f7f8 fcfb 	bl	8001ea0 <__aeabi_dmul>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	18e4      	adds	r4, r4, r3
 80094ae:	6020      	str	r0, [r4, #0]
 80094b0:	6061      	str	r1, [r4, #4]

	sprintf(out_string,"\r\nReferance of Forward Angle = %d, Side Angle = %d , Gravity Angle = %d\r\n",(int16_t)referance_tilt_angle_Optimized[forward_axes],(int16_t)referance_tilt_angle_Optimized[side_axes],(int16_t)referance_tilt_angle_Optimized[gravity_axes]);
 80094b2:	f7f9 faab 	bl	8002a0c <__aeabi_d2iz>
 80094b6:	b205      	sxth	r5, r0
 80094b8:	6838      	ldr	r0, [r7, #0]
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	f7f9 faa6 	bl	8002a0c <__aeabi_d2iz>
 80094c0:	b207      	sxth	r7, r0
 80094c2:	6830      	ldr	r0, [r6, #0]
 80094c4:	6871      	ldr	r1, [r6, #4]
 80094c6:	f7f9 faa1 	bl	8002a0c <__aeabi_d2iz>
 80094ca:	4c1c      	ldr	r4, [pc, #112]	; (800953c <USER_Referance_Tilt_Calculation_with_Forward_axes+0xf0>)
 80094cc:	b200      	sxth	r0, r0
 80094ce:	002b      	movs	r3, r5
 80094d0:	9000      	str	r0, [sp, #0]
 80094d2:	003a      	movs	r2, r7
 80094d4:	491a      	ldr	r1, [pc, #104]	; (8009540 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xf4>)
 80094d6:	0020      	movs	r0, r4
 80094d8:	f002 fc16 	bl	800bd08 <siprintf>

	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80094dc:	2201      	movs	r2, #1
 80094de:	2102      	movs	r1, #2
 80094e0:	4818      	ldr	r0, [pc, #96]	; (8009544 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xf8>)
 80094e2:	f7f9 fe61 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	4d17      	ldr	r5, [pc, #92]	; (8009548 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xfc>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80094ea:	0020      	movs	r0, r4
	uarttx_req=1;
 80094ec:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80094ee:	f7f6 fe09 	bl	8000104 <strlen>
 80094f2:	0021      	movs	r1, r4
 80094f4:	b282      	uxth	r2, r0
 80094f6:	4815      	ldr	r0, [pc, #84]	; (800954c <USER_Referance_Tilt_Calculation_with_Forward_axes+0x100>)
 80094f8:	f7fb fbe2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d001      	beq.n	8009504 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xb8>
	{
		Error_Handler();
 8009500:	f7ff fa12 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 8009504:	782b      	ldrb	r3, [r5, #0]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d0fc      	beq.n	8009504 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xb8>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800950a:	2200      	movs	r2, #0
 800950c:	2102      	movs	r1, #2
 800950e:	480d      	ldr	r0, [pc, #52]	; (8009544 <USER_Referance_Tilt_Calculation_with_Forward_axes+0xf8>)
 8009510:	f7f9 fe4a 	bl	80031a8 <HAL_GPIO_WritePin>


	current_referance_tilt_function	=	GRAVITY_AXES_PLUS_FORWARD_AXES;
 8009514:	2203      	movs	r2, #3
 8009516:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <USER_Referance_Tilt_Calculation_with_Forward_axes+0x104>)
 8009518:	701a      	strb	r2, [r3, #0]




}
 800951a:	b005      	add	sp, #20
 800951c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	20000009 	.word	0x20000009
 8009524:	20000350 	.word	0x20000350
 8009528:	20000338 	.word	0x20000338
 800952c:	20000008 	.word	0x20000008
 8009530:	20000015 	.word	0x20000015
 8009534:	20000014 	.word	0x20000014
 8009538:	20000017 	.word	0x20000017
 800953c:	2000026b 	.word	0x2000026b
 8009540:	0800f575 	.word	0x0800f575
 8009544:	48000400 	.word	0x48000400
 8009548:	20000378 	.word	0x20000378
 800954c:	20000510 	.word	0x20000510
 8009550:	20000233 	.word	0x20000233

08009554 <USER_Referance_Tilt_Calculation>:
	if(gravity_axes	==	AXES_NOT_SET)
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <USER_Referance_Tilt_Calculation+0x24>)
{
 8009556:	b510      	push	{r4, lr}
	if(gravity_axes	==	AXES_NOT_SET)
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b03      	cmp	r3, #3
 800955c:	d102      	bne.n	8009564 <USER_Referance_Tilt_Calculation+0x10>
		USER_Referance_Tilt_Calculation_without_Gravity_axes();
 800955e:	f7ff fc7d 	bl	8008e5c <USER_Referance_Tilt_Calculation_without_Gravity_axes>
}
 8009562:	bd10      	pop	{r4, pc}
	else if(gravity_axes	!=	AXES_NOT_SET	&&	forward_axes == AXES_NOT_SET)
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <USER_Referance_Tilt_Calculation+0x28>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b03      	cmp	r3, #3
 800956a:	d102      	bne.n	8009572 <USER_Referance_Tilt_Calculation+0x1e>
		USER_Referance_Tilt_Calculation_without_Forward_axes();
 800956c:	f7ff fcae 	bl	8008ecc <USER_Referance_Tilt_Calculation_without_Forward_axes>
 8009570:	e7f7      	b.n	8009562 <USER_Referance_Tilt_Calculation+0xe>
		USER_Referance_Tilt_Calculation_with_Forward_axes();
 8009572:	f7ff ff6b 	bl	800944c <USER_Referance_Tilt_Calculation_with_Forward_axes>
}
 8009576:	e7f4      	b.n	8009562 <USER_Referance_Tilt_Calculation+0xe>
 8009578:	20000009 	.word	0x20000009
 800957c:	20000008 	.word	0x20000008

08009580 <USER_SET_Command>:
extern enum  Sign sign_of_acceleration;
extern enum Wakeup_Device_Mode device_mode;
extern enum Acceleration_Brake harsh_accel_brake_function_wakeup_mode;

void USER_SET_Command(void)
{
 8009580:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t ctrl1_xl, wake_up_ths,wk_ths,wake_up_dur,wake_dur,tap_cfg,ctrl8_xl,sleep_dur,wake_up_src;


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009582:	2201      	movs	r2, #1
{
 8009584:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009586:	2102      	movs	r1, #2
 8009588:	48e0      	ldr	r0, [pc, #896]	; (800990c <USER_SET_Command+0x38c>)
 800958a:	f7f9 fe0d 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800958e:	2301      	movs	r3, #1
 8009590:	4fdf      	ldr	r7, [pc, #892]	; (8009910 <USER_SET_Command+0x390>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\n",strlen("\r\n\r\n"))!=HAL_OK)
 8009592:	2204      	movs	r2, #4
 8009594:	49df      	ldr	r1, [pc, #892]	; (8009914 <USER_SET_Command+0x394>)
 8009596:	48e0      	ldr	r0, [pc, #896]	; (8009918 <USER_SET_Command+0x398>)
	uarttx_req=1;
 8009598:	703b      	strb	r3, [r7, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\n",strlen("\r\n\r\n"))!=HAL_OK)
 800959a:	f7fb fb91 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d001      	beq.n	80095a6 <USER_SET_Command+0x26>
	{
		Error_Handler();
 80095a2:	f7ff f9c1 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80095a6:	783b      	ldrb	r3, [r7, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d0fc      	beq.n	80095a6 <USER_SET_Command+0x26>
	uarttx_req=1;
 80095ac:	2301      	movs	r3, #1
	if(HAL_UART_Transmit_DMA(&huart3,instruction_final,strlen(instruction_final))!=HAL_OK)
 80095ae:	48db      	ldr	r0, [pc, #876]	; (800991c <USER_SET_Command+0x39c>)
	uarttx_req=1;
 80095b0:	703b      	strb	r3, [r7, #0]
	if(HAL_UART_Transmit_DMA(&huart3,instruction_final,strlen(instruction_final))!=HAL_OK)
 80095b2:	f7f6 fda7 	bl	8000104 <strlen>
 80095b6:	49d9      	ldr	r1, [pc, #868]	; (800991c <USER_SET_Command+0x39c>)
 80095b8:	b282      	uxth	r2, r0
 80095ba:	48d7      	ldr	r0, [pc, #860]	; (8009918 <USER_SET_Command+0x398>)
 80095bc:	f7fb fb80 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d001      	beq.n	80095c8 <USER_SET_Command+0x48>
	{
		Error_Handler();
 80095c4:	f7ff f9b0 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 80095c8:	783b      	ldrb	r3, [r7, #0]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d0fc      	beq.n	80095c8 <USER_SET_Command+0x48>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80095ce:	2200      	movs	r2, #0
 80095d0:	2102      	movs	r1, #2
 80095d2:	48ce      	ldr	r0, [pc, #824]	; (800990c <USER_SET_Command+0x38c>)
 80095d4:	f7f9 fde8 	bl	80031a8 <HAL_GPIO_WritePin>


	if(!strncmp(instruction_final+4,"RTT:",4))
 80095d8:	4cd1      	ldr	r4, [pc, #836]	; (8009920 <USER_SET_Command+0x3a0>)
 80095da:	2204      	movs	r2, #4
 80095dc:	49d1      	ldr	r1, [pc, #836]	; (8009924 <USER_SET_Command+0x3a4>)
 80095de:	0020      	movs	r0, r4
 80095e0:	f002 fbbc 	bl	800bd5c <strncmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d119      	bne.n	800961c <USER_SET_Command+0x9c>
	{
		rtt=atoi(instruction_final+8)	<=	125	&& atoi(instruction_final+8) > 0?atoi(instruction_final+8)	:	rtt;
 80095e8:	4dcf      	ldr	r5, [pc, #828]	; (8009928 <USER_SET_Command+0x3a8>)
 80095ea:	0028      	movs	r0, r5
 80095ec:	f002 fb49 	bl	800bc82 <atoi>
 80095f0:	4ece      	ldr	r6, [pc, #824]	; (800992c <USER_SET_Command+0x3ac>)
 80095f2:	287d      	cmp	r0, #125	; 0x7d
 80095f4:	dd00      	ble.n	80095f8 <USER_SET_Command+0x78>
 80095f6:	e201      	b.n	80099fc <USER_SET_Command+0x47c>
 80095f8:	0028      	movs	r0, r5
 80095fa:	f002 fb42 	bl	800bc82 <atoi>
 80095fe:	2800      	cmp	r0, #0
 8009600:	dc00      	bgt.n	8009604 <USER_SET_Command+0x84>
 8009602:	e1fb      	b.n	80099fc <USER_SET_Command+0x47c>
 8009604:	0028      	movs	r0, r5
 8009606:	f002 fb3c 	bl	800bc82 <atoi>
 800960a:	b2c0      	uxtb	r0, r0
 800960c:	7030      	strb	r0, [r6, #0]
		RASH_Turn_Threshold_Optimize();
 800960e:	f7ff fb95 	bl	8008d3c <RASH_Turn_Threshold_Optimize>
		memset(instruction_final,0,25);
 8009612:	2219      	movs	r2, #25
 8009614:	2100      	movs	r1, #0
 8009616:	48c1      	ldr	r0, [pc, #772]	; (800991c <USER_SET_Command+0x39c>)
 8009618:	f002 fb6d 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"HAT:",4))
 800961c:	2204      	movs	r2, #4
 800961e:	49c4      	ldr	r1, [pc, #784]	; (8009930 <USER_SET_Command+0x3b0>)
 8009620:	0020      	movs	r0, r4
 8009622:	f002 fb9b 	bl	800bd5c <strncmp>
 8009626:	2800      	cmp	r0, #0
 8009628:	d155      	bne.n	80096d6 <USER_SET_Command+0x156>
	{
		hat=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hat;
 800962a:	4dbf      	ldr	r5, [pc, #764]	; (8009928 <USER_SET_Command+0x3a8>)
 800962c:	0028      	movs	r0, r5
 800962e:	f002 fb28 	bl	800bc82 <atoi>
 8009632:	f7f7 fc5b 	bl	8000eec <__aeabi_i2f>
 8009636:	218e      	movs	r1, #142	; 0x8e
 8009638:	4bbe      	ldr	r3, [pc, #760]	; (8009934 <USER_SET_Command+0x3b4>)
 800963a:	1c06      	adds	r6, r0, #0
 800963c:	05c9      	lsls	r1, r1, #23
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	f7f7 fb14 	bl	8000c6c <__aeabi_fmul>
 8009644:	1c01      	adds	r1, r0, #0
 8009646:	1c30      	adds	r0, r6, #0
 8009648:	f7f6 ff48 	bl	80004dc <__aeabi_fcmplt>
 800964c:	4eba      	ldr	r6, [pc, #744]	; (8009938 <USER_SET_Command+0x3b8>)
 800964e:	2800      	cmp	r0, #0
 8009650:	d100      	bne.n	8009654 <USER_SET_Command+0xd4>
 8009652:	e1d5      	b.n	8009a00 <USER_SET_Command+0x480>
 8009654:	0028      	movs	r0, r5
 8009656:	f002 fb14 	bl	800bc82 <atoi>
 800965a:	281f      	cmp	r0, #31
 800965c:	dc00      	bgt.n	8009660 <USER_SET_Command+0xe0>
 800965e:	e1cf      	b.n	8009a00 <USER_SET_Command+0x480>
 8009660:	0028      	movs	r0, r5
 8009662:	f002 fb0e 	bl	800bc82 <atoi>
 8009666:	b282      	uxth	r2, r0

		if(hat	<=	hbt)
 8009668:	4bb4      	ldr	r3, [pc, #720]	; (800993c <USER_SET_Command+0x3bc>)
		hat=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hat;
 800966a:	8032      	strh	r2, [r6, #0]
		if(hat	<=	hbt)
 800966c:	8818      	ldrh	r0, [r3, #0]
 800966e:	49b4      	ldr	r1, [pc, #720]	; (8009940 <USER_SET_Command+0x3c0>)
 8009670:	4bb4      	ldr	r3, [pc, #720]	; (8009944 <USER_SET_Command+0x3c4>)
 8009672:	4282      	cmp	r2, r0
 8009674:	d900      	bls.n	8009678 <USER_SET_Command+0xf8>
 8009676:	e1c5      	b.n	8009a04 <USER_SET_Command+0x484>
		{
			harsh_accel_brake_function_wakeup_threshold	=	hat;
			harsh_accel_brake_function_wakeup_mode		=HARSH_ACCELERATION;
 8009678:	2001      	movs	r0, #1
			harsh_accel_brake_function_wakeup_threshold	=	hat;
 800967a:	801a      	strh	r2, [r3, #0]
		{
			harsh_accel_brake_function_wakeup_threshold	=	hbt;
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
		}

		sprintf(out_string,"\r\nHARSH Acceleration Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hat,harsh_accel_brake_function_wakeup_threshold);
 800967c:	4db2      	ldr	r5, [pc, #712]	; (8009948 <USER_SET_Command+0x3c8>)
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
 800967e:	7008      	strb	r0, [r1, #0]
		sprintf(out_string,"\r\nHARSH Acceleration Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hat,harsh_accel_brake_function_wakeup_threshold);
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	49b2      	ldr	r1, [pc, #712]	; (800994c <USER_SET_Command+0x3cc>)
 8009684:	0028      	movs	r0, r5
 8009686:	f002 fb3f 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800968a:	2201      	movs	r2, #1
 800968c:	2102      	movs	r1, #2
 800968e:	489f      	ldr	r0, [pc, #636]	; (800990c <USER_SET_Command+0x38c>)
 8009690:	f7f9 fd8a 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 8009694:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009696:	0028      	movs	r0, r5
		uarttx_req=1;
 8009698:	703b      	strb	r3, [r7, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800969a:	f7f6 fd33 	bl	8000104 <strlen>
 800969e:	0029      	movs	r1, r5
 80096a0:	b282      	uxth	r2, r0
 80096a2:	489d      	ldr	r0, [pc, #628]	; (8009918 <USER_SET_Command+0x398>)
 80096a4:	f7fb fb0c 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d001      	beq.n	80096b0 <USER_SET_Command+0x130>
		{
			Error_Handler();
 80096ac:	f7ff f93c 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 80096b0:	783b      	ldrb	r3, [r7, #0]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d0fc      	beq.n	80096b0 <USER_SET_Command+0x130>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80096b6:	2200      	movs	r2, #0
 80096b8:	2102      	movs	r1, #2
 80096ba:	4894      	ldr	r0, [pc, #592]	; (800990c <USER_SET_Command+0x38c>)
 80096bc:	f7f9 fd74 	bl	80031a8 <HAL_GPIO_WritePin>

		if(device_mode==ACCELERATION)
 80096c0:	4ba3      	ldr	r3, [pc, #652]	; (8009950 <USER_SET_Command+0x3d0>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d101      	bne.n	80096cc <USER_SET_Command+0x14c>
		{
			USER_Acceleration_Wakeup_Init();
 80096c8:	f7fb fece 	bl	8005468 <USER_Acceleration_Wakeup_Init>
		}
		memset(instruction_final,0,25);
 80096cc:	2219      	movs	r2, #25
 80096ce:	2100      	movs	r1, #0
 80096d0:	4892      	ldr	r0, [pc, #584]	; (800991c <USER_SET_Command+0x39c>)
 80096d2:	f002 fb10 	bl	800bcf6 <memset>
	}
	if(!strncmp(instruction_final+4,"HBT:",4))
 80096d6:	2204      	movs	r2, #4
 80096d8:	499e      	ldr	r1, [pc, #632]	; (8009954 <USER_SET_Command+0x3d4>)
 80096da:	0020      	movs	r0, r4
 80096dc:	f002 fb3e 	bl	800bd5c <strncmp>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d155      	bne.n	8009790 <USER_SET_Command+0x210>
	{
		hbt=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hbt;
 80096e4:	4d90      	ldr	r5, [pc, #576]	; (8009928 <USER_SET_Command+0x3a8>)
 80096e6:	0028      	movs	r0, r5
 80096e8:	f002 facb 	bl	800bc82 <atoi>
 80096ec:	f7f7 fbfe 	bl	8000eec <__aeabi_i2f>
 80096f0:	218e      	movs	r1, #142	; 0x8e
 80096f2:	4b90      	ldr	r3, [pc, #576]	; (8009934 <USER_SET_Command+0x3b4>)
 80096f4:	1c06      	adds	r6, r0, #0
 80096f6:	05c9      	lsls	r1, r1, #23
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	f7f7 fab7 	bl	8000c6c <__aeabi_fmul>
 80096fe:	1c01      	adds	r1, r0, #0
 8009700:	1c30      	adds	r0, r6, #0
 8009702:	f7f6 feeb 	bl	80004dc <__aeabi_fcmplt>
 8009706:	4e8d      	ldr	r6, [pc, #564]	; (800993c <USER_SET_Command+0x3bc>)
 8009708:	2800      	cmp	r0, #0
 800970a:	d100      	bne.n	800970e <USER_SET_Command+0x18e>
 800970c:	e17d      	b.n	8009a0a <USER_SET_Command+0x48a>
 800970e:	0028      	movs	r0, r5
 8009710:	f002 fab7 	bl	800bc82 <atoi>
 8009714:	281f      	cmp	r0, #31
 8009716:	dc00      	bgt.n	800971a <USER_SET_Command+0x19a>
 8009718:	e177      	b.n	8009a0a <USER_SET_Command+0x48a>
 800971a:	0028      	movs	r0, r5
 800971c:	f002 fab1 	bl	800bc82 <atoi>
 8009720:	b282      	uxth	r2, r0

		if(hat	<=	hbt)
 8009722:	4b85      	ldr	r3, [pc, #532]	; (8009938 <USER_SET_Command+0x3b8>)
		hbt=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hbt;
 8009724:	8032      	strh	r2, [r6, #0]
		if(hat	<=	hbt)
 8009726:	8818      	ldrh	r0, [r3, #0]
 8009728:	4985      	ldr	r1, [pc, #532]	; (8009940 <USER_SET_Command+0x3c0>)
 800972a:	4b86      	ldr	r3, [pc, #536]	; (8009944 <USER_SET_Command+0x3c4>)
 800972c:	4282      	cmp	r2, r0
 800972e:	d200      	bcs.n	8009732 <USER_SET_Command+0x1b2>
 8009730:	e16d      	b.n	8009a0e <USER_SET_Command+0x48e>
		{
			harsh_accel_brake_function_wakeup_threshold	=	hat;
 8009732:	8018      	strh	r0, [r3, #0]
			harsh_accel_brake_function_wakeup_mode		=HARSH_ACCELERATION;
 8009734:	2001      	movs	r0, #1
		else
		{
			harsh_accel_brake_function_wakeup_threshold	=	hbt;
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
		}
		sprintf(out_string,"\r\nHARSH Brake Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hbt,harsh_accel_brake_function_wakeup_threshold);
 8009736:	4d84      	ldr	r5, [pc, #528]	; (8009948 <USER_SET_Command+0x3c8>)
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
 8009738:	7008      	strb	r0, [r1, #0]
		sprintf(out_string,"\r\nHARSH Brake Threshold is %d mg\r\nFunction Wake-up Threshold Selected is %d mg\r\n",hbt,harsh_accel_brake_function_wakeup_threshold);
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	4986      	ldr	r1, [pc, #536]	; (8009958 <USER_SET_Command+0x3d8>)
 800973e:	0028      	movs	r0, r5
 8009740:	f002 fae2 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009744:	2201      	movs	r2, #1
 8009746:	2102      	movs	r1, #2
 8009748:	4870      	ldr	r0, [pc, #448]	; (800990c <USER_SET_Command+0x38c>)
 800974a:	f7f9 fd2d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800974e:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009750:	0028      	movs	r0, r5
		uarttx_req=1;
 8009752:	703b      	strb	r3, [r7, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009754:	f7f6 fcd6 	bl	8000104 <strlen>
 8009758:	0029      	movs	r1, r5
 800975a:	b282      	uxth	r2, r0
 800975c:	486e      	ldr	r0, [pc, #440]	; (8009918 <USER_SET_Command+0x398>)
 800975e:	f7fb faaf 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009762:	2800      	cmp	r0, #0
 8009764:	d001      	beq.n	800976a <USER_SET_Command+0x1ea>
		{
			Error_Handler();
 8009766:	f7ff f8df 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 800976a:	783b      	ldrb	r3, [r7, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d0fc      	beq.n	800976a <USER_SET_Command+0x1ea>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009770:	2200      	movs	r2, #0
 8009772:	2102      	movs	r1, #2
 8009774:	4865      	ldr	r0, [pc, #404]	; (800990c <USER_SET_Command+0x38c>)
 8009776:	f7f9 fd17 	bl	80031a8 <HAL_GPIO_WritePin>

		if(device_mode==ACCELERATION)
 800977a:	4b75      	ldr	r3, [pc, #468]	; (8009950 <USER_SET_Command+0x3d0>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b02      	cmp	r3, #2
 8009780:	d101      	bne.n	8009786 <USER_SET_Command+0x206>
		{
			USER_Acceleration_Wakeup_Init();
 8009782:	f7fb fe71 	bl	8005468 <USER_Acceleration_Wakeup_Init>
		}
		memset(instruction_final,0,25);
 8009786:	2219      	movs	r2, #25
 8009788:	2100      	movs	r1, #0
 800978a:	4864      	ldr	r0, [pc, #400]	; (800991c <USER_SET_Command+0x39c>)
 800978c:	f002 fab3 	bl	800bcf6 <memset>
	}

	if(!strncmp(instruction_final+4,"TILT_THRESHOLD:",15))
 8009790:	220f      	movs	r2, #15
 8009792:	4972      	ldr	r1, [pc, #456]	; (800995c <USER_SET_Command+0x3dc>)
 8009794:	0020      	movs	r0, r4
 8009796:	f002 fae1 	bl	800bd5c <strncmp>
 800979a:	2800      	cmp	r0, #0
 800979c:	d137      	bne.n	800980e <USER_SET_Command+0x28e>
	{
		tilt_threshold	=atoi(instruction_final+19)<=180	&&	atoi(instruction_final+19)>=0?atoi(instruction_final+19):tilt_threshold;
 800979e:	4d70      	ldr	r5, [pc, #448]	; (8009960 <USER_SET_Command+0x3e0>)
 80097a0:	0028      	movs	r0, r5
 80097a2:	f002 fa6e 	bl	800bc82 <atoi>
 80097a6:	4e6f      	ldr	r6, [pc, #444]	; (8009964 <USER_SET_Command+0x3e4>)
 80097a8:	28b4      	cmp	r0, #180	; 0xb4
 80097aa:	dd00      	ble.n	80097ae <USER_SET_Command+0x22e>
 80097ac:	e132      	b.n	8009a14 <USER_SET_Command+0x494>
 80097ae:	0028      	movs	r0, r5
 80097b0:	f002 fa67 	bl	800bc82 <atoi>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	da00      	bge.n	80097ba <USER_SET_Command+0x23a>
 80097b8:	e12c      	b.n	8009a14 <USER_SET_Command+0x494>
 80097ba:	0028      	movs	r0, r5
 80097bc:	f002 fa61 	bl	800bc82 <atoi>
 80097c0:	b2c2      	uxtb	r2, r0

		sprintf(out_string,"\r\n Tilt Angle Threshold is %d degree\r\n",tilt_threshold);
 80097c2:	4d61      	ldr	r5, [pc, #388]	; (8009948 <USER_SET_Command+0x3c8>)
 80097c4:	4968      	ldr	r1, [pc, #416]	; (8009968 <USER_SET_Command+0x3e8>)
 80097c6:	0028      	movs	r0, r5
		tilt_threshold	=atoi(instruction_final+19)<=180	&&	atoi(instruction_final+19)>=0?atoi(instruction_final+19):tilt_threshold;
 80097c8:	7032      	strb	r2, [r6, #0]
		sprintf(out_string,"\r\n Tilt Angle Threshold is %d degree\r\n",tilt_threshold);
 80097ca:	f002 fa9d 	bl	800bd08 <siprintf>

		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80097ce:	2201      	movs	r2, #1
 80097d0:	2102      	movs	r1, #2
 80097d2:	484e      	ldr	r0, [pc, #312]	; (800990c <USER_SET_Command+0x38c>)
 80097d4:	f7f9 fce8 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 80097d8:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80097da:	0028      	movs	r0, r5
		uarttx_req=1;
 80097dc:	703b      	strb	r3, [r7, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80097de:	f7f6 fc91 	bl	8000104 <strlen>
 80097e2:	0029      	movs	r1, r5
 80097e4:	b282      	uxth	r2, r0
 80097e6:	484c      	ldr	r0, [pc, #304]	; (8009918 <USER_SET_Command+0x398>)
 80097e8:	f7fb fa6a 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d001      	beq.n	80097f4 <USER_SET_Command+0x274>
		{
			Error_Handler();
 80097f0:	f7ff f89a 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 80097f4:	783b      	ldrb	r3, [r7, #0]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d0fc      	beq.n	80097f4 <USER_SET_Command+0x274>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80097fa:	2200      	movs	r2, #0
 80097fc:	2102      	movs	r1, #2
 80097fe:	4843      	ldr	r0, [pc, #268]	; (800990c <USER_SET_Command+0x38c>)
 8009800:	f7f9 fcd2 	bl	80031a8 <HAL_GPIO_WritePin>
		memset(instruction_final,0,25);
 8009804:	2219      	movs	r2, #25
 8009806:	2100      	movs	r1, #0
 8009808:	4844      	ldr	r0, [pc, #272]	; (800991c <USER_SET_Command+0x39c>)
 800980a:	f002 fa74 	bl	800bcf6 <memset>


	}
	if(!strncmp(instruction_final+4,"DEVICE_TO_SLEEP",15))
 800980e:	220f      	movs	r2, #15
 8009810:	4956      	ldr	r1, [pc, #344]	; (800996c <USER_SET_Command+0x3ec>)
 8009812:	0020      	movs	r0, r4
 8009814:	f002 faa2 	bl	800bd5c <strncmp>
 8009818:	1e05      	subs	r5, r0, #0
 800981a:	d106      	bne.n	800982a <USER_SET_Command+0x2aa>
	{
		USER_Sleep_Enter();
 800981c:	f001 fa52 	bl	800acc4 <USER_Sleep_Enter>
		memset(instruction_final,0,25);
 8009820:	2219      	movs	r2, #25
 8009822:	0029      	movs	r1, r5
 8009824:	483d      	ldr	r0, [pc, #244]	; (800991c <USER_SET_Command+0x39c>)
 8009826:	f002 fa66 	bl	800bcf6 <memset>
	}


	if(!strncmp(instruction_final+4,"DEVICE_ORIENTATION",18))
 800982a:	2212      	movs	r2, #18
 800982c:	4950      	ldr	r1, [pc, #320]	; (8009970 <USER_SET_Command+0x3f0>)
 800982e:	0020      	movs	r0, r4
 8009830:	f002 fa94 	bl	800bd5c <strncmp>
 8009834:	1e05      	subs	r5, r0, #0
 8009836:	d12c      	bne.n	8009892 <USER_SET_Command+0x312>
	{
		forward_axes=AXES_NOT_SET;
 8009838:	2603      	movs	r6, #3
		sign_of_acceleration=SIGN_NOT_SET;
 800983a:	2202      	movs	r2, #2
		forward_axes=AXES_NOT_SET;
 800983c:	4b4d      	ldr	r3, [pc, #308]	; (8009974 <USER_SET_Command+0x3f4>)
 800983e:	701e      	strb	r6, [r3, #0]
		sign_of_acceleration=SIGN_NOT_SET;
 8009840:	4b4d      	ldr	r3, [pc, #308]	; (8009978 <USER_SET_Command+0x3f8>)
 8009842:	701a      	strb	r2, [r3, #0]

		USER_Device_Orientation_WakeUp_init();
 8009844:	f7fc fcc2 	bl	80061cc <USER_Device_Orientation_WakeUp_init>
		USER_Device_Orientation_Accelerometer_Init();
 8009848:	f7fb ff90 	bl	800576c <USER_Device_Orientation_Accelerometer_Init>
		//USER_Device_Orientation_Gyroscope_Init();
		USER_Accelerometer_Referance_Value_Calculation();
 800984c:	f7fc faec 	bl	8005e28 <USER_Accelerometer_Referance_Value_Calculation>
		//USER_Gyroscope_Referance_Value_Calculation();
		USER_Referance_Tilt_Calculation();
 8009850:	f7ff fe80 	bl	8009554 <USER_Referance_Tilt_Calculation>
		RASH_Turn_Threshold_Optimize();
 8009854:	f7ff fa72 	bl	8008d3c <RASH_Turn_Threshold_Optimize>
		//USER_Device_Orientation_Gyroscope_DeInit();
		USER_Device_Orientation_Accelerometer_DeInit();
 8009858:	f7fc fa66 	bl	8005d28 <USER_Device_Orientation_Accelerometer_DeInit>
		USER_Device_Orientation_WakeUp_DeInit();
 800985c:	f7fc fe3a 	bl	80064d4 <USER_Device_Orientation_WakeUp_DeInit>



		forward_axes_wakeup_init_function_status=NOT_EXICUTED;
 8009860:	4b46      	ldr	r3, [pc, #280]	; (800997c <USER_SET_Command+0x3fc>)
		acceleration_wakeup_init_function_status==NOT_EXICUTED;
		acceleration_wakeup_init_function_status=NOT_EXICUTED;

		memset(total_error_int_xl,0,sizeof(total_error_int_xl));
 8009862:	0032      	movs	r2, r6
		forward_axes_wakeup_init_function_status=NOT_EXICUTED;
 8009864:	701d      	strb	r5, [r3, #0]
		acceleration_wakeup_init_function_status=NOT_EXICUTED;
 8009866:	4b46      	ldr	r3, [pc, #280]	; (8009980 <USER_SET_Command+0x400>)
		memset(total_error_int_xl,0,sizeof(total_error_int_xl));
 8009868:	0029      	movs	r1, r5
 800986a:	4846      	ldr	r0, [pc, #280]	; (8009984 <USER_SET_Command+0x404>)
		acceleration_wakeup_init_function_status=NOT_EXICUTED;
 800986c:	701d      	strb	r5, [r3, #0]
		memset(total_error_int_xl,0,sizeof(total_error_int_xl));
 800986e:	f002 fa42 	bl	800bcf6 <memset>
		memset(total_error_xl_mg,0,sizeof(total_error_xl_mg));
 8009872:	220c      	movs	r2, #12
 8009874:	0029      	movs	r1, r5
 8009876:	4844      	ldr	r0, [pc, #272]	; (8009988 <USER_SET_Command+0x408>)
 8009878:	f002 fa3d 	bl	800bcf6 <memset>

		if(device_mode	==	ACCELERATION)
 800987c:	4b34      	ldr	r3, [pc, #208]	; (8009950 <USER_SET_Command+0x3d0>)
 800987e:	781a      	ldrb	r2, [r3, #0]
 8009880:	2a02      	cmp	r2, #2
 8009882:	d101      	bne.n	8009888 <USER_SET_Command+0x308>
		{
			device_mode=FORWARD_AXIS;
 8009884:	3a01      	subs	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
		}


		memset(instruction_final,0,25);
 8009888:	2219      	movs	r2, #25
 800988a:	2100      	movs	r1, #0
 800988c:	4823      	ldr	r0, [pc, #140]	; (800991c <USER_SET_Command+0x39c>)
 800988e:	f002 fa32 	bl	800bcf6 <memset>
	}

	if(!strncmp(instruction_final+4,"SLEEP_DUR_DEVICE:",17))
 8009892:	2211      	movs	r2, #17
 8009894:	493d      	ldr	r1, [pc, #244]	; (800998c <USER_SET_Command+0x40c>)
 8009896:	0020      	movs	r0, r4
 8009898:	f002 fa60 	bl	800bd5c <strncmp>
 800989c:	2800      	cmp	r0, #0
 800989e:	d12e      	bne.n	80098fe <USER_SET_Command+0x37e>
	{

		sleep_dur_device=atoi(instruction_final+21);
 80098a0:	483b      	ldr	r0, [pc, #236]	; (8009990 <USER_SET_Command+0x410>)
 80098a2:	f002 f9ee 	bl	800bc82 <atoi>
 80098a6:	4b3b      	ldr	r3, [pc, #236]	; (8009994 <USER_SET_Command+0x414>)
 80098a8:	b2c0      	uxtb	r0, r0
 80098aa:	7018      	strb	r0, [r3, #0]

		if (sleep_dur_device>=0 && sleep_dur_device<256)
 80098ac:	781a      	ldrb	r2, [r3, #0]
		{


			sprintf(out_string,"\r\n Duration for Device turn to Sleep Mode %d s\r\n",sleep_dur_device);
 80098ae:	4d26      	ldr	r5, [pc, #152]	; (8009948 <USER_SET_Command+0x3c8>)
		if (sleep_dur_device>=0 && sleep_dur_device<256)
 80098b0:	781a      	ldrb	r2, [r3, #0]
			sprintf(out_string,"\r\n Duration for Device turn to Sleep Mode %d s\r\n",sleep_dur_device);
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	4938      	ldr	r1, [pc, #224]	; (8009998 <USER_SET_Command+0x418>)
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	0028      	movs	r0, r5
 80098ba:	f002 fa25 	bl	800bd08 <siprintf>

			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 80098be:	2201      	movs	r2, #1
 80098c0:	2102      	movs	r1, #2
 80098c2:	4812      	ldr	r0, [pc, #72]	; (800990c <USER_SET_Command+0x38c>)
 80098c4:	f7f9 fc70 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 80098c8:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80098ca:	0028      	movs	r0, r5
			uarttx_req=1;
 80098cc:	703b      	strb	r3, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 80098ce:	f7f6 fc19 	bl	8000104 <strlen>
 80098d2:	0029      	movs	r1, r5
 80098d4:	b282      	uxth	r2, r0
 80098d6:	4810      	ldr	r0, [pc, #64]	; (8009918 <USER_SET_Command+0x398>)
 80098d8:	f7fb f9f2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d001      	beq.n	80098e4 <USER_SET_Command+0x364>
			{
				Error_Handler();
 80098e0:	f7ff f822 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 80098e4:	783b      	ldrb	r3, [r7, #0]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d0fc      	beq.n	80098e4 <USER_SET_Command+0x364>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 80098ea:	2200      	movs	r2, #0
 80098ec:	2102      	movs	r1, #2
 80098ee:	4807      	ldr	r0, [pc, #28]	; (800990c <USER_SET_Command+0x38c>)
 80098f0:	f7f9 fc5a 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 80098f4:	2219      	movs	r2, #25
 80098f6:	2100      	movs	r1, #0
 80098f8:	4808      	ldr	r0, [pc, #32]	; (800991c <USER_SET_Command+0x39c>)
 80098fa:	f002 f9fc 	bl	800bcf6 <memset>




	}
	if(!strncmp(instruction_final+4,"SLEEP_DUR:",10))
 80098fe:	220a      	movs	r2, #10
 8009900:	4926      	ldr	r1, [pc, #152]	; (800999c <USER_SET_Command+0x41c>)
 8009902:	0020      	movs	r0, r4
 8009904:	f002 fa2a 	bl	800bd5c <strncmp>
 8009908:	e04a      	b.n	80099a0 <USER_SET_Command+0x420>
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	48000400 	.word	0x48000400
 8009910:	20000378 	.word	0x20000378
 8009914:	0800f999 	.word	0x0800f999
 8009918:	20000510 	.word	0x20000510
 800991c:	20000236 	.word	0x20000236
 8009920:	2000023a 	.word	0x2000023a
 8009924:	0800f644 	.word	0x0800f644
 8009928:	2000023e 	.word	0x2000023e
 800992c:	20000013 	.word	0x20000013
 8009930:	0800f649 	.word	0x0800f649
 8009934:	2000047c 	.word	0x2000047c
 8009938:	2000000e 	.word	0x2000000e
 800993c:	20000010 	.word	0x20000010
 8009940:	2000000a 	.word	0x2000000a
 8009944:	2000000c 	.word	0x2000000c
 8009948:	2000026b 	.word	0x2000026b
 800994c:	0800ea1b 	.word	0x0800ea1b
 8009950:	2000048a 	.word	0x2000048a
 8009954:	0800f64e 	.word	0x0800f64e
 8009958:	0800ea77 	.word	0x0800ea77
 800995c:	0800f653 	.word	0x0800f653
 8009960:	20000249 	.word	0x20000249
 8009964:	2000001a 	.word	0x2000001a
 8009968:	0800ead7 	.word	0x0800ead7
 800996c:	0800f663 	.word	0x0800f663
 8009970:	0800ebbc 	.word	0x0800ebbc
 8009974:	20000008 	.word	0x20000008
 8009978:	20000015 	.word	0x20000015
 800997c:	20000234 	.word	0x20000234
 8009980:	20000232 	.word	0x20000232
 8009984:	20000368 	.word	0x20000368
 8009988:	2000036c 	.word	0x2000036c
 800998c:	0800f673 	.word	0x0800f673
 8009990:	2000024b 	.word	0x2000024b
 8009994:	20000018 	.word	0x20000018
 8009998:	0800eeb9 	.word	0x0800eeb9
 800999c:	0800f685 	.word	0x0800f685
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d039      	beq.n	8009a18 <USER_SET_Command+0x498>




	}
	if(!strncmp(instruction_final+4,"FILTER_CUTOFF:",14))
 80099a4:	220e      	movs	r2, #14
 80099a6:	49c3      	ldr	r1, [pc, #780]	; (8009cb4 <USER_SET_Command+0x734>)
 80099a8:	48c3      	ldr	r0, [pc, #780]	; (8009cb8 <USER_SET_Command+0x738>)
 80099aa:	f002 f9d7 	bl	800bd5c <strncmp>
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d000      	beq.n	80099b4 <USER_SET_Command+0x434>
 80099b2:	e0cf      	b.n	8009b54 <USER_SET_Command+0x5d4>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 80099b4:	240e      	movs	r4, #14
 80099b6:	2301      	movs	r3, #1
		memrx=0;
 80099b8:	4ec0      	ldr	r6, [pc, #768]	; (8009cbc <USER_SET_Command+0x73c>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 80099ba:	4dc1      	ldr	r5, [pc, #772]	; (8009cc0 <USER_SET_Command+0x740>)
 80099bc:	446c      	add	r4, sp
		memrx=0;
 80099be:	7030      	strb	r0, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 80099c0:	2217      	movs	r2, #23
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	9400      	str	r4, [sp, #0]
 80099c6:	21d6      	movs	r1, #214	; 0xd6
 80099c8:	0028      	movs	r0, r5
 80099ca:	f7f9 fe71 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d001      	beq.n	80099d6 <USER_SET_Command+0x456>
		{
			Error_Handler();
 80099d2:	f7fe ffa9 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 80099d6:	7833      	ldrb	r3, [r6, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0fc      	beq.n	80099d6 <USER_SET_Command+0x456>
		ctrl8_xl&=~0b01100000;
 80099dc:	2260      	movs	r2, #96	; 0x60
 80099de:	7823      	ldrb	r3, [r4, #0]


		switch(atoi(instruction_final+18))
 80099e0:	48b8      	ldr	r0, [pc, #736]	; (8009cc4 <USER_SET_Command+0x744>)
		ctrl8_xl&=~0b01100000;
 80099e2:	4393      	bics	r3, r2
 80099e4:	7023      	strb	r3, [r4, #0]
		switch(atoi(instruction_final+18))
 80099e6:	f002 f94c 	bl	800bc82 <atoi>
 80099ea:	2803      	cmp	r0, #3
 80099ec:	d900      	bls.n	80099f0 <USER_SET_Command+0x470>
 80099ee:	e280      	b.n	8009ef2 <USER_SET_Command+0x972>
 80099f0:	f7f6 fba4 	bl	800013c <__gnu_thumb1_case_uhi>
 80099f4:	01b2007d 	.word	0x01b2007d
 80099f8:	023a01f6 	.word	0x023a01f6
		rtt=atoi(instruction_final+8)	<=	125	&& atoi(instruction_final+8) > 0?atoi(instruction_final+8)	:	rtt;
 80099fc:	7830      	ldrb	r0, [r6, #0]
 80099fe:	e605      	b.n	800960c <USER_SET_Command+0x8c>
		hat=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hat;
 8009a00:	8832      	ldrh	r2, [r6, #0]
 8009a02:	e631      	b.n	8009668 <USER_SET_Command+0xe8>
			harsh_accel_brake_function_wakeup_threshold	=	hbt;
 8009a04:	8018      	strh	r0, [r3, #0]
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
 8009a06:	2002      	movs	r0, #2
 8009a08:	e638      	b.n	800967c <USER_SET_Command+0xfc>
		hbt=atoi(instruction_final+8)	<	32768*mg_per_LSB &&	atoi(instruction_final+8) > 31 ?atoi(instruction_final+8)	:	hbt;
 8009a0a:	8832      	ldrh	r2, [r6, #0]
 8009a0c:	e689      	b.n	8009722 <USER_SET_Command+0x1a2>
			harsh_accel_brake_function_wakeup_threshold	=	hbt;
 8009a0e:	801a      	strh	r2, [r3, #0]
			harsh_accel_brake_function_wakeup_mode		=HARSH_BRAKING;
 8009a10:	2002      	movs	r0, #2
 8009a12:	e690      	b.n	8009736 <USER_SET_Command+0x1b6>
		tilt_threshold	=atoi(instruction_final+19)<=180	&&	atoi(instruction_final+19)>=0?atoi(instruction_final+19):tilt_threshold;
 8009a14:	7832      	ldrb	r2, [r6, #0]
 8009a16:	e6d4      	b.n	80097c2 <USER_SET_Command+0x242>
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a18:	2301      	movs	r3, #1
		memrx=0;
 8009a1a:	4ca8      	ldr	r4, [pc, #672]	; (8009cbc <USER_SET_Command+0x73c>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a1c:	ad03      	add	r5, sp, #12
		memrx=0;
 8009a1e:	7020      	strb	r0, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a20:	225c      	movs	r2, #92	; 0x5c
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	9500      	str	r5, [sp, #0]
 8009a26:	21d6      	movs	r1, #214	; 0xd6
 8009a28:	48a5      	ldr	r0, [pc, #660]	; (8009cc0 <USER_SET_Command+0x740>)
 8009a2a:	f7f9 fe41 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d001      	beq.n	8009a36 <USER_SET_Command+0x4b6>
			Error_Handler();
 8009a32:	f7fe ff79 	bl	8008928 <Error_Handler>
		while(memrx==0);
 8009a36:	7823      	ldrb	r3, [r4, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d0fc      	beq.n	8009a36 <USER_SET_Command+0x4b6>
		sleep_dur=atoi(instruction_final+14);
 8009a3c:	48a2      	ldr	r0, [pc, #648]	; (8009cc8 <USER_SET_Command+0x748>)
 8009a3e:	f002 f920 	bl	800bc82 <atoi>
 8009a42:	b2c6      	uxtb	r6, r0
 8009a44:	0004      	movs	r4, r0
		if (sleep_dur>=0 && sleep_dur<16)
 8009a46:	2e0f      	cmp	r6, #15
 8009a48:	d8ac      	bhi.n	80099a4 <USER_SET_Command+0x424>
			memtx=0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	4a9f      	ldr	r2, [pc, #636]	; (8009ccc <USER_SET_Command+0x74c>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a4e:	21d6      	movs	r1, #214	; 0xd6
			memtx=0;
 8009a50:	7013      	strb	r3, [r2, #0]
			wake_up_dur&=~0b00001111;
 8009a52:	220f      	movs	r2, #15
 8009a54:	782b      	ldrb	r3, [r5, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a56:	489a      	ldr	r0, [pc, #616]	; (8009cc0 <USER_SET_Command+0x740>)
			wake_up_dur&=~0b00001111;
 8009a58:	4393      	bics	r3, r2
			wake_up_dur|=sleep_dur;
 8009a5a:	4333      	orrs	r3, r6
 8009a5c:	702b      	strb	r3, [r5, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 8009a5e:	2301      	movs	r3, #1
 8009a60:	9500      	str	r5, [sp, #0]
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	324d      	adds	r2, #77	; 0x4d
 8009a66:	f7f9 fd7d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d006      	beq.n	8009a7c <USER_SET_Command+0x4fc>
				Error_Handler();
 8009a6e:	f7fe ff5b 	bl	8008928 <Error_Handler>
			while(memtx==0);
 8009a72:	4b96      	ldr	r3, [pc, #600]	; (8009ccc <USER_SET_Command+0x74c>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0fb      	beq.n	8009a72 <USER_SET_Command+0x4f2>
 8009a7a:	e793      	b.n	80099a4 <USER_SET_Command+0x424>
 8009a7c:	4b94      	ldr	r3, [pc, #592]	; (8009cd0 <USER_SET_Command+0x750>)
				sprintf(out_string,"\r\n Duration for Inactivity detection is %d ms\r\n",sleep_dur==0 && who_am_i==0x6a?16000/odr_xl_value:(int)sleep_dur*512*1000/odr_xl_value);
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d12f      	bne.n	8009ae2 <USER_SET_Command+0x562>
 8009a82:	4a94      	ldr	r2, [pc, #592]	; (8009cd4 <USER_SET_Command+0x754>)
 8009a84:	7812      	ldrb	r2, [r2, #0]
 8009a86:	2a6a      	cmp	r2, #106	; 0x6a
 8009a88:	d12b      	bne.n	8009ae2 <USER_SET_Command+0x562>
 8009a8a:	20fa      	movs	r0, #250	; 0xfa
 8009a8c:	8819      	ldrh	r1, [r3, #0]
 8009a8e:	0180      	lsls	r0, r0, #6
 8009a90:	f7f6 fbe8 	bl	8000264 <__divsi3>
 8009a94:	4c90      	ldr	r4, [pc, #576]	; (8009cd8 <USER_SET_Command+0x758>)
 8009a96:	0002      	movs	r2, r0
 8009a98:	4990      	ldr	r1, [pc, #576]	; (8009cdc <USER_SET_Command+0x75c>)
 8009a9a:	0020      	movs	r0, r4
 8009a9c:	f002 f934 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	488e      	ldr	r0, [pc, #568]	; (8009ce0 <USER_SET_Command+0x760>)
 8009aa6:	f7f9 fb7f 	bl	80031a8 <HAL_GPIO_WritePin>
				uarttx_req=1;
 8009aaa:	2301      	movs	r3, #1
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009aac:	0020      	movs	r0, r4
				uarttx_req=1;
 8009aae:	703b      	strb	r3, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009ab0:	f7f6 fb28 	bl	8000104 <strlen>
 8009ab4:	0021      	movs	r1, r4
 8009ab6:	b282      	uxth	r2, r0
 8009ab8:	488a      	ldr	r0, [pc, #552]	; (8009ce4 <USER_SET_Command+0x764>)
 8009aba:	f7fb f901 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d001      	beq.n	8009ac6 <USER_SET_Command+0x546>
					Error_Handler();
 8009ac2:	f7fe ff31 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009ac6:	783b      	ldrb	r3, [r7, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d0fc      	beq.n	8009ac6 <USER_SET_Command+0x546>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2102      	movs	r1, #2
 8009ad0:	4883      	ldr	r0, [pc, #524]	; (8009ce0 <USER_SET_Command+0x760>)
 8009ad2:	f7f9 fb69 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009ad6:	2219      	movs	r2, #25
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4883      	ldr	r0, [pc, #524]	; (8009ce8 <USER_SET_Command+0x768>)
 8009adc:	f002 f90b 	bl	800bcf6 <memset>
 8009ae0:	e7c7      	b.n	8009a72 <USER_SET_Command+0x4f2>
				sprintf(out_string,"\r\n Duration for Inactivity detection is %d ms\r\n",sleep_dur==0 && who_am_i==0x6a?16000/odr_xl_value:(int)sleep_dur*512*1000/odr_xl_value);
 8009ae2:	b2e0      	uxtb	r0, r4
 8009ae4:	24fa      	movs	r4, #250	; 0xfa
 8009ae6:	02e4      	lsls	r4, r4, #11
 8009ae8:	4360      	muls	r0, r4
 8009aea:	8819      	ldrh	r1, [r3, #0]
 8009aec:	e7d0      	b.n	8009a90 <USER_SET_Command+0x510>
		{
		case 0:


			ctrl8_xl|=0b00000000;
			memtx=0;
 8009aee:	2200      	movs	r2, #0
 8009af0:	4b76      	ldr	r3, [pc, #472]	; (8009ccc <USER_SET_Command+0x74c>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009af2:	2401      	movs	r4, #1
			memtx=0;
 8009af4:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009af6:	230e      	movs	r3, #14
 8009af8:	446b      	add	r3, sp
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	9401      	str	r4, [sp, #4]
 8009afe:	0023      	movs	r3, r4
 8009b00:	3217      	adds	r2, #23
 8009b02:	21d6      	movs	r1, #214	; 0xd6
 8009b04:	0028      	movs	r0, r5
 8009b06:	f7f9 fd2d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d100      	bne.n	8009b10 <USER_SET_Command+0x590>
 8009b0e:	e0fb      	b.n	8009d08 <USER_SET_Command+0x788>
			{
				Error_Handler();
 8009b10:	f7fe ff0a 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
				memset(instruction_final,0,25);
			}

			while(memtx==0);
 8009b14:	4a6d      	ldr	r2, [pc, #436]	; (8009ccc <USER_SET_Command+0x74c>)
 8009b16:	7813      	ldrb	r3, [r2, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d0fc      	beq.n	8009b16 <USER_SET_Command+0x596>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
			memset(instruction_final,0,25);


		}
		HAL_Delay((int)1000/odr_xl_value);
 8009b1c:	20fa      	movs	r0, #250	; 0xfa
 8009b1e:	4b6c      	ldr	r3, [pc, #432]	; (8009cd0 <USER_SET_Command+0x750>)
 8009b20:	0080      	lsls	r0, r0, #2
 8009b22:	8819      	ldrh	r1, [r3, #0]
 8009b24:	f7f6 fb9e 	bl	8000264 <__divsi3>
 8009b28:	f7f9 f926 	bl	8002d78 <HAL_Delay>
		memrx=0;
 8009b2c:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8009b2e:	220f      	movs	r2, #15
		memrx=0;
 8009b30:	4c62      	ldr	r4, [pc, #392]	; (8009cbc <USER_SET_Command+0x73c>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8009b32:	446a      	add	r2, sp
		memrx=0;
 8009b34:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8009b36:	3301      	adds	r3, #1
 8009b38:	9200      	str	r2, [sp, #0]
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	221b      	movs	r2, #27
 8009b3e:	21d6      	movs	r1, #214	; 0xd6
 8009b40:	485f      	ldr	r0, [pc, #380]	; (8009cc0 <USER_SET_Command+0x740>)
 8009b42:	f7f9 fdb5 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d001      	beq.n	8009b4e <USER_SET_Command+0x5ce>
		{
			Error_Handler();
 8009b4a:	f7fe feed 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8009b4e:	7823      	ldrb	r3, [r4, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0fc      	beq.n	8009b4e <USER_SET_Command+0x5ce>

	}
	if(!strncmp(instruction_final+4,"FILTER:",7))
 8009b54:	2207      	movs	r2, #7
 8009b56:	4965      	ldr	r1, [pc, #404]	; (8009cec <USER_SET_Command+0x76c>)
 8009b58:	4857      	ldr	r0, [pc, #348]	; (8009cb8 <USER_SET_Command+0x738>)
 8009b5a:	f002 f8ff 	bl	800bd5c <strncmp>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d163      	bne.n	8009c2a <USER_SET_Command+0x6aa>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009b62:	250d      	movs	r5, #13
 8009b64:	2301      	movs	r3, #1
		memrx=0;
 8009b66:	4e55      	ldr	r6, [pc, #340]	; (8009cbc <USER_SET_Command+0x73c>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009b68:	446d      	add	r5, sp
		memrx=0;
 8009b6a:	7030      	strb	r0, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009b6c:	2258      	movs	r2, #88	; 0x58
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	9500      	str	r5, [sp, #0]
 8009b72:	21d6      	movs	r1, #214	; 0xd6
 8009b74:	4852      	ldr	r0, [pc, #328]	; (8009cc0 <USER_SET_Command+0x740>)
 8009b76:	f7f9 fd9b 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d001      	beq.n	8009b82 <USER_SET_Command+0x602>
		{
			Error_Handler();
 8009b7e:	f7fe fed3 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8009b82:	7833      	ldrb	r3, [r6, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0fc      	beq.n	8009b82 <USER_SET_Command+0x602>
		tap_cfg&=~0b00010000;
 8009b88:	2210      	movs	r2, #16
 8009b8a:	782b      	ldrb	r3, [r5, #0]


		if(!strncmp(instruction_final+11,"SLOPE",5))
 8009b8c:	4958      	ldr	r1, [pc, #352]	; (8009cf0 <USER_SET_Command+0x770>)
		tap_cfg&=~0b00010000;
 8009b8e:	4393      	bics	r3, r2
		if(!strncmp(instruction_final+11,"SLOPE",5))
 8009b90:	4858      	ldr	r0, [pc, #352]	; (8009cf4 <USER_SET_Command+0x774>)
 8009b92:	3a0b      	subs	r2, #11
		tap_cfg&=~0b00010000;
 8009b94:	702b      	strb	r3, [r5, #0]
		if(!strncmp(instruction_final+11,"SLOPE",5))
 8009b96:	f002 f8e1 	bl	800bd5c <strncmp>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d10d      	bne.n	8009bba <USER_SET_Command+0x63a>
		{
			tap_cfg|=0;

			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009b9e:	2401      	movs	r4, #1
 8009ba0:	9500      	str	r5, [sp, #0]
 8009ba2:	9401      	str	r4, [sp, #4]
 8009ba4:	0023      	movs	r3, r4
 8009ba6:	2258      	movs	r2, #88	; 0x58
 8009ba8:	21d6      	movs	r1, #214	; 0xd6
 8009baa:	4845      	ldr	r0, [pc, #276]	; (8009cc0 <USER_SET_Command+0x740>)
 8009bac:	f7f9 fcda 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d100      	bne.n	8009bb6 <USER_SET_Command+0x636>
 8009bb4:	e1bb      	b.n	8009f2e <USER_SET_Command+0x9ae>
			{
				Error_Handler();
 8009bb6:	f7fe feb7 	bl	8008928 <Error_Handler>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
				memset(instruction_final,0,25);
			}

		}
		if(!strncmp(instruction_final+11,"HIGH-PASS",9))
 8009bba:	2209      	movs	r2, #9
 8009bbc:	494e      	ldr	r1, [pc, #312]	; (8009cf8 <USER_SET_Command+0x778>)
 8009bbe:	484d      	ldr	r0, [pc, #308]	; (8009cf4 <USER_SET_Command+0x774>)
 8009bc0:	f002 f8cc 	bl	800bd5c <strncmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d113      	bne.n	8009bf0 <USER_SET_Command+0x670>
		{
			tap_cfg|=0b00010000;
 8009bc8:	230d      	movs	r3, #13
 8009bca:	2210      	movs	r2, #16
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009bcc:	2401      	movs	r4, #1
			tap_cfg|=0b00010000;
 8009bce:	446b      	add	r3, sp
 8009bd0:	7819      	ldrb	r1, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009bd2:	483b      	ldr	r0, [pc, #236]	; (8009cc0 <USER_SET_Command+0x740>)
			tap_cfg|=0b00010000;
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&tap_cfg,1)!=HAL_OK)
 8009bd8:	21d6      	movs	r1, #214	; 0xd6
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	9401      	str	r4, [sp, #4]
 8009bde:	0023      	movs	r3, r4
 8009be0:	2258      	movs	r2, #88	; 0x58
 8009be2:	f7f9 fcbf 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d100      	bne.n	8009bec <USER_SET_Command+0x66c>
 8009bea:	e1bd      	b.n	8009f68 <USER_SET_Command+0x9e8>
			{
				Error_Handler();
 8009bec:	f7fe fe9c 	bl	8008928 <Error_Handler>
				memset(instruction_final,0,25);
			}


		}
		HAL_Delay((int)(1000/odr_xl_value)+1);
 8009bf0:	20fa      	movs	r0, #250	; 0xfa
 8009bf2:	4b37      	ldr	r3, [pc, #220]	; (8009cd0 <USER_SET_Command+0x750>)
 8009bf4:	0080      	lsls	r0, r0, #2
 8009bf6:	8819      	ldrh	r1, [r3, #0]
 8009bf8:	f7f6 fb34 	bl	8000264 <__divsi3>
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f7f9 f8bb 	bl	8002d78 <HAL_Delay>
		memrx=0;
 8009c02:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8009c04:	220f      	movs	r2, #15
		memrx=0;
 8009c06:	7033      	strb	r3, [r6, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 8009c08:	446a      	add	r2, sp
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	9200      	str	r2, [sp, #0]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	221b      	movs	r2, #27
 8009c12:	21d6      	movs	r1, #214	; 0xd6
 8009c14:	482a      	ldr	r0, [pc, #168]	; (8009cc0 <USER_SET_Command+0x740>)
 8009c16:	f7f9 fd4b 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d001      	beq.n	8009c22 <USER_SET_Command+0x6a2>
		{
			Error_Handler();
 8009c1e:	f7fe fe83 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8009c22:	4a26      	ldr	r2, [pc, #152]	; (8009cbc <USER_SET_Command+0x73c>)
 8009c24:	7813      	ldrb	r3, [r2, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0fc      	beq.n	8009c24 <USER_SET_Command+0x6a4>



	}

	if(!strncmp(instruction_final+4,"ACCEL_SCALE:",12))
 8009c2a:	220c      	movs	r2, #12
 8009c2c:	4933      	ldr	r1, [pc, #204]	; (8009cfc <USER_SET_Command+0x77c>)
 8009c2e:	4822      	ldr	r0, [pc, #136]	; (8009cb8 <USER_SET_Command+0x738>)
 8009c30:	f002 f894 	bl	800bd5c <strncmp>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d000      	beq.n	8009c3a <USER_SET_Command+0x6ba>
 8009c38:	e224      	b.n	800a084 <USER_SET_Command+0xb04>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009c3a:	240a      	movs	r4, #10
 8009c3c:	2301      	movs	r3, #1
		memrx=0;
 8009c3e:	4d1f      	ldr	r5, [pc, #124]	; (8009cbc <USER_SET_Command+0x73c>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009c40:	446c      	add	r4, sp
		memrx=0;
 8009c42:	7028      	strb	r0, [r5, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009c44:	2210      	movs	r2, #16
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	9400      	str	r4, [sp, #0]
 8009c4a:	21d6      	movs	r1, #214	; 0xd6
 8009c4c:	481c      	ldr	r0, [pc, #112]	; (8009cc0 <USER_SET_Command+0x740>)
 8009c4e:	f7f9 fd2f 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d001      	beq.n	8009c5a <USER_SET_Command+0x6da>
		{
			Error_Handler();
 8009c56:	f7fe fe67 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 8009c5a:	782b      	ldrb	r3, [r5, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0fc      	beq.n	8009c5a <USER_SET_Command+0x6da>




		switch(atoi(instruction_final+16))
 8009c60:	4827      	ldr	r0, [pc, #156]	; (8009d00 <USER_SET_Command+0x780>)
 8009c62:	f002 f80e 	bl	800bc82 <atoi>
 8009c66:	0005      	movs	r5, r0
 8009c68:	2804      	cmp	r0, #4
 8009c6a:	d100      	bne.n	8009c6e <USER_SET_Command+0x6ee>
 8009c6c:	e2ef      	b.n	800a24e <USER_SET_Command+0xcce>
 8009c6e:	dd00      	ble.n	8009c72 <USER_SET_Command+0x6f2>
 8009c70:	e197      	b.n	8009fa2 <USER_SET_Command+0xa22>
 8009c72:	2802      	cmp	r0, #2
 8009c74:	d100      	bne.n	8009c78 <USER_SET_Command+0x6f8>
 8009c76:	e1cf      	b.n	800a018 <USER_SET_Command+0xa98>

			while(memtx==0);

			break;
		default:
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009c78:	2201      	movs	r2, #1
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	4818      	ldr	r0, [pc, #96]	; (8009ce0 <USER_SET_Command+0x760>)
 8009c7e:	f7f9 fa93 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8009c82:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value is incorrect\r\n",strlen("\r\n\r\nAccelerometer full-scale value is incorrect"))!=HAL_OK)
 8009c84:	222f      	movs	r2, #47	; 0x2f
 8009c86:	491f      	ldr	r1, [pc, #124]	; (8009d04 <USER_SET_Command+0x784>)
 8009c88:	4816      	ldr	r0, [pc, #88]	; (8009ce4 <USER_SET_Command+0x764>)
			uarttx_req=1;
 8009c8a:	703b      	strb	r3, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value is incorrect\r\n",strlen("\r\n\r\nAccelerometer full-scale value is incorrect"))!=HAL_OK)
 8009c8c:	f7fb f818 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d001      	beq.n	8009c98 <USER_SET_Command+0x718>
			{
				Error_Handler();
 8009c94:	f7fe fe48 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 8009c98:	783b      	ldrb	r3, [r7, #0]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d0fc      	beq.n	8009c98 <USER_SET_Command+0x718>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2102      	movs	r1, #2
 8009ca2:	480f      	ldr	r0, [pc, #60]	; (8009ce0 <USER_SET_Command+0x760>)
 8009ca4:	f7f9 fa80 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8009ca8:	2219      	movs	r2, #25
 8009caa:	2100      	movs	r1, #0
 8009cac:	480e      	ldr	r0, [pc, #56]	; (8009ce8 <USER_SET_Command+0x768>)
 8009cae:	f002 f822 	bl	800bcf6 <memset>

			break;
 8009cb2:	e1ca      	b.n	800a04a <USER_SET_Command+0xaca>
 8009cb4:	0800f690 	.word	0x0800f690
 8009cb8:	2000023a 	.word	0x2000023a
 8009cbc:	20000269 	.word	0x20000269
 8009cc0:	200003a0 	.word	0x200003a0
 8009cc4:	20000248 	.word	0x20000248
 8009cc8:	20000244 	.word	0x20000244
 8009ccc:	2000026a 	.word	0x2000026a
 8009cd0:	20000480 	.word	0x20000480
 8009cd4:	20000379 	.word	0x20000379
 8009cd8:	2000026b 	.word	0x2000026b
 8009cdc:	0800eef4 	.word	0x0800eef4
 8009ce0:	48000400 	.word	0x48000400
 8009ce4:	20000510 	.word	0x20000510
 8009ce8:	20000236 	.word	0x20000236
 8009cec:	0800f69f 	.word	0x0800f69f
 8009cf0:	0800f6d4 	.word	0x0800f6d4
 8009cf4:	20000241 	.word	0x20000241
 8009cf8:	0800f6da 	.word	0x0800f6da
 8009cfc:	0800f6c7 	.word	0x0800f6c7
 8009d00:	20000246 	.word	0x20000246
 8009d04:	0800f6ec 	.word	0x0800f6ec
				sprintf(out_string,"\r\nSlope Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/4);
 8009d08:	4bb7      	ldr	r3, [pc, #732]	; (8009fe8 <USER_SET_Command+0xa68>)
 8009d0a:	4db8      	ldr	r5, [pc, #736]	; (8009fec <USER_SET_Command+0xa6c>)
 8009d0c:	881a      	ldrh	r2, [r3, #0]
 8009d0e:	49b8      	ldr	r1, [pc, #736]	; (8009ff0 <USER_SET_Command+0xa70>)
 8009d10:	0892      	lsrs	r2, r2, #2
 8009d12:	0028      	movs	r0, r5
 8009d14:	f001 fff8 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009d18:	0022      	movs	r2, r4
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	48b5      	ldr	r0, [pc, #724]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009d1e:	f7f9 fa43 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009d22:	0028      	movs	r0, r5
				uarttx_req=1;
 8009d24:	703c      	strb	r4, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009d26:	f7f6 f9ed 	bl	8000104 <strlen>
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	b282      	uxth	r2, r0
 8009d2e:	48b2      	ldr	r0, [pc, #712]	; (8009ff8 <USER_SET_Command+0xa78>)
 8009d30:	f7fa ffc6 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	d001      	beq.n	8009d3c <USER_SET_Command+0x7bc>
					Error_Handler();
 8009d38:	f7fe fdf6 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009d3c:	783b      	ldrb	r3, [r7, #0]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d0fc      	beq.n	8009d3c <USER_SET_Command+0x7bc>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009d42:	2200      	movs	r2, #0
 8009d44:	2102      	movs	r1, #2
 8009d46:	48ab      	ldr	r0, [pc, #684]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009d48:	f7f9 fa2e 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009d4c:	2219      	movs	r2, #25
 8009d4e:	2100      	movs	r1, #0
 8009d50:	48aa      	ldr	r0, [pc, #680]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009d52:	f001 ffd0 	bl	800bcf6 <memset>
 8009d56:	e6dd      	b.n	8009b14 <USER_SET_Command+0x594>
			ctrl8_xl|=0b00100000;
 8009d58:	2320      	movs	r3, #32
 8009d5a:	7822      	ldrb	r2, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009d5c:	2501      	movs	r5, #1
			ctrl8_xl|=0b00100000;
 8009d5e:	4313      	orrs	r3, r2
			memtx=0;
 8009d60:	2200      	movs	r2, #0
			ctrl8_xl|=0b00100000;
 8009d62:	7023      	strb	r3, [r4, #0]
			memtx=0;
 8009d64:	4ba6      	ldr	r3, [pc, #664]	; (800a000 <USER_SET_Command+0xa80>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009d66:	21d6      	movs	r1, #214	; 0xd6
			memtx=0;
 8009d68:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009d6a:	48a6      	ldr	r0, [pc, #664]	; (800a004 <USER_SET_Command+0xa84>)
 8009d6c:	9501      	str	r5, [sp, #4]
 8009d6e:	9400      	str	r4, [sp, #0]
 8009d70:	002b      	movs	r3, r5
 8009d72:	3217      	adds	r2, #23
 8009d74:	f7f9 fbf6 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d006      	beq.n	8009d8a <USER_SET_Command+0x80a>
				Error_Handler();
 8009d7c:	f7fe fdd4 	bl	8008928 <Error_Handler>
			while(memtx==0);
 8009d80:	4a9f      	ldr	r2, [pc, #636]	; (800a000 <USER_SET_Command+0xa80>)
 8009d82:	7813      	ldrb	r3, [r2, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0fc      	beq.n	8009d82 <USER_SET_Command+0x802>
 8009d88:	e6c8      	b.n	8009b1c <USER_SET_Command+0x59c>
				sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/100);
 8009d8a:	4b97      	ldr	r3, [pc, #604]	; (8009fe8 <USER_SET_Command+0xa68>)
 8009d8c:	2164      	movs	r1, #100	; 0x64
 8009d8e:	8818      	ldrh	r0, [r3, #0]
 8009d90:	f7f6 f9de 	bl	8000150 <__udivsi3>
 8009d94:	4c95      	ldr	r4, [pc, #596]	; (8009fec <USER_SET_Command+0xa6c>)
 8009d96:	b282      	uxth	r2, r0
 8009d98:	499b      	ldr	r1, [pc, #620]	; (800a008 <USER_SET_Command+0xa88>)
 8009d9a:	0020      	movs	r0, r4
 8009d9c:	f001 ffb4 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009da0:	002a      	movs	r2, r5
 8009da2:	2102      	movs	r1, #2
 8009da4:	4893      	ldr	r0, [pc, #588]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009da6:	f7f9 f9ff 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009daa:	0020      	movs	r0, r4
				uarttx_req=1;
 8009dac:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009dae:	f7f6 f9a9 	bl	8000104 <strlen>
 8009db2:	0021      	movs	r1, r4
 8009db4:	b282      	uxth	r2, r0
 8009db6:	4890      	ldr	r0, [pc, #576]	; (8009ff8 <USER_SET_Command+0xa78>)
 8009db8:	f7fa ff82 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d001      	beq.n	8009dc4 <USER_SET_Command+0x844>
					Error_Handler();
 8009dc0:	f7fe fdb2 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009dc4:	783b      	ldrb	r3, [r7, #0]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d0fc      	beq.n	8009dc4 <USER_SET_Command+0x844>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009dca:	2200      	movs	r2, #0
 8009dcc:	2102      	movs	r1, #2
 8009dce:	4889      	ldr	r0, [pc, #548]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009dd0:	f7f9 f9ea 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009dd4:	2219      	movs	r2, #25
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4888      	ldr	r0, [pc, #544]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009dda:	f001 ff8c 	bl	800bcf6 <memset>
 8009dde:	e7cf      	b.n	8009d80 <USER_SET_Command+0x800>
			ctrl8_xl|=0b01000000;
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	7822      	ldrb	r2, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009de4:	2501      	movs	r5, #1
			ctrl8_xl|=0b01000000;
 8009de6:	4313      	orrs	r3, r2
			memtx=0;
 8009de8:	2200      	movs	r2, #0
			ctrl8_xl|=0b01000000;
 8009dea:	7023      	strb	r3, [r4, #0]
			memtx=0;
 8009dec:	4b84      	ldr	r3, [pc, #528]	; (800a000 <USER_SET_Command+0xa80>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009dee:	21d6      	movs	r1, #214	; 0xd6
			memtx=0;
 8009df0:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009df2:	4884      	ldr	r0, [pc, #528]	; (800a004 <USER_SET_Command+0xa84>)
 8009df4:	9501      	str	r5, [sp, #4]
 8009df6:	9400      	str	r4, [sp, #0]
 8009df8:	002b      	movs	r3, r5
 8009dfa:	3217      	adds	r2, #23
 8009dfc:	f7f9 fbb2 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d006      	beq.n	8009e12 <USER_SET_Command+0x892>
				Error_Handler();
 8009e04:	f7fe fd90 	bl	8008928 <Error_Handler>
			while(memtx==0);
 8009e08:	4a7d      	ldr	r2, [pc, #500]	; (800a000 <USER_SET_Command+0xa80>)
 8009e0a:	7813      	ldrb	r3, [r2, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0fc      	beq.n	8009e0a <USER_SET_Command+0x88a>
 8009e10:	e684      	b.n	8009b1c <USER_SET_Command+0x59c>
				sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/9);
 8009e12:	4b75      	ldr	r3, [pc, #468]	; (8009fe8 <USER_SET_Command+0xa68>)
 8009e14:	2109      	movs	r1, #9
 8009e16:	8818      	ldrh	r0, [r3, #0]
 8009e18:	f7f6 f99a 	bl	8000150 <__udivsi3>
 8009e1c:	4c73      	ldr	r4, [pc, #460]	; (8009fec <USER_SET_Command+0xa6c>)
 8009e1e:	b282      	uxth	r2, r0
 8009e20:	4979      	ldr	r1, [pc, #484]	; (800a008 <USER_SET_Command+0xa88>)
 8009e22:	0020      	movs	r0, r4
 8009e24:	f001 ff70 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009e28:	002a      	movs	r2, r5
 8009e2a:	2102      	movs	r1, #2
 8009e2c:	4871      	ldr	r0, [pc, #452]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009e2e:	f7f9 f9bb 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009e32:	0020      	movs	r0, r4
				uarttx_req=1;
 8009e34:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009e36:	f7f6 f965 	bl	8000104 <strlen>
 8009e3a:	0021      	movs	r1, r4
 8009e3c:	b282      	uxth	r2, r0
 8009e3e:	486e      	ldr	r0, [pc, #440]	; (8009ff8 <USER_SET_Command+0xa78>)
 8009e40:	f7fa ff3e 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d001      	beq.n	8009e4c <USER_SET_Command+0x8cc>
					Error_Handler();
 8009e48:	f7fe fd6e 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009e4c:	783b      	ldrb	r3, [r7, #0]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d0fc      	beq.n	8009e4c <USER_SET_Command+0x8cc>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009e52:	2200      	movs	r2, #0
 8009e54:	2102      	movs	r1, #2
 8009e56:	4867      	ldr	r0, [pc, #412]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009e58:	f7f9 f9a6 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009e5c:	2219      	movs	r2, #25
 8009e5e:	2100      	movs	r1, #0
 8009e60:	4866      	ldr	r0, [pc, #408]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009e62:	f001 ff48 	bl	800bcf6 <memset>
 8009e66:	e7cf      	b.n	8009e08 <USER_SET_Command+0x888>
			ctrl8_xl|=0b01100000;
 8009e68:	2360      	movs	r3, #96	; 0x60
 8009e6a:	7822      	ldrb	r2, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009e6c:	2501      	movs	r5, #1
			ctrl8_xl|=0b01100000;
 8009e6e:	4313      	orrs	r3, r2
			memtx=0;
 8009e70:	2200      	movs	r2, #0
			ctrl8_xl|=0b01100000;
 8009e72:	7023      	strb	r3, [r4, #0]
			memtx=0;
 8009e74:	4b62      	ldr	r3, [pc, #392]	; (800a000 <USER_SET_Command+0xa80>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009e76:	21d6      	movs	r1, #214	; 0xd6
			memtx=0;
 8009e78:	701a      	strb	r2, [r3, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&ctrl8_xl,1)!=HAL_OK)
 8009e7a:	4862      	ldr	r0, [pc, #392]	; (800a004 <USER_SET_Command+0xa84>)
 8009e7c:	9501      	str	r5, [sp, #4]
 8009e7e:	9400      	str	r4, [sp, #0]
 8009e80:	002b      	movs	r3, r5
 8009e82:	3217      	adds	r2, #23
 8009e84:	f7f9 fb6e 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d006      	beq.n	8009e9a <USER_SET_Command+0x91a>
				Error_Handler();
 8009e8c:	f7fe fd4c 	bl	8008928 <Error_Handler>
			while(memtx==0);
 8009e90:	4a5b      	ldr	r2, [pc, #364]	; (800a000 <USER_SET_Command+0xa80>)
 8009e92:	7813      	ldrb	r3, [r2, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0fc      	beq.n	8009e92 <USER_SET_Command+0x912>
 8009e98:	e640      	b.n	8009b1c <USER_SET_Command+0x59c>
				sprintf(out_string,"\r\nHigh-Pass Filter Cut-Off Frequency is %d \r\n",(int)odr_xl_value/400);
 8009e9a:	21c8      	movs	r1, #200	; 0xc8
 8009e9c:	4b52      	ldr	r3, [pc, #328]	; (8009fe8 <USER_SET_Command+0xa68>)
 8009e9e:	0049      	lsls	r1, r1, #1
 8009ea0:	8818      	ldrh	r0, [r3, #0]
 8009ea2:	f7f6 f955 	bl	8000150 <__udivsi3>
 8009ea6:	4c51      	ldr	r4, [pc, #324]	; (8009fec <USER_SET_Command+0xa6c>)
 8009ea8:	b282      	uxth	r2, r0
 8009eaa:	4957      	ldr	r1, [pc, #348]	; (800a008 <USER_SET_Command+0xa88>)
 8009eac:	0020      	movs	r0, r4
 8009eae:	f001 ff2b 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009eb2:	002a      	movs	r2, r5
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	484f      	ldr	r0, [pc, #316]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009eb8:	f7f9 f976 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009ebc:	0020      	movs	r0, r4
				uarttx_req=1;
 8009ebe:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 8009ec0:	f7f6 f920 	bl	8000104 <strlen>
 8009ec4:	0021      	movs	r1, r4
 8009ec6:	b282      	uxth	r2, r0
 8009ec8:	484b      	ldr	r0, [pc, #300]	; (8009ff8 <USER_SET_Command+0xa78>)
 8009eca:	f7fa fef9 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d001      	beq.n	8009ed6 <USER_SET_Command+0x956>
					Error_Handler();
 8009ed2:	f7fe fd29 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009ed6:	783b      	ldrb	r3, [r7, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d0fc      	beq.n	8009ed6 <USER_SET_Command+0x956>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009edc:	2200      	movs	r2, #0
 8009ede:	2102      	movs	r1, #2
 8009ee0:	4844      	ldr	r0, [pc, #272]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009ee2:	f7f9 f961 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009ee6:	2219      	movs	r2, #25
 8009ee8:	2100      	movs	r1, #0
 8009eea:	4844      	ldr	r0, [pc, #272]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009eec:	f001 ff03 	bl	800bcf6 <memset>
 8009ef0:	e7ce      	b.n	8009e90 <USER_SET_Command+0x910>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	483f      	ldr	r0, [pc, #252]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009ef8:	f7f9 f956 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 8009efc:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nIncurrect Cut-Off Frequency\r\n",strlen("\r\nIncurrect Cut-Off Frequency\r\n"))!=HAL_OK)
 8009efe:	221f      	movs	r2, #31
 8009f00:	4942      	ldr	r1, [pc, #264]	; (800a00c <USER_SET_Command+0xa8c>)
 8009f02:	483d      	ldr	r0, [pc, #244]	; (8009ff8 <USER_SET_Command+0xa78>)
			uarttx_req=1;
 8009f04:	703b      	strb	r3, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nIncurrect Cut-Off Frequency\r\n",strlen("\r\nIncurrect Cut-Off Frequency\r\n"))!=HAL_OK)
 8009f06:	f7fa fedb 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d001      	beq.n	8009f12 <USER_SET_Command+0x992>
				Error_Handler();
 8009f0e:	f7fe fd0b 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 8009f12:	783b      	ldrb	r3, [r7, #0]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d0fc      	beq.n	8009f12 <USER_SET_Command+0x992>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2102      	movs	r1, #2
 8009f1c:	4835      	ldr	r0, [pc, #212]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009f1e:	f7f9 f943 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 8009f22:	2219      	movs	r2, #25
 8009f24:	2100      	movs	r1, #0
 8009f26:	4835      	ldr	r0, [pc, #212]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009f28:	f001 fee5 	bl	800bcf6 <memset>
 8009f2c:	e5f6      	b.n	8009b1c <USER_SET_Command+0x59c>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009f2e:	0022      	movs	r2, r4
 8009f30:	2102      	movs	r1, #2
 8009f32:	4830      	ldr	r0, [pc, #192]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009f34:	f7f9 f938 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the slope filter \r\n",strlen("\r\nthe wake-up feature implemented using the slope filter \r\n"))!=HAL_OK)
 8009f38:	223b      	movs	r2, #59	; 0x3b
 8009f3a:	4935      	ldr	r1, [pc, #212]	; (800a010 <USER_SET_Command+0xa90>)
 8009f3c:	482e      	ldr	r0, [pc, #184]	; (8009ff8 <USER_SET_Command+0xa78>)
				uarttx_req=1;
 8009f3e:	703c      	strb	r4, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the slope filter \r\n",strlen("\r\nthe wake-up feature implemented using the slope filter \r\n"))!=HAL_OK)
 8009f40:	f7fa febe 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d001      	beq.n	8009f4c <USER_SET_Command+0x9cc>
					Error_Handler();
 8009f48:	f7fe fcee 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009f4c:	783b      	ldrb	r3, [r7, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d0fc      	beq.n	8009f4c <USER_SET_Command+0x9cc>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009f52:	2200      	movs	r2, #0
 8009f54:	2102      	movs	r1, #2
 8009f56:	4827      	ldr	r0, [pc, #156]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009f58:	f7f9 f926 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009f5c:	2219      	movs	r2, #25
 8009f5e:	2100      	movs	r1, #0
 8009f60:	4826      	ldr	r0, [pc, #152]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009f62:	f001 fec8 	bl	800bcf6 <memset>
 8009f66:	e628      	b.n	8009bba <USER_SET_Command+0x63a>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 8009f68:	0022      	movs	r2, r4
 8009f6a:	2102      	movs	r1, #2
 8009f6c:	4821      	ldr	r0, [pc, #132]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009f6e:	f7f9 f91b 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the High-Pass  filter\r\n",strlen("\r\nthe wake-up feature implemented using the High-Pass  filter\r\n"))!=HAL_OK)
 8009f72:	223f      	movs	r2, #63	; 0x3f
 8009f74:	4927      	ldr	r1, [pc, #156]	; (800a014 <USER_SET_Command+0xa94>)
 8009f76:	4820      	ldr	r0, [pc, #128]	; (8009ff8 <USER_SET_Command+0xa78>)
				uarttx_req=1;
 8009f78:	703c      	strb	r4, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nthe wake-up feature implemented using the High-Pass  filter\r\n",strlen("\r\nthe wake-up feature implemented using the High-Pass  filter\r\n"))!=HAL_OK)
 8009f7a:	f7fa fea1 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d001      	beq.n	8009f86 <USER_SET_Command+0xa06>
					Error_Handler();
 8009f82:	f7fe fcd1 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 8009f86:	783b      	ldrb	r3, [r7, #0]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d0fc      	beq.n	8009f86 <USER_SET_Command+0xa06>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2102      	movs	r1, #2
 8009f90:	4818      	ldr	r0, [pc, #96]	; (8009ff4 <USER_SET_Command+0xa74>)
 8009f92:	f7f9 f909 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 8009f96:	2219      	movs	r2, #25
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4818      	ldr	r0, [pc, #96]	; (8009ffc <USER_SET_Command+0xa7c>)
 8009f9c:	f001 feab 	bl	800bcf6 <memset>
 8009fa0:	e626      	b.n	8009bf0 <USER_SET_Command+0x670>
		switch(atoi(instruction_final+16))
 8009fa2:	2808      	cmp	r0, #8
 8009fa4:	d100      	bne.n	8009fa8 <USER_SET_Command+0xa28>
 8009fa6:	e18d      	b.n	800a2c4 <USER_SET_Command+0xd44>
 8009fa8:	2810      	cmp	r0, #16
 8009faa:	d000      	beq.n	8009fae <USER_SET_Command+0xa2e>
 8009fac:	e664      	b.n	8009c78 <USER_SET_Command+0x6f8>
			memtx=0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4a13      	ldr	r2, [pc, #76]	; (800a000 <USER_SET_Command+0xa80>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009fb2:	2601      	movs	r6, #1
			memtx=0;
 8009fb4:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0b00001100;
 8009fb6:	220c      	movs	r2, #12
 8009fb8:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009fba:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0b00001100;
 8009fbc:	4393      	bics	r3, r2
 8009fbe:	001a      	movs	r2, r3
			ctrl1_xl|=0b00000100;
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 8009fc6:	0002      	movs	r2, r0
 8009fc8:	9601      	str	r6, [sp, #4]
 8009fca:	9400      	str	r4, [sp, #0]
 8009fcc:	0033      	movs	r3, r6
 8009fce:	480d      	ldr	r0, [pc, #52]	; (800a004 <USER_SET_Command+0xa84>)
 8009fd0:	f7f9 fac8 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d100      	bne.n	8009fda <USER_SET_Command+0xa5a>
 8009fd8:	e1ad      	b.n	800a336 <USER_SET_Command+0xdb6>
				Error_Handler();
 8009fda:	f7fe fca5 	bl	8008928 <Error_Handler>
			while(memtx==0);
 8009fde:	4b08      	ldr	r3, [pc, #32]	; (800a000 <USER_SET_Command+0xa80>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0fb      	beq.n	8009fde <USER_SET_Command+0xa5e>
 8009fe6:	e030      	b.n	800a04a <USER_SET_Command+0xaca>
 8009fe8:	20000480 	.word	0x20000480
 8009fec:	2000026b 	.word	0x2000026b
 8009ff0:	0800ef32 	.word	0x0800ef32
 8009ff4:	48000400 	.word	0x48000400
 8009ff8:	20000510 	.word	0x20000510
 8009ffc:	20000236 	.word	0x20000236
 800a000:	2000026a 	.word	0x2000026a
 800a004:	200003a0 	.word	0x200003a0
 800a008:	0800ef5c 	.word	0x0800ef5c
 800a00c:	0800f6a7 	.word	0x0800f6a7
 800a010:	0800ef91 	.word	0x0800ef91
 800a014:	0800efcd 	.word	0x0800efcd
			memtx=0;
 800a018:	2300      	movs	r3, #0
 800a01a:	4ad7      	ldr	r2, [pc, #860]	; (800a378 <USER_SET_Command+0xdf8>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a01c:	2601      	movs	r6, #1
			memtx=0;
 800a01e:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0b00001100;
 800a020:	220c      	movs	r2, #12
 800a022:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a024:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0b00001100;
 800a026:	4393      	bics	r3, r2
 800a028:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a02a:	3204      	adds	r2, #4
 800a02c:	9601      	str	r6, [sp, #4]
 800a02e:	9400      	str	r4, [sp, #0]
 800a030:	0033      	movs	r3, r6
 800a032:	48d2      	ldr	r0, [pc, #840]	; (800a37c <USER_SET_Command+0xdfc>)
 800a034:	f7f9 fa96 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d100      	bne.n	800a03e <USER_SET_Command+0xabe>
 800a03c:	e0e7      	b.n	800a20e <USER_SET_Command+0xc8e>
				Error_Handler();
 800a03e:	f7fe fc73 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a042:	4bcd      	ldr	r3, [pc, #820]	; (800a378 <USER_SET_Command+0xdf8>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0fb      	beq.n	800a042 <USER_SET_Command+0xac2>


		}
		HAL_Delay((int)(1000/odr_xl_value)+1);
 800a04a:	20fa      	movs	r0, #250	; 0xfa
 800a04c:	4bcc      	ldr	r3, [pc, #816]	; (800a380 <USER_SET_Command+0xe00>)
 800a04e:	0080      	lsls	r0, r0, #2
 800a050:	8819      	ldrh	r1, [r3, #0]
 800a052:	f7f6 f907 	bl	8000264 <__divsi3>
 800a056:	3001      	adds	r0, #1
 800a058:	f7f8 fe8e 	bl	8002d78 <HAL_Delay>
		memrx=0;
 800a05c:	2300      	movs	r3, #0
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800a05e:	220f      	movs	r2, #15
		memrx=0;
 800a060:	4cc8      	ldr	r4, [pc, #800]	; (800a384 <USER_SET_Command+0xe04>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800a062:	446a      	add	r2, sp
		memrx=0;
 800a064:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800a066:	3301      	adds	r3, #1
 800a068:	9200      	str	r2, [sp, #0]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	221b      	movs	r2, #27
 800a06e:	21d6      	movs	r1, #214	; 0xd6
 800a070:	48c2      	ldr	r0, [pc, #776]	; (800a37c <USER_SET_Command+0xdfc>)
 800a072:	f7f9 fb1d 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800a076:	2800      	cmp	r0, #0
 800a078:	d001      	beq.n	800a07e <USER_SET_Command+0xafe>
		{
			Error_Handler();
 800a07a:	f7fe fc55 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800a07e:	7823      	ldrb	r3, [r4, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0fc      	beq.n	800a07e <USER_SET_Command+0xafe>
	}




	if(!strncmp(instruction_final+4,"WK_THS:",7))
 800a084:	2207      	movs	r2, #7
 800a086:	49c0      	ldr	r1, [pc, #768]	; (800a388 <USER_SET_Command+0xe08>)
 800a088:	48c0      	ldr	r0, [pc, #768]	; (800a38c <USER_SET_Command+0xe0c>)
 800a08a:	f001 fe67 	bl	800bd5c <strncmp>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d134      	bne.n	800a0fc <USER_SET_Command+0xb7c>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a092:	260b      	movs	r6, #11
 800a094:	2301      	movs	r3, #1
		memrx=0;
 800a096:	4cbb      	ldr	r4, [pc, #748]	; (800a384 <USER_SET_Command+0xe04>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a098:	446e      	add	r6, sp
		memrx=0;
 800a09a:	7020      	strb	r0, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a09c:	225b      	movs	r2, #91	; 0x5b
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	9600      	str	r6, [sp, #0]
 800a0a2:	21d6      	movs	r1, #214	; 0xd6
 800a0a4:	48b5      	ldr	r0, [pc, #724]	; (800a37c <USER_SET_Command+0xdfc>)
 800a0a6:	f7f9 fb03 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d001      	beq.n	800a0b2 <USER_SET_Command+0xb32>
		{
			Error_Handler();
 800a0ae:	f7fe fc3b 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800a0b2:	7823      	ldrb	r3, [r4, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0fc      	beq.n	800a0b2 <USER_SET_Command+0xb32>




		wk_ths=atoi(instruction_final+11);
 800a0b8:	48b5      	ldr	r0, [pc, #724]	; (800a390 <USER_SET_Command+0xe10>)
 800a0ba:	f001 fde2 	bl	800bc82 <atoi>
 800a0be:	b2c3      	uxtb	r3, r0

		if (wk_ths>0 && wk_ths<64)
 800a0c0:	1e5a      	subs	r2, r3, #1
		wk_ths=atoi(instruction_final+11);
 800a0c2:	0004      	movs	r4, r0
		if (wk_ths>0 && wk_ths<64)
 800a0c4:	2a3e      	cmp	r2, #62	; 0x3e
 800a0c6:	d819      	bhi.n	800a0fc <USER_SET_Command+0xb7c>
		{
			memtx=0;
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	49ab      	ldr	r1, [pc, #684]	; (800a378 <USER_SET_Command+0xdf8>)
			wake_up_ths&=~0b00111111;
			wake_up_ths|=wk_ths;


			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a0cc:	2501      	movs	r5, #1
			memtx=0;
 800a0ce:	700a      	strb	r2, [r1, #0]
			wake_up_ths&=~0b00111111;
 800a0d0:	213f      	movs	r1, #63	; 0x3f
 800a0d2:	7832      	ldrb	r2, [r6, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a0d4:	48a9      	ldr	r0, [pc, #676]	; (800a37c <USER_SET_Command+0xdfc>)
			wake_up_ths&=~0b00111111;
 800a0d6:	438a      	bics	r2, r1
			wake_up_ths|=wk_ths;
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	7033      	strb	r3, [r6, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&wake_up_ths,1)!=HAL_OK)
 800a0dc:	225b      	movs	r2, #91	; 0x5b
 800a0de:	9501      	str	r5, [sp, #4]
 800a0e0:	9600      	str	r6, [sp, #0]
 800a0e2:	002b      	movs	r3, r5
 800a0e4:	3197      	adds	r1, #151	; 0x97
 800a0e6:	f7f9 fa3d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d100      	bne.n	800a0f0 <USER_SET_Command+0xb70>
 800a0ee:	e171      	b.n	800a3d4 <USER_SET_Command+0xe54>
			{
				Error_Handler();
 800a0f0:	f7fe fc1a 	bl	8008928 <Error_Handler>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
				memset(instruction_final,0,25);
			}


			while(memtx==0);
 800a0f4:	4ba0      	ldr	r3, [pc, #640]	; (800a378 <USER_SET_Command+0xdf8>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0fb      	beq.n	800a0f4 <USER_SET_Command+0xb74>



	}

	if(!strncmp(instruction_final+4,"WAKE_DUR:",9))
 800a0fc:	2209      	movs	r2, #9
 800a0fe:	49a5      	ldr	r1, [pc, #660]	; (800a394 <USER_SET_Command+0xe14>)
 800a100:	48a2      	ldr	r0, [pc, #648]	; (800a38c <USER_SET_Command+0xe0c>)
 800a102:	f001 fe2b 	bl	800bd5c <strncmp>
 800a106:	2800      	cmp	r0, #0
 800a108:	d133      	bne.n	800a172 <USER_SET_Command+0xbf2>
	{
		memrx=0;
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 800a10a:	2301      	movs	r3, #1
		memrx=0;
 800a10c:	4c9d      	ldr	r4, [pc, #628]	; (800a384 <USER_SET_Command+0xe04>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 800a10e:	ae03      	add	r6, sp, #12
		memrx=0;
 800a110:	7020      	strb	r0, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 800a112:	225c      	movs	r2, #92	; 0x5c
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	9600      	str	r6, [sp, #0]
 800a118:	21d6      	movs	r1, #214	; 0xd6
 800a11a:	4898      	ldr	r0, [pc, #608]	; (800a37c <USER_SET_Command+0xdfc>)
 800a11c:	f7f9 fac8 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800a120:	2800      	cmp	r0, #0
 800a122:	d001      	beq.n	800a128 <USER_SET_Command+0xba8>
		{
			Error_Handler();
 800a124:	f7fe fc00 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800a128:	7823      	ldrb	r3, [r4, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0fc      	beq.n	800a128 <USER_SET_Command+0xba8>




		wake_dur=atoi(instruction_final+13);
 800a12e:	489a      	ldr	r0, [pc, #616]	; (800a398 <USER_SET_Command+0xe18>)
 800a130:	f001 fda7 	bl	800bc82 <atoi>

		if (wake_dur>=0 && wake_dur<4)
 800a134:	b2c3      	uxtb	r3, r0
		wake_dur=atoi(instruction_final+13);
 800a136:	0004      	movs	r4, r0
		if (wake_dur>=0 && wake_dur<4)
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d81a      	bhi.n	800a172 <USER_SET_Command+0xbf2>
		{
			memtx=0;
 800a13c:	2300      	movs	r3, #0
			wake_up_dur&=~0b01100000;
 800a13e:	2160      	movs	r1, #96	; 0x60
			wake_up_dur|=(wake_dur<<5);


			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 800a140:	2501      	movs	r5, #1
			memtx=0;
 800a142:	4a8d      	ldr	r2, [pc, #564]	; (800a378 <USER_SET_Command+0xdf8>)
 800a144:	7013      	strb	r3, [r2, #0]
			wake_up_dur&=~0b01100000;
 800a146:	7832      	ldrb	r2, [r6, #0]
			wake_up_dur|=(wake_dur<<5);
 800a148:	0143      	lsls	r3, r0, #5
			wake_up_dur&=~0b01100000;
 800a14a:	438a      	bics	r2, r1
			wake_up_dur|=(wake_dur<<5);
 800a14c:	4313      	orrs	r3, r2
 800a14e:	7033      	strb	r3, [r6, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&wake_up_dur,1)!=HAL_OK)
 800a150:	225c      	movs	r2, #92	; 0x5c
 800a152:	9501      	str	r5, [sp, #4]
 800a154:	9600      	str	r6, [sp, #0]
 800a156:	002b      	movs	r3, r5
 800a158:	3176      	adds	r1, #118	; 0x76
 800a15a:	4888      	ldr	r0, [pc, #544]	; (800a37c <USER_SET_Command+0xdfc>)
 800a15c:	f7f9 fa02 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a160:	2800      	cmp	r0, #0
 800a162:	d100      	bne.n	800a166 <USER_SET_Command+0xbe6>
 800a164:	e16a      	b.n	800a43c <USER_SET_Command+0xebc>
			{
				Error_Handler();
 800a166:	f7fe fbdf 	bl	8008928 <Error_Handler>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
				memset(instruction_final,0,25);
			}


			while(memtx==0);
 800a16a:	4b83      	ldr	r3, [pc, #524]	; (800a378 <USER_SET_Command+0xdf8>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0fb      	beq.n	800a16a <USER_SET_Command+0xbea>





	if(!strncmp(instruction_final+4,"ODR_XL:",7))
 800a172:	2207      	movs	r2, #7
 800a174:	4989      	ldr	r1, [pc, #548]	; (800a39c <USER_SET_Command+0xe1c>)
 800a176:	4885      	ldr	r0, [pc, #532]	; (800a38c <USER_SET_Command+0xe0c>)
 800a178:	f001 fdf0 	bl	800bd5c <strncmp>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d000      	beq.n	800a182 <USER_SET_Command+0xc02>
 800a180:	e228      	b.n	800a5d4 <USER_SET_Command+0x1054>
	{
		memrx=0;
 800a182:	4b80      	ldr	r3, [pc, #512]	; (800a384 <USER_SET_Command+0xe04>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a184:	240a      	movs	r4, #10
		memrx=0;
 800a186:	7018      	strb	r0, [r3, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a188:	2301      	movs	r3, #1
 800a18a:	446c      	add	r4, sp
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	9400      	str	r4, [sp, #0]
 800a190:	2210      	movs	r2, #16
 800a192:	21d6      	movs	r1, #214	; 0xd6
 800a194:	4879      	ldr	r0, [pc, #484]	; (800a37c <USER_SET_Command+0xdfc>)
 800a196:	f7f9 fa8b 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d001      	beq.n	800a1a2 <USER_SET_Command+0xc22>
		{
			Error_Handler();
 800a19e:	f7fe fbc3 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800a1a2:	4b78      	ldr	r3, [pc, #480]	; (800a384 <USER_SET_Command+0xe04>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0fb      	beq.n	800a1a2 <USER_SET_Command+0xc22>




		switch(atoi(instruction_final+11))
 800a1aa:	4879      	ldr	r0, [pc, #484]	; (800a390 <USER_SET_Command+0xe10>)
 800a1ac:	f001 fd69 	bl	800bc82 <atoi>
 800a1b0:	0005      	movs	r5, r0
 800a1b2:	28d0      	cmp	r0, #208	; 0xd0
 800a1b4:	d100      	bne.n	800a1b8 <USER_SET_Command+0xc38>
 800a1b6:	e326      	b.n	800a806 <USER_SET_Command+0x1286>
 800a1b8:	dd00      	ble.n	800a1bc <USER_SET_Command+0xc3c>
 800a1ba:	e18e      	b.n	800a4da <USER_SET_Command+0xf5a>
 800a1bc:	281a      	cmp	r0, #26
 800a1be:	d100      	bne.n	800a1c2 <USER_SET_Command+0xc42>
 800a1c0:	e264      	b.n	800a68c <USER_SET_Command+0x110c>
 800a1c2:	dd00      	ble.n	800a1c6 <USER_SET_Command+0xc46>
 800a1c4:	e167      	b.n	800a496 <USER_SET_Command+0xf16>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d100      	bne.n	800a1cc <USER_SET_Command+0xc4c>
 800a1ca:	e1d5      	b.n	800a578 <USER_SET_Command+0xff8>
 800a1cc:	280d      	cmp	r0, #13
 800a1ce:	d100      	bne.n	800a1d2 <USER_SET_Command+0xc52>
 800a1d0:	e222      	b.n	800a618 <USER_SET_Command+0x1098>
			while(memtx==0);

			break;

		default:
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2102      	movs	r1, #2
 800a1d6:	4872      	ldr	r0, [pc, #456]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a1d8:	f7f8 ffe6 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800a1dc:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is incorrect\r\n",strlen("\r\nAccelerometer Output data rate is incorrect\r\n"))!=HAL_OK)
 800a1de:	222f      	movs	r2, #47	; 0x2f
 800a1e0:	4970      	ldr	r1, [pc, #448]	; (800a3a4 <USER_SET_Command+0xe24>)
 800a1e2:	4871      	ldr	r0, [pc, #452]	; (800a3a8 <USER_SET_Command+0xe28>)
			uarttx_req=1;
 800a1e4:	703b      	strb	r3, [r7, #0]
			if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is incorrect\r\n",strlen("\r\nAccelerometer Output data rate is incorrect\r\n"))!=HAL_OK)
 800a1e6:	f7fa fd6b 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d001      	beq.n	800a1f2 <USER_SET_Command+0xc72>
			{
				Error_Handler();
 800a1ee:	f7fe fb9b 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 800a1f2:	783b      	ldrb	r3, [r7, #0]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d0fc      	beq.n	800a1f2 <USER_SET_Command+0xc72>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2102      	movs	r1, #2
 800a1fc:	4868      	ldr	r0, [pc, #416]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a1fe:	f7f8 ffd3 	bl	80031a8 <HAL_GPIO_WritePin>
			memset(instruction_final,0,25);
 800a202:	2219      	movs	r2, #25
 800a204:	2100      	movs	r1, #0
 800a206:	4869      	ldr	r0, [pc, #420]	; (800a3ac <USER_SET_Command+0xe2c>)
 800a208:	f001 fd75 	bl	800bcf6 <memset>

			break;
 800a20c:	e1ca      	b.n	800a5a4 <USER_SET_Command+0x1024>
				mg_per_LSB =0.061;
 800a20e:	4a68      	ldr	r2, [pc, #416]	; (800a3b0 <USER_SET_Command+0xe30>)
 800a210:	4b68      	ldr	r3, [pc, #416]	; (800a3b4 <USER_SET_Command+0xe34>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a212:	0029      	movs	r1, r5
				mg_per_LSB =0.061;
 800a214:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a216:	4862      	ldr	r0, [pc, #392]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a218:	0032      	movs	r2, r6
 800a21a:	f7f8 ffc5 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 2 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 800a21e:	2232      	movs	r2, #50	; 0x32
 800a220:	4965      	ldr	r1, [pc, #404]	; (800a3b8 <USER_SET_Command+0xe38>)
 800a222:	4861      	ldr	r0, [pc, #388]	; (800a3a8 <USER_SET_Command+0xe28>)
				uarttx_req=1;
 800a224:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 2 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 800a226:	f7fa fd4b 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d001      	beq.n	800a232 <USER_SET_Command+0xcb2>
					Error_Handler();
 800a22e:	f7fe fb7b 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a232:	783b      	ldrb	r3, [r7, #0]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d0fc      	beq.n	800a232 <USER_SET_Command+0xcb2>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a238:	2200      	movs	r2, #0
 800a23a:	2102      	movs	r1, #2
 800a23c:	4858      	ldr	r0, [pc, #352]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a23e:	f7f8 ffb3 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a242:	2219      	movs	r2, #25
 800a244:	2100      	movs	r1, #0
 800a246:	4859      	ldr	r0, [pc, #356]	; (800a3ac <USER_SET_Command+0xe2c>)
 800a248:	f001 fd55 	bl	800bcf6 <memset>
 800a24c:	e6f9      	b.n	800a042 <USER_SET_Command+0xac2>
			memtx=0;
 800a24e:	2300      	movs	r3, #0
			ctrl1_xl&=~0b00001100;
 800a250:	220c      	movs	r2, #12
			memtx=0;
 800a252:	4e49      	ldr	r6, [pc, #292]	; (800a378 <USER_SET_Command+0xdf8>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a254:	2501      	movs	r5, #1
			memtx=0;
 800a256:	7033      	strb	r3, [r6, #0]
			ctrl1_xl&=~0b00001100;
 800a258:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a25a:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0b00001100;
 800a25c:	4393      	bics	r3, r2
 800a25e:	001a      	movs	r2, r3
			ctrl1_xl|=0b00001000;
 800a260:	2308      	movs	r3, #8
 800a262:	4313      	orrs	r3, r2
 800a264:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a266:	2210      	movs	r2, #16
 800a268:	9501      	str	r5, [sp, #4]
 800a26a:	9400      	str	r4, [sp, #0]
 800a26c:	002b      	movs	r3, r5
 800a26e:	4843      	ldr	r0, [pc, #268]	; (800a37c <USER_SET_Command+0xdfc>)
 800a270:	f7f9 f978 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a274:	2800      	cmp	r0, #0
 800a276:	d005      	beq.n	800a284 <USER_SET_Command+0xd04>
				Error_Handler();
 800a278:	f7fe fb56 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a27c:	7833      	ldrb	r3, [r6, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0fc      	beq.n	800a27c <USER_SET_Command+0xcfc>
 800a282:	e6e2      	b.n	800a04a <USER_SET_Command+0xaca>
				mg_per_LSB =  0.122;
 800a284:	4a4d      	ldr	r2, [pc, #308]	; (800a3bc <USER_SET_Command+0xe3c>)
 800a286:	4b4b      	ldr	r3, [pc, #300]	; (800a3b4 <USER_SET_Command+0xe34>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a288:	2102      	movs	r1, #2
				mg_per_LSB =  0.122;
 800a28a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a28c:	4844      	ldr	r0, [pc, #272]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a28e:	002a      	movs	r2, r5
 800a290:	f7f8 ff8a 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 4 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 4 g \r\n"))!=HAL_OK)
 800a294:	2232      	movs	r2, #50	; 0x32
 800a296:	494a      	ldr	r1, [pc, #296]	; (800a3c0 <USER_SET_Command+0xe40>)
 800a298:	4843      	ldr	r0, [pc, #268]	; (800a3a8 <USER_SET_Command+0xe28>)
				uarttx_req=1;
 800a29a:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 4 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 4 g \r\n"))!=HAL_OK)
 800a29c:	f7fa fd10 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d001      	beq.n	800a2a8 <USER_SET_Command+0xd28>
					Error_Handler();
 800a2a4:	f7fe fb40 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a2a8:	783b      	ldrb	r3, [r7, #0]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d0fc      	beq.n	800a2a8 <USER_SET_Command+0xd28>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2102      	movs	r1, #2
 800a2b2:	483b      	ldr	r0, [pc, #236]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a2b4:	f7f8 ff78 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a2b8:	2219      	movs	r2, #25
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	483b      	ldr	r0, [pc, #236]	; (800a3ac <USER_SET_Command+0xe2c>)
 800a2be:	f001 fd1a 	bl	800bcf6 <memset>
 800a2c2:	e7db      	b.n	800a27c <USER_SET_Command+0xcfc>
			memtx=0;
 800a2c4:	2300      	movs	r3, #0
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a2c6:	2501      	movs	r5, #1
			memtx=0;
 800a2c8:	4e2b      	ldr	r6, [pc, #172]	; (800a378 <USER_SET_Command+0xdf8>)
			ctrl1_xl&=~0b00001100;
 800a2ca:	7822      	ldrb	r2, [r4, #0]
			memtx=0;
 800a2cc:	7033      	strb	r3, [r6, #0]
			ctrl1_xl&=~0b00001100;
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	439a      	bics	r2, r3
			ctrl1_xl|=0b00001100;
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a2d6:	2210      	movs	r2, #16
 800a2d8:	9501      	str	r5, [sp, #4]
 800a2da:	9400      	str	r4, [sp, #0]
 800a2dc:	002b      	movs	r3, r5
 800a2de:	21d6      	movs	r1, #214	; 0xd6
 800a2e0:	4826      	ldr	r0, [pc, #152]	; (800a37c <USER_SET_Command+0xdfc>)
 800a2e2:	f7f9 f93f 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d005      	beq.n	800a2f6 <USER_SET_Command+0xd76>
				Error_Handler();
 800a2ea:	f7fe fb1d 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a2ee:	7833      	ldrb	r3, [r6, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0fc      	beq.n	800a2ee <USER_SET_Command+0xd6e>
 800a2f4:	e6a9      	b.n	800a04a <USER_SET_Command+0xaca>
				mg_per_LSB = 0.244;
 800a2f6:	4a33      	ldr	r2, [pc, #204]	; (800a3c4 <USER_SET_Command+0xe44>)
 800a2f8:	4b2e      	ldr	r3, [pc, #184]	; (800a3b4 <USER_SET_Command+0xe34>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a2fa:	2102      	movs	r1, #2
				mg_per_LSB = 0.244;
 800a2fc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a2fe:	4828      	ldr	r0, [pc, #160]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a300:	002a      	movs	r2, r5
 800a302:	f7f8 ff51 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 8 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 800a306:	2232      	movs	r2, #50	; 0x32
 800a308:	492f      	ldr	r1, [pc, #188]	; (800a3c8 <USER_SET_Command+0xe48>)
 800a30a:	4827      	ldr	r0, [pc, #156]	; (800a3a8 <USER_SET_Command+0xe28>)
				uarttx_req=1;
 800a30c:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 8 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 8 g \r\n"))!=HAL_OK)
 800a30e:	f7fa fcd7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a312:	2800      	cmp	r0, #0
 800a314:	d001      	beq.n	800a31a <USER_SET_Command+0xd9a>
					Error_Handler();
 800a316:	f7fe fb07 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a31a:	783b      	ldrb	r3, [r7, #0]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d0fc      	beq.n	800a31a <USER_SET_Command+0xd9a>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a320:	2200      	movs	r2, #0
 800a322:	2102      	movs	r1, #2
 800a324:	481e      	ldr	r0, [pc, #120]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a326:	f7f8 ff3f 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a32a:	2219      	movs	r2, #25
 800a32c:	2100      	movs	r1, #0
 800a32e:	481f      	ldr	r0, [pc, #124]	; (800a3ac <USER_SET_Command+0xe2c>)
 800a330:	f001 fce1 	bl	800bcf6 <memset>
 800a334:	e7db      	b.n	800a2ee <USER_SET_Command+0xd6e>
				mg_per_LSB =  0.488;
 800a336:	4a25      	ldr	r2, [pc, #148]	; (800a3cc <USER_SET_Command+0xe4c>)
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <USER_SET_Command+0xe34>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a33a:	2102      	movs	r1, #2
				mg_per_LSB =  0.488;
 800a33c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a33e:	4818      	ldr	r0, [pc, #96]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a340:	0032      	movs	r2, r6
 800a342:	f7f8 ff31 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 16 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 16 g \r\n"))!=HAL_OK)
 800a346:	2233      	movs	r2, #51	; 0x33
 800a348:	4921      	ldr	r1, [pc, #132]	; (800a3d0 <USER_SET_Command+0xe50>)
 800a34a:	4817      	ldr	r0, [pc, #92]	; (800a3a8 <USER_SET_Command+0xe28>)
				uarttx_req=1;
 800a34c:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer full-scale value now is +/- 16 g \r\n",strlen("\r\nAccelerometer full-scale value now is +/- 16 g \r\n"))!=HAL_OK)
 800a34e:	f7fa fcb7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a352:	2800      	cmp	r0, #0
 800a354:	d001      	beq.n	800a35a <USER_SET_Command+0xdda>
					Error_Handler();
 800a356:	f7fe fae7 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a35a:	783b      	ldrb	r3, [r7, #0]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d0fc      	beq.n	800a35a <USER_SET_Command+0xdda>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a360:	2200      	movs	r2, #0
 800a362:	2102      	movs	r1, #2
 800a364:	480e      	ldr	r0, [pc, #56]	; (800a3a0 <USER_SET_Command+0xe20>)
 800a366:	f7f8 ff1f 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a36a:	2219      	movs	r2, #25
 800a36c:	2100      	movs	r1, #0
 800a36e:	480f      	ldr	r0, [pc, #60]	; (800a3ac <USER_SET_Command+0xe2c>)
 800a370:	f001 fcc1 	bl	800bcf6 <memset>
 800a374:	e633      	b.n	8009fde <USER_SET_Command+0xa5e>
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	2000026a 	.word	0x2000026a
 800a37c:	200003a0 	.word	0x200003a0
 800a380:	20000480 	.word	0x20000480
 800a384:	20000269 	.word	0x20000269
 800a388:	0800f6e4 	.word	0x0800f6e4
 800a38c:	2000023a 	.word	0x2000023a
 800a390:	20000241 	.word	0x20000241
 800a394:	0800f71c 	.word	0x0800f71c
 800a398:	20000243 	.word	0x20000243
 800a39c:	0800f726 	.word	0x0800f726
 800a3a0:	48000400 	.word	0x48000400
 800a3a4:	0800f72e 	.word	0x0800f72e
 800a3a8:	20000510 	.word	0x20000510
 800a3ac:	20000236 	.word	0x20000236
 800a3b0:	3d79db23 	.word	0x3d79db23
 800a3b4:	2000047c 	.word	0x2000047c
 800a3b8:	0800f019 	.word	0x0800f019
 800a3bc:	3df9db23 	.word	0x3df9db23
 800a3c0:	0800f04c 	.word	0x0800f04c
 800a3c4:	3e79db23 	.word	0x3e79db23
 800a3c8:	0800f07f 	.word	0x0800f07f
 800a3cc:	3ef9db23 	.word	0x3ef9db23
 800a3d0:	0800f0b2 	.word	0x0800f0b2
				sprintf(out_string,"\r\nActivity/Inactivity threshold Now is %d mg \r\n",((int)(wk_ths*32768*mg_per_LSB)/64));
 800a3d4:	b2e0      	uxtb	r0, r4
 800a3d6:	03c0      	lsls	r0, r0, #15
 800a3d8:	f7f6 fd88 	bl	8000eec <__aeabi_i2f>
 800a3dc:	4bc8      	ldr	r3, [pc, #800]	; (800a700 <USER_SET_Command+0x1180>)
 800a3de:	6819      	ldr	r1, [r3, #0]
 800a3e0:	f7f6 fc44 	bl	8000c6c <__aeabi_fmul>
 800a3e4:	f7f6 fd62 	bl	8000eac <__aeabi_f2iz>
 800a3e8:	233f      	movs	r3, #63	; 0x3f
 800a3ea:	17c2      	asrs	r2, r0, #31
 800a3ec:	401a      	ands	r2, r3
 800a3ee:	4cc5      	ldr	r4, [pc, #788]	; (800a704 <USER_SET_Command+0x1184>)
 800a3f0:	1812      	adds	r2, r2, r0
 800a3f2:	1192      	asrs	r2, r2, #6
 800a3f4:	49c4      	ldr	r1, [pc, #784]	; (800a708 <USER_SET_Command+0x1188>)
 800a3f6:	0020      	movs	r0, r4
 800a3f8:	f001 fc86 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a3fc:	002a      	movs	r2, r5
 800a3fe:	2102      	movs	r1, #2
 800a400:	48c2      	ldr	r0, [pc, #776]	; (800a70c <USER_SET_Command+0x118c>)
 800a402:	f7f8 fed1 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800a406:	0020      	movs	r0, r4
				uarttx_req=1;
 800a408:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800a40a:	f7f5 fe7b 	bl	8000104 <strlen>
 800a40e:	0021      	movs	r1, r4
 800a410:	b282      	uxth	r2, r0
 800a412:	48bf      	ldr	r0, [pc, #764]	; (800a710 <USER_SET_Command+0x1190>)
 800a414:	f7fa fc54 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d001      	beq.n	800a420 <USER_SET_Command+0xea0>
					Error_Handler();
 800a41c:	f7fe fa84 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a420:	783b      	ldrb	r3, [r7, #0]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d0fc      	beq.n	800a420 <USER_SET_Command+0xea0>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a426:	2200      	movs	r2, #0
 800a428:	2102      	movs	r1, #2
 800a42a:	48b8      	ldr	r0, [pc, #736]	; (800a70c <USER_SET_Command+0x118c>)
 800a42c:	f7f8 febc 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a430:	2219      	movs	r2, #25
 800a432:	2100      	movs	r1, #0
 800a434:	48b7      	ldr	r0, [pc, #732]	; (800a714 <USER_SET_Command+0x1194>)
 800a436:	f001 fc5e 	bl	800bcf6 <memset>
 800a43a:	e65b      	b.n	800a0f4 <USER_SET_Command+0xb74>
				sprintf(out_string,"\r\n Duration for Activity detection is %d us\r\n",(int)wake_dur*1000*1000/odr_xl_value);
 800a43c:	4bb6      	ldr	r3, [pc, #728]	; (800a718 <USER_SET_Command+0x1198>)
 800a43e:	b2e0      	uxtb	r0, r4
 800a440:	4cb6      	ldr	r4, [pc, #728]	; (800a71c <USER_SET_Command+0x119c>)
 800a442:	8819      	ldrh	r1, [r3, #0]
 800a444:	4360      	muls	r0, r4
 800a446:	f7f5 ff0d 	bl	8000264 <__divsi3>
 800a44a:	4cae      	ldr	r4, [pc, #696]	; (800a704 <USER_SET_Command+0x1184>)
 800a44c:	0002      	movs	r2, r0
 800a44e:	49b4      	ldr	r1, [pc, #720]	; (800a720 <USER_SET_Command+0x11a0>)
 800a450:	0020      	movs	r0, r4
 800a452:	f001 fc59 	bl	800bd08 <siprintf>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a456:	002a      	movs	r2, r5
 800a458:	2102      	movs	r1, #2
 800a45a:	48ac      	ldr	r0, [pc, #688]	; (800a70c <USER_SET_Command+0x118c>)
 800a45c:	f7f8 fea4 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800a460:	0020      	movs	r0, r4
				uarttx_req=1;
 800a462:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800a464:	f7f5 fe4e 	bl	8000104 <strlen>
 800a468:	0021      	movs	r1, r4
 800a46a:	b282      	uxth	r2, r0
 800a46c:	48a8      	ldr	r0, [pc, #672]	; (800a710 <USER_SET_Command+0x1190>)
 800a46e:	f7fa fc27 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a472:	2800      	cmp	r0, #0
 800a474:	d001      	beq.n	800a47a <USER_SET_Command+0xefa>
					Error_Handler();
 800a476:	f7fe fa57 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a47a:	783b      	ldrb	r3, [r7, #0]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d0fc      	beq.n	800a47a <USER_SET_Command+0xefa>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a480:	2200      	movs	r2, #0
 800a482:	2102      	movs	r1, #2
 800a484:	48a1      	ldr	r0, [pc, #644]	; (800a70c <USER_SET_Command+0x118c>)
 800a486:	f7f8 fe8f 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a48a:	2219      	movs	r2, #25
 800a48c:	2100      	movs	r1, #0
 800a48e:	48a1      	ldr	r0, [pc, #644]	; (800a714 <USER_SET_Command+0x1194>)
 800a490:	f001 fc31 	bl	800bcf6 <memset>
 800a494:	e669      	b.n	800a16a <USER_SET_Command+0xbea>
		switch(atoi(instruction_final+11))
 800a496:	2834      	cmp	r0, #52	; 0x34
 800a498:	d100      	bne.n	800a49c <USER_SET_Command+0xf1c>
 800a49a:	e159      	b.n	800a750 <USER_SET_Command+0x11d0>
 800a49c:	2868      	cmp	r0, #104	; 0x68
 800a49e:	d000      	beq.n	800a4a2 <USER_SET_Command+0xf22>
 800a4a0:	e697      	b.n	800a1d2 <USER_SET_Command+0xc52>
			memtx=0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	4a9f      	ldr	r2, [pc, #636]	; (800a724 <USER_SET_Command+0x11a4>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a4a6:	2601      	movs	r6, #1
			memtx=0;
 800a4a8:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a4aa:	220f      	movs	r2, #15
 800a4ac:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a4ae:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a4b0:	401a      	ands	r2, r3
			ctrl1_xl|=0x40;
 800a4b2:	2340      	movs	r3, #64	; 0x40
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a4b8:	2210      	movs	r2, #16
 800a4ba:	9601      	str	r6, [sp, #4]
 800a4bc:	9400      	str	r4, [sp, #0]
 800a4be:	0033      	movs	r3, r6
 800a4c0:	4899      	ldr	r0, [pc, #612]	; (800a728 <USER_SET_Command+0x11a8>)
 800a4c2:	f7f9 f84f 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d100      	bne.n	800a4cc <USER_SET_Command+0xf4c>
 800a4ca:	e17c      	b.n	800a7c6 <USER_SET_Command+0x1246>
				Error_Handler();
 800a4cc:	f7fe fa2c 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a4d0:	4b94      	ldr	r3, [pc, #592]	; (800a724 <USER_SET_Command+0x11a4>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0fb      	beq.n	800a4d0 <USER_SET_Command+0xf50>
 800a4d8:	e064      	b.n	800a5a4 <USER_SET_Command+0x1024>
		switch(atoi(instruction_final+11))
 800a4da:	4b94      	ldr	r3, [pc, #592]	; (800a72c <USER_SET_Command+0x11ac>)
 800a4dc:	4298      	cmp	r0, r3
 800a4de:	d100      	bne.n	800a4e2 <USER_SET_Command+0xf62>
 800a4e0:	e226      	b.n	800a930 <USER_SET_Command+0x13b0>
 800a4e2:	dc24      	bgt.n	800a52e <USER_SET_Command+0xfae>
 800a4e4:	23d0      	movs	r3, #208	; 0xd0
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	4298      	cmp	r0, r3
 800a4ea:	d100      	bne.n	800a4ee <USER_SET_Command+0xf6e>
 800a4ec:	e1c5      	b.n	800a87a <USER_SET_Command+0x12fa>
 800a4ee:	4b90      	ldr	r3, [pc, #576]	; (800a730 <USER_SET_Command+0x11b0>)
 800a4f0:	4298      	cmp	r0, r3
 800a4f2:	d000      	beq.n	800a4f6 <USER_SET_Command+0xf76>
 800a4f4:	e66d      	b.n	800a1d2 <USER_SET_Command+0xc52>
			memtx=0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	4a8a      	ldr	r2, [pc, #552]	; (800a724 <USER_SET_Command+0x11a4>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a4fa:	2601      	movs	r6, #1
			memtx=0;
 800a4fc:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a4fe:	220f      	movs	r2, #15
 800a500:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a502:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a504:	401a      	ands	r2, r3
			ctrl1_xl|=0x70;
 800a506:	2370      	movs	r3, #112	; 0x70
 800a508:	4313      	orrs	r3, r2
 800a50a:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a50c:	2210      	movs	r2, #16
 800a50e:	9601      	str	r6, [sp, #4]
 800a510:	9400      	str	r4, [sp, #0]
 800a512:	0033      	movs	r3, r6
 800a514:	4884      	ldr	r0, [pc, #528]	; (800a728 <USER_SET_Command+0x11a8>)
 800a516:	f7f9 f825 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d100      	bne.n	800a520 <USER_SET_Command+0xfa0>
 800a51e:	e1e7      	b.n	800a8f0 <USER_SET_Command+0x1370>
				Error_Handler();
 800a520:	f7fe fa02 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a524:	4b7f      	ldr	r3, [pc, #508]	; (800a724 <USER_SET_Command+0x11a4>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d0fb      	beq.n	800a524 <USER_SET_Command+0xfa4>
 800a52c:	e03a      	b.n	800a5a4 <USER_SET_Command+0x1024>
		switch(atoi(instruction_final+11))
 800a52e:	4b81      	ldr	r3, [pc, #516]	; (800a734 <USER_SET_Command+0x11b4>)
 800a530:	4298      	cmp	r0, r3
 800a532:	d100      	bne.n	800a536 <USER_SET_Command+0xfb6>
 800a534:	e237      	b.n	800a9a6 <USER_SET_Command+0x1426>
 800a536:	4b80      	ldr	r3, [pc, #512]	; (800a738 <USER_SET_Command+0x11b8>)
 800a538:	4298      	cmp	r0, r3
 800a53a:	d000      	beq.n	800a53e <USER_SET_Command+0xfbe>
 800a53c:	e649      	b.n	800a1d2 <USER_SET_Command+0xc52>
			memtx=0;
 800a53e:	2300      	movs	r3, #0
 800a540:	4a78      	ldr	r2, [pc, #480]	; (800a724 <USER_SET_Command+0x11a4>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a542:	2601      	movs	r6, #1
			memtx=0;
 800a544:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a546:	220f      	movs	r2, #15
 800a548:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a54a:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a54c:	401a      	ands	r2, r3
			ctrl1_xl|=0xa0;
 800a54e:	2360      	movs	r3, #96	; 0x60
 800a550:	425b      	negs	r3, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a556:	2210      	movs	r2, #16
 800a558:	9601      	str	r6, [sp, #4]
 800a55a:	9400      	str	r4, [sp, #0]
 800a55c:	0033      	movs	r3, r6
 800a55e:	4872      	ldr	r0, [pc, #456]	; (800a728 <USER_SET_Command+0x11a8>)
 800a560:	f7f9 f800 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a564:	2800      	cmp	r0, #0
 800a566:	d100      	bne.n	800a56a <USER_SET_Command+0xfea>
 800a568:	e259      	b.n	800aa1e <USER_SET_Command+0x149e>
				Error_Handler();
 800a56a:	f7fe f9dd 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a56e:	4b6d      	ldr	r3, [pc, #436]	; (800a724 <USER_SET_Command+0x11a4>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0fb      	beq.n	800a56e <USER_SET_Command+0xfee>
 800a576:	e015      	b.n	800a5a4 <USER_SET_Command+0x1024>
			ctrl1_xl&=~0xf0;
 800a578:	220f      	movs	r2, #15
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a57a:	2501      	movs	r5, #1
			ctrl1_xl&=~0xf0;
 800a57c:	7823      	ldrb	r3, [r4, #0]
			memtx=0;
 800a57e:	4e69      	ldr	r6, [pc, #420]	; (800a724 <USER_SET_Command+0x11a4>)
			ctrl1_xl&=~0xf0;
 800a580:	4013      	ands	r3, r2
			memtx=0;
 800a582:	7030      	strb	r0, [r6, #0]
			ctrl1_xl&=~0xf0;
 800a584:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a586:	1952      	adds	r2, r2, r5
 800a588:	9501      	str	r5, [sp, #4]
 800a58a:	9400      	str	r4, [sp, #0]
 800a58c:	002b      	movs	r3, r5
 800a58e:	21d6      	movs	r1, #214	; 0xd6
 800a590:	4865      	ldr	r0, [pc, #404]	; (800a728 <USER_SET_Command+0x11a8>)
 800a592:	f7f8 ffe7 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a596:	2800      	cmp	r0, #0
 800a598:	d01e      	beq.n	800a5d8 <USER_SET_Command+0x1058>
				Error_Handler();
 800a59a:	f7fe f9c5 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a59e:	7833      	ldrb	r3, [r6, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d0fc      	beq.n	800a59e <USER_SET_Command+0x101e>


		}

		HAL_Delay(80);
 800a5a4:	2050      	movs	r0, #80	; 0x50
 800a5a6:	f7f8 fbe7 	bl	8002d78 <HAL_Delay>
		memrx=0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4a63      	ldr	r2, [pc, #396]	; (800a73c <USER_SET_Command+0x11bc>)
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800a5ae:	21d6      	movs	r1, #214	; 0xd6
		memrx=0;
 800a5b0:	7013      	strb	r3, [r2, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800a5b2:	220f      	movs	r2, #15
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	446a      	add	r2, sp
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	9301      	str	r3, [sp, #4]
 800a5bc:	221b      	movs	r2, #27
 800a5be:	485a      	ldr	r0, [pc, #360]	; (800a728 <USER_SET_Command+0x11a8>)
 800a5c0:	f7f9 f876 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d001      	beq.n	800a5cc <USER_SET_Command+0x104c>
		{
			Error_Handler();
 800a5c8:	f7fe f9ae 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800a5cc:	4b5b      	ldr	r3, [pc, #364]	; (800a73c <USER_SET_Command+0x11bc>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0fb      	beq.n	800a5cc <USER_SET_Command+0x104c>





}
 800a5d4:	b005      	add	sp, #20
 800a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				odr_xl_value=0;
 800a5d8:	4b4f      	ldr	r3, [pc, #316]	; (800a718 <USER_SET_Command+0x1198>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a5da:	002a      	movs	r2, r5
				odr_xl_value=0;
 800a5dc:	8018      	strh	r0, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a5de:	2102      	movs	r1, #2
 800a5e0:	484a      	ldr	r0, [pc, #296]	; (800a70c <USER_SET_Command+0x118c>)
 800a5e2:	f7f8 fde1 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n",strlen("\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n"))!=HAL_OK)
 800a5e6:	2240      	movs	r2, #64	; 0x40
 800a5e8:	4955      	ldr	r1, [pc, #340]	; (800a740 <USER_SET_Command+0x11c0>)
 800a5ea:	4849      	ldr	r0, [pc, #292]	; (800a710 <USER_SET_Command+0x1190>)
				uarttx_req=1;
 800a5ec:	703d      	strb	r5, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n",strlen("\r\nAccelerometer is in Powerdown Mode &Output data rate is 0 Hz\r\n"))!=HAL_OK)
 800a5ee:	f7fa fb67 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d001      	beq.n	800a5fa <USER_SET_Command+0x107a>
					Error_Handler();
 800a5f6:	f7fe f997 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a5fa:	4a52      	ldr	r2, [pc, #328]	; (800a744 <USER_SET_Command+0x11c4>)
 800a5fc:	7813      	ldrb	r3, [r2, #0]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d0fc      	beq.n	800a5fc <USER_SET_Command+0x107c>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a602:	2200      	movs	r2, #0
 800a604:	2102      	movs	r1, #2
 800a606:	4841      	ldr	r0, [pc, #260]	; (800a70c <USER_SET_Command+0x118c>)
 800a608:	f7f8 fdce 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a60c:	2219      	movs	r2, #25
 800a60e:	2100      	movs	r1, #0
 800a610:	4840      	ldr	r0, [pc, #256]	; (800a714 <USER_SET_Command+0x1194>)
 800a612:	f001 fb70 	bl	800bcf6 <memset>
 800a616:	e7c2      	b.n	800a59e <USER_SET_Command+0x101e>
			memtx=0;
 800a618:	2300      	movs	r3, #0
 800a61a:	4a42      	ldr	r2, [pc, #264]	; (800a724 <USER_SET_Command+0x11a4>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a61c:	2601      	movs	r6, #1
			memtx=0;
 800a61e:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a620:	220f      	movs	r2, #15
 800a622:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a624:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a626:	4013      	ands	r3, r2
			ctrl1_xl|=0x10;
 800a628:	3201      	adds	r2, #1
 800a62a:	4313      	orrs	r3, r2
 800a62c:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a62e:	483e      	ldr	r0, [pc, #248]	; (800a728 <USER_SET_Command+0x11a8>)
 800a630:	9601      	str	r6, [sp, #4]
 800a632:	9400      	str	r4, [sp, #0]
 800a634:	0033      	movs	r3, r6
 800a636:	f7f8 ff95 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d006      	beq.n	800a64c <USER_SET_Command+0x10cc>
				Error_Handler();
 800a63e:	f7fe f973 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a642:	4b38      	ldr	r3, [pc, #224]	; (800a724 <USER_SET_Command+0x11a4>)
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0fb      	beq.n	800a642 <USER_SET_Command+0x10c2>
 800a64a:	e7ab      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=13;
 800a64c:	4b32      	ldr	r3, [pc, #200]	; (800a718 <USER_SET_Command+0x1198>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a64e:	0032      	movs	r2, r6
 800a650:	2102      	movs	r1, #2
 800a652:	482e      	ldr	r0, [pc, #184]	; (800a70c <USER_SET_Command+0x118c>)
				odr_xl_value=13;
 800a654:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a656:	f7f8 fda7 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 13 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 13 Hz\r\n"))!=HAL_OK)
 800a65a:	222b      	movs	r2, #43	; 0x2b
 800a65c:	493a      	ldr	r1, [pc, #232]	; (800a748 <USER_SET_Command+0x11c8>)
 800a65e:	482c      	ldr	r0, [pc, #176]	; (800a710 <USER_SET_Command+0x1190>)
				uarttx_req=1;
 800a660:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 13 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 13 Hz\r\n"))!=HAL_OK)
 800a662:	f7fa fb2d 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a666:	2800      	cmp	r0, #0
 800a668:	d001      	beq.n	800a66e <USER_SET_Command+0x10ee>
					Error_Handler();
 800a66a:	f7fe f95d 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a66e:	4a35      	ldr	r2, [pc, #212]	; (800a744 <USER_SET_Command+0x11c4>)
 800a670:	7813      	ldrb	r3, [r2, #0]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d0fc      	beq.n	800a670 <USER_SET_Command+0x10f0>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a676:	2200      	movs	r2, #0
 800a678:	2102      	movs	r1, #2
 800a67a:	4824      	ldr	r0, [pc, #144]	; (800a70c <USER_SET_Command+0x118c>)
 800a67c:	f7f8 fd94 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a680:	2219      	movs	r2, #25
 800a682:	2100      	movs	r1, #0
 800a684:	4823      	ldr	r0, [pc, #140]	; (800a714 <USER_SET_Command+0x1194>)
 800a686:	f001 fb36 	bl	800bcf6 <memset>
 800a68a:	e7da      	b.n	800a642 <USER_SET_Command+0x10c2>
			memtx=0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	4a25      	ldr	r2, [pc, #148]	; (800a724 <USER_SET_Command+0x11a4>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a690:	2601      	movs	r6, #1
			memtx=0;
 800a692:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a694:	220f      	movs	r2, #15
 800a696:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a698:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a69a:	401a      	ands	r2, r3
			ctrl1_xl|=0x20;
 800a69c:	2320      	movs	r3, #32
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	9601      	str	r6, [sp, #4]
 800a6a6:	9400      	str	r4, [sp, #0]
 800a6a8:	0033      	movs	r3, r6
 800a6aa:	481f      	ldr	r0, [pc, #124]	; (800a728 <USER_SET_Command+0x11a8>)
 800a6ac:	f7f8 ff5a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d006      	beq.n	800a6c2 <USER_SET_Command+0x1142>
				Error_Handler();
 800a6b4:	f7fe f938 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a6b8:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <USER_SET_Command+0x11a4>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0fb      	beq.n	800a6b8 <USER_SET_Command+0x1138>
 800a6c0:	e770      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=26;
 800a6c2:	4b15      	ldr	r3, [pc, #84]	; (800a718 <USER_SET_Command+0x1198>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a6c4:	0032      	movs	r2, r6
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4810      	ldr	r0, [pc, #64]	; (800a70c <USER_SET_Command+0x118c>)
				odr_xl_value=26;
 800a6ca:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a6cc:	f7f8 fd6c 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 26 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 26 Hz\r\n"))!=HAL_OK)
 800a6d0:	222b      	movs	r2, #43	; 0x2b
 800a6d2:	491e      	ldr	r1, [pc, #120]	; (800a74c <USER_SET_Command+0x11cc>)
 800a6d4:	480e      	ldr	r0, [pc, #56]	; (800a710 <USER_SET_Command+0x1190>)
				uarttx_req=1;
 800a6d6:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 26 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 26 Hz\r\n"))!=HAL_OK)
 800a6d8:	f7fa faf2 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d001      	beq.n	800a6e4 <USER_SET_Command+0x1164>
					Error_Handler();
 800a6e0:	f7fe f922 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a6e4:	783b      	ldrb	r3, [r7, #0]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d0fc      	beq.n	800a6e4 <USER_SET_Command+0x1164>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2102      	movs	r1, #2
 800a6ee:	4807      	ldr	r0, [pc, #28]	; (800a70c <USER_SET_Command+0x118c>)
 800a6f0:	f7f8 fd5a 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a6f4:	2219      	movs	r2, #25
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	4806      	ldr	r0, [pc, #24]	; (800a714 <USER_SET_Command+0x1194>)
 800a6fa:	f001 fafc 	bl	800bcf6 <memset>
 800a6fe:	e7db      	b.n	800a6b8 <USER_SET_Command+0x1138>
 800a700:	2000047c 	.word	0x2000047c
 800a704:	2000026b 	.word	0x2000026b
 800a708:	0800f0ed 	.word	0x0800f0ed
 800a70c:	48000400 	.word	0x48000400
 800a710:	20000510 	.word	0x20000510
 800a714:	20000236 	.word	0x20000236
 800a718:	20000480 	.word	0x20000480
 800a71c:	000f4240 	.word	0x000f4240
 800a720:	0800f126 	.word	0x0800f126
 800a724:	2000026a 	.word	0x2000026a
 800a728:	200003a0 	.word	0x200003a0
 800a72c:	0000067c 	.word	0x0000067c
 800a730:	00000341 	.word	0x00000341
 800a734:	00000d02 	.word	0x00000d02
 800a738:	00001a04 	.word	0x00001a04
 800a73c:	20000269 	.word	0x20000269
 800a740:	0800f15b 	.word	0x0800f15b
 800a744:	20000378 	.word	0x20000378
 800a748:	0800f19c 	.word	0x0800f19c
 800a74c:	0800f1c8 	.word	0x0800f1c8
			memtx=0;
 800a750:	2300      	movs	r3, #0
 800a752:	4ac3      	ldr	r2, [pc, #780]	; (800aa60 <USER_SET_Command+0x14e0>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a754:	2601      	movs	r6, #1
			memtx=0;
 800a756:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a758:	220f      	movs	r2, #15
 800a75a:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a75c:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a75e:	401a      	ands	r2, r3
			ctrl1_xl|=0x30;
 800a760:	2330      	movs	r3, #48	; 0x30
 800a762:	4313      	orrs	r3, r2
 800a764:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a766:	2210      	movs	r2, #16
 800a768:	9601      	str	r6, [sp, #4]
 800a76a:	9400      	str	r4, [sp, #0]
 800a76c:	0033      	movs	r3, r6
 800a76e:	48bd      	ldr	r0, [pc, #756]	; (800aa64 <USER_SET_Command+0x14e4>)
 800a770:	f7f8 fef8 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a774:	2800      	cmp	r0, #0
 800a776:	d006      	beq.n	800a786 <USER_SET_Command+0x1206>
				Error_Handler();
 800a778:	f7fe f8d6 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a77c:	4bb8      	ldr	r3, [pc, #736]	; (800aa60 <USER_SET_Command+0x14e0>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0fb      	beq.n	800a77c <USER_SET_Command+0x11fc>
 800a784:	e70e      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=52;
 800a786:	4bb8      	ldr	r3, [pc, #736]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a788:	0032      	movs	r2, r6
 800a78a:	2102      	movs	r1, #2
 800a78c:	48b7      	ldr	r0, [pc, #732]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=52;
 800a78e:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a790:	f7f8 fd0a 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 52 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 52 Hz\r\n"))!=HAL_OK)
 800a794:	222b      	movs	r2, #43	; 0x2b
 800a796:	49b6      	ldr	r1, [pc, #728]	; (800aa70 <USER_SET_Command+0x14f0>)
 800a798:	48b6      	ldr	r0, [pc, #728]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a79a:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 52 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 52 Hz\r\n"))!=HAL_OK)
 800a79c:	f7fa fa90 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d001      	beq.n	800a7a8 <USER_SET_Command+0x1228>
					Error_Handler();
 800a7a4:	f7fe f8c0 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a7a8:	4ab3      	ldr	r2, [pc, #716]	; (800aa78 <USER_SET_Command+0x14f8>)
 800a7aa:	7813      	ldrb	r3, [r2, #0]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d0fc      	beq.n	800a7aa <USER_SET_Command+0x122a>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	2102      	movs	r1, #2
 800a7b4:	48ad      	ldr	r0, [pc, #692]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a7b6:	f7f8 fcf7 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a7ba:	2219      	movs	r2, #25
 800a7bc:	2100      	movs	r1, #0
 800a7be:	48af      	ldr	r0, [pc, #700]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a7c0:	f001 fa99 	bl	800bcf6 <memset>
 800a7c4:	e7da      	b.n	800a77c <USER_SET_Command+0x11fc>
				odr_xl_value=104;
 800a7c6:	4ba8      	ldr	r3, [pc, #672]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a7c8:	0032      	movs	r2, r6
 800a7ca:	2102      	movs	r1, #2
 800a7cc:	48a7      	ldr	r0, [pc, #668]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=104;
 800a7ce:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a7d0:	f7f8 fcea 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 104 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 104 Hz\r\n"))!=HAL_OK)
 800a7d4:	222c      	movs	r2, #44	; 0x2c
 800a7d6:	49aa      	ldr	r1, [pc, #680]	; (800aa80 <USER_SET_Command+0x1500>)
 800a7d8:	48a6      	ldr	r0, [pc, #664]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a7da:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 104 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 104 Hz\r\n"))!=HAL_OK)
 800a7dc:	f7fa fa70 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d001      	beq.n	800a7e8 <USER_SET_Command+0x1268>
					Error_Handler();
 800a7e4:	f7fe f8a0 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a7e8:	4aa3      	ldr	r2, [pc, #652]	; (800aa78 <USER_SET_Command+0x14f8>)
 800a7ea:	7813      	ldrb	r3, [r2, #0]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d0fc      	beq.n	800a7ea <USER_SET_Command+0x126a>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2102      	movs	r1, #2
 800a7f4:	489d      	ldr	r0, [pc, #628]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a7f6:	f7f8 fcd7 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a7fa:	2219      	movs	r2, #25
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	489f      	ldr	r0, [pc, #636]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a800:	f001 fa79 	bl	800bcf6 <memset>
 800a804:	e664      	b.n	800a4d0 <USER_SET_Command+0xf50>
			memtx=0;
 800a806:	2300      	movs	r3, #0
 800a808:	4a95      	ldr	r2, [pc, #596]	; (800aa60 <USER_SET_Command+0x14e0>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a80a:	2601      	movs	r6, #1
			memtx=0;
 800a80c:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a80e:	220f      	movs	r2, #15
 800a810:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a812:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a814:	401a      	ands	r2, r3
			ctrl1_xl|=0x50;
 800a816:	2350      	movs	r3, #80	; 0x50
 800a818:	4313      	orrs	r3, r2
 800a81a:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a81c:	2210      	movs	r2, #16
 800a81e:	9601      	str	r6, [sp, #4]
 800a820:	9400      	str	r4, [sp, #0]
 800a822:	0033      	movs	r3, r6
 800a824:	488f      	ldr	r0, [pc, #572]	; (800aa64 <USER_SET_Command+0x14e4>)
 800a826:	f7f8 fe9d 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d006      	beq.n	800a83c <USER_SET_Command+0x12bc>
				Error_Handler();
 800a82e:	f7fe f87b 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a832:	4b8b      	ldr	r3, [pc, #556]	; (800aa60 <USER_SET_Command+0x14e0>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0fb      	beq.n	800a832 <USER_SET_Command+0x12b2>
 800a83a:	e6b3      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=208;
 800a83c:	4b8a      	ldr	r3, [pc, #552]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a83e:	0032      	movs	r2, r6
 800a840:	2102      	movs	r1, #2
 800a842:	488a      	ldr	r0, [pc, #552]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=208;
 800a844:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a846:	f7f8 fcaf 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 208 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 208 Hz\r\n"))!=HAL_OK)
 800a84a:	222c      	movs	r2, #44	; 0x2c
 800a84c:	498d      	ldr	r1, [pc, #564]	; (800aa84 <USER_SET_Command+0x1504>)
 800a84e:	4889      	ldr	r0, [pc, #548]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a850:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 208 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 208 Hz\r\n"))!=HAL_OK)
 800a852:	f7fa fa35 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a856:	2800      	cmp	r0, #0
 800a858:	d001      	beq.n	800a85e <USER_SET_Command+0x12de>
					Error_Handler();
 800a85a:	f7fe f865 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a85e:	783b      	ldrb	r3, [r7, #0]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d0fc      	beq.n	800a85e <USER_SET_Command+0x12de>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a864:	2200      	movs	r2, #0
 800a866:	2102      	movs	r1, #2
 800a868:	4880      	ldr	r0, [pc, #512]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a86a:	f7f8 fc9d 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a86e:	2219      	movs	r2, #25
 800a870:	2100      	movs	r1, #0
 800a872:	4882      	ldr	r0, [pc, #520]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a874:	f001 fa3f 	bl	800bcf6 <memset>
 800a878:	e7db      	b.n	800a832 <USER_SET_Command+0x12b2>
			memtx=0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	4a78      	ldr	r2, [pc, #480]	; (800aa60 <USER_SET_Command+0x14e0>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a87e:	2601      	movs	r6, #1
			memtx=0;
 800a880:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a882:	220f      	movs	r2, #15
 800a884:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a886:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a888:	401a      	ands	r2, r3
			ctrl1_xl|=0x60;
 800a88a:	2360      	movs	r3, #96	; 0x60
 800a88c:	4313      	orrs	r3, r2
 800a88e:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a890:	2210      	movs	r2, #16
 800a892:	9601      	str	r6, [sp, #4]
 800a894:	9400      	str	r4, [sp, #0]
 800a896:	0033      	movs	r3, r6
 800a898:	4872      	ldr	r0, [pc, #456]	; (800aa64 <USER_SET_Command+0x14e4>)
 800a89a:	f7f8 fe63 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d006      	beq.n	800a8b0 <USER_SET_Command+0x1330>
				Error_Handler();
 800a8a2:	f7fe f841 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a8a6:	4b6e      	ldr	r3, [pc, #440]	; (800aa60 <USER_SET_Command+0x14e0>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0fb      	beq.n	800a8a6 <USER_SET_Command+0x1326>
 800a8ae:	e679      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=416;
 800a8b0:	4b6d      	ldr	r3, [pc, #436]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a8b2:	0032      	movs	r2, r6
 800a8b4:	2102      	movs	r1, #2
 800a8b6:	486d      	ldr	r0, [pc, #436]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=416;
 800a8b8:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a8ba:	f7f8 fc75 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 416 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 416 Hz\r\n"))!=HAL_OK)
 800a8be:	222c      	movs	r2, #44	; 0x2c
 800a8c0:	4971      	ldr	r1, [pc, #452]	; (800aa88 <USER_SET_Command+0x1508>)
 800a8c2:	486c      	ldr	r0, [pc, #432]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a8c4:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 416 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 416 Hz\r\n"))!=HAL_OK)
 800a8c6:	f7fa f9fb 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d001      	beq.n	800a8d2 <USER_SET_Command+0x1352>
					Error_Handler();
 800a8ce:	f7fe f82b 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a8d2:	4a69      	ldr	r2, [pc, #420]	; (800aa78 <USER_SET_Command+0x14f8>)
 800a8d4:	7813      	ldrb	r3, [r2, #0]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d0fc      	beq.n	800a8d4 <USER_SET_Command+0x1354>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2102      	movs	r1, #2
 800a8de:	4863      	ldr	r0, [pc, #396]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a8e0:	f7f8 fc62 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a8e4:	2219      	movs	r2, #25
 800a8e6:	2100      	movs	r1, #0
 800a8e8:	4864      	ldr	r0, [pc, #400]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a8ea:	f001 fa04 	bl	800bcf6 <memset>
 800a8ee:	e7da      	b.n	800a8a6 <USER_SET_Command+0x1326>
				odr_xl_value=833;
 800a8f0:	4b5d      	ldr	r3, [pc, #372]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a8f2:	0032      	movs	r2, r6
 800a8f4:	2102      	movs	r1, #2
 800a8f6:	485d      	ldr	r0, [pc, #372]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=833;
 800a8f8:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a8fa:	f7f8 fc55 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 833 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 833 Hz\r\n"))!=HAL_OK)
 800a8fe:	222c      	movs	r2, #44	; 0x2c
 800a900:	4962      	ldr	r1, [pc, #392]	; (800aa8c <USER_SET_Command+0x150c>)
 800a902:	485c      	ldr	r0, [pc, #368]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a904:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 833 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 833 Hz\r\n"))!=HAL_OK)
 800a906:	f7fa f9db 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d001      	beq.n	800a912 <USER_SET_Command+0x1392>
					Error_Handler();
 800a90e:	f7fe f80b 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a912:	4a59      	ldr	r2, [pc, #356]	; (800aa78 <USER_SET_Command+0x14f8>)
 800a914:	7813      	ldrb	r3, [r2, #0]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d0fc      	beq.n	800a914 <USER_SET_Command+0x1394>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a91a:	2200      	movs	r2, #0
 800a91c:	2102      	movs	r1, #2
 800a91e:	4853      	ldr	r0, [pc, #332]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a920:	f7f8 fc42 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a924:	2219      	movs	r2, #25
 800a926:	2100      	movs	r1, #0
 800a928:	4854      	ldr	r0, [pc, #336]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a92a:	f001 f9e4 	bl	800bcf6 <memset>
 800a92e:	e5f9      	b.n	800a524 <USER_SET_Command+0xfa4>
			memtx=0;
 800a930:	2300      	movs	r3, #0
 800a932:	4a4b      	ldr	r2, [pc, #300]	; (800aa60 <USER_SET_Command+0x14e0>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a934:	2601      	movs	r6, #1
			memtx=0;
 800a936:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a938:	220f      	movs	r2, #15
 800a93a:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a93c:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a93e:	401a      	ands	r2, r3
			ctrl1_xl|=0x80;
 800a940:	2380      	movs	r3, #128	; 0x80
 800a942:	425b      	negs	r3, r3
 800a944:	4313      	orrs	r3, r2
 800a946:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a948:	2210      	movs	r2, #16
 800a94a:	9601      	str	r6, [sp, #4]
 800a94c:	9400      	str	r4, [sp, #0]
 800a94e:	0033      	movs	r3, r6
 800a950:	4844      	ldr	r0, [pc, #272]	; (800aa64 <USER_SET_Command+0x14e4>)
 800a952:	f7f8 fe07 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a956:	2800      	cmp	r0, #0
 800a958:	d006      	beq.n	800a968 <USER_SET_Command+0x13e8>
				Error_Handler();
 800a95a:	f7fd ffe5 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a95e:	4b40      	ldr	r3, [pc, #256]	; (800aa60 <USER_SET_Command+0x14e0>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0fb      	beq.n	800a95e <USER_SET_Command+0x13de>
 800a966:	e61d      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=1660;
 800a968:	4b3f      	ldr	r3, [pc, #252]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a96a:	0032      	movs	r2, r6
 800a96c:	2102      	movs	r1, #2
 800a96e:	483f      	ldr	r0, [pc, #252]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=1660;
 800a970:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a972:	f7f8 fc19 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 1660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 1660 Hz\r\n"))!=HAL_OK)
 800a976:	222d      	movs	r2, #45	; 0x2d
 800a978:	4945      	ldr	r1, [pc, #276]	; (800aa90 <USER_SET_Command+0x1510>)
 800a97a:	483e      	ldr	r0, [pc, #248]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a97c:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 1660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 1660 Hz\r\n"))!=HAL_OK)
 800a97e:	f7fa f99f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a982:	2800      	cmp	r0, #0
 800a984:	d001      	beq.n	800a98a <USER_SET_Command+0x140a>
					Error_Handler();
 800a986:	f7fd ffcf 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800a98a:	783b      	ldrb	r3, [r7, #0]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d0fc      	beq.n	800a98a <USER_SET_Command+0x140a>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800a990:	2200      	movs	r2, #0
 800a992:	2102      	movs	r1, #2
 800a994:	4835      	ldr	r0, [pc, #212]	; (800aa6c <USER_SET_Command+0x14ec>)
 800a996:	f7f8 fc07 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800a99a:	2219      	movs	r2, #25
 800a99c:	2100      	movs	r1, #0
 800a99e:	4837      	ldr	r0, [pc, #220]	; (800aa7c <USER_SET_Command+0x14fc>)
 800a9a0:	f001 f9a9 	bl	800bcf6 <memset>
 800a9a4:	e7db      	b.n	800a95e <USER_SET_Command+0x13de>
			memtx=0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4a2d      	ldr	r2, [pc, #180]	; (800aa60 <USER_SET_Command+0x14e0>)
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a9aa:	2601      	movs	r6, #1
			memtx=0;
 800a9ac:	7013      	strb	r3, [r2, #0]
			ctrl1_xl&=~0xf0;
 800a9ae:	220f      	movs	r2, #15
 800a9b0:	7823      	ldrb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a9b2:	21d6      	movs	r1, #214	; 0xd6
			ctrl1_xl&=~0xf0;
 800a9b4:	401a      	ands	r2, r3
			ctrl1_xl|=0x90;
 800a9b6:	2370      	movs	r3, #112	; 0x70
 800a9b8:	425b      	negs	r3, r3
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	7023      	strb	r3, [r4, #0]
			if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&ctrl1_xl,1)!=HAL_OK)
 800a9be:	2210      	movs	r2, #16
 800a9c0:	9601      	str	r6, [sp, #4]
 800a9c2:	9400      	str	r4, [sp, #0]
 800a9c4:	0033      	movs	r3, r6
 800a9c6:	4827      	ldr	r0, [pc, #156]	; (800aa64 <USER_SET_Command+0x14e4>)
 800a9c8:	f7f8 fdcc 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d006      	beq.n	800a9de <USER_SET_Command+0x145e>
				Error_Handler();
 800a9d0:	f7fd ffaa 	bl	8008928 <Error_Handler>
			while(memtx==0);
 800a9d4:	4b22      	ldr	r3, [pc, #136]	; (800aa60 <USER_SET_Command+0x14e0>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0fb      	beq.n	800a9d4 <USER_SET_Command+0x1454>
 800a9dc:	e5e2      	b.n	800a5a4 <USER_SET_Command+0x1024>
				odr_xl_value=3330;
 800a9de:	4b22      	ldr	r3, [pc, #136]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a9e0:	0032      	movs	r2, r6
 800a9e2:	2102      	movs	r1, #2
 800a9e4:	4821      	ldr	r0, [pc, #132]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=3330;
 800a9e6:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800a9e8:	f7f8 fbde 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 3330 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 3330 Hz\r\n"))!=HAL_OK)
 800a9ec:	222d      	movs	r2, #45	; 0x2d
 800a9ee:	4929      	ldr	r1, [pc, #164]	; (800aa94 <USER_SET_Command+0x1514>)
 800a9f0:	4820      	ldr	r0, [pc, #128]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800a9f2:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 3330 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 3330 Hz\r\n"))!=HAL_OK)
 800a9f4:	f7fa f964 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d001      	beq.n	800aa00 <USER_SET_Command+0x1480>
					Error_Handler();
 800a9fc:	f7fd ff94 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800aa00:	4a1d      	ldr	r2, [pc, #116]	; (800aa78 <USER_SET_Command+0x14f8>)
 800aa02:	7813      	ldrb	r3, [r2, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d0fc      	beq.n	800aa02 <USER_SET_Command+0x1482>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	4817      	ldr	r0, [pc, #92]	; (800aa6c <USER_SET_Command+0x14ec>)
 800aa0e:	f7f8 fbcb 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800aa12:	2219      	movs	r2, #25
 800aa14:	2100      	movs	r1, #0
 800aa16:	4819      	ldr	r0, [pc, #100]	; (800aa7c <USER_SET_Command+0x14fc>)
 800aa18:	f001 f96d 	bl	800bcf6 <memset>
 800aa1c:	e7da      	b.n	800a9d4 <USER_SET_Command+0x1454>
				odr_xl_value=6660;
 800aa1e:	4b12      	ldr	r3, [pc, #72]	; (800aa68 <USER_SET_Command+0x14e8>)
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800aa20:	0032      	movs	r2, r6
 800aa22:	2102      	movs	r1, #2
 800aa24:	4811      	ldr	r0, [pc, #68]	; (800aa6c <USER_SET_Command+0x14ec>)
				odr_xl_value=6660;
 800aa26:	801d      	strh	r5, [r3, #0]
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800aa28:	f7f8 fbbe 	bl	80031a8 <HAL_GPIO_WritePin>
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 6660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 6660 Hz\r\n"))!=HAL_OK)
 800aa2c:	222d      	movs	r2, #45	; 0x2d
 800aa2e:	491a      	ldr	r1, [pc, #104]	; (800aa98 <USER_SET_Command+0x1518>)
 800aa30:	4810      	ldr	r0, [pc, #64]	; (800aa74 <USER_SET_Command+0x14f4>)
				uarttx_req=1;
 800aa32:	703e      	strb	r6, [r7, #0]
				if(HAL_UART_Transmit_DMA(&huart3,"\r\nAccelerometer Output data rate is 6660 Hz\r\n",strlen("\r\nAccelerometer Output data rate is 6660 Hz\r\n"))!=HAL_OK)
 800aa34:	f7fa f944 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d001      	beq.n	800aa40 <USER_SET_Command+0x14c0>
					Error_Handler();
 800aa3c:	f7fd ff74 	bl	8008928 <Error_Handler>
				while(uarttx_req==1);
 800aa40:	4a0d      	ldr	r2, [pc, #52]	; (800aa78 <USER_SET_Command+0x14f8>)
 800aa42:	7813      	ldrb	r3, [r2, #0]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d0fc      	beq.n	800aa42 <USER_SET_Command+0x14c2>
				HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2102      	movs	r1, #2
 800aa4c:	4807      	ldr	r0, [pc, #28]	; (800aa6c <USER_SET_Command+0x14ec>)
 800aa4e:	f7f8 fbab 	bl	80031a8 <HAL_GPIO_WritePin>
				memset(instruction_final,0,25);
 800aa52:	2219      	movs	r2, #25
 800aa54:	2100      	movs	r1, #0
 800aa56:	4809      	ldr	r0, [pc, #36]	; (800aa7c <USER_SET_Command+0x14fc>)
 800aa58:	f001 f94d 	bl	800bcf6 <memset>
 800aa5c:	e587      	b.n	800a56e <USER_SET_Command+0xfee>
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	2000026a 	.word	0x2000026a
 800aa64:	200003a0 	.word	0x200003a0
 800aa68:	20000480 	.word	0x20000480
 800aa6c:	48000400 	.word	0x48000400
 800aa70:	0800f1f4 	.word	0x0800f1f4
 800aa74:	20000510 	.word	0x20000510
 800aa78:	20000378 	.word	0x20000378
 800aa7c:	20000236 	.word	0x20000236
 800aa80:	0800f220 	.word	0x0800f220
 800aa84:	0800f24d 	.word	0x0800f24d
 800aa88:	0800f27a 	.word	0x0800f27a
 800aa8c:	0800f2a7 	.word	0x0800f2a7
 800aa90:	0800f2d4 	.word	0x0800f2d4
 800aa94:	0800f302 	.word	0x0800f302
 800aa98:	0800f330 	.word	0x0800f330

0800aa9c <USER_Side_Axes_Find>:
{
	int8_t i;

	struct axes_with_sign side_axes_of_gravity_axes[4];

	switch (gravity_axes)
 800aa9c:	4b7c      	ldr	r3, [pc, #496]	; (800ac90 <USER_Side_Axes_Find+0x1f4>)
{
 800aa9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (gravity_axes)
 800aaa0:	7818      	ldrb	r0, [r3, #0]
 800aaa2:	2803      	cmp	r0, #3
 800aaa4:	d900      	bls.n	800aaa8 <USER_Side_Axes_Find+0xc>
 800aaa6:	e0d3      	b.n	800ac50 <USER_Side_Axes_Find+0x1b4>
 800aaa8:	f7f5 fb34 	bl	8000114 <__gnu_thumb1_case_uqi>
 800aaac:	b08f2402 	.word	0xb08f2402
	{
	case X:
		if (sign_of_gravity == PLUS)
 800aab0:	4b78      	ldr	r3, [pc, #480]	; (800ac94 <USER_Side_Axes_Find+0x1f8>)
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	b25b      	sxtb	r3, r3
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d10d      	bne.n	800aad6 <USER_Side_Axes_Find+0x3a>
		{
			side_axes_of_gravity_axes[0].axes = Y;
 800aaba:	466a      	mov	r2, sp
			side_axes_of_gravity_axes[0].sign = MINUS;
 800aabc:	21ff      	movs	r1, #255	; 0xff
			side_axes_of_gravity_axes[1].axes = Z;
 800aabe:	4668      	mov	r0, sp
			side_axes_of_gravity_axes[0].axes = Y;
 800aac0:	7013      	strb	r3, [r2, #0]
			side_axes_of_gravity_axes[0].sign = MINUS;
 800aac2:	7051      	strb	r1, [r2, #1]
			side_axes_of_gravity_axes[1].axes = Z;
 800aac4:	2202      	movs	r2, #2
 800aac6:	7082      	strb	r2, [r0, #2]
			side_axes_of_gravity_axes[1].sign = MINUS;
			side_axes_of_gravity_axes[2].axes = Y;
			side_axes_of_gravity_axes[2].sign = PLUS;
			side_axes_of_gravity_axes[3].axes = Z;
 800aac8:	7182      	strb	r2, [r0, #6]
			side_axes_of_gravity_axes[3].sign = PLUS;
 800aaca:	466a      	mov	r2, sp
			side_axes_of_gravity_axes[1].sign = MINUS;
 800aacc:	70c1      	strb	r1, [r0, #3]
			side_axes_of_gravity_axes[2].axes = Y;
 800aace:	7103      	strb	r3, [r0, #4]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800aad0:	7143      	strb	r3, [r0, #5]
			side_axes_of_gravity_axes[1].axes = Y;
			side_axes_of_gravity_axes[1].sign = PLUS;
			side_axes_of_gravity_axes[2].axes = X;
			side_axes_of_gravity_axes[2].sign = PLUS;
			side_axes_of_gravity_axes[3].axes = Y;
			side_axes_of_gravity_axes[3].sign = MINUS;
 800aad2:	71d3      	strb	r3, [r2, #7]
 800aad4:	e021      	b.n	800ab1a <USER_Side_Axes_Find+0x7e>
		else if (sign_of_gravity == MINUS)
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	d11f      	bne.n	800ab1a <USER_Side_Axes_Find+0x7e>
			side_axes_of_gravity_axes[0].axes = Y;
 800aada:	4669      	mov	r1, sp
 800aadc:	2201      	movs	r2, #1
			side_axes_of_gravity_axes[0].sign = MINUS;
 800aade:	704b      	strb	r3, [r1, #1]
			side_axes_of_gravity_axes[1].axes = Z;
 800aae0:	3303      	adds	r3, #3
			side_axes_of_gravity_axes[0].axes = Y;
 800aae2:	700a      	strb	r2, [r1, #0]
			side_axes_of_gravity_axes[1].axes = Z;
 800aae4:	708b      	strb	r3, [r1, #2]
			side_axes_of_gravity_axes[1].sign = PLUS;
 800aae6:	70ca      	strb	r2, [r1, #3]
			side_axes_of_gravity_axes[2].axes = Y;
 800aae8:	710a      	strb	r2, [r1, #4]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800aaea:	714a      	strb	r2, [r1, #5]
			side_axes_of_gravity_axes[3].axes = Z;
 800aaec:	718b      	strb	r3, [r1, #6]
 800aaee:	466a      	mov	r2, sp
			side_axes_of_gravity_axes[3].sign = MINUS;
 800aaf0:	33fd      	adds	r3, #253	; 0xfd
 800aaf2:	e7ee      	b.n	800aad2 <USER_Side_Axes_Find+0x36>
		if (sign_of_gravity == PLUS)
 800aaf4:	4b67      	ldr	r3, [pc, #412]	; (800ac94 <USER_Side_Axes_Find+0x1f8>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d153      	bne.n	800aba8 <USER_Side_Axes_Find+0x10c>
			side_axes_of_gravity_axes[0].axes = X;
 800ab00:	4669      	mov	r1, sp
			side_axes_of_gravity_axes[0].sign = MINUS;
 800ab02:	4668      	mov	r0, sp
			side_axes_of_gravity_axes[0].axes = X;
 800ab04:	700a      	strb	r2, [r1, #0]
			side_axes_of_gravity_axes[0].sign = MINUS;
 800ab06:	21ff      	movs	r1, #255	; 0xff
			side_axes_of_gravity_axes[1].axes = Z;
 800ab08:	466c      	mov	r4, sp
			side_axes_of_gravity_axes[0].sign = MINUS;
 800ab0a:	7041      	strb	r1, [r0, #1]
			side_axes_of_gravity_axes[1].axes = Z;
 800ab0c:	2002      	movs	r0, #2
			side_axes_of_gravity_axes[1].sign = PLUS;
 800ab0e:	70e3      	strb	r3, [r4, #3]
			side_axes_of_gravity_axes[1].axes = Z;
 800ab10:	70a0      	strb	r0, [r4, #2]
			side_axes_of_gravity_axes[2].axes = X;
 800ab12:	7122      	strb	r2, [r4, #4]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800ab14:	7163      	strb	r3, [r4, #5]
			side_axes_of_gravity_axes[3].axes = Z;
 800ab16:	71a0      	strb	r0, [r4, #6]
			side_axes_of_gravity_axes[3].sign = MINUS;
 800ab18:	71e1      	strb	r1, [r4, #7]
	while(uarttx_req==1);
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);

	}

	for (i = 0; !(side_axes_of_gravity_axes[i].axes == forward_axes && side_axes_of_gravity_axes[i].sign == sign_of_acceleration); i++)
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	4b5e      	ldr	r3, [pc, #376]	; (800ac98 <USER_Side_Axes_Find+0x1fc>)
 800ab1e:	7818      	ldrb	r0, [r3, #0]
 800ab20:	4b5e      	ldr	r3, [pc, #376]	; (800ac9c <USER_Side_Axes_Find+0x200>)
 800ab22:	5659      	ldrsb	r1, [r3, r1]
 800ab24:	2300      	movs	r3, #0
 800ab26:	466c      	mov	r4, sp
 800ab28:	005a      	lsls	r2, r3, #1
 800ab2a:	5d14      	ldrb	r4, [r2, r4]
 800ab2c:	4284      	cmp	r4, r0
 800ab2e:	d000      	beq.n	800ab32 <USER_Side_Axes_Find+0x96>
 800ab30:	e0ab      	b.n	800ac8a <USER_Side_Axes_Find+0x1ee>
 800ab32:	446a      	add	r2, sp
 800ab34:	7852      	ldrb	r2, [r2, #1]
 800ab36:	b252      	sxtb	r2, r2
 800ab38:	428a      	cmp	r2, r1
 800ab3a:	d000      	beq.n	800ab3e <USER_Side_Axes_Find+0xa2>
 800ab3c:	e0a5      	b.n	800ac8a <USER_Side_Axes_Find+0x1ee>
	{

	}

	side_axes = side_axes_of_gravity_axes[(i + 3) % 4].axes;
 800ab3e:	4a58      	ldr	r2, [pc, #352]	; (800aca0 <USER_Side_Axes_Find+0x204>)
 800ab40:	3303      	adds	r3, #3
 800ab42:	4013      	ands	r3, r2
 800ab44:	d504      	bpl.n	800ab50 <USER_Side_Axes_Find+0xb4>
 800ab46:	2204      	movs	r2, #4
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	4252      	negs	r2, r2
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	3301      	adds	r3, #1
 800ab50:	466a      	mov	r2, sp
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	5cd2      	ldrb	r2, [r2, r3]
 800ab56:	4953      	ldr	r1, [pc, #332]	; (800aca4 <USER_Side_Axes_Find+0x208>)
	sign_of_side_axes = side_axes_of_gravity_axes[(i + 3) % 4].sign;
 800ab58:	446b      	add	r3, sp
 800ab5a:	785b      	ldrb	r3, [r3, #1]
	side_axes = side_axes_of_gravity_axes[(i + 3) % 4].axes;
 800ab5c:	700a      	strb	r2, [r1, #0]

	sprintf(out_string,"\r\nSide Axes = %d , Sign of Side Axes = %d \r\n",side_axes,sign_of_side_axes);
 800ab5e:	4c52      	ldr	r4, [pc, #328]	; (800aca8 <USER_Side_Axes_Find+0x20c>)
	sign_of_side_axes = side_axes_of_gravity_axes[(i + 3) % 4].sign;
 800ab60:	4952      	ldr	r1, [pc, #328]	; (800acac <USER_Side_Axes_Find+0x210>)
 800ab62:	b25b      	sxtb	r3, r3
 800ab64:	700b      	strb	r3, [r1, #0]
	sprintf(out_string,"\r\nSide Axes = %d , Sign of Side Axes = %d \r\n",side_axes,sign_of_side_axes);
 800ab66:	0020      	movs	r0, r4
 800ab68:	4951      	ldr	r1, [pc, #324]	; (800acb0 <USER_Side_Axes_Find+0x214>)
 800ab6a:	f001 f8cd 	bl	800bd08 <siprintf>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800ab6e:	2201      	movs	r2, #1
 800ab70:	2102      	movs	r1, #2
 800ab72:	4850      	ldr	r0, [pc, #320]	; (800acb4 <USER_Side_Axes_Find+0x218>)
 800ab74:	f7f8 fb18 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	4d4f      	ldr	r5, [pc, #316]	; (800acb8 <USER_Side_Axes_Find+0x21c>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ab7c:	0020      	movs	r0, r4
	uarttx_req=1;
 800ab7e:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ab80:	f7f5 fac0 	bl	8000104 <strlen>
 800ab84:	0021      	movs	r1, r4
 800ab86:	b282      	uxth	r2, r0
 800ab88:	484c      	ldr	r0, [pc, #304]	; (800acbc <USER_Side_Axes_Find+0x220>)
 800ab8a:	f7fa f899 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d001      	beq.n	800ab96 <USER_Side_Axes_Find+0xfa>
	{
		Error_Handler();
 800ab92:	f7fd fec9 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 800ab96:	782b      	ldrb	r3, [r5, #0]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d0fc      	beq.n	800ab96 <USER_Side_Axes_Find+0xfa>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2102      	movs	r1, #2
 800aba0:	4844      	ldr	r0, [pc, #272]	; (800acb4 <USER_Side_Axes_Find+0x218>)
 800aba2:	f7f8 fb01 	bl	80031a8 <HAL_GPIO_WritePin>


}
 800aba6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		else if (sign_of_gravity == MINUS)
 800aba8:	1c59      	adds	r1, r3, #1
 800abaa:	d1b6      	bne.n	800ab1a <USER_Side_Axes_Find+0x7e>
			side_axes_of_gravity_axes[0].axes = X;
 800abac:	4669      	mov	r1, sp
 800abae:	700a      	strb	r2, [r1, #0]
			side_axes_of_gravity_axes[0].sign = MINUS;
 800abb0:	704b      	strb	r3, [r1, #1]
			side_axes_of_gravity_axes[1].axes = Z;
 800abb2:	2102      	movs	r1, #2
 800abb4:	466b      	mov	r3, sp
			side_axes_of_gravity_axes[1].sign = MINUS;
 800abb6:	4668      	mov	r0, sp
			side_axes_of_gravity_axes[1].axes = Z;
 800abb8:	7099      	strb	r1, [r3, #2]
			side_axes_of_gravity_axes[1].sign = MINUS;
 800abba:	23ff      	movs	r3, #255	; 0xff
 800abbc:	70c3      	strb	r3, [r0, #3]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800abbe:	2301      	movs	r3, #1
			side_axes_of_gravity_axes[2].axes = X;
 800abc0:	7102      	strb	r2, [r0, #4]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800abc2:	7143      	strb	r3, [r0, #5]
 800abc4:	466a      	mov	r2, sp
			side_axes_of_gravity_axes[3].axes = Z;
 800abc6:	7181      	strb	r1, [r0, #6]
 800abc8:	e783      	b.n	800aad2 <USER_Side_Axes_Find+0x36>
		if (sign_of_gravity == PLUS)
 800abca:	4b32      	ldr	r3, [pc, #200]	; (800ac94 <USER_Side_Axes_Find+0x1f8>)
 800abcc:	2200      	movs	r2, #0
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b25b      	sxtb	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d10b      	bne.n	800abee <USER_Side_Axes_Find+0x152>
			side_axes_of_gravity_axes[0].axes = X;
 800abd6:	4669      	mov	r1, sp
			side_axes_of_gravity_axes[0].sign = MINUS;
 800abd8:	4668      	mov	r0, sp
			side_axes_of_gravity_axes[0].axes = X;
 800abda:	700a      	strb	r2, [r1, #0]
			side_axes_of_gravity_axes[0].sign = MINUS;
 800abdc:	21ff      	movs	r1, #255	; 0xff
			side_axes_of_gravity_axes[2].axes = X;
 800abde:	7102      	strb	r2, [r0, #4]
			side_axes_of_gravity_axes[0].sign = MINUS;
 800abe0:	7041      	strb	r1, [r0, #1]
			side_axes_of_gravity_axes[1].axes = Y;
 800abe2:	7083      	strb	r3, [r0, #2]
			side_axes_of_gravity_axes[1].sign = MINUS;
 800abe4:	70c1      	strb	r1, [r0, #3]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800abe6:	466a      	mov	r2, sp
 800abe8:	7143      	strb	r3, [r0, #5]
			side_axes_of_gravity_axes[3].axes = Y;
 800abea:	7183      	strb	r3, [r0, #6]
 800abec:	e771      	b.n	800aad2 <USER_Side_Axes_Find+0x36>
		else if (sign_of_gravity == MINUS)
 800abee:	1c59      	adds	r1, r3, #1
 800abf0:	d000      	beq.n	800abf4 <USER_Side_Axes_Find+0x158>
 800abf2:	e792      	b.n	800ab1a <USER_Side_Axes_Find+0x7e>
			side_axes_of_gravity_axes[0].axes = X;
 800abf4:	4669      	mov	r1, sp
			side_axes_of_gravity_axes[0].sign = MINUS;
 800abf6:	704b      	strb	r3, [r1, #1]
			side_axes_of_gravity_axes[1].axes = Y;
 800abf8:	3302      	adds	r3, #2
			side_axes_of_gravity_axes[0].axes = X;
 800abfa:	700a      	strb	r2, [r1, #0]
			side_axes_of_gravity_axes[1].axes = Y;
 800abfc:	708b      	strb	r3, [r1, #2]
			side_axes_of_gravity_axes[1].sign = PLUS;
 800abfe:	70cb      	strb	r3, [r1, #3]
			side_axes_of_gravity_axes[2].axes = X;
 800ac00:	710a      	strb	r2, [r1, #4]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800ac02:	714b      	strb	r3, [r1, #5]
			side_axes_of_gravity_axes[3].axes = Y;
 800ac04:	718b      	strb	r3, [r1, #6]
			side_axes_of_gravity_axes[2].sign = PLUS;
 800ac06:	466a      	mov	r2, sp
			side_axes_of_gravity_axes[3].sign = MINUS;
 800ac08:	33fe      	adds	r3, #254	; 0xfe
 800ac0a:	e762      	b.n	800aad2 <USER_Side_Axes_Find+0x36>
		sprintf(out_string,"\r\nSome Logical Error in USER_Side_Axes_Find \r\n");
 800ac0c:	4c26      	ldr	r4, [pc, #152]	; (800aca8 <USER_Side_Axes_Find+0x20c>)
 800ac0e:	492c      	ldr	r1, [pc, #176]	; (800acc0 <USER_Side_Axes_Find+0x224>)
 800ac10:	0020      	movs	r0, r4
 800ac12:	f001 f89b 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800ac16:	2201      	movs	r2, #1
 800ac18:	2102      	movs	r1, #2
 800ac1a:	4826      	ldr	r0, [pc, #152]	; (800acb4 <USER_Side_Axes_Find+0x218>)
 800ac1c:	f7f8 fac4 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800ac20:	2301      	movs	r3, #1
 800ac22:	4d25      	ldr	r5, [pc, #148]	; (800acb8 <USER_Side_Axes_Find+0x21c>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ac24:	0020      	movs	r0, r4
		uarttx_req=1;
 800ac26:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ac28:	f7f5 fa6c 	bl	8000104 <strlen>
 800ac2c:	0021      	movs	r1, r4
 800ac2e:	b282      	uxth	r2, r0
 800ac30:	4822      	ldr	r0, [pc, #136]	; (800acbc <USER_Side_Axes_Find+0x220>)
 800ac32:	f7fa f845 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d001      	beq.n	800ac3e <USER_Side_Axes_Find+0x1a2>
			Error_Handler();
 800ac3a:	f7fd fe75 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 800ac3e:	782b      	ldrb	r3, [r5, #0]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d0fc      	beq.n	800ac3e <USER_Side_Axes_Find+0x1a2>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800ac44:	2200      	movs	r2, #0
 800ac46:	2102      	movs	r1, #2
 800ac48:	481a      	ldr	r0, [pc, #104]	; (800acb4 <USER_Side_Axes_Find+0x218>)
 800ac4a:	f7f8 faad 	bl	80031a8 <HAL_GPIO_WritePin>
		break;
 800ac4e:	e764      	b.n	800ab1a <USER_Side_Axes_Find+0x7e>
	default:sprintf(out_string,"\r\nSome Logical Error in USER_Side_Axes_Find \r\n");
 800ac50:	4c15      	ldr	r4, [pc, #84]	; (800aca8 <USER_Side_Axes_Find+0x20c>)
 800ac52:	491b      	ldr	r1, [pc, #108]	; (800acc0 <USER_Side_Axes_Find+0x224>)
 800ac54:	0020      	movs	r0, r4
 800ac56:	f001 f879 	bl	800bd4c <strcpy>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2102      	movs	r1, #2
 800ac5e:	4815      	ldr	r0, [pc, #84]	; (800acb4 <USER_Side_Axes_Find+0x218>)
 800ac60:	f7f8 faa2 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800ac64:	2301      	movs	r3, #1
 800ac66:	4d14      	ldr	r5, [pc, #80]	; (800acb8 <USER_Side_Axes_Find+0x21c>)
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ac68:	0020      	movs	r0, r4
	uarttx_req=1;
 800ac6a:	702b      	strb	r3, [r5, #0]
	if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800ac6c:	f7f5 fa4a 	bl	8000104 <strlen>
 800ac70:	0021      	movs	r1, r4
 800ac72:	b282      	uxth	r2, r0
 800ac74:	4811      	ldr	r0, [pc, #68]	; (800acbc <USER_Side_Axes_Find+0x220>)
 800ac76:	f7fa f823 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d001      	beq.n	800ac82 <USER_Side_Axes_Find+0x1e6>
		Error_Handler();
 800ac7e:	f7fd fe53 	bl	8008928 <Error_Handler>
	while(uarttx_req==1);
 800ac82:	782b      	ldrb	r3, [r5, #0]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d0fc      	beq.n	800ac82 <USER_Side_Axes_Find+0x1e6>
 800ac88:	e7dc      	b.n	800ac44 <USER_Side_Axes_Find+0x1a8>
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	e74a      	b.n	800ab26 <USER_Side_Axes_Find+0x8a>
 800ac90:	20000009 	.word	0x20000009
 800ac94:	20000016 	.word	0x20000016
 800ac98:	20000008 	.word	0x20000008
 800ac9c:	20000015 	.word	0x20000015
 800aca0:	80000003 	.word	0x80000003
 800aca4:	20000014 	.word	0x20000014
 800aca8:	2000026b 	.word	0x2000026b
 800acac:	20000017 	.word	0x20000017
 800acb0:	0800f78d 	.word	0x0800f78d
 800acb4:	48000400 	.word	0x48000400
 800acb8:	20000378 	.word	0x20000378
 800acbc:	20000510 	.word	0x20000510
 800acc0:	0800f75e 	.word	0x0800f75e

0800acc4 <USER_Sleep_Enter>:
	extern enum AXES forward_axes;
	extern enum  Sign sign_of_acceleration;
	extern enum Function_Exicution forward_axes_wakeup_init_function_status,acceleration_wakeup_init_function_status;

void USER_Sleep_Enter(void)
{
 800acc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	uint8_t wake_up_src;

	memset(total_error_int_xl,0,sizeof(total_error_int_xl));
 800acc6:	2403      	movs	r4, #3
 800acc8:	2100      	movs	r1, #0
 800acca:	0022      	movs	r2, r4
 800accc:	481a      	ldr	r0, [pc, #104]	; (800ad38 <USER_Sleep_Enter+0x74>)
 800acce:	f001 f812 	bl	800bcf6 <memset>
	memset(total_error_xl_mg,0,sizeof(total_error_xl_mg));
 800acd2:	220c      	movs	r2, #12
 800acd4:	2100      	movs	r1, #0
 800acd6:	4819      	ldr	r0, [pc, #100]	; (800ad3c <USER_Sleep_Enter+0x78>)
 800acd8:	f001 f80d 	bl	800bcf6 <memset>



	sign_of_acceleration=SIGN_NOT_SET;
 800acdc:	2102      	movs	r1, #2
 800acde:	4b18      	ldr	r3, [pc, #96]	; (800ad40 <USER_Sleep_Enter+0x7c>)
	device_mode=SLEEP;
 800ace0:	4a18      	ldr	r2, [pc, #96]	; (800ad44 <USER_Sleep_Enter+0x80>)
	sign_of_acceleration=SIGN_NOT_SET;
 800ace2:	7019      	strb	r1, [r3, #0]
	device_mode=SLEEP;
 800ace4:	2300      	movs	r3, #0
 800ace6:	7013      	strb	r3, [r2, #0]
	forward_axes=AXES_NOT_SET;
 800ace8:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <USER_Sleep_Enter+0x84>)
 800acea:	7014      	strb	r4, [r2, #0]
	forward_axes_wakeup_init_function_status=NOT_EXICUTED;
 800acec:	4a17      	ldr	r2, [pc, #92]	; (800ad4c <USER_Sleep_Enter+0x88>)
 800acee:	7013      	strb	r3, [r2, #0]
	acceleration_wakeup_init_function_status=NOT_EXICUTED;
 800acf0:	4a17      	ldr	r2, [pc, #92]	; (800ad50 <USER_Sleep_Enter+0x8c>)
 800acf2:	7013      	strb	r3, [r2, #0]

	if(current_referance_tilt_function==GRAVITY_AXES_PLUS_FORWARD_AXES)
 800acf4:	4a17      	ldr	r2, [pc, #92]	; (800ad54 <USER_Sleep_Enter+0x90>)
 800acf6:	7810      	ldrb	r0, [r2, #0]
 800acf8:	42a0      	cmp	r0, r4
 800acfa:	d100      	bne.n	800acfe <USER_Sleep_Enter+0x3a>
	{
		current_referance_tilt_function=ONLY_GRAVITY_AXES;
 800acfc:	7011      	strb	r1, [r2, #0]
	}


	memrx=0;
 800acfe:	4c16      	ldr	r4, [pc, #88]	; (800ad58 <USER_Sleep_Enter+0x94>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800ad00:	220f      	movs	r2, #15
	memrx=0;
 800ad02:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800ad04:	2301      	movs	r3, #1
 800ad06:	446a      	add	r2, sp
 800ad08:	9200      	str	r2, [sp, #0]
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	221b      	movs	r2, #27
 800ad0e:	21d6      	movs	r1, #214	; 0xd6
 800ad10:	4812      	ldr	r0, [pc, #72]	; (800ad5c <USER_Sleep_Enter+0x98>)
 800ad12:	f7f8 fccd 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d001      	beq.n	800ad1e <USER_Sleep_Enter+0x5a>
	{
		Error_Handler();
 800ad1a:	f7fd fe05 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800ad1e:	7823      	ldrb	r3, [r4, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d0fc      	beq.n	800ad1e <USER_Sleep_Enter+0x5a>


	USER_Wakeup_Init();
 800ad24:	f000 fe14 	bl	800b950 <USER_Wakeup_Init>

	HAL_GPIO_WritePin(ST_LED_GPIO_Port,ST_LED_Pin,GPIO_PIN_RESET);
 800ad28:	2180      	movs	r1, #128	; 0x80
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	0109      	lsls	r1, r1, #4
 800ad2e:	480c      	ldr	r0, [pc, #48]	; (800ad60 <USER_Sleep_Enter+0x9c>)
 800ad30:	f7f8 fa3a 	bl	80031a8 <HAL_GPIO_WritePin>



}
 800ad34:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	20000368 	.word	0x20000368
 800ad3c:	2000036c 	.word	0x2000036c
 800ad40:	20000015 	.word	0x20000015
 800ad44:	2000048a 	.word	0x2000048a
 800ad48:	20000008 	.word	0x20000008
 800ad4c:	20000234 	.word	0x20000234
 800ad50:	20000232 	.word	0x20000232
 800ad54:	20000233 	.word	0x20000233
 800ad58:	20000269 	.word	0x20000269
 800ad5c:	200003a0 	.word	0x200003a0
 800ad60:	48000800 	.word	0x48000800

0800ad64 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad64:	2001      	movs	r0, #1
 800ad66:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <HAL_MspInit+0x2c>)
{
 800ad68:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad6a:	6999      	ldr	r1, [r3, #24]
 800ad6c:	4301      	orrs	r1, r0
 800ad6e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad70:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad72:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad74:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad76:	4002      	ands	r2, r0
 800ad78:	9200      	str	r2, [sp, #0]
 800ad7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad7c:	69da      	ldr	r2, [r3, #28]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	61da      	str	r2, [r3, #28]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	400b      	ands	r3, r1
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad8a:	b002      	add	sp, #8
 800ad8c:	4770      	bx	lr
 800ad8e:	46c0      	nop			; (mov r8, r8)
 800ad90:	40021000 	.word	0x40021000

0800ad94 <NMI_Handler>:
 800ad94:	4770      	bx	lr

0800ad96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ad96:	e7fe      	b.n	800ad96 <HardFault_Handler>

0800ad98 <SVC_Handler>:
 800ad98:	4770      	bx	lr

0800ad9a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ad9a:	4770      	bx	lr

0800ad9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ad9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad9e:	f7f7 ffd9 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ada2:	bd10      	pop	{r4, pc}

0800ada4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 800ada4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800ada6:	4802      	ldr	r0, [pc, #8]	; (800adb0 <DMA1_Ch1_IRQHandler+0xc>)
 800ada8:	f7f8 f8f8 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800adac:	bd10      	pop	{r4, pc}
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	200004cc 	.word	0x200004cc

0800adb4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800adb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800adb6:	4803      	ldr	r0, [pc, #12]	; (800adc4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x10>)
 800adb8:	f7f8 f8f0 	bl	8002f9c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800adbc:	4802      	ldr	r0, [pc, #8]	; (800adc8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 800adbe:	f7f8 f8ed 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 800adc2:	bd10      	pop	{r4, pc}
 800adc4:	20000590 	.word	0x20000590
 800adc8:	20000430 	.word	0x20000430

0800adcc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800adcc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800adce:	4802      	ldr	r0, [pc, #8]	; (800add8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0xc>)
 800add0:	f7f8 f8e4 	bl	8002f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 800add4:	bd10      	pop	{r4, pc}
 800add6:	46c0      	nop			; (mov r8, r8)
 800add8:	200003ec 	.word	0x200003ec

0800addc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800addc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800adde:	4802      	ldr	r0, [pc, #8]	; (800ade8 <TIM6_DAC_IRQHandler+0xc>)
 800ade0:	f7f9 fe15 	bl	8004a0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	2000048c 	.word	0x2000048c

0800adec <I2C2_IRQHandler>:
void I2C2_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800adec:	4806      	ldr	r0, [pc, #24]	; (800ae08 <I2C2_IRQHandler+0x1c>)
{
 800adee:	b510      	push	{r4, lr}
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800adf0:	6803      	ldr	r3, [r0, #0]
 800adf2:	699a      	ldr	r2, [r3, #24]
 800adf4:	23e0      	movs	r3, #224	; 0xe0
 800adf6:	00db      	lsls	r3, r3, #3
 800adf8:	421a      	tst	r2, r3
 800adfa:	d002      	beq.n	800ae02 <I2C2_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800adfc:	f7f9 f9a0 	bl	8004140 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800ae00:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c2);
 800ae02:	f7f8 fd91 	bl	8003928 <HAL_I2C_EV_IRQHandler>
}
 800ae06:	e7fb      	b.n	800ae00 <I2C2_IRQHandler+0x14>
 800ae08:	200003a0 	.word	0x200003a0

0800ae0c <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 800ae0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_8_IRQn 0 */

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800ae0e:	4802      	ldr	r0, [pc, #8]	; (800ae18 <USART3_8_IRQHandler+0xc>)
 800ae10:	f7fa f86a 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

  /* USER CODE END USART3_8_IRQn 1 */
}
 800ae14:	bd10      	pop	{r4, pc}
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	20000510 	.word	0x20000510

0800ae1c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <_sbrk+0x2c>)
{
 800ae1e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800ae20:	6819      	ldr	r1, [r3, #0]
{
 800ae22:	0002      	movs	r2, r0
	if (heap_end == 0)
 800ae24:	2900      	cmp	r1, #0
 800ae26:	d101      	bne.n	800ae2c <_sbrk+0x10>
		heap_end = &end;
 800ae28:	4908      	ldr	r1, [pc, #32]	; (800ae4c <_sbrk+0x30>)
 800ae2a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800ae2c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800ae2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800ae30:	1882      	adds	r2, r0, r2
 800ae32:	428a      	cmp	r2, r1
 800ae34:	d906      	bls.n	800ae44 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800ae36:	f000 ff2b 	bl	800bc90 <__errno>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800ae3e:	2001      	movs	r0, #1
 800ae40:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800ae42:	bd10      	pop	{r4, pc}
	heap_end += incr;
 800ae44:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800ae46:	e7fc      	b.n	800ae42 <_sbrk+0x26>
 800ae48:	20000388 	.word	0x20000388
 800ae4c:	200005d8 	.word	0x200005d8

0800ae50 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800ae50:	4770      	bx	lr
	...

0800ae54 <USER_Tilt_Calculation>:
extern char out_string[200];
extern double referance_tilt_angle[3];
extern uint8_t tilt_threshold;

enum Tilt USER_Tilt_Calculation(void)
{
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
	double tilt_angle_Optimized[3];
	static uint8_t tilt_i;


	wait:		memrx=0;
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 800ae56:	2601      	movs	r6, #1
{
 800ae58:	b099      	sub	sp, #100	; 0x64
	wait:		memrx=0;
 800ae5a:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 800ae5c:	270f      	movs	r7, #15
	wait:		memrx=0;
 800ae5e:	4ce1      	ldr	r4, [pc, #900]	; (800b1e4 <USER_Tilt_Calculation+0x390>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 800ae60:	4de1      	ldr	r5, [pc, #900]	; (800b1e8 <USER_Tilt_Calculation+0x394>)
	wait:		memrx=0;
 800ae62:	7023      	strb	r3, [r4, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,STATUS_REG,I2C_MEMADD_SIZE_8BIT,&status_reg,1)!=HAL_OK)
 800ae64:	ab06      	add	r3, sp, #24
 800ae66:	18ff      	adds	r7, r7, r3
 800ae68:	9601      	str	r6, [sp, #4]
 800ae6a:	9700      	str	r7, [sp, #0]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	221e      	movs	r2, #30
 800ae70:	21d6      	movs	r1, #214	; 0xd6
 800ae72:	0028      	movs	r0, r5
 800ae74:	f7f8 fc1c 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d001      	beq.n	800ae80 <USER_Tilt_Calculation+0x2c>
	{
		Error_Handler();
 800ae7c:	f7fd fd54 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800ae80:	7823      	ldrb	r3, [r4, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d0fc      	beq.n	800ae80 <USER_Tilt_Calculation+0x2c>



	if((status_reg&1) ==1)
 800ae86:	783b      	ldrb	r3, [r7, #0]
 800ae88:	4233      	tst	r3, r6
 800ae8a:	d0e6      	beq.n	800ae5a <USER_Tilt_Calculation+0x6>
	{

		memrx=0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	7023      	strb	r3, [r4, #0]
		if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,OUTX_L_XL,I2C_MEMADD_SIZE_8BIT,array_out_xl,6)!=HAL_OK)
 800ae90:	3306      	adds	r3, #6
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	ab0a      	add	r3, sp, #40	; 0x28
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2228      	movs	r2, #40	; 0x28
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	21d6      	movs	r1, #214	; 0xd6
 800ae9e:	0028      	movs	r0, r5
 800aea0:	f7f8 fc06 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d001      	beq.n	800aeac <USER_Tilt_Calculation+0x58>
		{
			Error_Handler();
 800aea8:	f7fd fd3e 	bl	8008928 <Error_Handler>
		}

		while(memrx==0);
 800aeac:	7823      	ldrb	r3, [r4, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0fc      	beq.n	800aeac <USER_Tilt_Calculation+0x58>
	{
		goto wait;
	}


	switch(gravity_axes)
 800aeb2:	4bce      	ldr	r3, [pc, #824]	; (800b1ec <USER_Tilt_Calculation+0x398>)
 800aeb4:	7818      	ldrb	r0, [r3, #0]
 800aeb6:	2803      	cmp	r0, #3
 800aeb8:	d900      	bls.n	800aebc <USER_Tilt_Calculation+0x68>
 800aeba:	e2fe      	b.n	800b4ba <USER_Tilt_Calculation+0x666>
		current_tilt_angle[Z]=radToDeg(atan2(array_out_xl[Z],sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2))));
		break;

	case Z:
	case AXES_NOT_SET:
		current_tilt_angle[Z]=radToDeg(acos(array_out_xl[Z]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800aebc:	ab06      	add	r3, sp, #24
	switch(gravity_axes)
 800aebe:	f7f5 f93d 	bl	800013c <__gnu_thumb1_case_uhi>
 800aec2:	0004      	.short	0x0004
 800aec4:	023b01b9 	.word	0x023b01b9
 800aec8:	023b      	.short	0x023b
		current_tilt_angle[X]=radToDeg(acos(array_out_xl[X]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800aeca:	2010      	movs	r0, #16
 800aecc:	5e18      	ldrsh	r0, [r3, r0]
 800aece:	f7f7 fdd1 	bl	8002a74 <__aeabi_i2d>
 800aed2:	ab06      	add	r3, sp, #24
 800aed4:	0006      	movs	r6, r0
 800aed6:	2012      	movs	r0, #18
 800aed8:	5e18      	ldrsh	r0, [r3, r0]
 800aeda:	000f      	movs	r7, r1
 800aedc:	f7f7 fdca 	bl	8002a74 <__aeabi_i2d>
 800aee0:	ab06      	add	r3, sp, #24
 800aee2:	0004      	movs	r4, r0
 800aee4:	2014      	movs	r0, #20
 800aee6:	5e18      	ldrsh	r0, [r3, r0]
 800aee8:	000d      	movs	r5, r1
 800aeea:	f7f7 fdc3 	bl	8002a74 <__aeabi_i2d>
 800aeee:	0032      	movs	r2, r6
 800aef0:	9002      	str	r0, [sp, #8]
 800aef2:	9103      	str	r1, [sp, #12]
 800aef4:	003b      	movs	r3, r7
 800aef6:	0030      	movs	r0, r6
 800aef8:	0039      	movs	r1, r7
 800aefa:	f7f6 ffd1 	bl	8001ea0 <__aeabi_dmul>
 800aefe:	0022      	movs	r2, r4
 800af00:	9004      	str	r0, [sp, #16]
 800af02:	9105      	str	r1, [sp, #20]
 800af04:	002b      	movs	r3, r5
 800af06:	0020      	movs	r0, r4
 800af08:	0029      	movs	r1, r5
 800af0a:	f7f6 ffc9 	bl	8001ea0 <__aeabi_dmul>
 800af0e:	0002      	movs	r2, r0
 800af10:	000b      	movs	r3, r1
 800af12:	9804      	ldr	r0, [sp, #16]
 800af14:	9905      	ldr	r1, [sp, #20]
 800af16:	f7f6 f87f 	bl	8001018 <__aeabi_dadd>
 800af1a:	9a02      	ldr	r2, [sp, #8]
 800af1c:	9b03      	ldr	r3, [sp, #12]
 800af1e:	0004      	movs	r4, r0
 800af20:	000d      	movs	r5, r1
 800af22:	0010      	movs	r0, r2
 800af24:	0019      	movs	r1, r3
 800af26:	f7f6 ffbb 	bl	8001ea0 <__aeabi_dmul>
 800af2a:	0002      	movs	r2, r0
 800af2c:	000b      	movs	r3, r1
 800af2e:	0020      	movs	r0, r4
 800af30:	0029      	movs	r1, r5
 800af32:	f7f6 f871 	bl	8001018 <__aeabi_dadd>
 800af36:	f001 fca5 	bl	800c884 <sqrt>
 800af3a:	0002      	movs	r2, r0
 800af3c:	000b      	movs	r3, r1
 800af3e:	0030      	movs	r0, r6
 800af40:	0039      	movs	r1, r7
 800af42:	f7f6 fb79 	bl	8001638 <__aeabi_ddiv>
 800af46:	f001 fc45 	bl	800c7d4 <acos>
 800af4a:	2200      	movs	r2, #0
 800af4c:	4ba8      	ldr	r3, [pc, #672]	; (800b1f0 <USER_Tilt_Calculation+0x39c>)
 800af4e:	f7f6 ffa7 	bl	8001ea0 <__aeabi_dmul>
 800af52:	4aa8      	ldr	r2, [pc, #672]	; (800b1f4 <USER_Tilt_Calculation+0x3a0>)
 800af54:	4ba8      	ldr	r3, [pc, #672]	; (800b1f8 <USER_Tilt_Calculation+0x3a4>)
 800af56:	f7f6 fb6f 	bl	8001638 <__aeabi_ddiv>
 800af5a:	9002      	str	r0, [sp, #8]
 800af5c:	9103      	str	r1, [sp, #12]
		current_tilt_angle[Y]=radToDeg(atan2(array_out_xl[Y],sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Z],2))));
 800af5e:	ab06      	add	r3, sp, #24
 800af60:	2012      	movs	r0, #18
 800af62:	5e18      	ldrsh	r0, [r3, r0]
 800af64:	f7f7 fd86 	bl	8002a74 <__aeabi_i2d>
 800af68:	ab06      	add	r3, sp, #24
 800af6a:	9004      	str	r0, [sp, #16]
 800af6c:	9105      	str	r1, [sp, #20]
 800af6e:	2010      	movs	r0, #16
 800af70:	5e18      	ldrsh	r0, [r3, r0]
 800af72:	f7f7 fd7f 	bl	8002a74 <__aeabi_i2d>
 800af76:	ab06      	add	r3, sp, #24
 800af78:	0004      	movs	r4, r0
 800af7a:	2014      	movs	r0, #20
 800af7c:	5e18      	ldrsh	r0, [r3, r0]
 800af7e:	000d      	movs	r5, r1
 800af80:	f7f7 fd78 	bl	8002a74 <__aeabi_i2d>
 800af84:	0022      	movs	r2, r4
 800af86:	0006      	movs	r6, r0
 800af88:	000f      	movs	r7, r1
 800af8a:	002b      	movs	r3, r5
 800af8c:	0020      	movs	r0, r4
 800af8e:	0029      	movs	r1, r5
 800af90:	f7f6 ff86 	bl	8001ea0 <__aeabi_dmul>
 800af94:	0032      	movs	r2, r6
 800af96:	0004      	movs	r4, r0
 800af98:	000d      	movs	r5, r1
 800af9a:	003b      	movs	r3, r7
 800af9c:	0030      	movs	r0, r6
 800af9e:	0039      	movs	r1, r7
 800afa0:	f7f6 ff7e 	bl	8001ea0 <__aeabi_dmul>
 800afa4:	0002      	movs	r2, r0
 800afa6:	000b      	movs	r3, r1
 800afa8:	0020      	movs	r0, r4
 800afaa:	0029      	movs	r1, r5
 800afac:	f7f6 f834 	bl	8001018 <__aeabi_dadd>
 800afb0:	f001 fc68 	bl	800c884 <sqrt>
 800afb4:	0002      	movs	r2, r0
 800afb6:	000b      	movs	r3, r1
 800afb8:	9804      	ldr	r0, [sp, #16]
 800afba:	9905      	ldr	r1, [sp, #20]
 800afbc:	f001 fc5e 	bl	800c87c <atan2>
 800afc0:	2200      	movs	r2, #0
 800afc2:	4b8b      	ldr	r3, [pc, #556]	; (800b1f0 <USER_Tilt_Calculation+0x39c>)
 800afc4:	f7f6 ff6c 	bl	8001ea0 <__aeabi_dmul>
 800afc8:	4a8a      	ldr	r2, [pc, #552]	; (800b1f4 <USER_Tilt_Calculation+0x3a0>)
 800afca:	4b8b      	ldr	r3, [pc, #556]	; (800b1f8 <USER_Tilt_Calculation+0x3a4>)
 800afcc:	f7f6 fb34 	bl	8001638 <__aeabi_ddiv>
 800afd0:	9004      	str	r0, [sp, #16]
 800afd2:	9105      	str	r1, [sp, #20]
		current_tilt_angle[Z]=radToDeg(atan2(array_out_xl[Z],sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2))));
 800afd4:	ab06      	add	r3, sp, #24
 800afd6:	2014      	movs	r0, #20
 800afd8:	5e18      	ldrsh	r0, [r3, r0]
 800afda:	f7f7 fd4b 	bl	8002a74 <__aeabi_i2d>
 800afde:	ab06      	add	r3, sp, #24
 800afe0:	9006      	str	r0, [sp, #24]
 800afe2:	9107      	str	r1, [sp, #28]
 800afe4:	2010      	movs	r0, #16
 800afe6:	5e18      	ldrsh	r0, [r3, r0]
 800afe8:	f7f7 fd44 	bl	8002a74 <__aeabi_i2d>
 800afec:	ab06      	add	r3, sp, #24
 800afee:	0004      	movs	r4, r0
 800aff0:	2012      	movs	r0, #18
 800aff2:	5e18      	ldrsh	r0, [r3, r0]
 800aff4:	000d      	movs	r5, r1
 800aff6:	f7f7 fd3d 	bl	8002a74 <__aeabi_i2d>
 800affa:	0002      	movs	r2, r0
 800affc:	000b      	movs	r3, r1
 800affe:	f7f6 ff4f 	bl	8001ea0 <__aeabi_dmul>
 800b002:	0022      	movs	r2, r4
 800b004:	0006      	movs	r6, r0
 800b006:	000f      	movs	r7, r1
 800b008:	002b      	movs	r3, r5
 800b00a:	0020      	movs	r0, r4
 800b00c:	0029      	movs	r1, r5
 800b00e:	f7f6 ff47 	bl	8001ea0 <__aeabi_dmul>
 800b012:	0002      	movs	r2, r0
 800b014:	000b      	movs	r3, r1
 800b016:	0030      	movs	r0, r6
 800b018:	0039      	movs	r1, r7
 800b01a:	f7f5 fffd 	bl	8001018 <__aeabi_dadd>
 800b01e:	f001 fc31 	bl	800c884 <sqrt>
 800b022:	0002      	movs	r2, r0
 800b024:	000b      	movs	r3, r1
 800b026:	9806      	ldr	r0, [sp, #24]
 800b028:	9907      	ldr	r1, [sp, #28]
 800b02a:	f001 fc27 	bl	800c87c <atan2>
 800b02e:	2200      	movs	r2, #0
 800b030:	4b6f      	ldr	r3, [pc, #444]	; (800b1f0 <USER_Tilt_Calculation+0x39c>)
 800b032:	f7f6 ff35 	bl	8001ea0 <__aeabi_dmul>
 800b036:	4a6f      	ldr	r2, [pc, #444]	; (800b1f4 <USER_Tilt_Calculation+0x3a0>)
 800b038:	4b6f      	ldr	r3, [pc, #444]	; (800b1f8 <USER_Tilt_Calculation+0x3a4>)
 800b03a:	f7f6 fafd 	bl	8001638 <__aeabi_ddiv>
 800b03e:	9006      	str	r0, [sp, #24]
 800b040:	9107      	str	r1, [sp, #28]


	}


	tilt_angle[X]=current_tilt_angle[X]-referance_tilt_angle[X];
 800b042:	9802      	ldr	r0, [sp, #8]
 800b044:	9903      	ldr	r1, [sp, #12]
 800b046:	4c6d      	ldr	r4, [pc, #436]	; (800b1fc <USER_Tilt_Calculation+0x3a8>)
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	6863      	ldr	r3, [r4, #4]
 800b04c:	f7f7 f9a8 	bl	80023a0 <__aeabi_dsub>
	tilt_angle[Y]=current_tilt_angle[Y]-referance_tilt_angle[Y];
 800b050:	68a2      	ldr	r2, [r4, #8]
 800b052:	68e3      	ldr	r3, [r4, #12]
	tilt_angle[X]=current_tilt_angle[X]-referance_tilt_angle[X];
 800b054:	0006      	movs	r6, r0
 800b056:	000f      	movs	r7, r1
	tilt_angle[Y]=current_tilt_angle[Y]-referance_tilt_angle[Y];
 800b058:	9804      	ldr	r0, [sp, #16]
 800b05a:	9905      	ldr	r1, [sp, #20]
	tilt_angle[X]=current_tilt_angle[X]-referance_tilt_angle[X];
 800b05c:	960c      	str	r6, [sp, #48]	; 0x30
 800b05e:	970d      	str	r7, [sp, #52]	; 0x34
	tilt_angle[Y]=current_tilt_angle[Y]-referance_tilt_angle[Y];
 800b060:	f7f7 f99e 	bl	80023a0 <__aeabi_dsub>
	tilt_angle[Z]=current_tilt_angle[Z]-referance_tilt_angle[Z];
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	6963      	ldr	r3, [r4, #20]
	tilt_angle[Y]=current_tilt_angle[Y]-referance_tilt_angle[Y];
 800b068:	900e      	str	r0, [sp, #56]	; 0x38
 800b06a:	910f      	str	r1, [sp, #60]	; 0x3c
	tilt_angle[Z]=current_tilt_angle[Z]-referance_tilt_angle[Z];
 800b06c:	9806      	ldr	r0, [sp, #24]
 800b06e:	9907      	ldr	r1, [sp, #28]
 800b070:	f7f7 f996 	bl	80023a0 <__aeabi_dsub>

	if(current_referance_tilt_function 	==	GRAVITY_AXES_PLUS_FORWARD_AXES)
 800b074:	4b62      	ldr	r3, [pc, #392]	; (800b200 <USER_Tilt_Calculation+0x3ac>)
	tilt_angle[Z]=current_tilt_angle[Z]-referance_tilt_angle[Z];
 800b076:	9010      	str	r0, [sp, #64]	; 0x40
 800b078:	9111      	str	r1, [sp, #68]	; 0x44
	if(current_referance_tilt_function 	==	GRAVITY_AXES_PLUS_FORWARD_AXES)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d000      	beq.n	800b082 <USER_Tilt_Calculation+0x22e>
 800b080:	e23d      	b.n	800b4fe <USER_Tilt_Calculation+0x6aa>
	{
		tilt_angle_Optimized[gravity_axes]	=	tilt_angle[gravity_axes];
		tilt_angle_Optimized[forward_axes]	=	sign_of_acceleration*tilt_angle[forward_axes];
 800b082:	2000      	movs	r0, #0
		tilt_angle_Optimized[gravity_axes]	=	tilt_angle[gravity_axes];
 800b084:	4b59      	ldr	r3, [pc, #356]	; (800b1ec <USER_Tilt_Calculation+0x398>)
 800b086:	a90c      	add	r1, sp, #48	; 0x30
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	aa12      	add	r2, sp, #72	; 0x48
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	18d2      	adds	r2, r2, r3
 800b090:	18cb      	adds	r3, r1, r3
 800b092:	685c      	ldr	r4, [r3, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	6054      	str	r4, [r2, #4]
		tilt_angle_Optimized[forward_axes]	=	sign_of_acceleration*tilt_angle[forward_axes];
 800b09a:	4b5a      	ldr	r3, [pc, #360]	; (800b204 <USER_Tilt_Calculation+0x3b0>)
 800b09c:	781c      	ldrb	r4, [r3, #0]
 800b09e:	ab12      	add	r3, sp, #72	; 0x48
 800b0a0:	00e4      	lsls	r4, r4, #3
 800b0a2:	191d      	adds	r5, r3, r4
 800b0a4:	4b58      	ldr	r3, [pc, #352]	; (800b208 <USER_Tilt_Calculation+0x3b4>)
 800b0a6:	5618      	ldrsb	r0, [r3, r0]
 800b0a8:	f7f7 fce4 	bl	8002a74 <__aeabi_i2d>
 800b0ac:	ab0c      	add	r3, sp, #48	; 0x30
 800b0ae:	191c      	adds	r4, r3, r4
 800b0b0:	6822      	ldr	r2, [r4, #0]
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	f7f6 fef4 	bl	8001ea0 <__aeabi_dmul>
 800b0b8:	6028      	str	r0, [r5, #0]
 800b0ba:	6069      	str	r1, [r5, #4]
		tilt_angle_Optimized[side_axes]		=	sign_of_side_axes*tilt_angle[side_axes];
 800b0bc:	2000      	movs	r0, #0
 800b0be:	4b53      	ldr	r3, [pc, #332]	; (800b20c <USER_Tilt_Calculation+0x3b8>)
 800b0c0:	781c      	ldrb	r4, [r3, #0]
 800b0c2:	ab12      	add	r3, sp, #72	; 0x48
 800b0c4:	00e4      	lsls	r4, r4, #3
 800b0c6:	191d      	adds	r5, r3, r4
 800b0c8:	4b51      	ldr	r3, [pc, #324]	; (800b210 <USER_Tilt_Calculation+0x3bc>)
 800b0ca:	5618      	ldrsb	r0, [r3, r0]
 800b0cc:	f7f7 fcd2 	bl	8002a74 <__aeabi_i2d>
 800b0d0:	ab0c      	add	r3, sp, #48	; 0x30
 800b0d2:	191c      	adds	r4, r3, r4
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	6863      	ldr	r3, [r4, #4]
 800b0d8:	f7f6 fee2 	bl	8001ea0 <__aeabi_dmul>
 800b0dc:	6028      	str	r0, [r5, #0]
 800b0de:	6069      	str	r1, [r5, #4]
		tilt_angle_Optimized[forward_axes]	=	0;
		tilt_angle_Optimized[side_axes]		=	0;

	}

	if(abs((int16_t)tilt_angle[X]) > tilt_threshold || abs((int16_t)tilt_angle[Y]) > tilt_threshold || abs((int16_t)tilt_angle[Z]) > tilt_threshold)
 800b0e0:	0030      	movs	r0, r6
 800b0e2:	0039      	movs	r1, r7
 800b0e4:	f7f7 fc92 	bl	8002a0c <__aeabi_d2iz>
 800b0e8:	b203      	sxth	r3, r0
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	4b49      	ldr	r3, [pc, #292]	; (800b214 <USER_Tilt_Calculation+0x3c0>)
 800b0ee:	4d4a      	ldr	r5, [pc, #296]	; (800b218 <USER_Tilt_Calculation+0x3c4>)
 800b0f0:	781c      	ldrb	r4, [r3, #0]
 800b0f2:	9b02      	ldr	r3, [sp, #8]
 800b0f4:	17da      	asrs	r2, r3, #31
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	4053      	eors	r3, r2
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	dc14      	bgt.n	800b128 <USER_Tilt_Calculation+0x2d4>
 800b0fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b100:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b102:	f7f7 fc83 	bl	8002a0c <__aeabi_d2iz>
 800b106:	b200      	sxth	r0, r0
 800b108:	17c3      	asrs	r3, r0, #31
 800b10a:	18c0      	adds	r0, r0, r3
 800b10c:	4058      	eors	r0, r3
 800b10e:	4284      	cmp	r4, r0
 800b110:	db0a      	blt.n	800b128 <USER_Tilt_Calculation+0x2d4>
 800b112:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b114:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b116:	f7f7 fc79 	bl	8002a0c <__aeabi_d2iz>
 800b11a:	b200      	sxth	r0, r0
 800b11c:	17c3      	asrs	r3, r0, #31
 800b11e:	18c0      	adds	r0, r0, r3
 800b120:	4058      	eors	r0, r3
	{
		tilt_i++;
	}
	else
	{
		tilt_i=0;
 800b122:	2300      	movs	r3, #0
	if(abs((int16_t)tilt_angle[X]) > tilt_threshold || abs((int16_t)tilt_angle[Y]) > tilt_threshold || abs((int16_t)tilt_angle[Z]) > tilt_threshold)
 800b124:	4284      	cmp	r4, r0
 800b126:	da01      	bge.n	800b12c <USER_Tilt_Calculation+0x2d8>
		tilt_i++;
 800b128:	782b      	ldrb	r3, [r5, #0]
 800b12a:	3301      	adds	r3, #1
		tilt_i=0;
 800b12c:	702b      	strb	r3, [r5, #0]
	}

	if(tilt_i	>	TILT_ITRATION_TRESHOLD)
 800b12e:	782b      	ldrb	r3, [r5, #0]
	enum Tilt tilt_status	=	NO_TILT;
 800b130:	2000      	movs	r0, #0
	if(tilt_i	>	TILT_ITRATION_TRESHOLD)
 800b132:	2b05      	cmp	r3, #5
 800b134:	d800      	bhi.n	800b138 <USER_Tilt_Calculation+0x2e4>
 800b136:	e244      	b.n	800b5c2 <USER_Tilt_Calculation+0x76e>
	{
		tilt_status	=	TILT;

		sprintf(out_string,"\r\n TILT 		Tilt > %d degree \r\n",tilt_threshold);
 800b138:	4e38      	ldr	r6, [pc, #224]	; (800b21c <USER_Tilt_Calculation+0x3c8>)
 800b13a:	0022      	movs	r2, r4
 800b13c:	4938      	ldr	r1, [pc, #224]	; (800b220 <USER_Tilt_Calculation+0x3cc>)
 800b13e:	0030      	movs	r0, r6
 800b140:	f000 fde2 	bl	800bd08 <siprintf>


		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b144:	2201      	movs	r2, #1
 800b146:	2102      	movs	r1, #2
 800b148:	4836      	ldr	r0, [pc, #216]	; (800b224 <USER_Tilt_Calculation+0x3d0>)
 800b14a:	f7f8 f82d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800b14e:	2301      	movs	r3, #1
 800b150:	4c35      	ldr	r4, [pc, #212]	; (800b228 <USER_Tilt_Calculation+0x3d4>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b152:	0030      	movs	r0, r6
		uarttx_req=1;
 800b154:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b156:	f7f4 ffd5 	bl	8000104 <strlen>
 800b15a:	4f34      	ldr	r7, [pc, #208]	; (800b22c <USER_Tilt_Calculation+0x3d8>)
 800b15c:	b282      	uxth	r2, r0
 800b15e:	0031      	movs	r1, r6
 800b160:	0038      	movs	r0, r7
 800b162:	f7f9 fdad 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b166:	2800      	cmp	r0, #0
 800b168:	d001      	beq.n	800b16e <USER_Tilt_Calculation+0x31a>
		{
			Error_Handler();
 800b16a:	f7fd fbdd 	bl	8008928 <Error_Handler>
		}
		while(uarttx_req==1);
 800b16e:	7823      	ldrb	r3, [r4, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d0fc      	beq.n	800b16e <USER_Tilt_Calculation+0x31a>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800b174:	2200      	movs	r2, #0
 800b176:	2102      	movs	r1, #2
 800b178:	482a      	ldr	r0, [pc, #168]	; (800b224 <USER_Tilt_Calculation+0x3d0>)
 800b17a:	f7f8 f815 	bl	80031a8 <HAL_GPIO_WritePin>



		switch(current_referance_tilt_function)
 800b17e:	4b20      	ldr	r3, [pc, #128]	; (800b200 <USER_Tilt_Calculation+0x3ac>)
 800b180:	781d      	ldrb	r5, [r3, #0]
 800b182:	2d02      	cmp	r5, #2
 800b184:	d100      	bne.n	800b188 <USER_Tilt_Calculation+0x334>
 800b186:	e1d0      	b.n	800b52a <USER_Tilt_Calculation+0x6d6>
 800b188:	2d03      	cmp	r5, #3
 800b18a:	d100      	bne.n	800b18e <USER_Tilt_Calculation+0x33a>
 800b18c:	e21b      	b.n	800b5c6 <USER_Tilt_Calculation+0x772>
 800b18e:	2d01      	cmp	r5, #1
 800b190:	d000      	beq.n	800b194 <USER_Tilt_Calculation+0x340>
 800b192:	e273      	b.n	800b67c <USER_Tilt_Calculation+0x828>
			while(uarttx_req==1);
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
			break;

		case NO_GRAVITY_AXES:
			sprintf(out_string,"\r\nTilt Angles X = %d , Y = %d , Z = %d\r\n",(int16_t)tilt_angle[X],(int16_t)tilt_angle[Y],(int16_t)tilt_angle[Z]);
 800b194:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b196:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b198:	f7f7 fc38 	bl	8002a0c <__aeabi_d2iz>
 800b19c:	b207      	sxth	r7, r0
 800b19e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1a2:	f7f7 fc33 	bl	8002a0c <__aeabi_d2iz>
 800b1a6:	b200      	sxth	r0, r0
 800b1a8:	003b      	movs	r3, r7
 800b1aa:	9000      	str	r0, [sp, #0]
 800b1ac:	9a02      	ldr	r2, [sp, #8]
 800b1ae:	4920      	ldr	r1, [pc, #128]	; (800b230 <USER_Tilt_Calculation+0x3dc>)
 800b1b0:	0030      	movs	r0, r6
 800b1b2:	f000 fda9 	bl	800bd08 <siprintf>


			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b1b6:	002a      	movs	r2, r5
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	481a      	ldr	r0, [pc, #104]	; (800b224 <USER_Tilt_Calculation+0x3d0>)
 800b1bc:	f7f7 fff4 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b1c0:	0030      	movs	r0, r6
			uarttx_req=1;
 800b1c2:	7025      	strb	r5, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b1c4:	f7f4 ff9e 	bl	8000104 <strlen>
 800b1c8:	0031      	movs	r1, r6
 800b1ca:	b282      	uxth	r2, r0
 800b1cc:	4817      	ldr	r0, [pc, #92]	; (800b22c <USER_Tilt_Calculation+0x3d8>)
 800b1ce:	f7f9 fd77 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d001      	beq.n	800b1da <USER_Tilt_Calculation+0x386>
			{
				Error_Handler();
 800b1d6:	f7fd fba7 	bl	8008928 <Error_Handler>
			}
			while(uarttx_req==1);
 800b1da:	4a13      	ldr	r2, [pc, #76]	; (800b228 <USER_Tilt_Calculation+0x3d4>)
 800b1dc:	7813      	ldrb	r3, [r2, #0]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d0fc      	beq.n	800b1dc <USER_Tilt_Calculation+0x388>
 800b1e2:	e1e5      	b.n	800b5b0 <USER_Tilt_Calculation+0x75c>
 800b1e4:	20000269 	.word	0x20000269
 800b1e8:	200003a0 	.word	0x200003a0
 800b1ec:	20000009 	.word	0x20000009
 800b1f0:	40668000 	.word	0x40668000
 800b1f4:	54442d18 	.word	0x54442d18
 800b1f8:	400921fb 	.word	0x400921fb
 800b1fc:	20000338 	.word	0x20000338
 800b200:	20000233 	.word	0x20000233
 800b204:	20000008 	.word	0x20000008
 800b208:	20000015 	.word	0x20000015
 800b20c:	20000014 	.word	0x20000014
 800b210:	20000017 	.word	0x20000017
 800b214:	2000001a 	.word	0x2000001a
 800b218:	2000038c 	.word	0x2000038c
 800b21c:	2000026b 	.word	0x2000026b
 800b220:	0800f806 	.word	0x0800f806
 800b224:	48000400 	.word	0x48000400
 800b228:	20000378 	.word	0x20000378
 800b22c:	20000510 	.word	0x20000510
 800b230:	0800f8d3 	.word	0x0800f8d3
		current_tilt_angle[Y]=radToDeg(acos(array_out_xl[Y]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b234:	2010      	movs	r0, #16
 800b236:	5e18      	ldrsh	r0, [r3, r0]
 800b238:	f7f7 fc1c 	bl	8002a74 <__aeabi_i2d>
 800b23c:	ab06      	add	r3, sp, #24
 800b23e:	0004      	movs	r4, r0
 800b240:	2012      	movs	r0, #18
 800b242:	5e18      	ldrsh	r0, [r3, r0]
 800b244:	000d      	movs	r5, r1
 800b246:	f7f7 fc15 	bl	8002a74 <__aeabi_i2d>
 800b24a:	ab06      	add	r3, sp, #24
 800b24c:	0006      	movs	r6, r0
 800b24e:	2014      	movs	r0, #20
 800b250:	5e18      	ldrsh	r0, [r3, r0]
 800b252:	000f      	movs	r7, r1
 800b254:	f7f7 fc0e 	bl	8002a74 <__aeabi_i2d>
 800b258:	0022      	movs	r2, r4
 800b25a:	9002      	str	r0, [sp, #8]
 800b25c:	9103      	str	r1, [sp, #12]
 800b25e:	002b      	movs	r3, r5
 800b260:	0020      	movs	r0, r4
 800b262:	0029      	movs	r1, r5
 800b264:	f7f6 fe1c 	bl	8001ea0 <__aeabi_dmul>
 800b268:	0032      	movs	r2, r6
 800b26a:	0004      	movs	r4, r0
 800b26c:	000d      	movs	r5, r1
 800b26e:	003b      	movs	r3, r7
 800b270:	0030      	movs	r0, r6
 800b272:	0039      	movs	r1, r7
 800b274:	f7f6 fe14 	bl	8001ea0 <__aeabi_dmul>
 800b278:	0002      	movs	r2, r0
 800b27a:	000b      	movs	r3, r1
 800b27c:	0020      	movs	r0, r4
 800b27e:	0029      	movs	r1, r5
 800b280:	f7f5 feca 	bl	8001018 <__aeabi_dadd>
 800b284:	9a02      	ldr	r2, [sp, #8]
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	0004      	movs	r4, r0
 800b28a:	000d      	movs	r5, r1
 800b28c:	0010      	movs	r0, r2
 800b28e:	0019      	movs	r1, r3
 800b290:	f7f6 fe06 	bl	8001ea0 <__aeabi_dmul>
 800b294:	0002      	movs	r2, r0
 800b296:	000b      	movs	r3, r1
 800b298:	0020      	movs	r0, r4
 800b29a:	0029      	movs	r1, r5
 800b29c:	f7f5 febc 	bl	8001018 <__aeabi_dadd>
 800b2a0:	f001 faf0 	bl	800c884 <sqrt>
 800b2a4:	0002      	movs	r2, r0
 800b2a6:	000b      	movs	r3, r1
 800b2a8:	0030      	movs	r0, r6
 800b2aa:	0039      	movs	r1, r7
 800b2ac:	f7f6 f9c4 	bl	8001638 <__aeabi_ddiv>
 800b2b0:	f001 fa90 	bl	800c7d4 <acos>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4be3      	ldr	r3, [pc, #908]	; (800b644 <USER_Tilt_Calculation+0x7f0>)
 800b2b8:	f7f6 fdf2 	bl	8001ea0 <__aeabi_dmul>
 800b2bc:	4ae2      	ldr	r2, [pc, #904]	; (800b648 <USER_Tilt_Calculation+0x7f4>)
 800b2be:	4be3      	ldr	r3, [pc, #908]	; (800b64c <USER_Tilt_Calculation+0x7f8>)
 800b2c0:	f7f6 f9ba 	bl	8001638 <__aeabi_ddiv>
		current_tilt_angle[X]=radToDeg(atan2(array_out_xl[X],sqrt(pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b2c4:	ab06      	add	r3, sp, #24
		current_tilt_angle[Y]=radToDeg(acos(array_out_xl[Y]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b2c6:	9004      	str	r0, [sp, #16]
 800b2c8:	9105      	str	r1, [sp, #20]
		current_tilt_angle[X]=radToDeg(atan2(array_out_xl[X],sqrt(pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b2ca:	2010      	movs	r0, #16
 800b2cc:	5e18      	ldrsh	r0, [r3, r0]
 800b2ce:	f7f7 fbd1 	bl	8002a74 <__aeabi_i2d>
 800b2d2:	9002      	str	r0, [sp, #8]
 800b2d4:	9103      	str	r1, [sp, #12]
 800b2d6:	ab06      	add	r3, sp, #24
 800b2d8:	2012      	movs	r0, #18
 800b2da:	5e18      	ldrsh	r0, [r3, r0]
 800b2dc:	f7f7 fbca 	bl	8002a74 <__aeabi_i2d>
 800b2e0:	ab06      	add	r3, sp, #24
 800b2e2:	0006      	movs	r6, r0
 800b2e4:	2014      	movs	r0, #20
 800b2e6:	5e18      	ldrsh	r0, [r3, r0]
 800b2e8:	000f      	movs	r7, r1
 800b2ea:	f7f7 fbc3 	bl	8002a74 <__aeabi_i2d>
 800b2ee:	0002      	movs	r2, r0
 800b2f0:	000b      	movs	r3, r1
 800b2f2:	f7f6 fdd5 	bl	8001ea0 <__aeabi_dmul>
 800b2f6:	0032      	movs	r2, r6
 800b2f8:	0004      	movs	r4, r0
 800b2fa:	000d      	movs	r5, r1
 800b2fc:	003b      	movs	r3, r7
 800b2fe:	0030      	movs	r0, r6
 800b300:	0039      	movs	r1, r7
 800b302:	f7f6 fdcd 	bl	8001ea0 <__aeabi_dmul>
 800b306:	0002      	movs	r2, r0
 800b308:	000b      	movs	r3, r1
 800b30a:	0020      	movs	r0, r4
 800b30c:	0029      	movs	r1, r5
 800b30e:	f7f5 fe83 	bl	8001018 <__aeabi_dadd>
 800b312:	f001 fab7 	bl	800c884 <sqrt>
 800b316:	0002      	movs	r2, r0
 800b318:	000b      	movs	r3, r1
 800b31a:	9802      	ldr	r0, [sp, #8]
 800b31c:	9903      	ldr	r1, [sp, #12]
 800b31e:	f001 faad 	bl	800c87c <atan2>
 800b322:	2200      	movs	r2, #0
 800b324:	4bc7      	ldr	r3, [pc, #796]	; (800b644 <USER_Tilt_Calculation+0x7f0>)
 800b326:	f7f6 fdbb 	bl	8001ea0 <__aeabi_dmul>
 800b32a:	4ac7      	ldr	r2, [pc, #796]	; (800b648 <USER_Tilt_Calculation+0x7f4>)
 800b32c:	4bc7      	ldr	r3, [pc, #796]	; (800b64c <USER_Tilt_Calculation+0x7f8>)
 800b32e:	f7f6 f983 	bl	8001638 <__aeabi_ddiv>
 800b332:	9002      	str	r0, [sp, #8]
 800b334:	9103      	str	r1, [sp, #12]
 800b336:	e64d      	b.n	800afd4 <USER_Tilt_Calculation+0x180>
		current_tilt_angle[Z]=radToDeg(acos(array_out_xl[Z]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b338:	2010      	movs	r0, #16
 800b33a:	5e18      	ldrsh	r0, [r3, r0]
 800b33c:	f7f7 fb9a 	bl	8002a74 <__aeabi_i2d>
 800b340:	ab06      	add	r3, sp, #24
 800b342:	0004      	movs	r4, r0
 800b344:	2012      	movs	r0, #18
 800b346:	5e18      	ldrsh	r0, [r3, r0]
 800b348:	000d      	movs	r5, r1
 800b34a:	f7f7 fb93 	bl	8002a74 <__aeabi_i2d>
 800b34e:	9002      	str	r0, [sp, #8]
 800b350:	9103      	str	r1, [sp, #12]
 800b352:	ab06      	add	r3, sp, #24
 800b354:	2014      	movs	r0, #20
 800b356:	5e18      	ldrsh	r0, [r3, r0]
 800b358:	f7f7 fb8c 	bl	8002a74 <__aeabi_i2d>
 800b35c:	0022      	movs	r2, r4
 800b35e:	0006      	movs	r6, r0
 800b360:	000f      	movs	r7, r1
 800b362:	002b      	movs	r3, r5
 800b364:	0020      	movs	r0, r4
 800b366:	0029      	movs	r1, r5
 800b368:	f7f6 fd9a 	bl	8001ea0 <__aeabi_dmul>
 800b36c:	9a02      	ldr	r2, [sp, #8]
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	0004      	movs	r4, r0
 800b372:	000d      	movs	r5, r1
 800b374:	0010      	movs	r0, r2
 800b376:	0019      	movs	r1, r3
 800b378:	f7f6 fd92 	bl	8001ea0 <__aeabi_dmul>
 800b37c:	0002      	movs	r2, r0
 800b37e:	000b      	movs	r3, r1
 800b380:	0020      	movs	r0, r4
 800b382:	0029      	movs	r1, r5
 800b384:	f7f5 fe48 	bl	8001018 <__aeabi_dadd>
 800b388:	0032      	movs	r2, r6
 800b38a:	0004      	movs	r4, r0
 800b38c:	000d      	movs	r5, r1
 800b38e:	003b      	movs	r3, r7
 800b390:	0030      	movs	r0, r6
 800b392:	0039      	movs	r1, r7
 800b394:	f7f6 fd84 	bl	8001ea0 <__aeabi_dmul>
 800b398:	0002      	movs	r2, r0
 800b39a:	000b      	movs	r3, r1
 800b39c:	0020      	movs	r0, r4
 800b39e:	0029      	movs	r1, r5
 800b3a0:	f7f5 fe3a 	bl	8001018 <__aeabi_dadd>
 800b3a4:	f001 fa6e 	bl	800c884 <sqrt>
 800b3a8:	0002      	movs	r2, r0
 800b3aa:	000b      	movs	r3, r1
 800b3ac:	0030      	movs	r0, r6
 800b3ae:	0039      	movs	r1, r7
 800b3b0:	f7f6 f942 	bl	8001638 <__aeabi_ddiv>
 800b3b4:	f001 fa0e 	bl	800c7d4 <acos>
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4ba2      	ldr	r3, [pc, #648]	; (800b644 <USER_Tilt_Calculation+0x7f0>)
 800b3bc:	f7f6 fd70 	bl	8001ea0 <__aeabi_dmul>
 800b3c0:	4aa1      	ldr	r2, [pc, #644]	; (800b648 <USER_Tilt_Calculation+0x7f4>)
 800b3c2:	4ba2      	ldr	r3, [pc, #648]	; (800b64c <USER_Tilt_Calculation+0x7f8>)
 800b3c4:	f7f6 f938 	bl	8001638 <__aeabi_ddiv>
		current_tilt_angle[X]=radToDeg(atan2(array_out_xl[X],sqrt(pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b3c8:	ab06      	add	r3, sp, #24
		current_tilt_angle[Z]=radToDeg(acos(array_out_xl[Z]/sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b3ca:	9006      	str	r0, [sp, #24]
 800b3cc:	9107      	str	r1, [sp, #28]
		current_tilt_angle[X]=radToDeg(atan2(array_out_xl[X],sqrt(pow(array_out_xl[Y],2)+pow(array_out_xl[Z],2))));
 800b3ce:	2010      	movs	r0, #16
 800b3d0:	5e18      	ldrsh	r0, [r3, r0]
 800b3d2:	f7f7 fb4f 	bl	8002a74 <__aeabi_i2d>
 800b3d6:	9002      	str	r0, [sp, #8]
 800b3d8:	9103      	str	r1, [sp, #12]
 800b3da:	ab06      	add	r3, sp, #24
 800b3dc:	2012      	movs	r0, #18
 800b3de:	5e18      	ldrsh	r0, [r3, r0]
 800b3e0:	f7f7 fb48 	bl	8002a74 <__aeabi_i2d>
 800b3e4:	ab06      	add	r3, sp, #24
 800b3e6:	0004      	movs	r4, r0
 800b3e8:	2014      	movs	r0, #20
 800b3ea:	5e18      	ldrsh	r0, [r3, r0]
 800b3ec:	000d      	movs	r5, r1
 800b3ee:	f7f7 fb41 	bl	8002a74 <__aeabi_i2d>
 800b3f2:	0022      	movs	r2, r4
 800b3f4:	0006      	movs	r6, r0
 800b3f6:	000f      	movs	r7, r1
 800b3f8:	002b      	movs	r3, r5
 800b3fa:	0020      	movs	r0, r4
 800b3fc:	0029      	movs	r1, r5
 800b3fe:	f7f6 fd4f 	bl	8001ea0 <__aeabi_dmul>
 800b402:	0032      	movs	r2, r6
 800b404:	0004      	movs	r4, r0
 800b406:	000d      	movs	r5, r1
 800b408:	003b      	movs	r3, r7
 800b40a:	0030      	movs	r0, r6
 800b40c:	0039      	movs	r1, r7
 800b40e:	f7f6 fd47 	bl	8001ea0 <__aeabi_dmul>
 800b412:	0002      	movs	r2, r0
 800b414:	000b      	movs	r3, r1
 800b416:	0020      	movs	r0, r4
 800b418:	0029      	movs	r1, r5
 800b41a:	f7f5 fdfd 	bl	8001018 <__aeabi_dadd>
 800b41e:	f001 fa31 	bl	800c884 <sqrt>
 800b422:	0002      	movs	r2, r0
 800b424:	000b      	movs	r3, r1
 800b426:	9802      	ldr	r0, [sp, #8]
 800b428:	9903      	ldr	r1, [sp, #12]
 800b42a:	f001 fa27 	bl	800c87c <atan2>
 800b42e:	2200      	movs	r2, #0
 800b430:	4b84      	ldr	r3, [pc, #528]	; (800b644 <USER_Tilt_Calculation+0x7f0>)
 800b432:	f7f6 fd35 	bl	8001ea0 <__aeabi_dmul>
 800b436:	4a84      	ldr	r2, [pc, #528]	; (800b648 <USER_Tilt_Calculation+0x7f4>)
 800b438:	4b84      	ldr	r3, [pc, #528]	; (800b64c <USER_Tilt_Calculation+0x7f8>)
 800b43a:	f7f6 f8fd 	bl	8001638 <__aeabi_ddiv>
 800b43e:	9002      	str	r0, [sp, #8]
 800b440:	9103      	str	r1, [sp, #12]
		current_tilt_angle[Y]=radToDeg(atan2(array_out_xl[Y],sqrt(pow(array_out_xl[X],2)+pow(array_out_xl[Z],2))));
 800b442:	ab06      	add	r3, sp, #24
 800b444:	2012      	movs	r0, #18
 800b446:	5e18      	ldrsh	r0, [r3, r0]
 800b448:	f7f7 fb14 	bl	8002a74 <__aeabi_i2d>
 800b44c:	ab06      	add	r3, sp, #24
 800b44e:	9004      	str	r0, [sp, #16]
 800b450:	9105      	str	r1, [sp, #20]
 800b452:	2010      	movs	r0, #16
 800b454:	5e18      	ldrsh	r0, [r3, r0]
 800b456:	f7f7 fb0d 	bl	8002a74 <__aeabi_i2d>
 800b45a:	ab06      	add	r3, sp, #24
 800b45c:	0004      	movs	r4, r0
 800b45e:	2014      	movs	r0, #20
 800b460:	5e18      	ldrsh	r0, [r3, r0]
 800b462:	000d      	movs	r5, r1
 800b464:	f7f7 fb06 	bl	8002a74 <__aeabi_i2d>
 800b468:	0022      	movs	r2, r4
 800b46a:	0006      	movs	r6, r0
 800b46c:	000f      	movs	r7, r1
 800b46e:	002b      	movs	r3, r5
 800b470:	0020      	movs	r0, r4
 800b472:	0029      	movs	r1, r5
 800b474:	f7f6 fd14 	bl	8001ea0 <__aeabi_dmul>
 800b478:	0032      	movs	r2, r6
 800b47a:	0004      	movs	r4, r0
 800b47c:	000d      	movs	r5, r1
 800b47e:	003b      	movs	r3, r7
 800b480:	0030      	movs	r0, r6
 800b482:	0039      	movs	r1, r7
 800b484:	f7f6 fd0c 	bl	8001ea0 <__aeabi_dmul>
 800b488:	0002      	movs	r2, r0
 800b48a:	000b      	movs	r3, r1
 800b48c:	0020      	movs	r0, r4
 800b48e:	0029      	movs	r1, r5
 800b490:	f7f5 fdc2 	bl	8001018 <__aeabi_dadd>
 800b494:	f001 f9f6 	bl	800c884 <sqrt>
 800b498:	0002      	movs	r2, r0
 800b49a:	000b      	movs	r3, r1
 800b49c:	9804      	ldr	r0, [sp, #16]
 800b49e:	9905      	ldr	r1, [sp, #20]
 800b4a0:	f001 f9ec 	bl	800c87c <atan2>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4b67      	ldr	r3, [pc, #412]	; (800b644 <USER_Tilt_Calculation+0x7f0>)
 800b4a8:	f7f6 fcfa 	bl	8001ea0 <__aeabi_dmul>
 800b4ac:	4a66      	ldr	r2, [pc, #408]	; (800b648 <USER_Tilt_Calculation+0x7f4>)
 800b4ae:	4b67      	ldr	r3, [pc, #412]	; (800b64c <USER_Tilt_Calculation+0x7f8>)
 800b4b0:	f7f6 f8c2 	bl	8001638 <__aeabi_ddiv>
 800b4b4:	9004      	str	r0, [sp, #16]
 800b4b6:	9105      	str	r1, [sp, #20]
		break;
 800b4b8:	e5c3      	b.n	800b042 <USER_Tilt_Calculation+0x1ee>
		sprintf(out_string,"\r\nSome Logical Error From USER_Tilt_Calculation()\r\n");
 800b4ba:	4c65      	ldr	r4, [pc, #404]	; (800b650 <USER_Tilt_Calculation+0x7fc>)
 800b4bc:	4965      	ldr	r1, [pc, #404]	; (800b654 <USER_Tilt_Calculation+0x800>)
 800b4be:	0020      	movs	r0, r4
 800b4c0:	f000 fc44 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	2102      	movs	r1, #2
 800b4c8:	4863      	ldr	r0, [pc, #396]	; (800b658 <USER_Tilt_Calculation+0x804>)
 800b4ca:	f7f7 fe6d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	4d62      	ldr	r5, [pc, #392]	; (800b65c <USER_Tilt_Calculation+0x808>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b4d2:	0020      	movs	r0, r4
		uarttx_req=1;
 800b4d4:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b4d6:	f7f4 fe15 	bl	8000104 <strlen>
 800b4da:	0021      	movs	r1, r4
 800b4dc:	b282      	uxth	r2, r0
 800b4de:	4860      	ldr	r0, [pc, #384]	; (800b660 <USER_Tilt_Calculation+0x80c>)
 800b4e0:	f7f9 fbee 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d001      	beq.n	800b4ec <USER_Tilt_Calculation+0x698>
			Error_Handler();
 800b4e8:	f7fd fa1e 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 800b4ec:	782b      	ldrb	r3, [r5, #0]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d0fc      	beq.n	800b4ec <USER_Tilt_Calculation+0x698>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2102      	movs	r1, #2
 800b4f6:	4858      	ldr	r0, [pc, #352]	; (800b658 <USER_Tilt_Calculation+0x804>)
 800b4f8:	f7f7 fe56 	bl	80031a8 <HAL_GPIO_WritePin>
 800b4fc:	e5a1      	b.n	800b042 <USER_Tilt_Calculation+0x1ee>
		tilt_angle_Optimized[gravity_axes]	=	0;
 800b4fe:	2000      	movs	r0, #0
 800b500:	2100      	movs	r1, #0
 800b502:	4b58      	ldr	r3, [pc, #352]	; (800b664 <USER_Tilt_Calculation+0x810>)
 800b504:	aa12      	add	r2, sp, #72	; 0x48
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	00db      	lsls	r3, r3, #3
 800b50a:	18d3      	adds	r3, r2, r3
 800b50c:	6018      	str	r0, [r3, #0]
 800b50e:	6059      	str	r1, [r3, #4]
		tilt_angle_Optimized[forward_axes]	=	0;
 800b510:	4b55      	ldr	r3, [pc, #340]	; (800b668 <USER_Tilt_Calculation+0x814>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	18d3      	adds	r3, r2, r3
 800b518:	6018      	str	r0, [r3, #0]
 800b51a:	6059      	str	r1, [r3, #4]
		tilt_angle_Optimized[side_axes]		=	0;
 800b51c:	4b53      	ldr	r3, [pc, #332]	; (800b66c <USER_Tilt_Calculation+0x818>)
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	18d3      	adds	r3, r2, r3
 800b524:	6018      	str	r0, [r3, #0]
 800b526:	6059      	str	r1, [r3, #4]
 800b528:	e5da      	b.n	800b0e0 <USER_Tilt_Calculation+0x28c>
			sprintf(out_string,"\r\n Tilt Angle of Gravity Angle  = %d , Forward / Side Angle 1 = %d , Forward / Side Angle 2 = %d\r\n",(int16_t)tilt_angle[gravity_axes],(int16_t)tilt_angle[(gravity_axes+1)%3],(int16_t)tilt_angle[(gravity_axes+2)%3]);
 800b52a:	4b4e      	ldr	r3, [pc, #312]	; (800b664 <USER_Tilt_Calculation+0x810>)
 800b52c:	2103      	movs	r1, #3
 800b52e:	781e      	ldrb	r6, [r3, #0]
 800b530:	1c70      	adds	r0, r6, #1
 800b532:	f7f4 ff7d 	bl	8000430 <__aeabi_idivmod>
 800b536:	ab0c      	add	r3, sp, #48	; 0x30
 800b538:	00c9      	lsls	r1, r1, #3
 800b53a:	1859      	adds	r1, r3, r1
 800b53c:	6808      	ldr	r0, [r1, #0]
 800b53e:	6849      	ldr	r1, [r1, #4]
 800b540:	f7f7 fa64 	bl	8002a0c <__aeabi_d2iz>
 800b544:	b203      	sxth	r3, r0
 800b546:	aa0c      	add	r2, sp, #48	; 0x30
 800b548:	9302      	str	r3, [sp, #8]
 800b54a:	00f3      	lsls	r3, r6, #3
 800b54c:	18d3      	adds	r3, r2, r3
 800b54e:	6818      	ldr	r0, [r3, #0]
 800b550:	6859      	ldr	r1, [r3, #4]
 800b552:	f7f7 fa5b 	bl	8002a0c <__aeabi_d2iz>
 800b556:	2103      	movs	r1, #3
 800b558:	b203      	sxth	r3, r0
 800b55a:	1cb0      	adds	r0, r6, #2
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	f7f4 ff67 	bl	8000430 <__aeabi_idivmod>
 800b562:	ab0c      	add	r3, sp, #48	; 0x30
 800b564:	00c9      	lsls	r1, r1, #3
 800b566:	1859      	adds	r1, r3, r1
 800b568:	6808      	ldr	r0, [r1, #0]
 800b56a:	6849      	ldr	r1, [r1, #4]
 800b56c:	f7f7 fa4e 	bl	8002a0c <__aeabi_d2iz>
 800b570:	4f37      	ldr	r7, [pc, #220]	; (800b650 <USER_Tilt_Calculation+0x7fc>)
 800b572:	b200      	sxth	r0, r0
 800b574:	9b02      	ldr	r3, [sp, #8]
 800b576:	9000      	str	r0, [sp, #0]
 800b578:	9a04      	ldr	r2, [sp, #16]
 800b57a:	493d      	ldr	r1, [pc, #244]	; (800b670 <USER_Tilt_Calculation+0x81c>)
 800b57c:	0038      	movs	r0, r7
 800b57e:	f000 fbc3 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b582:	2201      	movs	r2, #1
 800b584:	0029      	movs	r1, r5
 800b586:	4834      	ldr	r0, [pc, #208]	; (800b658 <USER_Tilt_Calculation+0x804>)
 800b588:	f7f7 fe0e 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800b58c:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b58e:	0038      	movs	r0, r7
			uarttx_req=1;
 800b590:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b592:	f7f4 fdb7 	bl	8000104 <strlen>
 800b596:	0039      	movs	r1, r7
 800b598:	b282      	uxth	r2, r0
 800b59a:	4831      	ldr	r0, [pc, #196]	; (800b660 <USER_Tilt_Calculation+0x80c>)
 800b59c:	f7f9 fb90 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d001      	beq.n	800b5a8 <USER_Tilt_Calculation+0x754>
				Error_Handler();
 800b5a4:	f7fd f9c0 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 800b5a8:	4a2c      	ldr	r2, [pc, #176]	; (800b65c <USER_Tilt_Calculation+0x808>)
 800b5aa:	7813      	ldrb	r3, [r2, #0]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d0fc      	beq.n	800b5aa <USER_Tilt_Calculation+0x756>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	4829      	ldr	r0, [pc, #164]	; (800b658 <USER_Tilt_Calculation+0x804>)
 800b5b4:	2102      	movs	r1, #2
 800b5b6:	f7f7 fdf7 	bl	80031a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);


		}

		tilt_i=0;
 800b5ba:	2200      	movs	r2, #0
		tilt_status	=	TILT;
 800b5bc:	2001      	movs	r0, #1
		tilt_i=0;
 800b5be:	4b2d      	ldr	r3, [pc, #180]	; (800b674 <USER_Tilt_Calculation+0x820>)
 800b5c0:	701a      	strb	r2, [r3, #0]

	}
	return tilt_status;
}
 800b5c2:	b019      	add	sp, #100	; 0x64
 800b5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf(out_string,"\r\nForward Tilt Angle = %d, Side Tilt Angle = %d , Gravity Tilt Angle = %d\r\n",(int16_t)tilt_angle_Optimized[forward_axes],(int16_t)tilt_angle_Optimized[side_axes],(int16_t)tilt_angle_Optimized[gravity_axes]);
 800b5c6:	4b29      	ldr	r3, [pc, #164]	; (800b66c <USER_Tilt_Calculation+0x818>)
 800b5c8:	aa12      	add	r2, sp, #72	; 0x48
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	18d3      	adds	r3, r2, r3
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	6859      	ldr	r1, [r3, #4]
 800b5d4:	f7f7 fa1a 	bl	8002a0c <__aeabi_d2iz>
 800b5d8:	4b23      	ldr	r3, [pc, #140]	; (800b668 <USER_Tilt_Calculation+0x814>)
 800b5da:	aa12      	add	r2, sp, #72	; 0x48
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b206      	sxth	r6, r0
 800b5e0:	00db      	lsls	r3, r3, #3
 800b5e2:	18d3      	adds	r3, r2, r3
 800b5e4:	6818      	ldr	r0, [r3, #0]
 800b5e6:	6859      	ldr	r1, [r3, #4]
 800b5e8:	f7f7 fa10 	bl	8002a0c <__aeabi_d2iz>
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <USER_Tilt_Calculation+0x810>)
 800b5ee:	aa12      	add	r2, sp, #72	; 0x48
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b207      	sxth	r7, r0
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	18d3      	adds	r3, r2, r3
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	6859      	ldr	r1, [r3, #4]
 800b5fc:	f7f7 fa06 	bl	8002a0c <__aeabi_d2iz>
 800b600:	4d13      	ldr	r5, [pc, #76]	; (800b650 <USER_Tilt_Calculation+0x7fc>)
 800b602:	b200      	sxth	r0, r0
 800b604:	0033      	movs	r3, r6
 800b606:	9000      	str	r0, [sp, #0]
 800b608:	003a      	movs	r2, r7
 800b60a:	491b      	ldr	r1, [pc, #108]	; (800b678 <USER_Tilt_Calculation+0x824>)
 800b60c:	0028      	movs	r0, r5
 800b60e:	f000 fb7b 	bl	800bd08 <siprintf>
			HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b612:	2201      	movs	r2, #1
 800b614:	2102      	movs	r1, #2
 800b616:	4810      	ldr	r0, [pc, #64]	; (800b658 <USER_Tilt_Calculation+0x804>)
 800b618:	f7f7 fdc6 	bl	80031a8 <HAL_GPIO_WritePin>
			uarttx_req=1;
 800b61c:	2301      	movs	r3, #1
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b61e:	0028      	movs	r0, r5
			uarttx_req=1;
 800b620:	7023      	strb	r3, [r4, #0]
			if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b622:	f7f4 fd6f 	bl	8000104 <strlen>
 800b626:	0029      	movs	r1, r5
 800b628:	b282      	uxth	r2, r0
 800b62a:	480d      	ldr	r0, [pc, #52]	; (800b660 <USER_Tilt_Calculation+0x80c>)
 800b62c:	f7f9 fb48 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b630:	2800      	cmp	r0, #0
 800b632:	d001      	beq.n	800b638 <USER_Tilt_Calculation+0x7e4>
				Error_Handler();
 800b634:	f7fd f978 	bl	8008928 <Error_Handler>
			while(uarttx_req==1);
 800b638:	4a08      	ldr	r2, [pc, #32]	; (800b65c <USER_Tilt_Calculation+0x808>)
 800b63a:	7813      	ldrb	r3, [r2, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d0fc      	beq.n	800b63a <USER_Tilt_Calculation+0x7e6>
 800b640:	e7b6      	b.n	800b5b0 <USER_Tilt_Calculation+0x75c>
 800b642:	46c0      	nop			; (mov r8, r8)
 800b644:	40668000 	.word	0x40668000
 800b648:	54442d18 	.word	0x54442d18
 800b64c:	400921fb 	.word	0x400921fb
 800b650:	2000026b 	.word	0x2000026b
 800b654:	0800f7d2 	.word	0x0800f7d2
 800b658:	48000400 	.word	0x48000400
 800b65c:	20000378 	.word	0x20000378
 800b660:	20000510 	.word	0x20000510
 800b664:	20000009 	.word	0x20000009
 800b668:	20000008 	.word	0x20000008
 800b66c:	20000014 	.word	0x20000014
 800b670:	0800f824 	.word	0x0800f824
 800b674:	2000038c 	.word	0x2000038c
 800b678:	0800f887 	.word	0x0800f887
		default:sprintf(out_string,"\r\nSome Logical Error in tilt_calculation.c \r\n");
 800b67c:	490d      	ldr	r1, [pc, #52]	; (800b6b4 <USER_Tilt_Calculation+0x860>)
 800b67e:	0030      	movs	r0, r6
 800b680:	f000 fb64 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b684:	2201      	movs	r2, #1
 800b686:	2102      	movs	r1, #2
 800b688:	480b      	ldr	r0, [pc, #44]	; (800b6b8 <USER_Tilt_Calculation+0x864>)
 800b68a:	f7f7 fd8d 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800b68e:	2301      	movs	r3, #1
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b690:	0030      	movs	r0, r6
		uarttx_req=1;
 800b692:	7023      	strb	r3, [r4, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b694:	f7f4 fd36 	bl	8000104 <strlen>
 800b698:	0031      	movs	r1, r6
 800b69a:	b282      	uxth	r2, r0
 800b69c:	0038      	movs	r0, r7
 800b69e:	f7f9 fb0f 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d001      	beq.n	800b6aa <USER_Tilt_Calculation+0x856>
			Error_Handler();
 800b6a6:	f7fd f93f 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 800b6aa:	4a04      	ldr	r2, [pc, #16]	; (800b6bc <USER_Tilt_Calculation+0x868>)
 800b6ac:	7813      	ldrb	r3, [r2, #0]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d0fc      	beq.n	800b6ac <USER_Tilt_Calculation+0x858>
 800b6b2:	e77d      	b.n	800b5b0 <USER_Tilt_Calculation+0x75c>
 800b6b4:	0800f8fc 	.word	0x0800f8fc
 800b6b8:	48000400 	.word	0x48000400
 800b6bc:	20000378 	.word	0x20000378

0800b6c0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b6c2:	2208      	movs	r2, #8
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4668      	mov	r0, sp
 800b6c8:	f000 fb15 	bl	800bcf6 <memset>

  htim6.Instance = TIM6;
 800b6cc:	4c0d      	ldr	r4, [pc, #52]	; (800b704 <MX_TIM6_Init+0x44>)
 800b6ce:	4b0e      	ldr	r3, [pc, #56]	; (800b708 <MX_TIM6_Init+0x48>)
  htim6.Init.Prescaler = 47999;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6d0:	2500      	movs	r5, #0
  htim6.Instance = TIM6;
 800b6d2:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 47999;
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <MX_TIM6_Init+0x4c>)
  htim6.Init.Period = 200;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b6d6:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 47999;
 800b6d8:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 200;
 800b6da:	23c8      	movs	r3, #200	; 0xc8
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6dc:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 200;
 800b6de:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b6e0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b6e2:	f7f9 fa89 	bl	8004bf8 <HAL_TIM_Base_Init>
 800b6e6:	42a8      	cmp	r0, r5
 800b6e8:	d001      	beq.n	800b6ee <MX_TIM6_Init+0x2e>
  {
    Error_Handler();
 800b6ea:	f7fd f91d 	bl	8008928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b6ee:	4669      	mov	r1, sp
 800b6f0:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b6f2:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6f4:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b6f6:	f7f9 fa9b 	bl	8004c30 <HAL_TIMEx_MasterConfigSynchronization>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d001      	beq.n	800b702 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800b6fe:	f7fd f913 	bl	8008928 <Error_Handler>
  }

}
 800b702:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800b704:	2000048c 	.word	0x2000048c
 800b708:	40001000 	.word	0x40001000
 800b70c:	0000bb7f 	.word	0x0000bb7f

0800b710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b710:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800b712:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <HAL_TIM_Base_MspInit+0x30>)
 800b714:	6802      	ldr	r2, [r0, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d110      	bne.n	800b73c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b71a:	2010      	movs	r0, #16
 800b71c:	4a09      	ldr	r2, [pc, #36]	; (800b744 <HAL_TIM_Base_MspInit+0x34>)
 800b71e:	69d1      	ldr	r1, [r2, #28]
 800b720:	4301      	orrs	r1, r0
 800b722:	61d1      	str	r1, [r2, #28]
 800b724:	69d3      	ldr	r3, [r2, #28]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b726:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b728:	4003      	ands	r3, r0
 800b72a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b72c:	3001      	adds	r0, #1
 800b72e:	0011      	movs	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b730:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800b732:	f7f7 fb33 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800b736:	2011      	movs	r0, #17
 800b738:	f7f7 fb60 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b73c:	bd07      	pop	{r0, r1, r2, pc}
 800b73e:	46c0      	nop			; (mov r8, r8)
 800b740:	40001000 	.word	0x40001000
 800b744:	40021000 	.word	0x40021000

0800b748 <USER_UART_DMA_start>:

#include "uart_dma_start.h"


void USER_UART_DMA_start(void)
{
 800b748:	b510      	push	{r4, lr}
   extern volatile char c;
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800b74a:	2200      	movs	r2, #0
 800b74c:	2102      	movs	r1, #2
 800b74e:	4804      	ldr	r0, [pc, #16]	; (800b760 <USER_UART_DMA_start+0x18>)
 800b750:	f7f7 fd2a 	bl	80031a8 <HAL_GPIO_WritePin>
	HAL_UART_Receive_DMA(&huart3,&c,1);
 800b754:	2201      	movs	r2, #1
 800b756:	4903      	ldr	r1, [pc, #12]	; (800b764 <USER_UART_DMA_start+0x1c>)
 800b758:	4803      	ldr	r0, [pc, #12]	; (800b768 <USER_UART_DMA_start+0x20>)
 800b75a:	f7f9 faff 	bl	8004d5c <HAL_UART_Receive_DMA>
}
 800b75e:	bd10      	pop	{r4, pc}
 800b760:	48000400 	.word	0x48000400
 800b764:	20000488 	.word	0x20000488
 800b768:	20000510 	.word	0x20000510

0800b76c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 800b76c:	480b      	ldr	r0, [pc, #44]	; (800b79c <MX_USART3_UART_Init+0x30>)
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <MX_USART3_UART_Init+0x34>)
{
 800b770:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800b772:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800b774:	23e1      	movs	r3, #225	; 0xe1
 800b776:	025b      	lsls	r3, r3, #9
 800b778:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b77a:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b77c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b77e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b780:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b782:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b784:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b786:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b788:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b78a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b78c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b78e:	f7f9 fe37 	bl	8005400 <HAL_UART_Init>
 800b792:	2800      	cmp	r0, #0
 800b794:	d001      	beq.n	800b79a <MX_USART3_UART_Init+0x2e>
  {
    Error_Handler();
 800b796:	f7fd f8c7 	bl	8008928 <Error_Handler>
  }

}
 800b79a:	bd10      	pop	{r4, pc}
 800b79c:	20000510 	.word	0x20000510
 800b7a0:	40004800 	.word	0x40004800

0800b7a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b7a4:	b570      	push	{r4, r5, r6, lr}
 800b7a6:	0006      	movs	r6, r0
 800b7a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7aa:	2214      	movs	r2, #20
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	a803      	add	r0, sp, #12
 800b7b0:	f000 faa1 	bl	800bcf6 <memset>
  if(uartHandle->Instance==USART3)
 800b7b4:	4b34      	ldr	r3, [pc, #208]	; (800b888 <HAL_UART_MspInit+0xe4>)
 800b7b6:	6832      	ldr	r2, [r6, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d163      	bne.n	800b884 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b7bc:	2080      	movs	r0, #128	; 0x80
 800b7be:	4b33      	ldr	r3, [pc, #204]	; (800b88c <HAL_UART_MspInit+0xe8>)
 800b7c0:	02c0      	lsls	r0, r0, #11
 800b7c2:	69d9      	ldr	r1, [r3, #28]
 800b7c4:	4301      	orrs	r1, r0
 800b7c6:	61d9      	str	r1, [r3, #28]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7c8:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART3_CLK_ENABLE();
 800b7ca:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7cc:	0309      	lsls	r1, r1, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 800b7ce:	4002      	ands	r2, r0
 800b7d0:	9201      	str	r2, [sp, #4]
 800b7d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7d4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = RS485_TXD_Pin|RS485_RXD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7d6:	482e      	ldr	r0, [pc, #184]	; (800b890 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	615a      	str	r2, [r3, #20]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	400b      	ands	r3, r1
 800b7e0:	9302      	str	r3, [sp, #8]
 800b7e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RS485_TXD_Pin|RS485_RXD_Pin;
 800b7e4:	2330      	movs	r3, #48	; 0x30
 800b7e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e8:	3b2e      	subs	r3, #46	; 0x2e
 800b7ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800b7f2:	3b02      	subs	r3, #2
 800b7f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b7f6:	f7f7 fc1b 	bl	8003030 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800b7fa:	4c26      	ldr	r4, [pc, #152]	; (800b894 <HAL_UART_MspInit+0xf0>)
 800b7fc:	4b26      	ldr	r3, [pc, #152]	; (800b898 <HAL_UART_MspInit+0xf4>)
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b7fe:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_rx.Instance = DMA1_Channel1;
 800b800:	6023      	str	r3, [r4, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b802:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b804:	60e2      	str	r2, [r4, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b806:	0020      	movs	r0, r4
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b808:	3a60      	subs	r2, #96	; 0x60
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b80a:	6063      	str	r3, [r4, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b80c:	60a3      	str	r3, [r4, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b80e:	6123      	str	r3, [r4, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b810:	6163      	str	r3, [r4, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b812:	61a2      	str	r2, [r4, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b814:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b816:	f7f7 fb3b 	bl	8002e90 <HAL_DMA_Init>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d001      	beq.n	800b822 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800b81e:	f7fd f883 	bl	8008928 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b822:	220f      	movs	r2, #15
 800b824:	4d1d      	ldr	r5, [pc, #116]	; (800b89c <HAL_UART_MspInit+0xf8>)
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	4393      	bics	r3, r2
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	230a      	movs	r3, #10
 800b82e:	682a      	ldr	r2, [r5, #0]
 800b830:	4313      	orrs	r3, r2
 800b832:	602b      	str	r3, [r5, #0]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800b834:	4b1a      	ldr	r3, [pc, #104]	; (800b8a0 <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800b836:	66f4      	str	r4, [r6, #108]	; 0x6c
 800b838:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800b83a:	4c1a      	ldr	r4, [pc, #104]	; (800b8a4 <HAL_UART_MspInit+0x100>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b83c:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800b83e:	6023      	str	r3, [r4, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b840:	2310      	movs	r3, #16
 800b842:	6063      	str	r3, [r4, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b844:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800b846:	0020      	movs	r0, r4
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b848:	60a3      	str	r3, [r4, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b84a:	60e2      	str	r2, [r4, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b84c:	6123      	str	r3, [r4, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b84e:	6163      	str	r3, [r4, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800b850:	61a3      	str	r3, [r4, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b852:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800b854:	f7f7 fb1c 	bl	8002e90 <HAL_DMA_Init>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d001      	beq.n	800b860 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800b85c:	f7fd f864 	bl	8008928 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b860:	22f0      	movs	r2, #240	; 0xf0
 800b862:	682b      	ldr	r3, [r5, #0]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800b864:	201d      	movs	r0, #29
    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b866:	4393      	bics	r3, r2
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	23a0      	movs	r3, #160	; 0xa0
 800b86c:	682a      	ldr	r2, [r5, #0]
 800b86e:	4313      	orrs	r3, r2
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800b870:	2200      	movs	r2, #0
    __HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800b872:	602b      	str	r3, [r5, #0]
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800b874:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800b876:	66b4      	str	r4, [r6, #104]	; 0x68
 800b878:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_8_IRQn, 0, 0);
 800b87a:	f7f7 fa8f 	bl	8002d9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800b87e:	201d      	movs	r0, #29
 800b880:	f7f7 fabc 	bl	8002dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b884:	b008      	add	sp, #32
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	40004800 	.word	0x40004800
 800b88c:	40021000 	.word	0x40021000
 800b890:	48000800 	.word	0x48000800
 800b894:	200004cc 	.word	0x200004cc
 800b898:	40020008 	.word	0x40020008
 800b89c:	400200a8 	.word	0x400200a8
 800b8a0:	4002001c 	.word	0x4002001c
 800b8a4:	20000590 	.word	0x20000590

0800b8a8 <USER_Wakeup_Detection>:

extern char out_string[200];
extern volatile uint8_t  uarttx_req,memrx;

enum Wakeup_Device_Mode USER_Wakeup_Detection(void)
{
 800b8a8:	b530      	push	{r4, r5, lr}
	uint8_t wake_up_src;



	memrx=0;
 800b8aa:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800b8ac:	240f      	movs	r4, #15
	memrx=0;
 800b8ae:	4d20      	ldr	r5, [pc, #128]	; (800b930 <USER_Wakeup_Detection+0x88>)
{
 800b8b0:	b085      	sub	sp, #20
	memrx=0;
 800b8b2:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_SRC,I2C_MEMADD_SIZE_8BIT,&wake_up_src,1)!=HAL_OK)
 800b8b4:	446c      	add	r4, sp
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	9400      	str	r4, [sp, #0]
 800b8bc:	221b      	movs	r2, #27
 800b8be:	21d6      	movs	r1, #214	; 0xd6
 800b8c0:	481c      	ldr	r0, [pc, #112]	; (800b934 <USER_Wakeup_Detection+0x8c>)
 800b8c2:	f7f7 fef5 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d001      	beq.n	800b8ce <USER_Wakeup_Detection+0x26>
	{
		Error_Handler();
 800b8ca:	f7fd f82d 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800b8ce:	782b      	ldrb	r3, [r5, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0fc      	beq.n	800b8ce <USER_Wakeup_Detection+0x26>
	if(  (wake_up_src&0x08) == 0x08)
 800b8d4:	7823      	ldrb	r3, [r4, #0]


		return FORWARD_AXIS;

		}
	return SLEEP;
 800b8d6:	2000      	movs	r0, #0
	if(  (wake_up_src&0x08) == 0x08)
 800b8d8:	071b      	lsls	r3, r3, #28
 800b8da:	d527      	bpl.n	800b92c <USER_Wakeup_Detection+0x84>
		HAL_GPIO_WritePin(ST_LED_GPIO_Port,ST_LED_Pin,GPIO_PIN_SET);
 800b8dc:	2180      	movs	r1, #128	; 0x80
 800b8de:	2201      	movs	r2, #1
 800b8e0:	0109      	lsls	r1, r1, #4
 800b8e2:	4815      	ldr	r0, [pc, #84]	; (800b938 <USER_Wakeup_Detection+0x90>)
 800b8e4:	f7f7 fc60 	bl	80031a8 <HAL_GPIO_WritePin>
		sprintf(out_string,"\r\nDevice is Now in Forward Axes Mode\r\n");
 800b8e8:	4c14      	ldr	r4, [pc, #80]	; (800b93c <USER_Wakeup_Detection+0x94>)
 800b8ea:	4915      	ldr	r1, [pc, #84]	; (800b940 <USER_Wakeup_Detection+0x98>)
 800b8ec:	0020      	movs	r0, r4
 800b8ee:	f000 fa2d 	bl	800bd4c <strcpy>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	2102      	movs	r1, #2
 800b8f6:	4813      	ldr	r0, [pc, #76]	; (800b944 <USER_Wakeup_Detection+0x9c>)
 800b8f8:	f7f7 fc56 	bl	80031a8 <HAL_GPIO_WritePin>
		uarttx_req=1;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4d12      	ldr	r5, [pc, #72]	; (800b948 <USER_Wakeup_Detection+0xa0>)
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b900:	0020      	movs	r0, r4
		uarttx_req=1;
 800b902:	702b      	strb	r3, [r5, #0]
		if(HAL_UART_Transmit_DMA(&huart3,out_string,strlen(out_string))!=HAL_OK)
 800b904:	f7f4 fbfe 	bl	8000104 <strlen>
 800b908:	0021      	movs	r1, r4
 800b90a:	b282      	uxth	r2, r0
 800b90c:	480f      	ldr	r0, [pc, #60]	; (800b94c <USER_Wakeup_Detection+0xa4>)
 800b90e:	f7f9 f9d7 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800b912:	2800      	cmp	r0, #0
 800b914:	d001      	beq.n	800b91a <USER_Wakeup_Detection+0x72>
			Error_Handler();
 800b916:	f7fd f807 	bl	8008928 <Error_Handler>
		while(uarttx_req==1);
 800b91a:	782b      	ldrb	r3, [r5, #0]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d0fc      	beq.n	800b91a <USER_Wakeup_Detection+0x72>
		HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800b920:	4808      	ldr	r0, [pc, #32]	; (800b944 <USER_Wakeup_Detection+0x9c>)
 800b922:	2200      	movs	r2, #0
 800b924:	2102      	movs	r1, #2
 800b926:	f7f7 fc3f 	bl	80031a8 <HAL_GPIO_WritePin>
		return FORWARD_AXIS;
 800b92a:	2001      	movs	r0, #1

}
 800b92c:	b005      	add	sp, #20
 800b92e:	bd30      	pop	{r4, r5, pc}
 800b930:	20000269 	.word	0x20000269
 800b934:	200003a0 	.word	0x200003a0
 800b938:	48000800 	.word	0x48000800
 800b93c:	2000026b 	.word	0x2000026b
 800b940:	0800f92a 	.word	0x0800f92a
 800b944:	48000400 	.word	0x48000400
 800b948:	20000378 	.word	0x20000378
 800b94c:	20000510 	.word	0x20000510

0800b950 <USER_Wakeup_Init>:
{
	uint8_t hexcode;



	memrx=0;
 800b950:	2300      	movs	r3, #0
{
 800b952:	b5f0      	push	{r4, r5, r6, r7, lr}
	memrx=0;
 800b954:	4ea3      	ldr	r6, [pc, #652]	; (800bbe4 <USER_Wakeup_Init+0x294>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&dev_wake_ctrl1_xl,1)!=HAL_OK)
 800b956:	4da4      	ldr	r5, [pc, #656]	; (800bbe8 <USER_Wakeup_Init+0x298>)
 800b958:	4fa4      	ldr	r7, [pc, #656]	; (800bbec <USER_Wakeup_Init+0x29c>)
{
 800b95a:	b085      	sub	sp, #20
	memrx=0;
 800b95c:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&dev_wake_ctrl1_xl,1)!=HAL_OK)
 800b95e:	3301      	adds	r3, #1
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	9700      	str	r7, [sp, #0]
 800b964:	2210      	movs	r2, #16
 800b966:	21d6      	movs	r1, #214	; 0xd6
 800b968:	0028      	movs	r0, r5
 800b96a:	f7f7 fea1 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d001      	beq.n	800b976 <USER_Wakeup_Init+0x26>
	{
		Error_Handler();
 800b972:	f7fc ffd9 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800b976:	7833      	ldrb	r3, [r6, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0fc      	beq.n	800b976 <USER_Wakeup_Init+0x26>

	hexcode=dev_wake_ctrl1_xl&~0xfc;
 800b97c:	2203      	movs	r2, #3
 800b97e:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0x60;
 800b980:	240f      	movs	r4, #15
	hexcode=dev_wake_ctrl1_xl&~0xfc;
 800b982:	401a      	ands	r2, r3
	hexcode|=0x60;
 800b984:	2360      	movs	r3, #96	; 0x60
 800b986:	446c      	add	r4, sp
 800b988:	4313      	orrs	r3, r2
 800b98a:	7023      	strb	r3, [r4, #0]

	memtx=0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	4a98      	ldr	r2, [pc, #608]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 800b990:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 800b992:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL1_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Turn on the accelerometer
 800b994:	3301      	adds	r3, #1
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	9400      	str	r4, [sp, #0]
 800b99a:	2210      	movs	r2, #16
 800b99c:	0028      	movs	r0, r5
 800b99e:	f7f7 fde1 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d100      	bne.n	800b9a8 <USER_Wakeup_Init+0x58>
 800b9a6:	e108      	b.n	800bbba <USER_Wakeup_Init+0x26a>
		// ODR_XL = 416 Hz, FS_XL = 2g
	{
		Error_Handler();
 800b9a8:	f7fc ffbe 	bl	8008928 <Error_Handler>
	{
		odr_xl_value=416;
		mg_per_LSB = 0.061;
	}

	while(memtx==0);
 800b9ac:	4b90      	ldr	r3, [pc, #576]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0fb      	beq.n	800b9ac <USER_Wakeup_Init+0x5c>
	memrx=0;
 800b9b4:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&dev_wake_tap_cfg,1)!=HAL_OK)
 800b9b6:	4f8f      	ldr	r7, [pc, #572]	; (800bbf4 <USER_Wakeup_Init+0x2a4>)
	memrx=0;
 800b9b8:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&dev_wake_tap_cfg,1)!=HAL_OK)
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	9700      	str	r7, [sp, #0]
 800b9c0:	2258      	movs	r2, #88	; 0x58
 800b9c2:	21d6      	movs	r1, #214	; 0xd6
 800b9c4:	0028      	movs	r0, r5
 800b9c6:	f7f7 fe73 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d001      	beq.n	800b9d2 <USER_Wakeup_Init+0x82>
	{
		Error_Handler();
 800b9ce:	f7fc ffab 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800b9d2:	7833      	ldrb	r3, [r6, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0fc      	beq.n	800b9d2 <USER_Wakeup_Init+0x82>

	if(who_am_i==0x69)
 800b9d8:	4b87      	ldr	r3, [pc, #540]	; (800bbf8 <USER_Wakeup_Init+0x2a8>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b69      	cmp	r3, #105	; 0x69
 800b9de:	d000      	beq.n	800b9e2 <USER_Wakeup_Init+0x92>
 800b9e0:	e0f3      	b.n	800bbca <USER_Wakeup_Init+0x27a>
	{



		hexcode=dev_wake_tap_cfg&~0x11;
 800b9e2:	783a      	ldrb	r2, [r7, #0]
 800b9e4:	3b58      	subs	r3, #88	; 0x58
 800b9e6:	439a      	bics	r2, r3
	if(who_am_i==0x6A)
	{


		hexcode=dev_wake_tap_cfg&~0x91;
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	4a80      	ldr	r2, [pc, #512]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800b9f0:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 800b9f2:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,TAP_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	9400      	str	r4, [sp, #0]
 800b9fa:	2258      	movs	r2, #88	; 0x58
 800b9fc:	0028      	movs	r0, r5
 800b9fe:	f7f7 fdb1 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d001      	beq.n	800ba0a <USER_Wakeup_Init+0xba>
	{
		Error_Handler();
 800ba06:	f7fc ff8f 	bl	8008928 <Error_Handler>
	}
	while(memtx==0);
 800ba0a:	4b79      	ldr	r3, [pc, #484]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0fb      	beq.n	800ba0a <USER_Wakeup_Init+0xba>



	memrx=0;
 800ba12:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&dev_wake_wake_up_ths,1)!=HAL_OK)
 800ba14:	4f79      	ldr	r7, [pc, #484]	; (800bbfc <USER_Wakeup_Init+0x2ac>)
	memrx=0;
 800ba16:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&dev_wake_wake_up_ths,1)!=HAL_OK)
 800ba18:	3301      	adds	r3, #1
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	9700      	str	r7, [sp, #0]
 800ba1e:	225b      	movs	r2, #91	; 0x5b
 800ba20:	21d6      	movs	r1, #214	; 0xd6
 800ba22:	0028      	movs	r0, r5
 800ba24:	f7f7 fe44 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d001      	beq.n	800ba30 <USER_Wakeup_Init+0xe0>
	{
		Error_Handler();
 800ba2c:	f7fc ff7c 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800ba30:	7833      	ldrb	r3, [r6, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d0fc      	beq.n	800ba30 <USER_Wakeup_Init+0xe0>

	hexcode=dev_wake_wake_up_ths&~0x3f;
 800ba36:	233f      	movs	r3, #63	; 0x3f
 800ba38:	783a      	ldrb	r2, [r7, #0]
	hexcode|=0x01;
	memtx=0;
 800ba3a:	496d      	ldr	r1, [pc, #436]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
	hexcode=dev_wake_wake_up_ths&~0x3f;
 800ba3c:	439a      	bics	r2, r3
	hexcode|=0x01;
 800ba3e:	3b3e      	subs	r3, #62	; 0x3e
 800ba40:	431a      	orrs	r2, r3
 800ba42:	7022      	strb	r2, [r4, #0]
	memtx=0;
 800ba44:	2200      	movs	r2, #0

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold
 800ba46:	0028      	movs	r0, r5
	memtx=0;
 800ba48:	700a      	strb	r2, [r1, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_THS,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Set wake-up threshold
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	9400      	str	r4, [sp, #0]
 800ba4e:	325b      	adds	r2, #91	; 0x5b
 800ba50:	21d6      	movs	r1, #214	; 0xd6
 800ba52:	f7f7 fd87 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d001      	beq.n	800ba5e <USER_Wakeup_Init+0x10e>
	{
		Error_Handler();
 800ba5a:	f7fc ff65 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800ba5e:	4b64      	ldr	r3, [pc, #400]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d0fb      	beq.n	800ba5e <USER_Wakeup_Init+0x10e>

	memrx=0;
 800ba66:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&dev_wake_ctrl8_xl,1)!=HAL_OK)
 800ba68:	4f65      	ldr	r7, [pc, #404]	; (800bc00 <USER_Wakeup_Init+0x2b0>)
	memrx=0;
 800ba6a:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&dev_wake_ctrl8_xl,1)!=HAL_OK)
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	9700      	str	r7, [sp, #0]
 800ba72:	2217      	movs	r2, #23
 800ba74:	21d6      	movs	r1, #214	; 0xd6
 800ba76:	0028      	movs	r0, r5
 800ba78:	f7f7 fe1a 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d001      	beq.n	800ba84 <USER_Wakeup_Init+0x134>
	{
		Error_Handler();
 800ba80:	f7fc ff52 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800ba84:	7833      	ldrb	r3, [r6, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d0fc      	beq.n	800ba84 <USER_Wakeup_Init+0x134>

	if(who_am_i==0x69)
 800ba8a:	4b5b      	ldr	r3, [pc, #364]	; (800bbf8 <USER_Wakeup_Init+0x2a8>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b69      	cmp	r3, #105	; 0x69
 800ba90:	d000      	beq.n	800ba94 <USER_Wakeup_Init+0x144>
 800ba92:	e0a1      	b.n	800bbd8 <USER_Wakeup_Init+0x288>
	{
		hexcode=dev_wake_ctrl8_xl&~0x60;
 800ba94:	2260      	movs	r2, #96	; 0x60
 800ba96:	783b      	ldrb	r3, [r7, #0]

		hexcode|=0x40; //HPF cutoff odr/9
	}
	if(who_am_i==0x6a)
	{
		hexcode=dev_wake_ctrl8_xl&~0x68;
 800ba98:	4393      	bics	r3, r2
 800ba9a:	001a      	movs	r2, r3

		hexcode|=0x40;//HPF cutoff odr/9;ODR/2 low pass filtered sent to composite filter
 800ba9c:	2340      	movs	r3, #64	; 0x40
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	7023      	strb	r3, [r4, #0]
	}

	memtx=0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	4a52      	ldr	r2, [pc, #328]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800baa6:	21d6      	movs	r1, #214	; 0xd6
	memtx=0;
 800baa8:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,CTRL8_XL,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)
 800baaa:	3301      	adds	r3, #1
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	9400      	str	r4, [sp, #0]
 800bab0:	2217      	movs	r2, #23
 800bab2:	0028      	movs	r0, r5
 800bab4:	f7f7 fd56 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d001      	beq.n	800bac0 <USER_Wakeup_Init+0x170>
			{
		Error_Handler();
 800babc:	f7fc ff34 	bl	8008928 <Error_Handler>
			}


	while(memtx==0);
 800bac0:	4b4b      	ldr	r3, [pc, #300]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d0fb      	beq.n	800bac0 <USER_Wakeup_Init+0x170>

	memrx=0;
 800bac8:	2300      	movs	r3, #0
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&dev_wake_wake_up_dur,1)!=HAL_OK)
 800baca:	4f4e      	ldr	r7, [pc, #312]	; (800bc04 <USER_Wakeup_Init+0x2b4>)
	memrx=0;
 800bacc:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&dev_wake_wake_up_dur,1)!=HAL_OK)
 800bace:	3301      	adds	r3, #1
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	9700      	str	r7, [sp, #0]
 800bad4:	225c      	movs	r2, #92	; 0x5c
 800bad6:	21d6      	movs	r1, #214	; 0xd6
 800bad8:	0028      	movs	r0, r5
 800bada:	f7f7 fde9 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d001      	beq.n	800bae6 <USER_Wakeup_Init+0x196>
	{
		Error_Handler();
 800bae2:	f7fc ff21 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800bae6:	7833      	ldrb	r3, [r6, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d0fc      	beq.n	800bae6 <USER_Wakeup_Init+0x196>

	hexcode=dev_wake_wake_up_dur&~0x60;
 800baec:	2260      	movs	r2, #96	; 0x60
 800baee:	783b      	ldrb	r3, [r7, #0]
	hexcode|=0X40;

	memtx=0;

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// ODR*2 duration for wake up
 800baf0:	21d6      	movs	r1, #214	; 0xd6
	hexcode=dev_wake_wake_up_dur&~0x60;
 800baf2:	4393      	bics	r3, r2
 800baf4:	001a      	movs	r2, r3
	hexcode|=0X40;
 800baf6:	2340      	movs	r3, #64	; 0x40
 800baf8:	4313      	orrs	r3, r2
 800bafa:	7023      	strb	r3, [r4, #0]
	memtx=0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	4a3c      	ldr	r2, [pc, #240]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// ODR*2 duration for wake up
 800bb00:	0028      	movs	r0, r5
	memtx=0;
 800bb02:	7013      	strb	r3, [r2, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,WAKE_UP_DUR,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// ODR*2 duration for wake up
 800bb04:	3301      	adds	r3, #1
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	9400      	str	r4, [sp, #0]
 800bb0a:	225c      	movs	r2, #92	; 0x5c
 800bb0c:	f7f7 fd2a 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d001      	beq.n	800bb18 <USER_Wakeup_Init+0x1c8>
	{
		Error_Handler();
 800bb14:	f7fc ff08 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800bb18:	4b35      	ldr	r3, [pc, #212]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0fb      	beq.n	800bb18 <USER_Wakeup_Init+0x1c8>

	memrx=0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	4e30      	ldr	r6, [pc, #192]	; (800bbe4 <USER_Wakeup_Init+0x294>)
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&dev_wake_md1_cfg,1)!=HAL_OK)
 800bb24:	4c30      	ldr	r4, [pc, #192]	; (800bbe8 <USER_Wakeup_Init+0x298>)
 800bb26:	4d38      	ldr	r5, [pc, #224]	; (800bc08 <USER_Wakeup_Init+0x2b8>)
	memrx=0;
 800bb28:	7033      	strb	r3, [r6, #0]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&dev_wake_md1_cfg,1)!=HAL_OK)
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	9500      	str	r5, [sp, #0]
 800bb30:	225e      	movs	r2, #94	; 0x5e
 800bb32:	21d6      	movs	r1, #214	; 0xd6
 800bb34:	0020      	movs	r0, r4
 800bb36:	f7f7 fdbb 	bl	80036b0 <HAL_I2C_Mem_Read_DMA>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d001      	beq.n	800bb42 <USER_Wakeup_Init+0x1f2>
	{
		Error_Handler();
 800bb3e:	f7fc fef3 	bl	8008928 <Error_Handler>
	}

	while(memrx==0);
 800bb42:	7833      	ldrb	r3, [r6, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0fc      	beq.n	800bb42 <USER_Wakeup_Init+0x1f2>

	hexcode=dev_wake_md1_cfg&~0x20;
 800bb48:	2320      	movs	r3, #32
	hexcode|=0x20;
 800bb4a:	210f      	movs	r1, #15
	hexcode=dev_wake_md1_cfg&~0x20;
 800bb4c:	782a      	ldrb	r2, [r5, #0]
	hexcode|=0x20;
 800bb4e:	4469      	add	r1, sp
	hexcode=dev_wake_md1_cfg&~0x20;
 800bb50:	439a      	bics	r2, r3
	hexcode|=0x20;
 800bb52:	4313      	orrs	r3, r2
 800bb54:	700b      	strb	r3, [r1, #0]

	memtx=0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	4d25      	ldr	r5, [pc, #148]	; (800bbf0 <USER_Wakeup_Init+0x2a0>)

	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 800bb5a:	225e      	movs	r2, #94	; 0x5e
	memtx=0;
 800bb5c:	702b      	strb	r3, [r5, #0]
	if(HAL_I2C_Mem_Write_DMA(&hi2c2,LSM6DS3,MD1_CFG,I2C_MEMADD_SIZE_8BIT,&hexcode,1)!=HAL_OK)// Wake-up interrupt driven to INT1 pin
 800bb5e:	3301      	adds	r3, #1
 800bb60:	9100      	str	r1, [sp, #0]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	21d6      	movs	r1, #214	; 0xd6
 800bb66:	0020      	movs	r0, r4
 800bb68:	f7f7 fcfc 	bl	8003564 <HAL_I2C_Mem_Write_DMA>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d001      	beq.n	800bb74 <USER_Wakeup_Init+0x224>
	{
		Error_Handler();
 800bb70:	f7fc feda 	bl	8008928 <Error_Handler>
	}


	while(memtx==0);
 800bb74:	782b      	ldrb	r3, [r5, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d0fc      	beq.n	800bb74 <USER_Wakeup_Init+0x224>


	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_SET);
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	2102      	movs	r1, #2
 800bb7e:	4823      	ldr	r0, [pc, #140]	; (800bc0c <USER_Wakeup_Init+0x2bc>)
 800bb80:	f7f7 fb12 	bl	80031a8 <HAL_GPIO_WritePin>
	uarttx_req=1;
 800bb84:	2301      	movs	r3, #1
 800bb86:	4c22      	ldr	r4, [pc, #136]	; (800bc10 <USER_Wakeup_Init+0x2c0>)
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\nDevice is Now in Sleep Mode\r\nDevice Wake up Function Initiated......\r\n\r\n",strlen("\r\n\r\nDevice is Now in Sleep Mode\r\nDevice Wake up Function Initiated......\r\n\r\n"))!=HAL_OK)
 800bb88:	224c      	movs	r2, #76	; 0x4c
 800bb8a:	4922      	ldr	r1, [pc, #136]	; (800bc14 <USER_Wakeup_Init+0x2c4>)
 800bb8c:	4822      	ldr	r0, [pc, #136]	; (800bc18 <USER_Wakeup_Init+0x2c8>)
	uarttx_req=1;
 800bb8e:	7023      	strb	r3, [r4, #0]
	if(HAL_UART_Transmit_DMA(&huart3,"\r\n\r\nDevice is Now in Sleep Mode\r\nDevice Wake up Function Initiated......\r\n\r\n",strlen("\r\n\r\nDevice is Now in Sleep Mode\r\nDevice Wake up Function Initiated......\r\n\r\n"))!=HAL_OK)
 800bb90:	f7f9 f896 	bl	8004cc0 <HAL_UART_Transmit_DMA>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d001      	beq.n	800bb9c <USER_Wakeup_Init+0x24c>
	{
		Error_Handler();
 800bb98:	f7fc fec6 	bl	8008928 <Error_Handler>
	}
	while(uarttx_req==1);
 800bb9c:	7823      	ldrb	r3, [r4, #0]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d0fc      	beq.n	800bb9c <USER_Wakeup_Init+0x24c>
	HAL_GPIO_WritePin(D_CON_RS485_GPIO_Port,D_CON_RS485_Pin,GPIO_PIN_RESET);
 800bba2:	2200      	movs	r2, #0
 800bba4:	2102      	movs	r1, #2
 800bba6:	4819      	ldr	r0, [pc, #100]	; (800bc0c <USER_Wakeup_Init+0x2bc>)
 800bba8:	f7f7 fafe 	bl	80031a8 <HAL_GPIO_WritePin>
	wakeup_mode=SLEEP;
 800bbac:	2300      	movs	r3, #0
 800bbae:	4a1b      	ldr	r2, [pc, #108]	; (800bc1c <USER_Wakeup_Init+0x2cc>)
 800bbb0:	7013      	strb	r3, [r2, #0]
	device_mode=SLEEP;
 800bbb2:	4a1b      	ldr	r2, [pc, #108]	; (800bc20 <USER_Wakeup_Init+0x2d0>)
 800bbb4:	7013      	strb	r3, [r2, #0]


}
 800bbb6:	b005      	add	sp, #20
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		odr_xl_value=416;
 800bbba:	22d0      	movs	r2, #208	; 0xd0
 800bbbc:	4b19      	ldr	r3, [pc, #100]	; (800bc24 <USER_Wakeup_Init+0x2d4>)
 800bbbe:	0052      	lsls	r2, r2, #1
 800bbc0:	801a      	strh	r2, [r3, #0]
		mg_per_LSB = 0.061;
 800bbc2:	4a19      	ldr	r2, [pc, #100]	; (800bc28 <USER_Wakeup_Init+0x2d8>)
 800bbc4:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <USER_Wakeup_Init+0x2dc>)
 800bbc6:	601a      	str	r2, [r3, #0]
 800bbc8:	e6f0      	b.n	800b9ac <USER_Wakeup_Init+0x5c>
	if(who_am_i==0x6A)
 800bbca:	2b6a      	cmp	r3, #106	; 0x6a
 800bbcc:	d000      	beq.n	800bbd0 <USER_Wakeup_Init+0x280>
 800bbce:	e70d      	b.n	800b9ec <USER_Wakeup_Init+0x9c>
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 800bbd0:	226f      	movs	r2, #111	; 0x6f
		hexcode=dev_wake_tap_cfg&~0x91;
 800bbd2:	783b      	ldrb	r3, [r7, #0]
		hexcode|=0x91;// Interrupt Enabled ; Apply HP filter; latch mode Enabled;
 800bbd4:	4252      	negs	r2, r2
 800bbd6:	e707      	b.n	800b9e8 <USER_Wakeup_Init+0x98>
	if(who_am_i==0x6a)
 800bbd8:	2b6a      	cmp	r3, #106	; 0x6a
 800bbda:	d000      	beq.n	800bbde <USER_Wakeup_Init+0x28e>
 800bbdc:	e761      	b.n	800baa2 <USER_Wakeup_Init+0x152>
		hexcode=dev_wake_ctrl8_xl&~0x68;
 800bbde:	783b      	ldrb	r3, [r7, #0]
 800bbe0:	2268      	movs	r2, #104	; 0x68
 800bbe2:	e759      	b.n	800ba98 <USER_Wakeup_Init+0x148>
 800bbe4:	20000269 	.word	0x20000269
 800bbe8:	200003a0 	.word	0x200003a0
 800bbec:	2000038d 	.word	0x2000038d
 800bbf0:	2000026a 	.word	0x2000026a
 800bbf4:	20000390 	.word	0x20000390
 800bbf8:	20000379 	.word	0x20000379
 800bbfc:	20000392 	.word	0x20000392
 800bc00:	2000038e 	.word	0x2000038e
 800bc04:	20000391 	.word	0x20000391
 800bc08:	2000038f 	.word	0x2000038f
 800bc0c:	48000400 	.word	0x48000400
 800bc10:	20000378 	.word	0x20000378
 800bc14:	0800f951 	.word	0x0800f951
 800bc18:	20000510 	.word	0x20000510
 800bc1c:	20000489 	.word	0x20000489
 800bc20:	2000048a 	.word	0x2000048a
 800bc24:	20000480 	.word	0x20000480
 800bc28:	3d79db23 	.word	0x3d79db23
 800bc2c:	2000047c 	.word	0x2000047c

0800bc30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800bc30:	480d      	ldr	r0, [pc, #52]	; (800bc68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800bc32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bc34:	480d      	ldr	r0, [pc, #52]	; (800bc6c <LoopForever+0x6>)
  ldr r1, =_edata
 800bc36:	490e      	ldr	r1, [pc, #56]	; (800bc70 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bc38:	4a0e      	ldr	r2, [pc, #56]	; (800bc74 <LoopForever+0xe>)
  movs r3, #0
 800bc3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bc3c:	e002      	b.n	800bc44 <LoopCopyDataInit>

0800bc3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bc3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bc40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bc42:	3304      	adds	r3, #4

0800bc44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bc44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bc46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bc48:	d3f9      	bcc.n	800bc3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bc4a:	4a0b      	ldr	r2, [pc, #44]	; (800bc78 <LoopForever+0x12>)
  ldr r4, =_ebss
 800bc4c:	4c0b      	ldr	r4, [pc, #44]	; (800bc7c <LoopForever+0x16>)
  movs r3, #0
 800bc4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bc50:	e001      	b.n	800bc56 <LoopFillZerobss>

0800bc52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bc52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bc54:	3204      	adds	r2, #4

0800bc56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bc56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bc58:	d3fb      	bcc.n	800bc52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800bc5a:	f7ff f8f9 	bl	800ae50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800bc5e:	f000 f81d 	bl	800bc9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800bc62:	f7fc fea3 	bl	80089ac <main>

0800bc66 <LoopForever>:

LoopForever:
    b LoopForever
 800bc66:	e7fe      	b.n	800bc66 <LoopForever>
  ldr   r0, =_estack
 800bc68:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800bc6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bc70:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800bc74:	0800fd08 	.word	0x0800fd08
  ldr r2, =_sbss
 800bc78:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800bc7c:	200005d8 	.word	0x200005d8

0800bc80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800bc80:	e7fe      	b.n	800bc80 <ADC1_COMP_IRQHandler>

0800bc82 <atoi>:
 800bc82:	b510      	push	{r4, lr}
 800bc84:	220a      	movs	r2, #10
 800bc86:	2100      	movs	r1, #0
 800bc88:	f000 f914 	bl	800beb4 <strtol>
 800bc8c:	bd10      	pop	{r4, pc}
	...

0800bc90 <__errno>:
 800bc90:	4b01      	ldr	r3, [pc, #4]	; (800bc98 <__errno+0x8>)
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	4770      	bx	lr
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	20000020 	.word	0x20000020

0800bc9c <__libc_init_array>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	2600      	movs	r6, #0
 800bca0:	4d0c      	ldr	r5, [pc, #48]	; (800bcd4 <__libc_init_array+0x38>)
 800bca2:	4c0d      	ldr	r4, [pc, #52]	; (800bcd8 <__libc_init_array+0x3c>)
 800bca4:	1b64      	subs	r4, r4, r5
 800bca6:	10a4      	asrs	r4, r4, #2
 800bca8:	42a6      	cmp	r6, r4
 800bcaa:	d109      	bne.n	800bcc0 <__libc_init_array+0x24>
 800bcac:	2600      	movs	r6, #0
 800bcae:	f002 faff 	bl	800e2b0 <_init>
 800bcb2:	4d0a      	ldr	r5, [pc, #40]	; (800bcdc <__libc_init_array+0x40>)
 800bcb4:	4c0a      	ldr	r4, [pc, #40]	; (800bce0 <__libc_init_array+0x44>)
 800bcb6:	1b64      	subs	r4, r4, r5
 800bcb8:	10a4      	asrs	r4, r4, #2
 800bcba:	42a6      	cmp	r6, r4
 800bcbc:	d105      	bne.n	800bcca <__libc_init_array+0x2e>
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	00b3      	lsls	r3, r6, #2
 800bcc2:	58eb      	ldr	r3, [r5, r3]
 800bcc4:	4798      	blx	r3
 800bcc6:	3601      	adds	r6, #1
 800bcc8:	e7ee      	b.n	800bca8 <__libc_init_array+0xc>
 800bcca:	00b3      	lsls	r3, r6, #2
 800bccc:	58eb      	ldr	r3, [r5, r3]
 800bcce:	4798      	blx	r3
 800bcd0:	3601      	adds	r6, #1
 800bcd2:	e7f2      	b.n	800bcba <__libc_init_array+0x1e>
 800bcd4:	0800fd00 	.word	0x0800fd00
 800bcd8:	0800fd00 	.word	0x0800fd00
 800bcdc:	0800fd00 	.word	0x0800fd00
 800bce0:	0800fd04 	.word	0x0800fd04

0800bce4 <memcpy>:
 800bce4:	2300      	movs	r3, #0
 800bce6:	b510      	push	{r4, lr}
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d100      	bne.n	800bcee <memcpy+0xa>
 800bcec:	bd10      	pop	{r4, pc}
 800bcee:	5ccc      	ldrb	r4, [r1, r3]
 800bcf0:	54c4      	strb	r4, [r0, r3]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	e7f8      	b.n	800bce8 <memcpy+0x4>

0800bcf6 <memset>:
 800bcf6:	0003      	movs	r3, r0
 800bcf8:	1882      	adds	r2, r0, r2
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d100      	bne.n	800bd00 <memset+0xa>
 800bcfe:	4770      	bx	lr
 800bd00:	7019      	strb	r1, [r3, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	e7f9      	b.n	800bcfa <memset+0x4>
	...

0800bd08 <siprintf>:
 800bd08:	b40e      	push	{r1, r2, r3}
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	b09d      	sub	sp, #116	; 0x74
 800bd0e:	a902      	add	r1, sp, #8
 800bd10:	9002      	str	r0, [sp, #8]
 800bd12:	6108      	str	r0, [r1, #16]
 800bd14:	480b      	ldr	r0, [pc, #44]	; (800bd44 <siprintf+0x3c>)
 800bd16:	2482      	movs	r4, #130	; 0x82
 800bd18:	6088      	str	r0, [r1, #8]
 800bd1a:	6148      	str	r0, [r1, #20]
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	4240      	negs	r0, r0
 800bd20:	ab1f      	add	r3, sp, #124	; 0x7c
 800bd22:	81c8      	strh	r0, [r1, #14]
 800bd24:	4808      	ldr	r0, [pc, #32]	; (800bd48 <siprintf+0x40>)
 800bd26:	cb04      	ldmia	r3!, {r2}
 800bd28:	00a4      	lsls	r4, r4, #2
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	818c      	strh	r4, [r1, #12]
 800bd30:	f000 f96e 	bl	800c010 <_svfiprintf_r>
 800bd34:	2300      	movs	r3, #0
 800bd36:	9a02      	ldr	r2, [sp, #8]
 800bd38:	7013      	strb	r3, [r2, #0]
 800bd3a:	b01d      	add	sp, #116	; 0x74
 800bd3c:	bc10      	pop	{r4}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	b003      	add	sp, #12
 800bd42:	4718      	bx	r3
 800bd44:	7fffffff 	.word	0x7fffffff
 800bd48:	20000020 	.word	0x20000020

0800bd4c <strcpy>:
 800bd4c:	1c03      	adds	r3, r0, #0
 800bd4e:	780a      	ldrb	r2, [r1, #0]
 800bd50:	3101      	adds	r1, #1
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	3301      	adds	r3, #1
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d1f9      	bne.n	800bd4e <strcpy+0x2>
 800bd5a:	4770      	bx	lr

0800bd5c <strncmp>:
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	b530      	push	{r4, r5, lr}
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d00a      	beq.n	800bd7a <strncmp+0x1e>
 800bd64:	3a01      	subs	r2, #1
 800bd66:	5cc4      	ldrb	r4, [r0, r3]
 800bd68:	5ccd      	ldrb	r5, [r1, r3]
 800bd6a:	42ac      	cmp	r4, r5
 800bd6c:	d104      	bne.n	800bd78 <strncmp+0x1c>
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d002      	beq.n	800bd78 <strncmp+0x1c>
 800bd72:	3301      	adds	r3, #1
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d1f6      	bne.n	800bd66 <strncmp+0xa>
 800bd78:	1b63      	subs	r3, r4, r5
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	bd30      	pop	{r4, r5, pc}

0800bd7e <strncpy>:
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	0004      	movs	r4, r0
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	d100      	bne.n	800bd88 <strncpy+0xa>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	780d      	ldrb	r5, [r1, #0]
 800bd8a:	1e56      	subs	r6, r2, #1
 800bd8c:	1c63      	adds	r3, r4, #1
 800bd8e:	7025      	strb	r5, [r4, #0]
 800bd90:	3101      	adds	r1, #1
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	d105      	bne.n	800bda2 <strncpy+0x24>
 800bd96:	18a4      	adds	r4, r4, r2
 800bd98:	429c      	cmp	r4, r3
 800bd9a:	d0f4      	beq.n	800bd86 <strncpy+0x8>
 800bd9c:	701d      	strb	r5, [r3, #0]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	e7fa      	b.n	800bd98 <strncpy+0x1a>
 800bda2:	001c      	movs	r4, r3
 800bda4:	0032      	movs	r2, r6
 800bda6:	e7ec      	b.n	800bd82 <strncpy+0x4>

0800bda8 <_strtol_l.isra.0>:
 800bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdaa:	001f      	movs	r7, r3
 800bdac:	000e      	movs	r6, r1
 800bdae:	b087      	sub	sp, #28
 800bdb0:	9005      	str	r0, [sp, #20]
 800bdb2:	9103      	str	r1, [sp, #12]
 800bdb4:	9202      	str	r2, [sp, #8]
 800bdb6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bdb8:	7834      	ldrb	r4, [r6, #0]
 800bdba:	f000 f8a3 	bl	800bf04 <__locale_ctype_ptr_l>
 800bdbe:	2208      	movs	r2, #8
 800bdc0:	1900      	adds	r0, r0, r4
 800bdc2:	7843      	ldrb	r3, [r0, #1]
 800bdc4:	1c75      	adds	r5, r6, #1
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	d10c      	bne.n	800bde4 <_strtol_l.isra.0+0x3c>
 800bdca:	2c2d      	cmp	r4, #45	; 0x2d
 800bdcc:	d10c      	bne.n	800bde8 <_strtol_l.isra.0+0x40>
 800bdce:	3301      	adds	r3, #1
 800bdd0:	782c      	ldrb	r4, [r5, #0]
 800bdd2:	9301      	str	r3, [sp, #4]
 800bdd4:	1cb5      	adds	r5, r6, #2
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	d00c      	beq.n	800bdf4 <_strtol_l.isra.0+0x4c>
 800bdda:	2f10      	cmp	r7, #16
 800bddc:	d114      	bne.n	800be08 <_strtol_l.isra.0+0x60>
 800bdde:	2c30      	cmp	r4, #48	; 0x30
 800bde0:	d00a      	beq.n	800bdf8 <_strtol_l.isra.0+0x50>
 800bde2:	e011      	b.n	800be08 <_strtol_l.isra.0+0x60>
 800bde4:	002e      	movs	r6, r5
 800bde6:	e7e6      	b.n	800bdb6 <_strtol_l.isra.0+0xe>
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	2c2b      	cmp	r4, #43	; 0x2b
 800bdec:	d1f3      	bne.n	800bdd6 <_strtol_l.isra.0+0x2e>
 800bdee:	782c      	ldrb	r4, [r5, #0]
 800bdf0:	1cb5      	adds	r5, r6, #2
 800bdf2:	e7f0      	b.n	800bdd6 <_strtol_l.isra.0+0x2e>
 800bdf4:	2c30      	cmp	r4, #48	; 0x30
 800bdf6:	d12f      	bne.n	800be58 <_strtol_l.isra.0+0xb0>
 800bdf8:	2220      	movs	r2, #32
 800bdfa:	782b      	ldrb	r3, [r5, #0]
 800bdfc:	4393      	bics	r3, r2
 800bdfe:	2b58      	cmp	r3, #88	; 0x58
 800be00:	d151      	bne.n	800bea6 <_strtol_l.isra.0+0xfe>
 800be02:	2710      	movs	r7, #16
 800be04:	786c      	ldrb	r4, [r5, #1]
 800be06:	3502      	adds	r5, #2
 800be08:	9b01      	ldr	r3, [sp, #4]
 800be0a:	4a29      	ldr	r2, [pc, #164]	; (800beb0 <_strtol_l.isra.0+0x108>)
 800be0c:	0039      	movs	r1, r7
 800be0e:	189e      	adds	r6, r3, r2
 800be10:	0030      	movs	r0, r6
 800be12:	f7f4 fa23 	bl	800025c <__aeabi_uidivmod>
 800be16:	0030      	movs	r0, r6
 800be18:	9104      	str	r1, [sp, #16]
 800be1a:	0039      	movs	r1, r7
 800be1c:	f7f4 f998 	bl	8000150 <__udivsi3>
 800be20:	2101      	movs	r1, #1
 800be22:	2300      	movs	r3, #0
 800be24:	4249      	negs	r1, r1
 800be26:	0002      	movs	r2, r0
 800be28:	468c      	mov	ip, r1
 800be2a:	0018      	movs	r0, r3
 800be2c:	0021      	movs	r1, r4
 800be2e:	3930      	subs	r1, #48	; 0x30
 800be30:	2909      	cmp	r1, #9
 800be32:	d813      	bhi.n	800be5c <_strtol_l.isra.0+0xb4>
 800be34:	000c      	movs	r4, r1
 800be36:	42a7      	cmp	r7, r4
 800be38:	dd1c      	ble.n	800be74 <_strtol_l.isra.0+0xcc>
 800be3a:	1c59      	adds	r1, r3, #1
 800be3c:	d009      	beq.n	800be52 <_strtol_l.isra.0+0xaa>
 800be3e:	4663      	mov	r3, ip
 800be40:	4282      	cmp	r2, r0
 800be42:	d306      	bcc.n	800be52 <_strtol_l.isra.0+0xaa>
 800be44:	d102      	bne.n	800be4c <_strtol_l.isra.0+0xa4>
 800be46:	9904      	ldr	r1, [sp, #16]
 800be48:	42a1      	cmp	r1, r4
 800be4a:	db02      	blt.n	800be52 <_strtol_l.isra.0+0xaa>
 800be4c:	2301      	movs	r3, #1
 800be4e:	4378      	muls	r0, r7
 800be50:	1820      	adds	r0, r4, r0
 800be52:	782c      	ldrb	r4, [r5, #0]
 800be54:	3501      	adds	r5, #1
 800be56:	e7e9      	b.n	800be2c <_strtol_l.isra.0+0x84>
 800be58:	270a      	movs	r7, #10
 800be5a:	e7d5      	b.n	800be08 <_strtol_l.isra.0+0x60>
 800be5c:	0021      	movs	r1, r4
 800be5e:	3941      	subs	r1, #65	; 0x41
 800be60:	2919      	cmp	r1, #25
 800be62:	d801      	bhi.n	800be68 <_strtol_l.isra.0+0xc0>
 800be64:	3c37      	subs	r4, #55	; 0x37
 800be66:	e7e6      	b.n	800be36 <_strtol_l.isra.0+0x8e>
 800be68:	0021      	movs	r1, r4
 800be6a:	3961      	subs	r1, #97	; 0x61
 800be6c:	2919      	cmp	r1, #25
 800be6e:	d801      	bhi.n	800be74 <_strtol_l.isra.0+0xcc>
 800be70:	3c57      	subs	r4, #87	; 0x57
 800be72:	e7e0      	b.n	800be36 <_strtol_l.isra.0+0x8e>
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	d108      	bne.n	800be8a <_strtol_l.isra.0+0xe2>
 800be78:	9a05      	ldr	r2, [sp, #20]
 800be7a:	3323      	adds	r3, #35	; 0x23
 800be7c:	6013      	str	r3, [r2, #0]
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	0030      	movs	r0, r6
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <_strtol_l.isra.0+0xf6>
 800be86:	b007      	add	sp, #28
 800be88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be8a:	9a01      	ldr	r2, [sp, #4]
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	d000      	beq.n	800be92 <_strtol_l.isra.0+0xea>
 800be90:	4240      	negs	r0, r0
 800be92:	9a02      	ldr	r2, [sp, #8]
 800be94:	2a00      	cmp	r2, #0
 800be96:	d0f6      	beq.n	800be86 <_strtol_l.isra.0+0xde>
 800be98:	9a03      	ldr	r2, [sp, #12]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d000      	beq.n	800bea0 <_strtol_l.isra.0+0xf8>
 800be9e:	1e6a      	subs	r2, r5, #1
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	e7ef      	b.n	800be86 <_strtol_l.isra.0+0xde>
 800bea6:	2430      	movs	r4, #48	; 0x30
 800bea8:	2f00      	cmp	r7, #0
 800beaa:	d1ad      	bne.n	800be08 <_strtol_l.isra.0+0x60>
 800beac:	3708      	adds	r7, #8
 800beae:	e7ab      	b.n	800be08 <_strtol_l.isra.0+0x60>
 800beb0:	7fffffff 	.word	0x7fffffff

0800beb4 <strtol>:
 800beb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800beb6:	0013      	movs	r3, r2
 800beb8:	4a06      	ldr	r2, [pc, #24]	; (800bed4 <strtol+0x20>)
 800beba:	0005      	movs	r5, r0
 800bebc:	6810      	ldr	r0, [r2, #0]
 800bebe:	6a04      	ldr	r4, [r0, #32]
 800bec0:	2c00      	cmp	r4, #0
 800bec2:	d100      	bne.n	800bec6 <strtol+0x12>
 800bec4:	4c04      	ldr	r4, [pc, #16]	; (800bed8 <strtol+0x24>)
 800bec6:	000a      	movs	r2, r1
 800bec8:	9400      	str	r4, [sp, #0]
 800beca:	0029      	movs	r1, r5
 800becc:	f7ff ff6c 	bl	800bda8 <_strtol_l.isra.0>
 800bed0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	20000020 	.word	0x20000020
 800bed8:	20000084 	.word	0x20000084

0800bedc <strupr>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	0006      	movs	r6, r0
 800bee0:	0005      	movs	r5, r0
 800bee2:	2703      	movs	r7, #3
 800bee4:	782c      	ldrb	r4, [r5, #0]
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	d101      	bne.n	800beee <strupr+0x12>
 800beea:	0030      	movs	r0, r6
 800beec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beee:	f000 f80d 	bl	800bf0c <__locale_ctype_ptr>
 800bef2:	1900      	adds	r0, r0, r4
 800bef4:	7843      	ldrb	r3, [r0, #1]
 800bef6:	403b      	ands	r3, r7
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d100      	bne.n	800befe <strupr+0x22>
 800befc:	3c20      	subs	r4, #32
 800befe:	702c      	strb	r4, [r5, #0]
 800bf00:	3501      	adds	r5, #1
 800bf02:	e7ef      	b.n	800bee4 <strupr+0x8>

0800bf04 <__locale_ctype_ptr_l>:
 800bf04:	30ec      	adds	r0, #236	; 0xec
 800bf06:	6800      	ldr	r0, [r0, #0]
 800bf08:	4770      	bx	lr
	...

0800bf0c <__locale_ctype_ptr>:
 800bf0c:	4b04      	ldr	r3, [pc, #16]	; (800bf20 <__locale_ctype_ptr+0x14>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d100      	bne.n	800bf18 <__locale_ctype_ptr+0xc>
 800bf16:	4b03      	ldr	r3, [pc, #12]	; (800bf24 <__locale_ctype_ptr+0x18>)
 800bf18:	33ec      	adds	r3, #236	; 0xec
 800bf1a:	6818      	ldr	r0, [r3, #0]
 800bf1c:	4770      	bx	lr
 800bf1e:	46c0      	nop			; (mov r8, r8)
 800bf20:	20000020 	.word	0x20000020
 800bf24:	20000084 	.word	0x20000084

0800bf28 <__ascii_mbtowc>:
 800bf28:	b082      	sub	sp, #8
 800bf2a:	2900      	cmp	r1, #0
 800bf2c:	d100      	bne.n	800bf30 <__ascii_mbtowc+0x8>
 800bf2e:	a901      	add	r1, sp, #4
 800bf30:	1e10      	subs	r0, r2, #0
 800bf32:	d006      	beq.n	800bf42 <__ascii_mbtowc+0x1a>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d006      	beq.n	800bf46 <__ascii_mbtowc+0x1e>
 800bf38:	7813      	ldrb	r3, [r2, #0]
 800bf3a:	600b      	str	r3, [r1, #0]
 800bf3c:	7810      	ldrb	r0, [r2, #0]
 800bf3e:	1e43      	subs	r3, r0, #1
 800bf40:	4198      	sbcs	r0, r3
 800bf42:	b002      	add	sp, #8
 800bf44:	4770      	bx	lr
 800bf46:	2002      	movs	r0, #2
 800bf48:	4240      	negs	r0, r0
 800bf4a:	e7fa      	b.n	800bf42 <__ascii_mbtowc+0x1a>

0800bf4c <__ssputs_r>:
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	688e      	ldr	r6, [r1, #8]
 800bf50:	b085      	sub	sp, #20
 800bf52:	0007      	movs	r7, r0
 800bf54:	000c      	movs	r4, r1
 800bf56:	9203      	str	r2, [sp, #12]
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	429e      	cmp	r6, r3
 800bf5c:	d839      	bhi.n	800bfd2 <__ssputs_r+0x86>
 800bf5e:	2390      	movs	r3, #144	; 0x90
 800bf60:	898a      	ldrh	r2, [r1, #12]
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	421a      	tst	r2, r3
 800bf66:	d034      	beq.n	800bfd2 <__ssputs_r+0x86>
 800bf68:	2503      	movs	r5, #3
 800bf6a:	6909      	ldr	r1, [r1, #16]
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	1a5b      	subs	r3, r3, r1
 800bf70:	9302      	str	r3, [sp, #8]
 800bf72:	6963      	ldr	r3, [r4, #20]
 800bf74:	9802      	ldr	r0, [sp, #8]
 800bf76:	435d      	muls	r5, r3
 800bf78:	0feb      	lsrs	r3, r5, #31
 800bf7a:	195d      	adds	r5, r3, r5
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	106d      	asrs	r5, r5, #1
 800bf80:	3301      	adds	r3, #1
 800bf82:	181b      	adds	r3, r3, r0
 800bf84:	42ab      	cmp	r3, r5
 800bf86:	d900      	bls.n	800bf8a <__ssputs_r+0x3e>
 800bf88:	001d      	movs	r5, r3
 800bf8a:	0553      	lsls	r3, r2, #21
 800bf8c:	d532      	bpl.n	800bff4 <__ssputs_r+0xa8>
 800bf8e:	0029      	movs	r1, r5
 800bf90:	0038      	movs	r0, r7
 800bf92:	f000 fb3d 	bl	800c610 <_malloc_r>
 800bf96:	1e06      	subs	r6, r0, #0
 800bf98:	d109      	bne.n	800bfae <__ssputs_r+0x62>
 800bf9a:	230c      	movs	r3, #12
 800bf9c:	603b      	str	r3, [r7, #0]
 800bf9e:	2340      	movs	r3, #64	; 0x40
 800bfa0:	2001      	movs	r0, #1
 800bfa2:	89a2      	ldrh	r2, [r4, #12]
 800bfa4:	4240      	negs	r0, r0
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	b005      	add	sp, #20
 800bfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfae:	9a02      	ldr	r2, [sp, #8]
 800bfb0:	6921      	ldr	r1, [r4, #16]
 800bfb2:	f7ff fe97 	bl	800bce4 <memcpy>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	4a14      	ldr	r2, [pc, #80]	; (800c00c <__ssputs_r+0xc0>)
 800bfba:	401a      	ands	r2, r3
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	81a3      	strh	r3, [r4, #12]
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	6126      	str	r6, [r4, #16]
 800bfc6:	18f6      	adds	r6, r6, r3
 800bfc8:	6026      	str	r6, [r4, #0]
 800bfca:	6165      	str	r5, [r4, #20]
 800bfcc:	9e01      	ldr	r6, [sp, #4]
 800bfce:	1aed      	subs	r5, r5, r3
 800bfd0:	60a5      	str	r5, [r4, #8]
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	42b3      	cmp	r3, r6
 800bfd6:	d200      	bcs.n	800bfda <__ssputs_r+0x8e>
 800bfd8:	001e      	movs	r6, r3
 800bfda:	0032      	movs	r2, r6
 800bfdc:	9903      	ldr	r1, [sp, #12]
 800bfde:	6820      	ldr	r0, [r4, #0]
 800bfe0:	f000 fab9 	bl	800c556 <memmove>
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	1b9b      	subs	r3, r3, r6
 800bfea:	60a3      	str	r3, [r4, #8]
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	199e      	adds	r6, r3, r6
 800bff0:	6026      	str	r6, [r4, #0]
 800bff2:	e7da      	b.n	800bfaa <__ssputs_r+0x5e>
 800bff4:	002a      	movs	r2, r5
 800bff6:	0038      	movs	r0, r7
 800bff8:	f000 fb68 	bl	800c6cc <_realloc_r>
 800bffc:	1e06      	subs	r6, r0, #0
 800bffe:	d1e0      	bne.n	800bfc2 <__ssputs_r+0x76>
 800c000:	6921      	ldr	r1, [r4, #16]
 800c002:	0038      	movs	r0, r7
 800c004:	f000 faba 	bl	800c57c <_free_r>
 800c008:	e7c7      	b.n	800bf9a <__ssputs_r+0x4e>
 800c00a:	46c0      	nop			; (mov r8, r8)
 800c00c:	fffffb7f 	.word	0xfffffb7f

0800c010 <_svfiprintf_r>:
 800c010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c012:	b09f      	sub	sp, #124	; 0x7c
 800c014:	9002      	str	r0, [sp, #8]
 800c016:	9305      	str	r3, [sp, #20]
 800c018:	898b      	ldrh	r3, [r1, #12]
 800c01a:	000f      	movs	r7, r1
 800c01c:	0016      	movs	r6, r2
 800c01e:	061b      	lsls	r3, r3, #24
 800c020:	d511      	bpl.n	800c046 <_svfiprintf_r+0x36>
 800c022:	690b      	ldr	r3, [r1, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10e      	bne.n	800c046 <_svfiprintf_r+0x36>
 800c028:	2140      	movs	r1, #64	; 0x40
 800c02a:	f000 faf1 	bl	800c610 <_malloc_r>
 800c02e:	6038      	str	r0, [r7, #0]
 800c030:	6138      	str	r0, [r7, #16]
 800c032:	2800      	cmp	r0, #0
 800c034:	d105      	bne.n	800c042 <_svfiprintf_r+0x32>
 800c036:	230c      	movs	r3, #12
 800c038:	9a02      	ldr	r2, [sp, #8]
 800c03a:	3801      	subs	r0, #1
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	b01f      	add	sp, #124	; 0x7c
 800c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c042:	2340      	movs	r3, #64	; 0x40
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	2300      	movs	r3, #0
 800c048:	ad06      	add	r5, sp, #24
 800c04a:	616b      	str	r3, [r5, #20]
 800c04c:	3320      	adds	r3, #32
 800c04e:	766b      	strb	r3, [r5, #25]
 800c050:	3310      	adds	r3, #16
 800c052:	76ab      	strb	r3, [r5, #26]
 800c054:	0034      	movs	r4, r6
 800c056:	7823      	ldrb	r3, [r4, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d147      	bne.n	800c0ec <_svfiprintf_r+0xdc>
 800c05c:	1ba3      	subs	r3, r4, r6
 800c05e:	9304      	str	r3, [sp, #16]
 800c060:	d00d      	beq.n	800c07e <_svfiprintf_r+0x6e>
 800c062:	1ba3      	subs	r3, r4, r6
 800c064:	0032      	movs	r2, r6
 800c066:	0039      	movs	r1, r7
 800c068:	9802      	ldr	r0, [sp, #8]
 800c06a:	f7ff ff6f 	bl	800bf4c <__ssputs_r>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d100      	bne.n	800c074 <_svfiprintf_r+0x64>
 800c072:	e0b5      	b.n	800c1e0 <_svfiprintf_r+0x1d0>
 800c074:	696a      	ldr	r2, [r5, #20]
 800c076:	9b04      	ldr	r3, [sp, #16]
 800c078:	4694      	mov	ip, r2
 800c07a:	4463      	add	r3, ip
 800c07c:	616b      	str	r3, [r5, #20]
 800c07e:	7823      	ldrb	r3, [r4, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d100      	bne.n	800c086 <_svfiprintf_r+0x76>
 800c084:	e0ac      	b.n	800c1e0 <_svfiprintf_r+0x1d0>
 800c086:	2201      	movs	r2, #1
 800c088:	2300      	movs	r3, #0
 800c08a:	4252      	negs	r2, r2
 800c08c:	606a      	str	r2, [r5, #4]
 800c08e:	a902      	add	r1, sp, #8
 800c090:	3254      	adds	r2, #84	; 0x54
 800c092:	1852      	adds	r2, r2, r1
 800c094:	3401      	adds	r4, #1
 800c096:	602b      	str	r3, [r5, #0]
 800c098:	60eb      	str	r3, [r5, #12]
 800c09a:	60ab      	str	r3, [r5, #8]
 800c09c:	7013      	strb	r3, [r2, #0]
 800c09e:	65ab      	str	r3, [r5, #88]	; 0x58
 800c0a0:	4e58      	ldr	r6, [pc, #352]	; (800c204 <_svfiprintf_r+0x1f4>)
 800c0a2:	2205      	movs	r2, #5
 800c0a4:	7821      	ldrb	r1, [r4, #0]
 800c0a6:	0030      	movs	r0, r6
 800c0a8:	f000 fa4a 	bl	800c540 <memchr>
 800c0ac:	1c62      	adds	r2, r4, #1
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d120      	bne.n	800c0f4 <_svfiprintf_r+0xe4>
 800c0b2:	6829      	ldr	r1, [r5, #0]
 800c0b4:	06cb      	lsls	r3, r1, #27
 800c0b6:	d504      	bpl.n	800c0c2 <_svfiprintf_r+0xb2>
 800c0b8:	2353      	movs	r3, #83	; 0x53
 800c0ba:	ae02      	add	r6, sp, #8
 800c0bc:	3020      	adds	r0, #32
 800c0be:	199b      	adds	r3, r3, r6
 800c0c0:	7018      	strb	r0, [r3, #0]
 800c0c2:	070b      	lsls	r3, r1, #28
 800c0c4:	d504      	bpl.n	800c0d0 <_svfiprintf_r+0xc0>
 800c0c6:	2353      	movs	r3, #83	; 0x53
 800c0c8:	202b      	movs	r0, #43	; 0x2b
 800c0ca:	ae02      	add	r6, sp, #8
 800c0cc:	199b      	adds	r3, r3, r6
 800c0ce:	7018      	strb	r0, [r3, #0]
 800c0d0:	7823      	ldrb	r3, [r4, #0]
 800c0d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0d4:	d016      	beq.n	800c104 <_svfiprintf_r+0xf4>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	210a      	movs	r1, #10
 800c0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0dc:	7822      	ldrb	r2, [r4, #0]
 800c0de:	3a30      	subs	r2, #48	; 0x30
 800c0e0:	2a09      	cmp	r2, #9
 800c0e2:	d955      	bls.n	800c190 <_svfiprintf_r+0x180>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d015      	beq.n	800c114 <_svfiprintf_r+0x104>
 800c0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ea:	e013      	b.n	800c114 <_svfiprintf_r+0x104>
 800c0ec:	2b25      	cmp	r3, #37	; 0x25
 800c0ee:	d0b5      	beq.n	800c05c <_svfiprintf_r+0x4c>
 800c0f0:	3401      	adds	r4, #1
 800c0f2:	e7b0      	b.n	800c056 <_svfiprintf_r+0x46>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	1b80      	subs	r0, r0, r6
 800c0f8:	4083      	lsls	r3, r0
 800c0fa:	6829      	ldr	r1, [r5, #0]
 800c0fc:	0014      	movs	r4, r2
 800c0fe:	430b      	orrs	r3, r1
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	e7cd      	b.n	800c0a0 <_svfiprintf_r+0x90>
 800c104:	9b05      	ldr	r3, [sp, #20]
 800c106:	1d18      	adds	r0, r3, #4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	9005      	str	r0, [sp, #20]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	db39      	blt.n	800c184 <_svfiprintf_r+0x174>
 800c110:	9309      	str	r3, [sp, #36]	; 0x24
 800c112:	0014      	movs	r4, r2
 800c114:	7823      	ldrb	r3, [r4, #0]
 800c116:	2b2e      	cmp	r3, #46	; 0x2e
 800c118:	d10b      	bne.n	800c132 <_svfiprintf_r+0x122>
 800c11a:	7863      	ldrb	r3, [r4, #1]
 800c11c:	1c62      	adds	r2, r4, #1
 800c11e:	2b2a      	cmp	r3, #42	; 0x2a
 800c120:	d13e      	bne.n	800c1a0 <_svfiprintf_r+0x190>
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	3402      	adds	r4, #2
 800c126:	1d1a      	adds	r2, r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	9205      	str	r2, [sp, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	db34      	blt.n	800c19a <_svfiprintf_r+0x18a>
 800c130:	9307      	str	r3, [sp, #28]
 800c132:	4e35      	ldr	r6, [pc, #212]	; (800c208 <_svfiprintf_r+0x1f8>)
 800c134:	7821      	ldrb	r1, [r4, #0]
 800c136:	2203      	movs	r2, #3
 800c138:	0030      	movs	r0, r6
 800c13a:	f000 fa01 	bl	800c540 <memchr>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d006      	beq.n	800c150 <_svfiprintf_r+0x140>
 800c142:	2340      	movs	r3, #64	; 0x40
 800c144:	1b80      	subs	r0, r0, r6
 800c146:	4083      	lsls	r3, r0
 800c148:	682a      	ldr	r2, [r5, #0]
 800c14a:	3401      	adds	r4, #1
 800c14c:	4313      	orrs	r3, r2
 800c14e:	602b      	str	r3, [r5, #0]
 800c150:	7821      	ldrb	r1, [r4, #0]
 800c152:	2206      	movs	r2, #6
 800c154:	482d      	ldr	r0, [pc, #180]	; (800c20c <_svfiprintf_r+0x1fc>)
 800c156:	1c66      	adds	r6, r4, #1
 800c158:	7629      	strb	r1, [r5, #24]
 800c15a:	f000 f9f1 	bl	800c540 <memchr>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d046      	beq.n	800c1f0 <_svfiprintf_r+0x1e0>
 800c162:	4b2b      	ldr	r3, [pc, #172]	; (800c210 <_svfiprintf_r+0x200>)
 800c164:	2b00      	cmp	r3, #0
 800c166:	d12f      	bne.n	800c1c8 <_svfiprintf_r+0x1b8>
 800c168:	6829      	ldr	r1, [r5, #0]
 800c16a:	9b05      	ldr	r3, [sp, #20]
 800c16c:	2207      	movs	r2, #7
 800c16e:	05c9      	lsls	r1, r1, #23
 800c170:	d528      	bpl.n	800c1c4 <_svfiprintf_r+0x1b4>
 800c172:	189b      	adds	r3, r3, r2
 800c174:	4393      	bics	r3, r2
 800c176:	3308      	adds	r3, #8
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	696b      	ldr	r3, [r5, #20]
 800c17c:	9a03      	ldr	r2, [sp, #12]
 800c17e:	189b      	adds	r3, r3, r2
 800c180:	616b      	str	r3, [r5, #20]
 800c182:	e767      	b.n	800c054 <_svfiprintf_r+0x44>
 800c184:	425b      	negs	r3, r3
 800c186:	60eb      	str	r3, [r5, #12]
 800c188:	2302      	movs	r3, #2
 800c18a:	430b      	orrs	r3, r1
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	e7c0      	b.n	800c112 <_svfiprintf_r+0x102>
 800c190:	434b      	muls	r3, r1
 800c192:	3401      	adds	r4, #1
 800c194:	189b      	adds	r3, r3, r2
 800c196:	2001      	movs	r0, #1
 800c198:	e7a0      	b.n	800c0dc <_svfiprintf_r+0xcc>
 800c19a:	2301      	movs	r3, #1
 800c19c:	425b      	negs	r3, r3
 800c19e:	e7c7      	b.n	800c130 <_svfiprintf_r+0x120>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	0014      	movs	r4, r2
 800c1a4:	200a      	movs	r0, #10
 800c1a6:	001a      	movs	r2, r3
 800c1a8:	606b      	str	r3, [r5, #4]
 800c1aa:	7821      	ldrb	r1, [r4, #0]
 800c1ac:	3930      	subs	r1, #48	; 0x30
 800c1ae:	2909      	cmp	r1, #9
 800c1b0:	d903      	bls.n	800c1ba <_svfiprintf_r+0x1aa>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0bd      	beq.n	800c132 <_svfiprintf_r+0x122>
 800c1b6:	9207      	str	r2, [sp, #28]
 800c1b8:	e7bb      	b.n	800c132 <_svfiprintf_r+0x122>
 800c1ba:	4342      	muls	r2, r0
 800c1bc:	3401      	adds	r4, #1
 800c1be:	1852      	adds	r2, r2, r1
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e7f2      	b.n	800c1aa <_svfiprintf_r+0x19a>
 800c1c4:	3307      	adds	r3, #7
 800c1c6:	e7d5      	b.n	800c174 <_svfiprintf_r+0x164>
 800c1c8:	ab05      	add	r3, sp, #20
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	003a      	movs	r2, r7
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <_svfiprintf_r+0x204>)
 800c1d0:	0029      	movs	r1, r5
 800c1d2:	9802      	ldr	r0, [sp, #8]
 800c1d4:	e000      	b.n	800c1d8 <_svfiprintf_r+0x1c8>
 800c1d6:	bf00      	nop
 800c1d8:	9003      	str	r0, [sp, #12]
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	d1cc      	bne.n	800c17a <_svfiprintf_r+0x16a>
 800c1e0:	89bb      	ldrh	r3, [r7, #12]
 800c1e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c1e4:	065b      	lsls	r3, r3, #25
 800c1e6:	d400      	bmi.n	800c1ea <_svfiprintf_r+0x1da>
 800c1e8:	e729      	b.n	800c03e <_svfiprintf_r+0x2e>
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	4240      	negs	r0, r0
 800c1ee:	e726      	b.n	800c03e <_svfiprintf_r+0x2e>
 800c1f0:	ab05      	add	r3, sp, #20
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	003a      	movs	r2, r7
 800c1f6:	4b07      	ldr	r3, [pc, #28]	; (800c214 <_svfiprintf_r+0x204>)
 800c1f8:	0029      	movs	r1, r5
 800c1fa:	9802      	ldr	r0, [sp, #8]
 800c1fc:	f000 f87a 	bl	800c2f4 <_printf_i>
 800c200:	e7ea      	b.n	800c1d8 <_svfiprintf_r+0x1c8>
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	0800f9a8 	.word	0x0800f9a8
 800c208:	0800f9ae 	.word	0x0800f9ae
 800c20c:	0800f9b2 	.word	0x0800f9b2
 800c210:	00000000 	.word	0x00000000
 800c214:	0800bf4d 	.word	0x0800bf4d

0800c218 <_printf_common>:
 800c218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c21a:	0015      	movs	r5, r2
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	688a      	ldr	r2, [r1, #8]
 800c220:	690b      	ldr	r3, [r1, #16]
 800c222:	9000      	str	r0, [sp, #0]
 800c224:	000c      	movs	r4, r1
 800c226:	4293      	cmp	r3, r2
 800c228:	da00      	bge.n	800c22c <_printf_common+0x14>
 800c22a:	0013      	movs	r3, r2
 800c22c:	0022      	movs	r2, r4
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	3243      	adds	r2, #67	; 0x43
 800c232:	7812      	ldrb	r2, [r2, #0]
 800c234:	2a00      	cmp	r2, #0
 800c236:	d001      	beq.n	800c23c <_printf_common+0x24>
 800c238:	3301      	adds	r3, #1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	069b      	lsls	r3, r3, #26
 800c240:	d502      	bpl.n	800c248 <_printf_common+0x30>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	3302      	adds	r3, #2
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	2706      	movs	r7, #6
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	401f      	ands	r7, r3
 800c24e:	d027      	beq.n	800c2a0 <_printf_common+0x88>
 800c250:	0023      	movs	r3, r4
 800c252:	3343      	adds	r3, #67	; 0x43
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	1e5a      	subs	r2, r3, #1
 800c258:	4193      	sbcs	r3, r2
 800c25a:	6822      	ldr	r2, [r4, #0]
 800c25c:	0692      	lsls	r2, r2, #26
 800c25e:	d430      	bmi.n	800c2c2 <_printf_common+0xaa>
 800c260:	0022      	movs	r2, r4
 800c262:	9901      	ldr	r1, [sp, #4]
 800c264:	3243      	adds	r2, #67	; 0x43
 800c266:	9800      	ldr	r0, [sp, #0]
 800c268:	9e08      	ldr	r6, [sp, #32]
 800c26a:	47b0      	blx	r6
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d025      	beq.n	800c2bc <_printf_common+0xa4>
 800c270:	2306      	movs	r3, #6
 800c272:	6820      	ldr	r0, [r4, #0]
 800c274:	682a      	ldr	r2, [r5, #0]
 800c276:	68e1      	ldr	r1, [r4, #12]
 800c278:	4003      	ands	r3, r0
 800c27a:	2500      	movs	r5, #0
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d103      	bne.n	800c288 <_printf_common+0x70>
 800c280:	1a8d      	subs	r5, r1, r2
 800c282:	43eb      	mvns	r3, r5
 800c284:	17db      	asrs	r3, r3, #31
 800c286:	401d      	ands	r5, r3
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	6922      	ldr	r2, [r4, #16]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	dd01      	ble.n	800c294 <_printf_common+0x7c>
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	18ed      	adds	r5, r5, r3
 800c294:	2700      	movs	r7, #0
 800c296:	42bd      	cmp	r5, r7
 800c298:	d120      	bne.n	800c2dc <_printf_common+0xc4>
 800c29a:	2000      	movs	r0, #0
 800c29c:	e010      	b.n	800c2c0 <_printf_common+0xa8>
 800c29e:	3701      	adds	r7, #1
 800c2a0:	68e3      	ldr	r3, [r4, #12]
 800c2a2:	682a      	ldr	r2, [r5, #0]
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	429f      	cmp	r7, r3
 800c2a8:	dad2      	bge.n	800c250 <_printf_common+0x38>
 800c2aa:	0022      	movs	r2, r4
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	3219      	adds	r2, #25
 800c2b0:	9901      	ldr	r1, [sp, #4]
 800c2b2:	9800      	ldr	r0, [sp, #0]
 800c2b4:	9e08      	ldr	r6, [sp, #32]
 800c2b6:	47b0      	blx	r6
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d1f0      	bne.n	800c29e <_printf_common+0x86>
 800c2bc:	2001      	movs	r0, #1
 800c2be:	4240      	negs	r0, r0
 800c2c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2c2:	2030      	movs	r0, #48	; 0x30
 800c2c4:	18e1      	adds	r1, r4, r3
 800c2c6:	3143      	adds	r1, #67	; 0x43
 800c2c8:	7008      	strb	r0, [r1, #0]
 800c2ca:	0021      	movs	r1, r4
 800c2cc:	1c5a      	adds	r2, r3, #1
 800c2ce:	3145      	adds	r1, #69	; 0x45
 800c2d0:	7809      	ldrb	r1, [r1, #0]
 800c2d2:	18a2      	adds	r2, r4, r2
 800c2d4:	3243      	adds	r2, #67	; 0x43
 800c2d6:	3302      	adds	r3, #2
 800c2d8:	7011      	strb	r1, [r2, #0]
 800c2da:	e7c1      	b.n	800c260 <_printf_common+0x48>
 800c2dc:	0022      	movs	r2, r4
 800c2de:	2301      	movs	r3, #1
 800c2e0:	321a      	adds	r2, #26
 800c2e2:	9901      	ldr	r1, [sp, #4]
 800c2e4:	9800      	ldr	r0, [sp, #0]
 800c2e6:	9e08      	ldr	r6, [sp, #32]
 800c2e8:	47b0      	blx	r6
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	d0e6      	beq.n	800c2bc <_printf_common+0xa4>
 800c2ee:	3701      	adds	r7, #1
 800c2f0:	e7d1      	b.n	800c296 <_printf_common+0x7e>
	...

0800c2f4 <_printf_i>:
 800c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f6:	b08b      	sub	sp, #44	; 0x2c
 800c2f8:	9206      	str	r2, [sp, #24]
 800c2fa:	000a      	movs	r2, r1
 800c2fc:	3243      	adds	r2, #67	; 0x43
 800c2fe:	9307      	str	r3, [sp, #28]
 800c300:	9005      	str	r0, [sp, #20]
 800c302:	9204      	str	r2, [sp, #16]
 800c304:	7e0a      	ldrb	r2, [r1, #24]
 800c306:	000c      	movs	r4, r1
 800c308:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c30a:	2a6e      	cmp	r2, #110	; 0x6e
 800c30c:	d100      	bne.n	800c310 <_printf_i+0x1c>
 800c30e:	e08f      	b.n	800c430 <_printf_i+0x13c>
 800c310:	d817      	bhi.n	800c342 <_printf_i+0x4e>
 800c312:	2a63      	cmp	r2, #99	; 0x63
 800c314:	d02c      	beq.n	800c370 <_printf_i+0x7c>
 800c316:	d808      	bhi.n	800c32a <_printf_i+0x36>
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d100      	bne.n	800c31e <_printf_i+0x2a>
 800c31c:	e099      	b.n	800c452 <_printf_i+0x15e>
 800c31e:	2a58      	cmp	r2, #88	; 0x58
 800c320:	d054      	beq.n	800c3cc <_printf_i+0xd8>
 800c322:	0026      	movs	r6, r4
 800c324:	3642      	adds	r6, #66	; 0x42
 800c326:	7032      	strb	r2, [r6, #0]
 800c328:	e029      	b.n	800c37e <_printf_i+0x8a>
 800c32a:	2a64      	cmp	r2, #100	; 0x64
 800c32c:	d001      	beq.n	800c332 <_printf_i+0x3e>
 800c32e:	2a69      	cmp	r2, #105	; 0x69
 800c330:	d1f7      	bne.n	800c322 <_printf_i+0x2e>
 800c332:	6821      	ldr	r1, [r4, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	0608      	lsls	r0, r1, #24
 800c338:	d523      	bpl.n	800c382 <_printf_i+0x8e>
 800c33a:	1d11      	adds	r1, r2, #4
 800c33c:	6019      	str	r1, [r3, #0]
 800c33e:	6815      	ldr	r5, [r2, #0]
 800c340:	e025      	b.n	800c38e <_printf_i+0x9a>
 800c342:	2a73      	cmp	r2, #115	; 0x73
 800c344:	d100      	bne.n	800c348 <_printf_i+0x54>
 800c346:	e088      	b.n	800c45a <_printf_i+0x166>
 800c348:	d808      	bhi.n	800c35c <_printf_i+0x68>
 800c34a:	2a6f      	cmp	r2, #111	; 0x6f
 800c34c:	d029      	beq.n	800c3a2 <_printf_i+0xae>
 800c34e:	2a70      	cmp	r2, #112	; 0x70
 800c350:	d1e7      	bne.n	800c322 <_printf_i+0x2e>
 800c352:	2220      	movs	r2, #32
 800c354:	6809      	ldr	r1, [r1, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	6022      	str	r2, [r4, #0]
 800c35a:	e003      	b.n	800c364 <_printf_i+0x70>
 800c35c:	2a75      	cmp	r2, #117	; 0x75
 800c35e:	d020      	beq.n	800c3a2 <_printf_i+0xae>
 800c360:	2a78      	cmp	r2, #120	; 0x78
 800c362:	d1de      	bne.n	800c322 <_printf_i+0x2e>
 800c364:	0022      	movs	r2, r4
 800c366:	2178      	movs	r1, #120	; 0x78
 800c368:	3245      	adds	r2, #69	; 0x45
 800c36a:	7011      	strb	r1, [r2, #0]
 800c36c:	4a6c      	ldr	r2, [pc, #432]	; (800c520 <_printf_i+0x22c>)
 800c36e:	e030      	b.n	800c3d2 <_printf_i+0xde>
 800c370:	000e      	movs	r6, r1
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	3642      	adds	r6, #66	; 0x42
 800c376:	1d11      	adds	r1, r2, #4
 800c378:	6019      	str	r1, [r3, #0]
 800c37a:	6813      	ldr	r3, [r2, #0]
 800c37c:	7033      	strb	r3, [r6, #0]
 800c37e:	2301      	movs	r3, #1
 800c380:	e079      	b.n	800c476 <_printf_i+0x182>
 800c382:	0649      	lsls	r1, r1, #25
 800c384:	d5d9      	bpl.n	800c33a <_printf_i+0x46>
 800c386:	1d11      	adds	r1, r2, #4
 800c388:	6019      	str	r1, [r3, #0]
 800c38a:	2300      	movs	r3, #0
 800c38c:	5ed5      	ldrsh	r5, [r2, r3]
 800c38e:	2d00      	cmp	r5, #0
 800c390:	da03      	bge.n	800c39a <_printf_i+0xa6>
 800c392:	232d      	movs	r3, #45	; 0x2d
 800c394:	9a04      	ldr	r2, [sp, #16]
 800c396:	426d      	negs	r5, r5
 800c398:	7013      	strb	r3, [r2, #0]
 800c39a:	4b62      	ldr	r3, [pc, #392]	; (800c524 <_printf_i+0x230>)
 800c39c:	270a      	movs	r7, #10
 800c39e:	9303      	str	r3, [sp, #12]
 800c3a0:	e02f      	b.n	800c402 <_printf_i+0x10e>
 800c3a2:	6820      	ldr	r0, [r4, #0]
 800c3a4:	6819      	ldr	r1, [r3, #0]
 800c3a6:	0605      	lsls	r5, r0, #24
 800c3a8:	d503      	bpl.n	800c3b2 <_printf_i+0xbe>
 800c3aa:	1d08      	adds	r0, r1, #4
 800c3ac:	6018      	str	r0, [r3, #0]
 800c3ae:	680d      	ldr	r5, [r1, #0]
 800c3b0:	e005      	b.n	800c3be <_printf_i+0xca>
 800c3b2:	0640      	lsls	r0, r0, #25
 800c3b4:	d5f9      	bpl.n	800c3aa <_printf_i+0xb6>
 800c3b6:	680d      	ldr	r5, [r1, #0]
 800c3b8:	1d08      	adds	r0, r1, #4
 800c3ba:	6018      	str	r0, [r3, #0]
 800c3bc:	b2ad      	uxth	r5, r5
 800c3be:	4b59      	ldr	r3, [pc, #356]	; (800c524 <_printf_i+0x230>)
 800c3c0:	2708      	movs	r7, #8
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	2a6f      	cmp	r2, #111	; 0x6f
 800c3c6:	d018      	beq.n	800c3fa <_printf_i+0x106>
 800c3c8:	270a      	movs	r7, #10
 800c3ca:	e016      	b.n	800c3fa <_printf_i+0x106>
 800c3cc:	3145      	adds	r1, #69	; 0x45
 800c3ce:	700a      	strb	r2, [r1, #0]
 800c3d0:	4a54      	ldr	r2, [pc, #336]	; (800c524 <_printf_i+0x230>)
 800c3d2:	9203      	str	r2, [sp, #12]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	6821      	ldr	r1, [r4, #0]
 800c3d8:	1d10      	adds	r0, r2, #4
 800c3da:	6018      	str	r0, [r3, #0]
 800c3dc:	6815      	ldr	r5, [r2, #0]
 800c3de:	0608      	lsls	r0, r1, #24
 800c3e0:	d522      	bpl.n	800c428 <_printf_i+0x134>
 800c3e2:	07cb      	lsls	r3, r1, #31
 800c3e4:	d502      	bpl.n	800c3ec <_printf_i+0xf8>
 800c3e6:	2320      	movs	r3, #32
 800c3e8:	4319      	orrs	r1, r3
 800c3ea:	6021      	str	r1, [r4, #0]
 800c3ec:	2710      	movs	r7, #16
 800c3ee:	2d00      	cmp	r5, #0
 800c3f0:	d103      	bne.n	800c3fa <_printf_i+0x106>
 800c3f2:	2320      	movs	r3, #32
 800c3f4:	6822      	ldr	r2, [r4, #0]
 800c3f6:	439a      	bics	r2, r3
 800c3f8:	6022      	str	r2, [r4, #0]
 800c3fa:	0023      	movs	r3, r4
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	3343      	adds	r3, #67	; 0x43
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	6863      	ldr	r3, [r4, #4]
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	db5c      	blt.n	800c4c4 <_printf_i+0x1d0>
 800c40a:	2204      	movs	r2, #4
 800c40c:	6821      	ldr	r1, [r4, #0]
 800c40e:	4391      	bics	r1, r2
 800c410:	6021      	str	r1, [r4, #0]
 800c412:	2d00      	cmp	r5, #0
 800c414:	d158      	bne.n	800c4c8 <_printf_i+0x1d4>
 800c416:	9e04      	ldr	r6, [sp, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d064      	beq.n	800c4e6 <_printf_i+0x1f2>
 800c41c:	0026      	movs	r6, r4
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	3642      	adds	r6, #66	; 0x42
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	7033      	strb	r3, [r6, #0]
 800c426:	e05e      	b.n	800c4e6 <_printf_i+0x1f2>
 800c428:	0648      	lsls	r0, r1, #25
 800c42a:	d5da      	bpl.n	800c3e2 <_printf_i+0xee>
 800c42c:	b2ad      	uxth	r5, r5
 800c42e:	e7d8      	b.n	800c3e2 <_printf_i+0xee>
 800c430:	6809      	ldr	r1, [r1, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	0608      	lsls	r0, r1, #24
 800c436:	d505      	bpl.n	800c444 <_printf_i+0x150>
 800c438:	1d11      	adds	r1, r2, #4
 800c43a:	6019      	str	r1, [r3, #0]
 800c43c:	6813      	ldr	r3, [r2, #0]
 800c43e:	6962      	ldr	r2, [r4, #20]
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	e006      	b.n	800c452 <_printf_i+0x15e>
 800c444:	0649      	lsls	r1, r1, #25
 800c446:	d5f7      	bpl.n	800c438 <_printf_i+0x144>
 800c448:	1d11      	adds	r1, r2, #4
 800c44a:	6019      	str	r1, [r3, #0]
 800c44c:	6813      	ldr	r3, [r2, #0]
 800c44e:	8aa2      	ldrh	r2, [r4, #20]
 800c450:	801a      	strh	r2, [r3, #0]
 800c452:	2300      	movs	r3, #0
 800c454:	9e04      	ldr	r6, [sp, #16]
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	e054      	b.n	800c504 <_printf_i+0x210>
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	1d11      	adds	r1, r2, #4
 800c45e:	6019      	str	r1, [r3, #0]
 800c460:	6816      	ldr	r6, [r2, #0]
 800c462:	2100      	movs	r1, #0
 800c464:	6862      	ldr	r2, [r4, #4]
 800c466:	0030      	movs	r0, r6
 800c468:	f000 f86a 	bl	800c540 <memchr>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d001      	beq.n	800c474 <_printf_i+0x180>
 800c470:	1b80      	subs	r0, r0, r6
 800c472:	6060      	str	r0, [r4, #4]
 800c474:	6863      	ldr	r3, [r4, #4]
 800c476:	6123      	str	r3, [r4, #16]
 800c478:	2300      	movs	r3, #0
 800c47a:	9a04      	ldr	r2, [sp, #16]
 800c47c:	7013      	strb	r3, [r2, #0]
 800c47e:	e041      	b.n	800c504 <_printf_i+0x210>
 800c480:	6923      	ldr	r3, [r4, #16]
 800c482:	0032      	movs	r2, r6
 800c484:	9906      	ldr	r1, [sp, #24]
 800c486:	9805      	ldr	r0, [sp, #20]
 800c488:	9d07      	ldr	r5, [sp, #28]
 800c48a:	47a8      	blx	r5
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d043      	beq.n	800c518 <_printf_i+0x224>
 800c490:	6823      	ldr	r3, [r4, #0]
 800c492:	2500      	movs	r5, #0
 800c494:	079b      	lsls	r3, r3, #30
 800c496:	d40f      	bmi.n	800c4b8 <_printf_i+0x1c4>
 800c498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49a:	68e0      	ldr	r0, [r4, #12]
 800c49c:	4298      	cmp	r0, r3
 800c49e:	da3d      	bge.n	800c51c <_printf_i+0x228>
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	e03b      	b.n	800c51c <_printf_i+0x228>
 800c4a4:	0022      	movs	r2, r4
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	3219      	adds	r2, #25
 800c4aa:	9906      	ldr	r1, [sp, #24]
 800c4ac:	9805      	ldr	r0, [sp, #20]
 800c4ae:	9e07      	ldr	r6, [sp, #28]
 800c4b0:	47b0      	blx	r6
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d030      	beq.n	800c518 <_printf_i+0x224>
 800c4b6:	3501      	adds	r5, #1
 800c4b8:	68e3      	ldr	r3, [r4, #12]
 800c4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4bc:	1a9b      	subs	r3, r3, r2
 800c4be:	429d      	cmp	r5, r3
 800c4c0:	dbf0      	blt.n	800c4a4 <_printf_i+0x1b0>
 800c4c2:	e7e9      	b.n	800c498 <_printf_i+0x1a4>
 800c4c4:	2d00      	cmp	r5, #0
 800c4c6:	d0a9      	beq.n	800c41c <_printf_i+0x128>
 800c4c8:	9e04      	ldr	r6, [sp, #16]
 800c4ca:	0028      	movs	r0, r5
 800c4cc:	0039      	movs	r1, r7
 800c4ce:	f7f3 fec5 	bl	800025c <__aeabi_uidivmod>
 800c4d2:	9b03      	ldr	r3, [sp, #12]
 800c4d4:	3e01      	subs	r6, #1
 800c4d6:	5c5b      	ldrb	r3, [r3, r1]
 800c4d8:	0028      	movs	r0, r5
 800c4da:	7033      	strb	r3, [r6, #0]
 800c4dc:	0039      	movs	r1, r7
 800c4de:	f7f3 fe37 	bl	8000150 <__udivsi3>
 800c4e2:	1e05      	subs	r5, r0, #0
 800c4e4:	d1f1      	bne.n	800c4ca <_printf_i+0x1d6>
 800c4e6:	2f08      	cmp	r7, #8
 800c4e8:	d109      	bne.n	800c4fe <_printf_i+0x20a>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	07db      	lsls	r3, r3, #31
 800c4ee:	d506      	bpl.n	800c4fe <_printf_i+0x20a>
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	6922      	ldr	r2, [r4, #16]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	dc02      	bgt.n	800c4fe <_printf_i+0x20a>
 800c4f8:	2330      	movs	r3, #48	; 0x30
 800c4fa:	3e01      	subs	r6, #1
 800c4fc:	7033      	strb	r3, [r6, #0]
 800c4fe:	9b04      	ldr	r3, [sp, #16]
 800c500:	1b9b      	subs	r3, r3, r6
 800c502:	6123      	str	r3, [r4, #16]
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	aa09      	add	r2, sp, #36	; 0x24
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	0021      	movs	r1, r4
 800c50c:	9b06      	ldr	r3, [sp, #24]
 800c50e:	9805      	ldr	r0, [sp, #20]
 800c510:	f7ff fe82 	bl	800c218 <_printf_common>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d1b3      	bne.n	800c480 <_printf_i+0x18c>
 800c518:	2001      	movs	r0, #1
 800c51a:	4240      	negs	r0, r0
 800c51c:	b00b      	add	sp, #44	; 0x2c
 800c51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c520:	0800f9ca 	.word	0x0800f9ca
 800c524:	0800f9b9 	.word	0x0800f9b9

0800c528 <__ascii_wctomb>:
 800c528:	1e0b      	subs	r3, r1, #0
 800c52a:	d004      	beq.n	800c536 <__ascii_wctomb+0xe>
 800c52c:	2aff      	cmp	r2, #255	; 0xff
 800c52e:	d904      	bls.n	800c53a <__ascii_wctomb+0x12>
 800c530:	238a      	movs	r3, #138	; 0x8a
 800c532:	6003      	str	r3, [r0, #0]
 800c534:	3b8b      	subs	r3, #139	; 0x8b
 800c536:	0018      	movs	r0, r3
 800c538:	4770      	bx	lr
 800c53a:	700a      	strb	r2, [r1, #0]
 800c53c:	2301      	movs	r3, #1
 800c53e:	e7fa      	b.n	800c536 <__ascii_wctomb+0xe>

0800c540 <memchr>:
 800c540:	b2c9      	uxtb	r1, r1
 800c542:	1882      	adds	r2, r0, r2
 800c544:	4290      	cmp	r0, r2
 800c546:	d101      	bne.n	800c54c <memchr+0xc>
 800c548:	2000      	movs	r0, #0
 800c54a:	4770      	bx	lr
 800c54c:	7803      	ldrb	r3, [r0, #0]
 800c54e:	428b      	cmp	r3, r1
 800c550:	d0fb      	beq.n	800c54a <memchr+0xa>
 800c552:	3001      	adds	r0, #1
 800c554:	e7f6      	b.n	800c544 <memchr+0x4>

0800c556 <memmove>:
 800c556:	b510      	push	{r4, lr}
 800c558:	4288      	cmp	r0, r1
 800c55a:	d902      	bls.n	800c562 <memmove+0xc>
 800c55c:	188b      	adds	r3, r1, r2
 800c55e:	4298      	cmp	r0, r3
 800c560:	d308      	bcc.n	800c574 <memmove+0x1e>
 800c562:	2300      	movs	r3, #0
 800c564:	429a      	cmp	r2, r3
 800c566:	d007      	beq.n	800c578 <memmove+0x22>
 800c568:	5ccc      	ldrb	r4, [r1, r3]
 800c56a:	54c4      	strb	r4, [r0, r3]
 800c56c:	3301      	adds	r3, #1
 800c56e:	e7f9      	b.n	800c564 <memmove+0xe>
 800c570:	5c8b      	ldrb	r3, [r1, r2]
 800c572:	5483      	strb	r3, [r0, r2]
 800c574:	3a01      	subs	r2, #1
 800c576:	d2fb      	bcs.n	800c570 <memmove+0x1a>
 800c578:	bd10      	pop	{r4, pc}
	...

0800c57c <_free_r>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	0005      	movs	r5, r0
 800c580:	2900      	cmp	r1, #0
 800c582:	d010      	beq.n	800c5a6 <_free_r+0x2a>
 800c584:	1f0c      	subs	r4, r1, #4
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	da00      	bge.n	800c58e <_free_r+0x12>
 800c58c:	18e4      	adds	r4, r4, r3
 800c58e:	0028      	movs	r0, r5
 800c590:	f000 f8d4 	bl	800c73c <__malloc_lock>
 800c594:	4a1d      	ldr	r2, [pc, #116]	; (800c60c <_free_r+0x90>)
 800c596:	6813      	ldr	r3, [r2, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d105      	bne.n	800c5a8 <_free_r+0x2c>
 800c59c:	6063      	str	r3, [r4, #4]
 800c59e:	6014      	str	r4, [r2, #0]
 800c5a0:	0028      	movs	r0, r5
 800c5a2:	f000 f8cc 	bl	800c73e <__malloc_unlock>
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d909      	bls.n	800c5c0 <_free_r+0x44>
 800c5ac:	6821      	ldr	r1, [r4, #0]
 800c5ae:	1860      	adds	r0, r4, r1
 800c5b0:	4283      	cmp	r3, r0
 800c5b2:	d1f3      	bne.n	800c59c <_free_r+0x20>
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	1841      	adds	r1, r0, r1
 800c5ba:	6021      	str	r1, [r4, #0]
 800c5bc:	e7ee      	b.n	800c59c <_free_r+0x20>
 800c5be:	0013      	movs	r3, r2
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	2a00      	cmp	r2, #0
 800c5c4:	d001      	beq.n	800c5ca <_free_r+0x4e>
 800c5c6:	42a2      	cmp	r2, r4
 800c5c8:	d9f9      	bls.n	800c5be <_free_r+0x42>
 800c5ca:	6819      	ldr	r1, [r3, #0]
 800c5cc:	1858      	adds	r0, r3, r1
 800c5ce:	42a0      	cmp	r0, r4
 800c5d0:	d10b      	bne.n	800c5ea <_free_r+0x6e>
 800c5d2:	6820      	ldr	r0, [r4, #0]
 800c5d4:	1809      	adds	r1, r1, r0
 800c5d6:	1858      	adds	r0, r3, r1
 800c5d8:	6019      	str	r1, [r3, #0]
 800c5da:	4282      	cmp	r2, r0
 800c5dc:	d1e0      	bne.n	800c5a0 <_free_r+0x24>
 800c5de:	6810      	ldr	r0, [r2, #0]
 800c5e0:	6852      	ldr	r2, [r2, #4]
 800c5e2:	1841      	adds	r1, r0, r1
 800c5e4:	6019      	str	r1, [r3, #0]
 800c5e6:	605a      	str	r2, [r3, #4]
 800c5e8:	e7da      	b.n	800c5a0 <_free_r+0x24>
 800c5ea:	42a0      	cmp	r0, r4
 800c5ec:	d902      	bls.n	800c5f4 <_free_r+0x78>
 800c5ee:	230c      	movs	r3, #12
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	e7d5      	b.n	800c5a0 <_free_r+0x24>
 800c5f4:	6821      	ldr	r1, [r4, #0]
 800c5f6:	1860      	adds	r0, r4, r1
 800c5f8:	4282      	cmp	r2, r0
 800c5fa:	d103      	bne.n	800c604 <_free_r+0x88>
 800c5fc:	6810      	ldr	r0, [r2, #0]
 800c5fe:	6852      	ldr	r2, [r2, #4]
 800c600:	1841      	adds	r1, r0, r1
 800c602:	6021      	str	r1, [r4, #0]
 800c604:	6062      	str	r2, [r4, #4]
 800c606:	605c      	str	r4, [r3, #4]
 800c608:	e7ca      	b.n	800c5a0 <_free_r+0x24>
 800c60a:	46c0      	nop			; (mov r8, r8)
 800c60c:	20000394 	.word	0x20000394

0800c610 <_malloc_r>:
 800c610:	2303      	movs	r3, #3
 800c612:	b570      	push	{r4, r5, r6, lr}
 800c614:	1ccd      	adds	r5, r1, #3
 800c616:	439d      	bics	r5, r3
 800c618:	3508      	adds	r5, #8
 800c61a:	0006      	movs	r6, r0
 800c61c:	2d0c      	cmp	r5, #12
 800c61e:	d21e      	bcs.n	800c65e <_malloc_r+0x4e>
 800c620:	250c      	movs	r5, #12
 800c622:	42a9      	cmp	r1, r5
 800c624:	d81d      	bhi.n	800c662 <_malloc_r+0x52>
 800c626:	0030      	movs	r0, r6
 800c628:	f000 f888 	bl	800c73c <__malloc_lock>
 800c62c:	4a25      	ldr	r2, [pc, #148]	; (800c6c4 <_malloc_r+0xb4>)
 800c62e:	6814      	ldr	r4, [r2, #0]
 800c630:	0021      	movs	r1, r4
 800c632:	2900      	cmp	r1, #0
 800c634:	d119      	bne.n	800c66a <_malloc_r+0x5a>
 800c636:	4c24      	ldr	r4, [pc, #144]	; (800c6c8 <_malloc_r+0xb8>)
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d103      	bne.n	800c646 <_malloc_r+0x36>
 800c63e:	0030      	movs	r0, r6
 800c640:	f000 f86a 	bl	800c718 <_sbrk_r>
 800c644:	6020      	str	r0, [r4, #0]
 800c646:	0029      	movs	r1, r5
 800c648:	0030      	movs	r0, r6
 800c64a:	f000 f865 	bl	800c718 <_sbrk_r>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	d12c      	bne.n	800c6ac <_malloc_r+0x9c>
 800c652:	230c      	movs	r3, #12
 800c654:	0030      	movs	r0, r6
 800c656:	6033      	str	r3, [r6, #0]
 800c658:	f000 f871 	bl	800c73e <__malloc_unlock>
 800c65c:	e003      	b.n	800c666 <_malloc_r+0x56>
 800c65e:	2d00      	cmp	r5, #0
 800c660:	dadf      	bge.n	800c622 <_malloc_r+0x12>
 800c662:	230c      	movs	r3, #12
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	2000      	movs	r0, #0
 800c668:	bd70      	pop	{r4, r5, r6, pc}
 800c66a:	680b      	ldr	r3, [r1, #0]
 800c66c:	1b5b      	subs	r3, r3, r5
 800c66e:	d41a      	bmi.n	800c6a6 <_malloc_r+0x96>
 800c670:	2b0b      	cmp	r3, #11
 800c672:	d903      	bls.n	800c67c <_malloc_r+0x6c>
 800c674:	600b      	str	r3, [r1, #0]
 800c676:	18cc      	adds	r4, r1, r3
 800c678:	6025      	str	r5, [r4, #0]
 800c67a:	e003      	b.n	800c684 <_malloc_r+0x74>
 800c67c:	428c      	cmp	r4, r1
 800c67e:	d10e      	bne.n	800c69e <_malloc_r+0x8e>
 800c680:	6863      	ldr	r3, [r4, #4]
 800c682:	6013      	str	r3, [r2, #0]
 800c684:	0030      	movs	r0, r6
 800c686:	f000 f85a 	bl	800c73e <__malloc_unlock>
 800c68a:	0020      	movs	r0, r4
 800c68c:	2207      	movs	r2, #7
 800c68e:	300b      	adds	r0, #11
 800c690:	1d23      	adds	r3, r4, #4
 800c692:	4390      	bics	r0, r2
 800c694:	1ac3      	subs	r3, r0, r3
 800c696:	d0e7      	beq.n	800c668 <_malloc_r+0x58>
 800c698:	425a      	negs	r2, r3
 800c69a:	50e2      	str	r2, [r4, r3]
 800c69c:	e7e4      	b.n	800c668 <_malloc_r+0x58>
 800c69e:	684b      	ldr	r3, [r1, #4]
 800c6a0:	6063      	str	r3, [r4, #4]
 800c6a2:	000c      	movs	r4, r1
 800c6a4:	e7ee      	b.n	800c684 <_malloc_r+0x74>
 800c6a6:	000c      	movs	r4, r1
 800c6a8:	6849      	ldr	r1, [r1, #4]
 800c6aa:	e7c2      	b.n	800c632 <_malloc_r+0x22>
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	1cc4      	adds	r4, r0, #3
 800c6b0:	439c      	bics	r4, r3
 800c6b2:	42a0      	cmp	r0, r4
 800c6b4:	d0e0      	beq.n	800c678 <_malloc_r+0x68>
 800c6b6:	1a21      	subs	r1, r4, r0
 800c6b8:	0030      	movs	r0, r6
 800c6ba:	f000 f82d 	bl	800c718 <_sbrk_r>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d1da      	bne.n	800c678 <_malloc_r+0x68>
 800c6c2:	e7c6      	b.n	800c652 <_malloc_r+0x42>
 800c6c4:	20000394 	.word	0x20000394
 800c6c8:	20000398 	.word	0x20000398

0800c6cc <_realloc_r>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	0007      	movs	r7, r0
 800c6d0:	000d      	movs	r5, r1
 800c6d2:	0016      	movs	r6, r2
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d105      	bne.n	800c6e4 <_realloc_r+0x18>
 800c6d8:	0011      	movs	r1, r2
 800c6da:	f7ff ff99 	bl	800c610 <_malloc_r>
 800c6de:	0004      	movs	r4, r0
 800c6e0:	0020      	movs	r0, r4
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	d103      	bne.n	800c6f0 <_realloc_r+0x24>
 800c6e8:	f7ff ff48 	bl	800c57c <_free_r>
 800c6ec:	0034      	movs	r4, r6
 800c6ee:	e7f7      	b.n	800c6e0 <_realloc_r+0x14>
 800c6f0:	f000 f826 	bl	800c740 <_malloc_usable_size_r>
 800c6f4:	002c      	movs	r4, r5
 800c6f6:	4286      	cmp	r6, r0
 800c6f8:	d9f2      	bls.n	800c6e0 <_realloc_r+0x14>
 800c6fa:	0031      	movs	r1, r6
 800c6fc:	0038      	movs	r0, r7
 800c6fe:	f7ff ff87 	bl	800c610 <_malloc_r>
 800c702:	1e04      	subs	r4, r0, #0
 800c704:	d0ec      	beq.n	800c6e0 <_realloc_r+0x14>
 800c706:	0029      	movs	r1, r5
 800c708:	0032      	movs	r2, r6
 800c70a:	f7ff faeb 	bl	800bce4 <memcpy>
 800c70e:	0029      	movs	r1, r5
 800c710:	0038      	movs	r0, r7
 800c712:	f7ff ff33 	bl	800c57c <_free_r>
 800c716:	e7e3      	b.n	800c6e0 <_realloc_r+0x14>

0800c718 <_sbrk_r>:
 800c718:	2300      	movs	r3, #0
 800c71a:	b570      	push	{r4, r5, r6, lr}
 800c71c:	4c06      	ldr	r4, [pc, #24]	; (800c738 <_sbrk_r+0x20>)
 800c71e:	0005      	movs	r5, r0
 800c720:	0008      	movs	r0, r1
 800c722:	6023      	str	r3, [r4, #0]
 800c724:	f7fe fb7a 	bl	800ae1c <_sbrk>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d103      	bne.n	800c734 <_sbrk_r+0x1c>
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d000      	beq.n	800c734 <_sbrk_r+0x1c>
 800c732:	602b      	str	r3, [r5, #0]
 800c734:	bd70      	pop	{r4, r5, r6, pc}
 800c736:	46c0      	nop			; (mov r8, r8)
 800c738:	200005d4 	.word	0x200005d4

0800c73c <__malloc_lock>:
 800c73c:	4770      	bx	lr

0800c73e <__malloc_unlock>:
 800c73e:	4770      	bx	lr

0800c740 <_malloc_usable_size_r>:
 800c740:	1f0b      	subs	r3, r1, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	1f18      	subs	r0, r3, #4
 800c746:	2b00      	cmp	r3, #0
 800c748:	da01      	bge.n	800c74e <_malloc_usable_size_r+0xe>
 800c74a:	580b      	ldr	r3, [r1, r0]
 800c74c:	18c0      	adds	r0, r0, r3
 800c74e:	4770      	bx	lr

0800c750 <cos>:
 800c750:	b530      	push	{r4, r5, lr}
 800c752:	4a1e      	ldr	r2, [pc, #120]	; (800c7cc <cos+0x7c>)
 800c754:	004b      	lsls	r3, r1, #1
 800c756:	b087      	sub	sp, #28
 800c758:	085b      	lsrs	r3, r3, #1
 800c75a:	4293      	cmp	r3, r2
 800c75c:	dc04      	bgt.n	800c768 <cos+0x18>
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	f000 fe25 	bl	800d3b0 <__kernel_cos>
 800c766:	e006      	b.n	800c776 <cos+0x26>
 800c768:	4a19      	ldr	r2, [pc, #100]	; (800c7d0 <cos+0x80>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	dd05      	ble.n	800c77a <cos+0x2a>
 800c76e:	0002      	movs	r2, r0
 800c770:	000b      	movs	r3, r1
 800c772:	f7f5 fe15 	bl	80023a0 <__aeabi_dsub>
 800c776:	b007      	add	sp, #28
 800c778:	bd30      	pop	{r4, r5, pc}
 800c77a:	aa02      	add	r2, sp, #8
 800c77c:	f000 fb84 	bl	800ce88 <__ieee754_rem_pio2>
 800c780:	9c04      	ldr	r4, [sp, #16]
 800c782:	9d05      	ldr	r5, [sp, #20]
 800c784:	2303      	movs	r3, #3
 800c786:	4003      	ands	r3, r0
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d008      	beq.n	800c79e <cos+0x4e>
 800c78c:	9802      	ldr	r0, [sp, #8]
 800c78e:	9903      	ldr	r1, [sp, #12]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d00f      	beq.n	800c7b4 <cos+0x64>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d112      	bne.n	800c7be <cos+0x6e>
 800c798:	0022      	movs	r2, r4
 800c79a:	002b      	movs	r3, r5
 800c79c:	e7e1      	b.n	800c762 <cos+0x12>
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	0022      	movs	r2, r4
 800c7a2:	9802      	ldr	r0, [sp, #8]
 800c7a4:	9903      	ldr	r1, [sp, #12]
 800c7a6:	002b      	movs	r3, r5
 800c7a8:	f001 fa52 	bl	800dc50 <__kernel_sin>
 800c7ac:	2380      	movs	r3, #128	; 0x80
 800c7ae:	061b      	lsls	r3, r3, #24
 800c7b0:	18c9      	adds	r1, r1, r3
 800c7b2:	e7e0      	b.n	800c776 <cos+0x26>
 800c7b4:	0022      	movs	r2, r4
 800c7b6:	002b      	movs	r3, r5
 800c7b8:	f000 fdfa 	bl	800d3b0 <__kernel_cos>
 800c7bc:	e7f6      	b.n	800c7ac <cos+0x5c>
 800c7be:	2301      	movs	r3, #1
 800c7c0:	0022      	movs	r2, r4
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	002b      	movs	r3, r5
 800c7c6:	f001 fa43 	bl	800dc50 <__kernel_sin>
 800c7ca:	e7d4      	b.n	800c776 <cos+0x26>
 800c7cc:	3fe921fb 	.word	0x3fe921fb
 800c7d0:	7fefffff 	.word	0x7fefffff

0800c7d4 <acos>:
 800c7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7d6:	b08d      	sub	sp, #52	; 0x34
 800c7d8:	0004      	movs	r4, r0
 800c7da:	000d      	movs	r5, r1
 800c7dc:	f000 f8ac 	bl	800c938 <__ieee754_acos>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4e22      	ldr	r6, [pc, #136]	; (800c86c <acos+0x98>)
 800c7e4:	9000      	str	r0, [sp, #0]
 800c7e6:	9101      	str	r1, [sp, #4]
 800c7e8:	56f3      	ldrsb	r3, [r6, r3]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	d03a      	beq.n	800c864 <acos+0x90>
 800c7ee:	0022      	movs	r2, r4
 800c7f0:	002b      	movs	r3, r5
 800c7f2:	0020      	movs	r0, r4
 800c7f4:	0029      	movs	r1, r5
 800c7f6:	f7f6 f8e9 	bl	80029cc <__aeabi_dcmpun>
 800c7fa:	1e07      	subs	r7, r0, #0
 800c7fc:	d132      	bne.n	800c864 <acos+0x90>
 800c7fe:	0020      	movs	r0, r4
 800c800:	0029      	movs	r1, r5
 800c802:	f001 fc5b 	bl	800e0bc <fabs>
 800c806:	2200      	movs	r2, #0
 800c808:	4b19      	ldr	r3, [pc, #100]	; (800c870 <acos+0x9c>)
 800c80a:	f7f3 fe41 	bl	8000490 <__aeabi_dcmpgt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d028      	beq.n	800c864 <acos+0x90>
 800c812:	2301      	movs	r3, #1
 800c814:	9302      	str	r3, [sp, #8]
 800c816:	4b17      	ldr	r3, [pc, #92]	; (800c874 <acos+0xa0>)
 800c818:	4817      	ldr	r0, [pc, #92]	; (800c878 <acos+0xa4>)
 800c81a:	9303      	str	r3, [sp, #12]
 800c81c:	970a      	str	r7, [sp, #40]	; 0x28
 800c81e:	9406      	str	r4, [sp, #24]
 800c820:	9507      	str	r5, [sp, #28]
 800c822:	9404      	str	r4, [sp, #16]
 800c824:	9505      	str	r5, [sp, #20]
 800c826:	f001 fcd1 	bl	800e1cc <nan>
 800c82a:	2300      	movs	r3, #0
 800c82c:	56f3      	ldrsb	r3, [r6, r3]
 800c82e:	9008      	str	r0, [sp, #32]
 800c830:	9109      	str	r1, [sp, #36]	; 0x24
 800c832:	2b02      	cmp	r3, #2
 800c834:	d104      	bne.n	800c840 <acos+0x6c>
 800c836:	f7ff fa2b 	bl	800bc90 <__errno>
 800c83a:	2321      	movs	r3, #33	; 0x21
 800c83c:	6003      	str	r3, [r0, #0]
 800c83e:	e004      	b.n	800c84a <acos+0x76>
 800c840:	a802      	add	r0, sp, #8
 800c842:	f001 fcc1 	bl	800e1c8 <matherr>
 800c846:	2800      	cmp	r0, #0
 800c848:	d0f5      	beq.n	800c836 <acos+0x62>
 800c84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d004      	beq.n	800c85c <acos+0x88>
 800c852:	f7ff fa1d 	bl	800bc90 <__errno>
 800c856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	6003      	str	r3, [r0, #0]
 800c85c:	9b08      	ldr	r3, [sp, #32]
 800c85e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	9401      	str	r4, [sp, #4]
 800c864:	9800      	ldr	r0, [sp, #0]
 800c866:	9901      	ldr	r1, [sp, #4]
 800c868:	b00d      	add	sp, #52	; 0x34
 800c86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c86c:	200001f0 	.word	0x200001f0
 800c870:	3ff00000 	.word	0x3ff00000
 800c874:	0800fadc 	.word	0x0800fadc
 800c878:	0800f99d 	.word	0x0800f99d

0800c87c <atan2>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	f000 fa51 	bl	800cd24 <__ieee754_atan2>
 800c882:	bd10      	pop	{r4, pc}

0800c884 <sqrt>:
 800c884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c886:	b08f      	sub	sp, #60	; 0x3c
 800c888:	0004      	movs	r4, r0
 800c88a:	000d      	movs	r5, r1
 800c88c:	f000 fce0 	bl	800d250 <__ieee754_sqrt>
 800c890:	4b27      	ldr	r3, [pc, #156]	; (800c930 <sqrt+0xac>)
 800c892:	9000      	str	r0, [sp, #0]
 800c894:	9101      	str	r1, [sp, #4]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	b25b      	sxtb	r3, r3
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	3301      	adds	r3, #1
 800c89e:	d033      	beq.n	800c908 <sqrt+0x84>
 800c8a0:	0022      	movs	r2, r4
 800c8a2:	002b      	movs	r3, r5
 800c8a4:	0020      	movs	r0, r4
 800c8a6:	0029      	movs	r1, r5
 800c8a8:	f7f6 f890 	bl	80029cc <__aeabi_dcmpun>
 800c8ac:	9003      	str	r0, [sp, #12]
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d12a      	bne.n	800c908 <sqrt+0x84>
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	2700      	movs	r7, #0
 800c8b6:	0032      	movs	r2, r6
 800c8b8:	003b      	movs	r3, r7
 800c8ba:	0020      	movs	r0, r4
 800c8bc:	0029      	movs	r1, r5
 800c8be:	f7f3 fdd3 	bl	8000468 <__aeabi_dcmplt>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d020      	beq.n	800c908 <sqrt+0x84>
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	4b1a      	ldr	r3, [pc, #104]	; (800c934 <sqrt+0xb0>)
 800c8cc:	9408      	str	r4, [sp, #32]
 800c8ce:	9509      	str	r5, [sp, #36]	; 0x24
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	9406      	str	r4, [sp, #24]
 800c8d6:	9507      	str	r5, [sp, #28]
 800c8d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c8da:	9b02      	ldr	r3, [sp, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d117      	bne.n	800c910 <sqrt+0x8c>
 800c8e0:	960a      	str	r6, [sp, #40]	; 0x28
 800c8e2:	970b      	str	r7, [sp, #44]	; 0x2c
 800c8e4:	a804      	add	r0, sp, #16
 800c8e6:	f001 fc6f 	bl	800e1c8 <matherr>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d01b      	beq.n	800c926 <sqrt+0xa2>
 800c8ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8f0:	9302      	str	r3, [sp, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <sqrt+0x7c>
 800c8f6:	f7ff f9cb 	bl	800bc90 <__errno>
 800c8fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8fc:	9302      	str	r3, [sp, #8]
 800c8fe:	6003      	str	r3, [r0, #0]
 800c900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c902:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	9401      	str	r4, [sp, #4]
 800c908:	9800      	ldr	r0, [sp, #0]
 800c90a:	9901      	ldr	r1, [sp, #4]
 800c90c:	b00f      	add	sp, #60	; 0x3c
 800c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c910:	003b      	movs	r3, r7
 800c912:	0032      	movs	r2, r6
 800c914:	0030      	movs	r0, r6
 800c916:	0039      	movs	r1, r7
 800c918:	f7f4 fe8e 	bl	8001638 <__aeabi_ddiv>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	900a      	str	r0, [sp, #40]	; 0x28
 800c920:	910b      	str	r1, [sp, #44]	; 0x2c
 800c922:	2b02      	cmp	r3, #2
 800c924:	d1de      	bne.n	800c8e4 <sqrt+0x60>
 800c926:	f7ff f9b3 	bl	800bc90 <__errno>
 800c92a:	2321      	movs	r3, #33	; 0x21
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	e7de      	b.n	800c8ee <sqrt+0x6a>
 800c930:	200001f0 	.word	0x200001f0
 800c934:	0800fae1 	.word	0x0800fae1

0800c938 <__ieee754_acos>:
 800c938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93a:	004b      	lsls	r3, r1, #1
 800c93c:	000c      	movs	r4, r1
 800c93e:	49da      	ldr	r1, [pc, #872]	; (800cca8 <__ieee754_acos+0x370>)
 800c940:	b085      	sub	sp, #20
 800c942:	0005      	movs	r5, r0
 800c944:	085b      	lsrs	r3, r3, #1
 800c946:	428b      	cmp	r3, r1
 800c948:	dd14      	ble.n	800c974 <__ieee754_acos+0x3c>
 800c94a:	49d8      	ldr	r1, [pc, #864]	; (800ccac <__ieee754_acos+0x374>)
 800c94c:	185b      	adds	r3, r3, r1
 800c94e:	4303      	orrs	r3, r0
 800c950:	d106      	bne.n	800c960 <__ieee754_acos+0x28>
 800c952:	2c00      	cmp	r4, #0
 800c954:	dd00      	ble.n	800c958 <__ieee754_acos+0x20>
 800c956:	e1a0      	b.n	800cc9a <__ieee754_acos+0x362>
 800c958:	48d5      	ldr	r0, [pc, #852]	; (800ccb0 <__ieee754_acos+0x378>)
 800c95a:	49d6      	ldr	r1, [pc, #856]	; (800ccb4 <__ieee754_acos+0x37c>)
 800c95c:	b005      	add	sp, #20
 800c95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c960:	0023      	movs	r3, r4
 800c962:	0002      	movs	r2, r0
 800c964:	0021      	movs	r1, r4
 800c966:	f7f5 fd1b 	bl	80023a0 <__aeabi_dsub>
 800c96a:	0002      	movs	r2, r0
 800c96c:	000b      	movs	r3, r1
 800c96e:	f7f4 fe63 	bl	8001638 <__aeabi_ddiv>
 800c972:	e7f3      	b.n	800c95c <__ieee754_acos+0x24>
 800c974:	49d0      	ldr	r1, [pc, #832]	; (800ccb8 <__ieee754_acos+0x380>)
 800c976:	428b      	cmp	r3, r1
 800c978:	dc77      	bgt.n	800ca6a <__ieee754_acos+0x132>
 800c97a:	4ad0      	ldr	r2, [pc, #832]	; (800ccbc <__ieee754_acos+0x384>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	dc00      	bgt.n	800c982 <__ieee754_acos+0x4a>
 800c980:	e18e      	b.n	800cca0 <__ieee754_acos+0x368>
 800c982:	0002      	movs	r2, r0
 800c984:	0023      	movs	r3, r4
 800c986:	0021      	movs	r1, r4
 800c988:	f7f5 fa8a 	bl	8001ea0 <__aeabi_dmul>
 800c98c:	0006      	movs	r6, r0
 800c98e:	000f      	movs	r7, r1
 800c990:	4acb      	ldr	r2, [pc, #812]	; (800ccc0 <__ieee754_acos+0x388>)
 800c992:	4bcc      	ldr	r3, [pc, #816]	; (800ccc4 <__ieee754_acos+0x38c>)
 800c994:	f7f5 fa84 	bl	8001ea0 <__aeabi_dmul>
 800c998:	4acb      	ldr	r2, [pc, #812]	; (800ccc8 <__ieee754_acos+0x390>)
 800c99a:	4bcc      	ldr	r3, [pc, #816]	; (800cccc <__ieee754_acos+0x394>)
 800c99c:	f7f4 fb3c 	bl	8001018 <__aeabi_dadd>
 800c9a0:	0032      	movs	r2, r6
 800c9a2:	003b      	movs	r3, r7
 800c9a4:	f7f5 fa7c 	bl	8001ea0 <__aeabi_dmul>
 800c9a8:	4ac9      	ldr	r2, [pc, #804]	; (800ccd0 <__ieee754_acos+0x398>)
 800c9aa:	4bca      	ldr	r3, [pc, #808]	; (800ccd4 <__ieee754_acos+0x39c>)
 800c9ac:	f7f5 fcf8 	bl	80023a0 <__aeabi_dsub>
 800c9b0:	0032      	movs	r2, r6
 800c9b2:	003b      	movs	r3, r7
 800c9b4:	f7f5 fa74 	bl	8001ea0 <__aeabi_dmul>
 800c9b8:	4ac7      	ldr	r2, [pc, #796]	; (800ccd8 <__ieee754_acos+0x3a0>)
 800c9ba:	4bc8      	ldr	r3, [pc, #800]	; (800ccdc <__ieee754_acos+0x3a4>)
 800c9bc:	f7f4 fb2c 	bl	8001018 <__aeabi_dadd>
 800c9c0:	0032      	movs	r2, r6
 800c9c2:	003b      	movs	r3, r7
 800c9c4:	f7f5 fa6c 	bl	8001ea0 <__aeabi_dmul>
 800c9c8:	4ac5      	ldr	r2, [pc, #788]	; (800cce0 <__ieee754_acos+0x3a8>)
 800c9ca:	4bc6      	ldr	r3, [pc, #792]	; (800cce4 <__ieee754_acos+0x3ac>)
 800c9cc:	f7f5 fce8 	bl	80023a0 <__aeabi_dsub>
 800c9d0:	0032      	movs	r2, r6
 800c9d2:	003b      	movs	r3, r7
 800c9d4:	f7f5 fa64 	bl	8001ea0 <__aeabi_dmul>
 800c9d8:	4ac3      	ldr	r2, [pc, #780]	; (800cce8 <__ieee754_acos+0x3b0>)
 800c9da:	4bc4      	ldr	r3, [pc, #784]	; (800ccec <__ieee754_acos+0x3b4>)
 800c9dc:	f7f4 fb1c 	bl	8001018 <__aeabi_dadd>
 800c9e0:	0032      	movs	r2, r6
 800c9e2:	003b      	movs	r3, r7
 800c9e4:	f7f5 fa5c 	bl	8001ea0 <__aeabi_dmul>
 800c9e8:	4ac1      	ldr	r2, [pc, #772]	; (800ccf0 <__ieee754_acos+0x3b8>)
 800c9ea:	9000      	str	r0, [sp, #0]
 800c9ec:	9101      	str	r1, [sp, #4]
 800c9ee:	4bc1      	ldr	r3, [pc, #772]	; (800ccf4 <__ieee754_acos+0x3bc>)
 800c9f0:	0030      	movs	r0, r6
 800c9f2:	0039      	movs	r1, r7
 800c9f4:	f7f5 fa54 	bl	8001ea0 <__aeabi_dmul>
 800c9f8:	4abf      	ldr	r2, [pc, #764]	; (800ccf8 <__ieee754_acos+0x3c0>)
 800c9fa:	4bc0      	ldr	r3, [pc, #768]	; (800ccfc <__ieee754_acos+0x3c4>)
 800c9fc:	f7f5 fcd0 	bl	80023a0 <__aeabi_dsub>
 800ca00:	0032      	movs	r2, r6
 800ca02:	003b      	movs	r3, r7
 800ca04:	f7f5 fa4c 	bl	8001ea0 <__aeabi_dmul>
 800ca08:	4abd      	ldr	r2, [pc, #756]	; (800cd00 <__ieee754_acos+0x3c8>)
 800ca0a:	4bbe      	ldr	r3, [pc, #760]	; (800cd04 <__ieee754_acos+0x3cc>)
 800ca0c:	f7f4 fb04 	bl	8001018 <__aeabi_dadd>
 800ca10:	0032      	movs	r2, r6
 800ca12:	003b      	movs	r3, r7
 800ca14:	f7f5 fa44 	bl	8001ea0 <__aeabi_dmul>
 800ca18:	4abb      	ldr	r2, [pc, #748]	; (800cd08 <__ieee754_acos+0x3d0>)
 800ca1a:	4bbc      	ldr	r3, [pc, #752]	; (800cd0c <__ieee754_acos+0x3d4>)
 800ca1c:	f7f5 fcc0 	bl	80023a0 <__aeabi_dsub>
 800ca20:	0032      	movs	r2, r6
 800ca22:	003b      	movs	r3, r7
 800ca24:	f7f5 fa3c 	bl	8001ea0 <__aeabi_dmul>
 800ca28:	2200      	movs	r2, #0
 800ca2a:	4bb9      	ldr	r3, [pc, #740]	; (800cd10 <__ieee754_acos+0x3d8>)
 800ca2c:	f7f4 faf4 	bl	8001018 <__aeabi_dadd>
 800ca30:	0002      	movs	r2, r0
 800ca32:	000b      	movs	r3, r1
 800ca34:	9800      	ldr	r0, [sp, #0]
 800ca36:	9901      	ldr	r1, [sp, #4]
 800ca38:	f7f4 fdfe 	bl	8001638 <__aeabi_ddiv>
 800ca3c:	002a      	movs	r2, r5
 800ca3e:	0023      	movs	r3, r4
 800ca40:	f7f5 fa2e 	bl	8001ea0 <__aeabi_dmul>
 800ca44:	0002      	movs	r2, r0
 800ca46:	000b      	movs	r3, r1
 800ca48:	48b2      	ldr	r0, [pc, #712]	; (800cd14 <__ieee754_acos+0x3dc>)
 800ca4a:	49b3      	ldr	r1, [pc, #716]	; (800cd18 <__ieee754_acos+0x3e0>)
 800ca4c:	f7f5 fca8 	bl	80023a0 <__aeabi_dsub>
 800ca50:	0002      	movs	r2, r0
 800ca52:	000b      	movs	r3, r1
 800ca54:	0028      	movs	r0, r5
 800ca56:	0021      	movs	r1, r4
 800ca58:	f7f5 fca2 	bl	80023a0 <__aeabi_dsub>
 800ca5c:	0002      	movs	r2, r0
 800ca5e:	000b      	movs	r3, r1
 800ca60:	4893      	ldr	r0, [pc, #588]	; (800ccb0 <__ieee754_acos+0x378>)
 800ca62:	49ae      	ldr	r1, [pc, #696]	; (800cd1c <__ieee754_acos+0x3e4>)
 800ca64:	f7f5 fc9c 	bl	80023a0 <__aeabi_dsub>
 800ca68:	e778      	b.n	800c95c <__ieee754_acos+0x24>
 800ca6a:	2c00      	cmp	r4, #0
 800ca6c:	da7b      	bge.n	800cb66 <__ieee754_acos+0x22e>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	4ba7      	ldr	r3, [pc, #668]	; (800cd10 <__ieee754_acos+0x3d8>)
 800ca72:	0021      	movs	r1, r4
 800ca74:	f7f4 fad0 	bl	8001018 <__aeabi_dadd>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	4ba9      	ldr	r3, [pc, #676]	; (800cd20 <__ieee754_acos+0x3e8>)
 800ca7c:	f7f5 fa10 	bl	8001ea0 <__aeabi_dmul>
 800ca80:	0004      	movs	r4, r0
 800ca82:	000d      	movs	r5, r1
 800ca84:	4a8e      	ldr	r2, [pc, #568]	; (800ccc0 <__ieee754_acos+0x388>)
 800ca86:	4b8f      	ldr	r3, [pc, #572]	; (800ccc4 <__ieee754_acos+0x38c>)
 800ca88:	f7f5 fa0a 	bl	8001ea0 <__aeabi_dmul>
 800ca8c:	4a8e      	ldr	r2, [pc, #568]	; (800ccc8 <__ieee754_acos+0x390>)
 800ca8e:	4b8f      	ldr	r3, [pc, #572]	; (800cccc <__ieee754_acos+0x394>)
 800ca90:	f7f4 fac2 	bl	8001018 <__aeabi_dadd>
 800ca94:	0022      	movs	r2, r4
 800ca96:	002b      	movs	r3, r5
 800ca98:	f7f5 fa02 	bl	8001ea0 <__aeabi_dmul>
 800ca9c:	4a8c      	ldr	r2, [pc, #560]	; (800ccd0 <__ieee754_acos+0x398>)
 800ca9e:	4b8d      	ldr	r3, [pc, #564]	; (800ccd4 <__ieee754_acos+0x39c>)
 800caa0:	f7f5 fc7e 	bl	80023a0 <__aeabi_dsub>
 800caa4:	0022      	movs	r2, r4
 800caa6:	002b      	movs	r3, r5
 800caa8:	f7f5 f9fa 	bl	8001ea0 <__aeabi_dmul>
 800caac:	4a8a      	ldr	r2, [pc, #552]	; (800ccd8 <__ieee754_acos+0x3a0>)
 800caae:	4b8b      	ldr	r3, [pc, #556]	; (800ccdc <__ieee754_acos+0x3a4>)
 800cab0:	f7f4 fab2 	bl	8001018 <__aeabi_dadd>
 800cab4:	0022      	movs	r2, r4
 800cab6:	002b      	movs	r3, r5
 800cab8:	f7f5 f9f2 	bl	8001ea0 <__aeabi_dmul>
 800cabc:	4a88      	ldr	r2, [pc, #544]	; (800cce0 <__ieee754_acos+0x3a8>)
 800cabe:	4b89      	ldr	r3, [pc, #548]	; (800cce4 <__ieee754_acos+0x3ac>)
 800cac0:	f7f5 fc6e 	bl	80023a0 <__aeabi_dsub>
 800cac4:	0022      	movs	r2, r4
 800cac6:	002b      	movs	r3, r5
 800cac8:	f7f5 f9ea 	bl	8001ea0 <__aeabi_dmul>
 800cacc:	4a86      	ldr	r2, [pc, #536]	; (800cce8 <__ieee754_acos+0x3b0>)
 800cace:	4b87      	ldr	r3, [pc, #540]	; (800ccec <__ieee754_acos+0x3b4>)
 800cad0:	f7f4 faa2 	bl	8001018 <__aeabi_dadd>
 800cad4:	0022      	movs	r2, r4
 800cad6:	002b      	movs	r3, r5
 800cad8:	f7f5 f9e2 	bl	8001ea0 <__aeabi_dmul>
 800cadc:	9000      	str	r0, [sp, #0]
 800cade:	9101      	str	r1, [sp, #4]
 800cae0:	0020      	movs	r0, r4
 800cae2:	0029      	movs	r1, r5
 800cae4:	f000 fbb4 	bl	800d250 <__ieee754_sqrt>
 800cae8:	4a81      	ldr	r2, [pc, #516]	; (800ccf0 <__ieee754_acos+0x3b8>)
 800caea:	0006      	movs	r6, r0
 800caec:	000f      	movs	r7, r1
 800caee:	4b81      	ldr	r3, [pc, #516]	; (800ccf4 <__ieee754_acos+0x3bc>)
 800caf0:	0020      	movs	r0, r4
 800caf2:	0029      	movs	r1, r5
 800caf4:	f7f5 f9d4 	bl	8001ea0 <__aeabi_dmul>
 800caf8:	4a7f      	ldr	r2, [pc, #508]	; (800ccf8 <__ieee754_acos+0x3c0>)
 800cafa:	4b80      	ldr	r3, [pc, #512]	; (800ccfc <__ieee754_acos+0x3c4>)
 800cafc:	f7f5 fc50 	bl	80023a0 <__aeabi_dsub>
 800cb00:	0022      	movs	r2, r4
 800cb02:	002b      	movs	r3, r5
 800cb04:	f7f5 f9cc 	bl	8001ea0 <__aeabi_dmul>
 800cb08:	4a7d      	ldr	r2, [pc, #500]	; (800cd00 <__ieee754_acos+0x3c8>)
 800cb0a:	4b7e      	ldr	r3, [pc, #504]	; (800cd04 <__ieee754_acos+0x3cc>)
 800cb0c:	f7f4 fa84 	bl	8001018 <__aeabi_dadd>
 800cb10:	0022      	movs	r2, r4
 800cb12:	002b      	movs	r3, r5
 800cb14:	f7f5 f9c4 	bl	8001ea0 <__aeabi_dmul>
 800cb18:	4a7b      	ldr	r2, [pc, #492]	; (800cd08 <__ieee754_acos+0x3d0>)
 800cb1a:	4b7c      	ldr	r3, [pc, #496]	; (800cd0c <__ieee754_acos+0x3d4>)
 800cb1c:	f7f5 fc40 	bl	80023a0 <__aeabi_dsub>
 800cb20:	0022      	movs	r2, r4
 800cb22:	002b      	movs	r3, r5
 800cb24:	f7f5 f9bc 	bl	8001ea0 <__aeabi_dmul>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	4b79      	ldr	r3, [pc, #484]	; (800cd10 <__ieee754_acos+0x3d8>)
 800cb2c:	f7f4 fa74 	bl	8001018 <__aeabi_dadd>
 800cb30:	0002      	movs	r2, r0
 800cb32:	000b      	movs	r3, r1
 800cb34:	9800      	ldr	r0, [sp, #0]
 800cb36:	9901      	ldr	r1, [sp, #4]
 800cb38:	f7f4 fd7e 	bl	8001638 <__aeabi_ddiv>
 800cb3c:	0032      	movs	r2, r6
 800cb3e:	003b      	movs	r3, r7
 800cb40:	f7f5 f9ae 	bl	8001ea0 <__aeabi_dmul>
 800cb44:	4a73      	ldr	r2, [pc, #460]	; (800cd14 <__ieee754_acos+0x3dc>)
 800cb46:	4b74      	ldr	r3, [pc, #464]	; (800cd18 <__ieee754_acos+0x3e0>)
 800cb48:	f7f5 fc2a 	bl	80023a0 <__aeabi_dsub>
 800cb4c:	0032      	movs	r2, r6
 800cb4e:	003b      	movs	r3, r7
 800cb50:	f7f4 fa62 	bl	8001018 <__aeabi_dadd>
 800cb54:	0002      	movs	r2, r0
 800cb56:	000b      	movs	r3, r1
 800cb58:	f7f4 fa5e 	bl	8001018 <__aeabi_dadd>
 800cb5c:	0002      	movs	r2, r0
 800cb5e:	000b      	movs	r3, r1
 800cb60:	4853      	ldr	r0, [pc, #332]	; (800ccb0 <__ieee754_acos+0x378>)
 800cb62:	4954      	ldr	r1, [pc, #336]	; (800ccb4 <__ieee754_acos+0x37c>)
 800cb64:	e77e      	b.n	800ca64 <__ieee754_acos+0x12c>
 800cb66:	0002      	movs	r2, r0
 800cb68:	0023      	movs	r3, r4
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	4968      	ldr	r1, [pc, #416]	; (800cd10 <__ieee754_acos+0x3d8>)
 800cb6e:	f7f5 fc17 	bl	80023a0 <__aeabi_dsub>
 800cb72:	2200      	movs	r2, #0
 800cb74:	4b6a      	ldr	r3, [pc, #424]	; (800cd20 <__ieee754_acos+0x3e8>)
 800cb76:	f7f5 f993 	bl	8001ea0 <__aeabi_dmul>
 800cb7a:	0004      	movs	r4, r0
 800cb7c:	000d      	movs	r5, r1
 800cb7e:	f000 fb67 	bl	800d250 <__ieee754_sqrt>
 800cb82:	4a4f      	ldr	r2, [pc, #316]	; (800ccc0 <__ieee754_acos+0x388>)
 800cb84:	9000      	str	r0, [sp, #0]
 800cb86:	9101      	str	r1, [sp, #4]
 800cb88:	9e00      	ldr	r6, [sp, #0]
 800cb8a:	9f01      	ldr	r7, [sp, #4]
 800cb8c:	4b4d      	ldr	r3, [pc, #308]	; (800ccc4 <__ieee754_acos+0x38c>)
 800cb8e:	0020      	movs	r0, r4
 800cb90:	0029      	movs	r1, r5
 800cb92:	f7f5 f985 	bl	8001ea0 <__aeabi_dmul>
 800cb96:	4a4c      	ldr	r2, [pc, #304]	; (800ccc8 <__ieee754_acos+0x390>)
 800cb98:	4b4c      	ldr	r3, [pc, #304]	; (800cccc <__ieee754_acos+0x394>)
 800cb9a:	f7f4 fa3d 	bl	8001018 <__aeabi_dadd>
 800cb9e:	0022      	movs	r2, r4
 800cba0:	002b      	movs	r3, r5
 800cba2:	f7f5 f97d 	bl	8001ea0 <__aeabi_dmul>
 800cba6:	4a4a      	ldr	r2, [pc, #296]	; (800ccd0 <__ieee754_acos+0x398>)
 800cba8:	4b4a      	ldr	r3, [pc, #296]	; (800ccd4 <__ieee754_acos+0x39c>)
 800cbaa:	f7f5 fbf9 	bl	80023a0 <__aeabi_dsub>
 800cbae:	0022      	movs	r2, r4
 800cbb0:	002b      	movs	r3, r5
 800cbb2:	f7f5 f975 	bl	8001ea0 <__aeabi_dmul>
 800cbb6:	4a48      	ldr	r2, [pc, #288]	; (800ccd8 <__ieee754_acos+0x3a0>)
 800cbb8:	4b48      	ldr	r3, [pc, #288]	; (800ccdc <__ieee754_acos+0x3a4>)
 800cbba:	f7f4 fa2d 	bl	8001018 <__aeabi_dadd>
 800cbbe:	0022      	movs	r2, r4
 800cbc0:	002b      	movs	r3, r5
 800cbc2:	f7f5 f96d 	bl	8001ea0 <__aeabi_dmul>
 800cbc6:	4a46      	ldr	r2, [pc, #280]	; (800cce0 <__ieee754_acos+0x3a8>)
 800cbc8:	4b46      	ldr	r3, [pc, #280]	; (800cce4 <__ieee754_acos+0x3ac>)
 800cbca:	f7f5 fbe9 	bl	80023a0 <__aeabi_dsub>
 800cbce:	0022      	movs	r2, r4
 800cbd0:	002b      	movs	r3, r5
 800cbd2:	f7f5 f965 	bl	8001ea0 <__aeabi_dmul>
 800cbd6:	4a44      	ldr	r2, [pc, #272]	; (800cce8 <__ieee754_acos+0x3b0>)
 800cbd8:	4b44      	ldr	r3, [pc, #272]	; (800ccec <__ieee754_acos+0x3b4>)
 800cbda:	f7f4 fa1d 	bl	8001018 <__aeabi_dadd>
 800cbde:	0022      	movs	r2, r4
 800cbe0:	002b      	movs	r3, r5
 800cbe2:	f7f5 f95d 	bl	8001ea0 <__aeabi_dmul>
 800cbe6:	4a42      	ldr	r2, [pc, #264]	; (800ccf0 <__ieee754_acos+0x3b8>)
 800cbe8:	9002      	str	r0, [sp, #8]
 800cbea:	9103      	str	r1, [sp, #12]
 800cbec:	4b41      	ldr	r3, [pc, #260]	; (800ccf4 <__ieee754_acos+0x3bc>)
 800cbee:	0020      	movs	r0, r4
 800cbf0:	0029      	movs	r1, r5
 800cbf2:	f7f5 f955 	bl	8001ea0 <__aeabi_dmul>
 800cbf6:	4a40      	ldr	r2, [pc, #256]	; (800ccf8 <__ieee754_acos+0x3c0>)
 800cbf8:	4b40      	ldr	r3, [pc, #256]	; (800ccfc <__ieee754_acos+0x3c4>)
 800cbfa:	f7f5 fbd1 	bl	80023a0 <__aeabi_dsub>
 800cbfe:	0022      	movs	r2, r4
 800cc00:	002b      	movs	r3, r5
 800cc02:	f7f5 f94d 	bl	8001ea0 <__aeabi_dmul>
 800cc06:	4a3e      	ldr	r2, [pc, #248]	; (800cd00 <__ieee754_acos+0x3c8>)
 800cc08:	4b3e      	ldr	r3, [pc, #248]	; (800cd04 <__ieee754_acos+0x3cc>)
 800cc0a:	f7f4 fa05 	bl	8001018 <__aeabi_dadd>
 800cc0e:	0022      	movs	r2, r4
 800cc10:	002b      	movs	r3, r5
 800cc12:	f7f5 f945 	bl	8001ea0 <__aeabi_dmul>
 800cc16:	4a3c      	ldr	r2, [pc, #240]	; (800cd08 <__ieee754_acos+0x3d0>)
 800cc18:	4b3c      	ldr	r3, [pc, #240]	; (800cd0c <__ieee754_acos+0x3d4>)
 800cc1a:	f7f5 fbc1 	bl	80023a0 <__aeabi_dsub>
 800cc1e:	0022      	movs	r2, r4
 800cc20:	002b      	movs	r3, r5
 800cc22:	f7f5 f93d 	bl	8001ea0 <__aeabi_dmul>
 800cc26:	2200      	movs	r2, #0
 800cc28:	4b39      	ldr	r3, [pc, #228]	; (800cd10 <__ieee754_acos+0x3d8>)
 800cc2a:	f7f4 f9f5 	bl	8001018 <__aeabi_dadd>
 800cc2e:	0002      	movs	r2, r0
 800cc30:	000b      	movs	r3, r1
 800cc32:	9802      	ldr	r0, [sp, #8]
 800cc34:	9903      	ldr	r1, [sp, #12]
 800cc36:	f7f4 fcff 	bl	8001638 <__aeabi_ddiv>
 800cc3a:	9a00      	ldr	r2, [sp, #0]
 800cc3c:	9b01      	ldr	r3, [sp, #4]
 800cc3e:	f7f5 f92f 	bl	8001ea0 <__aeabi_dmul>
 800cc42:	2600      	movs	r6, #0
 800cc44:	9002      	str	r0, [sp, #8]
 800cc46:	9103      	str	r1, [sp, #12]
 800cc48:	0032      	movs	r2, r6
 800cc4a:	003b      	movs	r3, r7
 800cc4c:	0030      	movs	r0, r6
 800cc4e:	0039      	movs	r1, r7
 800cc50:	f7f5 f926 	bl	8001ea0 <__aeabi_dmul>
 800cc54:	0002      	movs	r2, r0
 800cc56:	000b      	movs	r3, r1
 800cc58:	0020      	movs	r0, r4
 800cc5a:	0029      	movs	r1, r5
 800cc5c:	f7f5 fba0 	bl	80023a0 <__aeabi_dsub>
 800cc60:	0032      	movs	r2, r6
 800cc62:	0004      	movs	r4, r0
 800cc64:	000d      	movs	r5, r1
 800cc66:	9800      	ldr	r0, [sp, #0]
 800cc68:	9901      	ldr	r1, [sp, #4]
 800cc6a:	003b      	movs	r3, r7
 800cc6c:	f7f4 f9d4 	bl	8001018 <__aeabi_dadd>
 800cc70:	0002      	movs	r2, r0
 800cc72:	000b      	movs	r3, r1
 800cc74:	0020      	movs	r0, r4
 800cc76:	0029      	movs	r1, r5
 800cc78:	f7f4 fcde 	bl	8001638 <__aeabi_ddiv>
 800cc7c:	0002      	movs	r2, r0
 800cc7e:	000b      	movs	r3, r1
 800cc80:	9802      	ldr	r0, [sp, #8]
 800cc82:	9903      	ldr	r1, [sp, #12]
 800cc84:	f7f4 f9c8 	bl	8001018 <__aeabi_dadd>
 800cc88:	0032      	movs	r2, r6
 800cc8a:	003b      	movs	r3, r7
 800cc8c:	f7f4 f9c4 	bl	8001018 <__aeabi_dadd>
 800cc90:	0002      	movs	r2, r0
 800cc92:	000b      	movs	r3, r1
 800cc94:	f7f4 f9c0 	bl	8001018 <__aeabi_dadd>
 800cc98:	e660      	b.n	800c95c <__ieee754_acos+0x24>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	e65d      	b.n	800c95c <__ieee754_acos+0x24>
 800cca0:	4803      	ldr	r0, [pc, #12]	; (800ccb0 <__ieee754_acos+0x378>)
 800cca2:	491e      	ldr	r1, [pc, #120]	; (800cd1c <__ieee754_acos+0x3e4>)
 800cca4:	e65a      	b.n	800c95c <__ieee754_acos+0x24>
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	3fefffff 	.word	0x3fefffff
 800ccac:	c0100000 	.word	0xc0100000
 800ccb0:	54442d18 	.word	0x54442d18
 800ccb4:	400921fb 	.word	0x400921fb
 800ccb8:	3fdfffff 	.word	0x3fdfffff
 800ccbc:	3c600000 	.word	0x3c600000
 800ccc0:	0dfdf709 	.word	0x0dfdf709
 800ccc4:	3f023de1 	.word	0x3f023de1
 800ccc8:	7501b288 	.word	0x7501b288
 800cccc:	3f49efe0 	.word	0x3f49efe0
 800ccd0:	b5688f3b 	.word	0xb5688f3b
 800ccd4:	3fa48228 	.word	0x3fa48228
 800ccd8:	0e884455 	.word	0x0e884455
 800ccdc:	3fc9c155 	.word	0x3fc9c155
 800cce0:	03eb6f7d 	.word	0x03eb6f7d
 800cce4:	3fd4d612 	.word	0x3fd4d612
 800cce8:	55555555 	.word	0x55555555
 800ccec:	3fc55555 	.word	0x3fc55555
 800ccf0:	b12e9282 	.word	0xb12e9282
 800ccf4:	3fb3b8c5 	.word	0x3fb3b8c5
 800ccf8:	1b8d0159 	.word	0x1b8d0159
 800ccfc:	3fe6066c 	.word	0x3fe6066c
 800cd00:	9c598ac8 	.word	0x9c598ac8
 800cd04:	40002ae5 	.word	0x40002ae5
 800cd08:	1c8a2d4b 	.word	0x1c8a2d4b
 800cd0c:	40033a27 	.word	0x40033a27
 800cd10:	3ff00000 	.word	0x3ff00000
 800cd14:	33145c07 	.word	0x33145c07
 800cd18:	3c91a626 	.word	0x3c91a626
 800cd1c:	3ff921fb 	.word	0x3ff921fb
 800cd20:	3fe00000 	.word	0x3fe00000

0800cd24 <__ieee754_atan2>:
 800cd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd26:	4254      	negs	r4, r2
 800cd28:	005e      	lsls	r6, r3, #1
 800cd2a:	4314      	orrs	r4, r2
 800cd2c:	4d48      	ldr	r5, [pc, #288]	; (800ce50 <__ieee754_atan2+0x12c>)
 800cd2e:	0876      	lsrs	r6, r6, #1
 800cd30:	0fe4      	lsrs	r4, r4, #31
 800cd32:	9001      	str	r0, [sp, #4]
 800cd34:	9100      	str	r1, [sp, #0]
 800cd36:	4334      	orrs	r4, r6
 800cd38:	42ac      	cmp	r4, r5
 800cd3a:	d808      	bhi.n	800cd4e <__ieee754_atan2+0x2a>
 800cd3c:	4244      	negs	r4, r0
 800cd3e:	004d      	lsls	r5, r1, #1
 800cd40:	4304      	orrs	r4, r0
 800cd42:	4f43      	ldr	r7, [pc, #268]	; (800ce50 <__ieee754_atan2+0x12c>)
 800cd44:	086d      	lsrs	r5, r5, #1
 800cd46:	0fe4      	lsrs	r4, r4, #31
 800cd48:	432c      	orrs	r4, r5
 800cd4a:	42bc      	cmp	r4, r7
 800cd4c:	d903      	bls.n	800cd56 <__ieee754_atan2+0x32>
 800cd4e:	f7f4 f963 	bl	8001018 <__aeabi_dadd>
 800cd52:	b003      	add	sp, #12
 800cd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd56:	4c3f      	ldr	r4, [pc, #252]	; (800ce54 <__ieee754_atan2+0x130>)
 800cd58:	191c      	adds	r4, r3, r4
 800cd5a:	4314      	orrs	r4, r2
 800cd5c:	d102      	bne.n	800cd64 <__ieee754_atan2+0x40>
 800cd5e:	f001 f825 	bl	800ddac <atan>
 800cd62:	e7f6      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cd64:	179c      	asrs	r4, r3, #30
 800cd66:	46a4      	mov	ip, r4
 800cd68:	2402      	movs	r4, #2
 800cd6a:	4667      	mov	r7, ip
 800cd6c:	403c      	ands	r4, r7
 800cd6e:	9f00      	ldr	r7, [sp, #0]
 800cd70:	0fff      	lsrs	r7, r7, #31
 800cd72:	433c      	orrs	r4, r7
 800cd74:	9f01      	ldr	r7, [sp, #4]
 800cd76:	432f      	orrs	r7, r5
 800cd78:	d106      	bne.n	800cd88 <__ieee754_atan2+0x64>
 800cd7a:	2c02      	cmp	r4, #2
 800cd7c:	d02c      	beq.n	800cdd8 <__ieee754_atan2+0xb4>
 800cd7e:	2c03      	cmp	r4, #3
 800cd80:	d1e7      	bne.n	800cd52 <__ieee754_atan2+0x2e>
 800cd82:	4835      	ldr	r0, [pc, #212]	; (800ce58 <__ieee754_atan2+0x134>)
 800cd84:	4935      	ldr	r1, [pc, #212]	; (800ce5c <__ieee754_atan2+0x138>)
 800cd86:	e7e4      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cd88:	0037      	movs	r7, r6
 800cd8a:	4317      	orrs	r7, r2
 800cd8c:	d105      	bne.n	800cd9a <__ieee754_atan2+0x76>
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	4831      	ldr	r0, [pc, #196]	; (800ce58 <__ieee754_atan2+0x134>)
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da59      	bge.n	800ce4a <__ieee754_atan2+0x126>
 800cd96:	4932      	ldr	r1, [pc, #200]	; (800ce60 <__ieee754_atan2+0x13c>)
 800cd98:	e7db      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cd9a:	4f2d      	ldr	r7, [pc, #180]	; (800ce50 <__ieee754_atan2+0x12c>)
 800cd9c:	42be      	cmp	r6, r7
 800cd9e:	d11e      	bne.n	800cdde <__ieee754_atan2+0xba>
 800cda0:	42b5      	cmp	r5, r6
 800cda2:	d10e      	bne.n	800cdc2 <__ieee754_atan2+0x9e>
 800cda4:	2c02      	cmp	r4, #2
 800cda6:	d006      	beq.n	800cdb6 <__ieee754_atan2+0x92>
 800cda8:	2c03      	cmp	r4, #3
 800cdaa:	d007      	beq.n	800cdbc <__ieee754_atan2+0x98>
 800cdac:	482a      	ldr	r0, [pc, #168]	; (800ce58 <__ieee754_atan2+0x134>)
 800cdae:	2c01      	cmp	r4, #1
 800cdb0:	d149      	bne.n	800ce46 <__ieee754_atan2+0x122>
 800cdb2:	492c      	ldr	r1, [pc, #176]	; (800ce64 <__ieee754_atan2+0x140>)
 800cdb4:	e7cd      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cdb6:	482c      	ldr	r0, [pc, #176]	; (800ce68 <__ieee754_atan2+0x144>)
 800cdb8:	492c      	ldr	r1, [pc, #176]	; (800ce6c <__ieee754_atan2+0x148>)
 800cdba:	e7ca      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cdbc:	482a      	ldr	r0, [pc, #168]	; (800ce68 <__ieee754_atan2+0x144>)
 800cdbe:	492c      	ldr	r1, [pc, #176]	; (800ce70 <__ieee754_atan2+0x14c>)
 800cdc0:	e7c7      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cdc2:	2c02      	cmp	r4, #2
 800cdc4:	d008      	beq.n	800cdd8 <__ieee754_atan2+0xb4>
 800cdc6:	2c03      	cmp	r4, #3
 800cdc8:	d0db      	beq.n	800cd82 <__ieee754_atan2+0x5e>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2c01      	cmp	r4, #1
 800cdd0:	d1bf      	bne.n	800cd52 <__ieee754_atan2+0x2e>
 800cdd2:	2180      	movs	r1, #128	; 0x80
 800cdd4:	0609      	lsls	r1, r1, #24
 800cdd6:	e7bc      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cdd8:	481f      	ldr	r0, [pc, #124]	; (800ce58 <__ieee754_atan2+0x134>)
 800cdda:	4926      	ldr	r1, [pc, #152]	; (800ce74 <__ieee754_atan2+0x150>)
 800cddc:	e7b9      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800cdde:	4f1c      	ldr	r7, [pc, #112]	; (800ce50 <__ieee754_atan2+0x12c>)
 800cde0:	42bd      	cmp	r5, r7
 800cde2:	d0d4      	beq.n	800cd8e <__ieee754_atan2+0x6a>
 800cde4:	1bad      	subs	r5, r5, r6
 800cde6:	152d      	asrs	r5, r5, #20
 800cde8:	2d3c      	cmp	r5, #60	; 0x3c
 800cdea:	dc16      	bgt.n	800ce1a <__ieee754_atan2+0xf6>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	da01      	bge.n	800cdf4 <__ieee754_atan2+0xd0>
 800cdf0:	353c      	adds	r5, #60	; 0x3c
 800cdf2:	db15      	blt.n	800ce20 <__ieee754_atan2+0xfc>
 800cdf4:	f7f4 fc20 	bl	8001638 <__aeabi_ddiv>
 800cdf8:	f001 f960 	bl	800e0bc <fabs>
 800cdfc:	f000 ffd6 	bl	800ddac <atan>
 800ce00:	2c01      	cmp	r4, #1
 800ce02:	d010      	beq.n	800ce26 <__ieee754_atan2+0x102>
 800ce04:	2c02      	cmp	r4, #2
 800ce06:	d013      	beq.n	800ce30 <__ieee754_atan2+0x10c>
 800ce08:	2c00      	cmp	r4, #0
 800ce0a:	d0a2      	beq.n	800cd52 <__ieee754_atan2+0x2e>
 800ce0c:	4a1a      	ldr	r2, [pc, #104]	; (800ce78 <__ieee754_atan2+0x154>)
 800ce0e:	4b1b      	ldr	r3, [pc, #108]	; (800ce7c <__ieee754_atan2+0x158>)
 800ce10:	f7f5 fac6 	bl	80023a0 <__aeabi_dsub>
 800ce14:	4a10      	ldr	r2, [pc, #64]	; (800ce58 <__ieee754_atan2+0x134>)
 800ce16:	4b17      	ldr	r3, [pc, #92]	; (800ce74 <__ieee754_atan2+0x150>)
 800ce18:	e012      	b.n	800ce40 <__ieee754_atan2+0x11c>
 800ce1a:	480f      	ldr	r0, [pc, #60]	; (800ce58 <__ieee754_atan2+0x134>)
 800ce1c:	4918      	ldr	r1, [pc, #96]	; (800ce80 <__ieee754_atan2+0x15c>)
 800ce1e:	e7ef      	b.n	800ce00 <__ieee754_atan2+0xdc>
 800ce20:	2000      	movs	r0, #0
 800ce22:	2100      	movs	r1, #0
 800ce24:	e7ec      	b.n	800ce00 <__ieee754_atan2+0xdc>
 800ce26:	2480      	movs	r4, #128	; 0x80
 800ce28:	0624      	lsls	r4, r4, #24
 800ce2a:	190b      	adds	r3, r1, r4
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	e790      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800ce30:	4a11      	ldr	r2, [pc, #68]	; (800ce78 <__ieee754_atan2+0x154>)
 800ce32:	4b12      	ldr	r3, [pc, #72]	; (800ce7c <__ieee754_atan2+0x158>)
 800ce34:	f7f5 fab4 	bl	80023a0 <__aeabi_dsub>
 800ce38:	0002      	movs	r2, r0
 800ce3a:	000b      	movs	r3, r1
 800ce3c:	4806      	ldr	r0, [pc, #24]	; (800ce58 <__ieee754_atan2+0x134>)
 800ce3e:	490d      	ldr	r1, [pc, #52]	; (800ce74 <__ieee754_atan2+0x150>)
 800ce40:	f7f5 faae 	bl	80023a0 <__aeabi_dsub>
 800ce44:	e785      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800ce46:	490f      	ldr	r1, [pc, #60]	; (800ce84 <__ieee754_atan2+0x160>)
 800ce48:	e783      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800ce4a:	490d      	ldr	r1, [pc, #52]	; (800ce80 <__ieee754_atan2+0x15c>)
 800ce4c:	e781      	b.n	800cd52 <__ieee754_atan2+0x2e>
 800ce4e:	46c0      	nop			; (mov r8, r8)
 800ce50:	7ff00000 	.word	0x7ff00000
 800ce54:	c0100000 	.word	0xc0100000
 800ce58:	54442d18 	.word	0x54442d18
 800ce5c:	c00921fb 	.word	0xc00921fb
 800ce60:	bff921fb 	.word	0xbff921fb
 800ce64:	bfe921fb 	.word	0xbfe921fb
 800ce68:	7f3321d2 	.word	0x7f3321d2
 800ce6c:	4002d97c 	.word	0x4002d97c
 800ce70:	c002d97c 	.word	0xc002d97c
 800ce74:	400921fb 	.word	0x400921fb
 800ce78:	33145c07 	.word	0x33145c07
 800ce7c:	3ca1a626 	.word	0x3ca1a626
 800ce80:	3ff921fb 	.word	0x3ff921fb
 800ce84:	3fe921fb 	.word	0x3fe921fb

0800ce88 <__ieee754_rem_pio2>:
 800ce88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce8a:	004b      	lsls	r3, r1, #1
 800ce8c:	b091      	sub	sp, #68	; 0x44
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	0017      	movs	r7, r2
 800ce94:	4bda      	ldr	r3, [pc, #872]	; (800d200 <__ieee754_rem_pio2+0x378>)
 800ce96:	9a04      	ldr	r2, [sp, #16]
 800ce98:	9108      	str	r1, [sp, #32]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	dc09      	bgt.n	800ceb2 <__ieee754_rem_pio2+0x2a>
 800ce9e:	0002      	movs	r2, r0
 800cea0:	000b      	movs	r3, r1
 800cea2:	603a      	str	r2, [r7, #0]
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	2300      	movs	r3, #0
 800ceaa:	60ba      	str	r2, [r7, #8]
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	2600      	movs	r6, #0
 800ceb0:	e022      	b.n	800cef8 <__ieee754_rem_pio2+0x70>
 800ceb2:	4bd4      	ldr	r3, [pc, #848]	; (800d204 <__ieee754_rem_pio2+0x37c>)
 800ceb4:	9a04      	ldr	r2, [sp, #16]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	dc6a      	bgt.n	800cf90 <__ieee754_rem_pio2+0x108>
 800ceba:	4ed3      	ldr	r6, [pc, #844]	; (800d208 <__ieee754_rem_pio2+0x380>)
 800cebc:	4ad3      	ldr	r2, [pc, #844]	; (800d20c <__ieee754_rem_pio2+0x384>)
 800cebe:	2900      	cmp	r1, #0
 800cec0:	dd33      	ble.n	800cf2a <__ieee754_rem_pio2+0xa2>
 800cec2:	4bd1      	ldr	r3, [pc, #836]	; (800d208 <__ieee754_rem_pio2+0x380>)
 800cec4:	f7f5 fa6c 	bl	80023a0 <__aeabi_dsub>
 800cec8:	9b04      	ldr	r3, [sp, #16]
 800ceca:	0004      	movs	r4, r0
 800cecc:	000d      	movs	r5, r1
 800cece:	42b3      	cmp	r3, r6
 800ced0:	d015      	beq.n	800cefe <__ieee754_rem_pio2+0x76>
 800ced2:	4acf      	ldr	r2, [pc, #828]	; (800d210 <__ieee754_rem_pio2+0x388>)
 800ced4:	4bcf      	ldr	r3, [pc, #828]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800ced6:	f7f5 fa63 	bl	80023a0 <__aeabi_dsub>
 800ceda:	0002      	movs	r2, r0
 800cedc:	000b      	movs	r3, r1
 800cede:	0020      	movs	r0, r4
 800cee0:	603a      	str	r2, [r7, #0]
 800cee2:	607b      	str	r3, [r7, #4]
 800cee4:	0029      	movs	r1, r5
 800cee6:	f7f5 fa5b 	bl	80023a0 <__aeabi_dsub>
 800ceea:	4ac9      	ldr	r2, [pc, #804]	; (800d210 <__ieee754_rem_pio2+0x388>)
 800ceec:	4bc9      	ldr	r3, [pc, #804]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800ceee:	f7f5 fa57 	bl	80023a0 <__aeabi_dsub>
 800cef2:	2601      	movs	r6, #1
 800cef4:	60b8      	str	r0, [r7, #8]
 800cef6:	60f9      	str	r1, [r7, #12]
 800cef8:	0030      	movs	r0, r6
 800cefa:	b011      	add	sp, #68	; 0x44
 800cefc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefe:	22d3      	movs	r2, #211	; 0xd3
 800cf00:	4bc4      	ldr	r3, [pc, #784]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800cf02:	0552      	lsls	r2, r2, #21
 800cf04:	f7f5 fa4c 	bl	80023a0 <__aeabi_dsub>
 800cf08:	4ac3      	ldr	r2, [pc, #780]	; (800d218 <__ieee754_rem_pio2+0x390>)
 800cf0a:	4bc4      	ldr	r3, [pc, #784]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800cf0c:	0004      	movs	r4, r0
 800cf0e:	000d      	movs	r5, r1
 800cf10:	f7f5 fa46 	bl	80023a0 <__aeabi_dsub>
 800cf14:	0002      	movs	r2, r0
 800cf16:	000b      	movs	r3, r1
 800cf18:	0020      	movs	r0, r4
 800cf1a:	603a      	str	r2, [r7, #0]
 800cf1c:	607b      	str	r3, [r7, #4]
 800cf1e:	0029      	movs	r1, r5
 800cf20:	f7f5 fa3e 	bl	80023a0 <__aeabi_dsub>
 800cf24:	4abc      	ldr	r2, [pc, #752]	; (800d218 <__ieee754_rem_pio2+0x390>)
 800cf26:	4bbd      	ldr	r3, [pc, #756]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800cf28:	e7e1      	b.n	800ceee <__ieee754_rem_pio2+0x66>
 800cf2a:	4bb7      	ldr	r3, [pc, #732]	; (800d208 <__ieee754_rem_pio2+0x380>)
 800cf2c:	f7f4 f874 	bl	8001018 <__aeabi_dadd>
 800cf30:	9b04      	ldr	r3, [sp, #16]
 800cf32:	0004      	movs	r4, r0
 800cf34:	000d      	movs	r5, r1
 800cf36:	42b3      	cmp	r3, r6
 800cf38:	d014      	beq.n	800cf64 <__ieee754_rem_pio2+0xdc>
 800cf3a:	4ab5      	ldr	r2, [pc, #724]	; (800d210 <__ieee754_rem_pio2+0x388>)
 800cf3c:	4bb5      	ldr	r3, [pc, #724]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800cf3e:	f7f4 f86b 	bl	8001018 <__aeabi_dadd>
 800cf42:	0002      	movs	r2, r0
 800cf44:	000b      	movs	r3, r1
 800cf46:	0020      	movs	r0, r4
 800cf48:	603a      	str	r2, [r7, #0]
 800cf4a:	607b      	str	r3, [r7, #4]
 800cf4c:	0029      	movs	r1, r5
 800cf4e:	f7f5 fa27 	bl	80023a0 <__aeabi_dsub>
 800cf52:	4aaf      	ldr	r2, [pc, #700]	; (800d210 <__ieee754_rem_pio2+0x388>)
 800cf54:	4baf      	ldr	r3, [pc, #700]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800cf56:	f7f4 f85f 	bl	8001018 <__aeabi_dadd>
 800cf5a:	2601      	movs	r6, #1
 800cf5c:	60b8      	str	r0, [r7, #8]
 800cf5e:	60f9      	str	r1, [r7, #12]
 800cf60:	4276      	negs	r6, r6
 800cf62:	e7c9      	b.n	800cef8 <__ieee754_rem_pio2+0x70>
 800cf64:	22d3      	movs	r2, #211	; 0xd3
 800cf66:	4bab      	ldr	r3, [pc, #684]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800cf68:	0552      	lsls	r2, r2, #21
 800cf6a:	f7f4 f855 	bl	8001018 <__aeabi_dadd>
 800cf6e:	4aaa      	ldr	r2, [pc, #680]	; (800d218 <__ieee754_rem_pio2+0x390>)
 800cf70:	4baa      	ldr	r3, [pc, #680]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800cf72:	0004      	movs	r4, r0
 800cf74:	000d      	movs	r5, r1
 800cf76:	f7f4 f84f 	bl	8001018 <__aeabi_dadd>
 800cf7a:	0002      	movs	r2, r0
 800cf7c:	000b      	movs	r3, r1
 800cf7e:	0020      	movs	r0, r4
 800cf80:	603a      	str	r2, [r7, #0]
 800cf82:	607b      	str	r3, [r7, #4]
 800cf84:	0029      	movs	r1, r5
 800cf86:	f7f5 fa0b 	bl	80023a0 <__aeabi_dsub>
 800cf8a:	4aa3      	ldr	r2, [pc, #652]	; (800d218 <__ieee754_rem_pio2+0x390>)
 800cf8c:	4ba3      	ldr	r3, [pc, #652]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800cf8e:	e7e2      	b.n	800cf56 <__ieee754_rem_pio2+0xce>
 800cf90:	4ba3      	ldr	r3, [pc, #652]	; (800d220 <__ieee754_rem_pio2+0x398>)
 800cf92:	9a04      	ldr	r2, [sp, #16]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	dd00      	ble.n	800cf9a <__ieee754_rem_pio2+0x112>
 800cf98:	e0d2      	b.n	800d140 <__ieee754_rem_pio2+0x2b8>
 800cf9a:	f001 f88f 	bl	800e0bc <fabs>
 800cf9e:	4aa1      	ldr	r2, [pc, #644]	; (800d224 <__ieee754_rem_pio2+0x39c>)
 800cfa0:	4ba1      	ldr	r3, [pc, #644]	; (800d228 <__ieee754_rem_pio2+0x3a0>)
 800cfa2:	0004      	movs	r4, r0
 800cfa4:	000d      	movs	r5, r1
 800cfa6:	f7f4 ff7b 	bl	8001ea0 <__aeabi_dmul>
 800cfaa:	2200      	movs	r2, #0
 800cfac:	4b9f      	ldr	r3, [pc, #636]	; (800d22c <__ieee754_rem_pio2+0x3a4>)
 800cfae:	f7f4 f833 	bl	8001018 <__aeabi_dadd>
 800cfb2:	f7f5 fd2b 	bl	8002a0c <__aeabi_d2iz>
 800cfb6:	0006      	movs	r6, r0
 800cfb8:	f7f5 fd5c 	bl	8002a74 <__aeabi_i2d>
 800cfbc:	4a93      	ldr	r2, [pc, #588]	; (800d20c <__ieee754_rem_pio2+0x384>)
 800cfbe:	4b92      	ldr	r3, [pc, #584]	; (800d208 <__ieee754_rem_pio2+0x380>)
 800cfc0:	9006      	str	r0, [sp, #24]
 800cfc2:	9107      	str	r1, [sp, #28]
 800cfc4:	f7f4 ff6c 	bl	8001ea0 <__aeabi_dmul>
 800cfc8:	0002      	movs	r2, r0
 800cfca:	000b      	movs	r3, r1
 800cfcc:	0020      	movs	r0, r4
 800cfce:	0029      	movs	r1, r5
 800cfd0:	f7f5 f9e6 	bl	80023a0 <__aeabi_dsub>
 800cfd4:	4a8e      	ldr	r2, [pc, #568]	; (800d210 <__ieee754_rem_pio2+0x388>)
 800cfd6:	9002      	str	r0, [sp, #8]
 800cfd8:	9103      	str	r1, [sp, #12]
 800cfda:	9806      	ldr	r0, [sp, #24]
 800cfdc:	9907      	ldr	r1, [sp, #28]
 800cfde:	4b8d      	ldr	r3, [pc, #564]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800cfe0:	f7f4 ff5e 	bl	8001ea0 <__aeabi_dmul>
 800cfe4:	0004      	movs	r4, r0
 800cfe6:	000d      	movs	r5, r1
 800cfe8:	2e1f      	cmp	r6, #31
 800cfea:	dc30      	bgt.n	800d04e <__ieee754_rem_pio2+0x1c6>
 800cfec:	4a90      	ldr	r2, [pc, #576]	; (800d230 <__ieee754_rem_pio2+0x3a8>)
 800cfee:	1e73      	subs	r3, r6, #1
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	589b      	ldr	r3, [r3, r2]
 800cff4:	9a04      	ldr	r2, [sp, #16]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d029      	beq.n	800d04e <__ieee754_rem_pio2+0x1c6>
 800cffa:	9802      	ldr	r0, [sp, #8]
 800cffc:	9903      	ldr	r1, [sp, #12]
 800cffe:	0022      	movs	r2, r4
 800d000:	002b      	movs	r3, r5
 800d002:	f7f5 f9cd 	bl	80023a0 <__aeabi_dsub>
 800d006:	6038      	str	r0, [r7, #0]
 800d008:	6079      	str	r1, [r7, #4]
 800d00a:	9802      	ldr	r0, [sp, #8]
 800d00c:	9903      	ldr	r1, [sp, #12]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	9a04      	ldr	r2, [sp, #16]
 800d016:	9306      	str	r3, [sp, #24]
 800d018:	9b06      	ldr	r3, [sp, #24]
 800d01a:	f7f5 f9c1 	bl	80023a0 <__aeabi_dsub>
 800d01e:	0022      	movs	r2, r4
 800d020:	002b      	movs	r3, r5
 800d022:	f7f5 f9bd 	bl	80023a0 <__aeabi_dsub>
 800d026:	000b      	movs	r3, r1
 800d028:	0002      	movs	r2, r0
 800d02a:	60ba      	str	r2, [r7, #8]
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	9b08      	ldr	r3, [sp, #32]
 800d030:	2b00      	cmp	r3, #0
 800d032:	db00      	blt.n	800d036 <__ieee754_rem_pio2+0x1ae>
 800d034:	e760      	b.n	800cef8 <__ieee754_rem_pio2+0x70>
 800d036:	2280      	movs	r2, #128	; 0x80
 800d038:	0612      	lsls	r2, r2, #24
 800d03a:	4694      	mov	ip, r2
 800d03c:	9b04      	ldr	r3, [sp, #16]
 800d03e:	1889      	adds	r1, r1, r2
 800d040:	603b      	str	r3, [r7, #0]
 800d042:	9b06      	ldr	r3, [sp, #24]
 800d044:	60b8      	str	r0, [r7, #8]
 800d046:	4463      	add	r3, ip
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	60f9      	str	r1, [r7, #12]
 800d04c:	e788      	b.n	800cf60 <__ieee754_rem_pio2+0xd8>
 800d04e:	0022      	movs	r2, r4
 800d050:	9802      	ldr	r0, [sp, #8]
 800d052:	9903      	ldr	r1, [sp, #12]
 800d054:	002b      	movs	r3, r5
 800d056:	f7f5 f9a3 	bl	80023a0 <__aeabi_dsub>
 800d05a:	000b      	movs	r3, r1
 800d05c:	0002      	movs	r2, r0
 800d05e:	603a      	str	r2, [r7, #0]
 800d060:	607b      	str	r3, [r7, #4]
 800d062:	9b04      	ldr	r3, [sp, #16]
 800d064:	0049      	lsls	r1, r1, #1
 800d066:	151b      	asrs	r3, r3, #20
 800d068:	0d49      	lsrs	r1, r1, #21
 800d06a:	9309      	str	r3, [sp, #36]	; 0x24
 800d06c:	1a59      	subs	r1, r3, r1
 800d06e:	2910      	cmp	r1, #16
 800d070:	ddcb      	ble.n	800d00a <__ieee754_rem_pio2+0x182>
 800d072:	9806      	ldr	r0, [sp, #24]
 800d074:	9907      	ldr	r1, [sp, #28]
 800d076:	22d3      	movs	r2, #211	; 0xd3
 800d078:	4b66      	ldr	r3, [pc, #408]	; (800d214 <__ieee754_rem_pio2+0x38c>)
 800d07a:	0552      	lsls	r2, r2, #21
 800d07c:	f7f4 ff10 	bl	8001ea0 <__aeabi_dmul>
 800d080:	0004      	movs	r4, r0
 800d082:	000d      	movs	r5, r1
 800d084:	0002      	movs	r2, r0
 800d086:	000b      	movs	r3, r1
 800d088:	9802      	ldr	r0, [sp, #8]
 800d08a:	9903      	ldr	r1, [sp, #12]
 800d08c:	f7f5 f988 	bl	80023a0 <__aeabi_dsub>
 800d090:	0002      	movs	r2, r0
 800d092:	000b      	movs	r3, r1
 800d094:	9004      	str	r0, [sp, #16]
 800d096:	9105      	str	r1, [sp, #20]
 800d098:	9802      	ldr	r0, [sp, #8]
 800d09a:	9903      	ldr	r1, [sp, #12]
 800d09c:	f7f5 f980 	bl	80023a0 <__aeabi_dsub>
 800d0a0:	0022      	movs	r2, r4
 800d0a2:	002b      	movs	r3, r5
 800d0a4:	f7f5 f97c 	bl	80023a0 <__aeabi_dsub>
 800d0a8:	0004      	movs	r4, r0
 800d0aa:	000d      	movs	r5, r1
 800d0ac:	9806      	ldr	r0, [sp, #24]
 800d0ae:	9907      	ldr	r1, [sp, #28]
 800d0b0:	4a59      	ldr	r2, [pc, #356]	; (800d218 <__ieee754_rem_pio2+0x390>)
 800d0b2:	4b5a      	ldr	r3, [pc, #360]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800d0b4:	f7f4 fef4 	bl	8001ea0 <__aeabi_dmul>
 800d0b8:	0022      	movs	r2, r4
 800d0ba:	002b      	movs	r3, r5
 800d0bc:	f7f5 f970 	bl	80023a0 <__aeabi_dsub>
 800d0c0:	0002      	movs	r2, r0
 800d0c2:	000b      	movs	r3, r1
 800d0c4:	0004      	movs	r4, r0
 800d0c6:	000d      	movs	r5, r1
 800d0c8:	9804      	ldr	r0, [sp, #16]
 800d0ca:	9905      	ldr	r1, [sp, #20]
 800d0cc:	f7f5 f968 	bl	80023a0 <__aeabi_dsub>
 800d0d0:	000b      	movs	r3, r1
 800d0d2:	0002      	movs	r2, r0
 800d0d4:	0049      	lsls	r1, r1, #1
 800d0d6:	603a      	str	r2, [r7, #0]
 800d0d8:	607b      	str	r3, [r7, #4]
 800d0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0dc:	0d49      	lsrs	r1, r1, #21
 800d0de:	1a59      	subs	r1, r3, r1
 800d0e0:	9a04      	ldr	r2, [sp, #16]
 800d0e2:	9b05      	ldr	r3, [sp, #20]
 800d0e4:	9202      	str	r2, [sp, #8]
 800d0e6:	9303      	str	r3, [sp, #12]
 800d0e8:	2931      	cmp	r1, #49	; 0x31
 800d0ea:	dd8e      	ble.n	800d00a <__ieee754_rem_pio2+0x182>
 800d0ec:	9806      	ldr	r0, [sp, #24]
 800d0ee:	9907      	ldr	r1, [sp, #28]
 800d0f0:	22b8      	movs	r2, #184	; 0xb8
 800d0f2:	4b4a      	ldr	r3, [pc, #296]	; (800d21c <__ieee754_rem_pio2+0x394>)
 800d0f4:	0592      	lsls	r2, r2, #22
 800d0f6:	f7f4 fed3 	bl	8001ea0 <__aeabi_dmul>
 800d0fa:	0004      	movs	r4, r0
 800d0fc:	000d      	movs	r5, r1
 800d0fe:	0002      	movs	r2, r0
 800d100:	000b      	movs	r3, r1
 800d102:	9802      	ldr	r0, [sp, #8]
 800d104:	9903      	ldr	r1, [sp, #12]
 800d106:	f7f5 f94b 	bl	80023a0 <__aeabi_dsub>
 800d10a:	0002      	movs	r2, r0
 800d10c:	000b      	movs	r3, r1
 800d10e:	9002      	str	r0, [sp, #8]
 800d110:	9103      	str	r1, [sp, #12]
 800d112:	9804      	ldr	r0, [sp, #16]
 800d114:	9905      	ldr	r1, [sp, #20]
 800d116:	f7f5 f943 	bl	80023a0 <__aeabi_dsub>
 800d11a:	0022      	movs	r2, r4
 800d11c:	002b      	movs	r3, r5
 800d11e:	f7f5 f93f 	bl	80023a0 <__aeabi_dsub>
 800d122:	0004      	movs	r4, r0
 800d124:	000d      	movs	r5, r1
 800d126:	9806      	ldr	r0, [sp, #24]
 800d128:	9907      	ldr	r1, [sp, #28]
 800d12a:	4a42      	ldr	r2, [pc, #264]	; (800d234 <__ieee754_rem_pio2+0x3ac>)
 800d12c:	4b42      	ldr	r3, [pc, #264]	; (800d238 <__ieee754_rem_pio2+0x3b0>)
 800d12e:	f7f4 feb7 	bl	8001ea0 <__aeabi_dmul>
 800d132:	0022      	movs	r2, r4
 800d134:	002b      	movs	r3, r5
 800d136:	f7f5 f933 	bl	80023a0 <__aeabi_dsub>
 800d13a:	0004      	movs	r4, r0
 800d13c:	000d      	movs	r5, r1
 800d13e:	e75c      	b.n	800cffa <__ieee754_rem_pio2+0x172>
 800d140:	4b3e      	ldr	r3, [pc, #248]	; (800d23c <__ieee754_rem_pio2+0x3b4>)
 800d142:	9a04      	ldr	r2, [sp, #16]
 800d144:	429a      	cmp	r2, r3
 800d146:	dd08      	ble.n	800d15a <__ieee754_rem_pio2+0x2d2>
 800d148:	0002      	movs	r2, r0
 800d14a:	000b      	movs	r3, r1
 800d14c:	f7f5 f928 	bl	80023a0 <__aeabi_dsub>
 800d150:	60b8      	str	r0, [r7, #8]
 800d152:	60f9      	str	r1, [r7, #12]
 800d154:	6038      	str	r0, [r7, #0]
 800d156:	6079      	str	r1, [r7, #4]
 800d158:	e6a9      	b.n	800ceae <__ieee754_rem_pio2+0x26>
 800d15a:	9a04      	ldr	r2, [sp, #16]
 800d15c:	4938      	ldr	r1, [pc, #224]	; (800d240 <__ieee754_rem_pio2+0x3b8>)
 800d15e:	1512      	asrs	r2, r2, #20
 800d160:	1852      	adds	r2, r2, r1
 800d162:	0513      	lsls	r3, r2, #20
 800d164:	9202      	str	r2, [sp, #8]
 800d166:	9a04      	ldr	r2, [sp, #16]
 800d168:	0004      	movs	r4, r0
 800d16a:	1ad5      	subs	r5, r2, r3
 800d16c:	0029      	movs	r1, r5
 800d16e:	f7f5 fc4d 	bl	8002a0c <__aeabi_d2iz>
 800d172:	f7f5 fc7f 	bl	8002a74 <__aeabi_i2d>
 800d176:	0002      	movs	r2, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	0020      	movs	r0, r4
 800d17c:	0029      	movs	r1, r5
 800d17e:	920a      	str	r2, [sp, #40]	; 0x28
 800d180:	930b      	str	r3, [sp, #44]	; 0x2c
 800d182:	f7f5 f90d 	bl	80023a0 <__aeabi_dsub>
 800d186:	2200      	movs	r2, #0
 800d188:	4b2e      	ldr	r3, [pc, #184]	; (800d244 <__ieee754_rem_pio2+0x3bc>)
 800d18a:	f7f4 fe89 	bl	8001ea0 <__aeabi_dmul>
 800d18e:	0004      	movs	r4, r0
 800d190:	000d      	movs	r5, r1
 800d192:	f7f5 fc3b 	bl	8002a0c <__aeabi_d2iz>
 800d196:	f7f5 fc6d 	bl	8002a74 <__aeabi_i2d>
 800d19a:	0002      	movs	r2, r0
 800d19c:	000b      	movs	r3, r1
 800d19e:	ae0a      	add	r6, sp, #40	; 0x28
 800d1a0:	60b2      	str	r2, [r6, #8]
 800d1a2:	60f3      	str	r3, [r6, #12]
 800d1a4:	0020      	movs	r0, r4
 800d1a6:	0029      	movs	r1, r5
 800d1a8:	f7f5 f8fa 	bl	80023a0 <__aeabi_dsub>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4b25      	ldr	r3, [pc, #148]	; (800d244 <__ieee754_rem_pio2+0x3bc>)
 800d1b0:	f7f4 fe76 	bl	8001ea0 <__aeabi_dmul>
 800d1b4:	2403      	movs	r4, #3
 800d1b6:	6130      	str	r0, [r6, #16]
 800d1b8:	6171      	str	r1, [r6, #20]
 800d1ba:	1e65      	subs	r5, r4, #1
 800d1bc:	00eb      	lsls	r3, r5, #3
 800d1be:	18f3      	adds	r3, r6, r3
 800d1c0:	6818      	ldr	r0, [r3, #0]
 800d1c2:	6859      	ldr	r1, [r3, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f7f3 f948 	bl	800045c <__aeabi_dcmpeq>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d13d      	bne.n	800d24c <__ieee754_rem_pio2+0x3c4>
 800d1d0:	4b1d      	ldr	r3, [pc, #116]	; (800d248 <__ieee754_rem_pio2+0x3c0>)
 800d1d2:	0030      	movs	r0, r6
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	2302      	movs	r3, #2
 800d1d8:	9a02      	ldr	r2, [sp, #8]
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	0039      	movs	r1, r7
 800d1de:	0023      	movs	r3, r4
 800d1e0:	f000 f9c2 	bl	800d568 <__kernel_rem_pio2>
 800d1e4:	9b08      	ldr	r3, [sp, #32]
 800d1e6:	0006      	movs	r6, r0
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	db00      	blt.n	800d1ee <__ieee754_rem_pio2+0x366>
 800d1ec:	e684      	b.n	800cef8 <__ieee754_rem_pio2+0x70>
 800d1ee:	2280      	movs	r2, #128	; 0x80
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	0612      	lsls	r2, r2, #24
 800d1f4:	189b      	adds	r3, r3, r2
 800d1f6:	607b      	str	r3, [r7, #4]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	189b      	adds	r3, r3, r2
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	e6af      	b.n	800cf60 <__ieee754_rem_pio2+0xd8>
 800d200:	3fe921fb 	.word	0x3fe921fb
 800d204:	4002d97b 	.word	0x4002d97b
 800d208:	3ff921fb 	.word	0x3ff921fb
 800d20c:	54400000 	.word	0x54400000
 800d210:	1a626331 	.word	0x1a626331
 800d214:	3dd0b461 	.word	0x3dd0b461
 800d218:	2e037073 	.word	0x2e037073
 800d21c:	3ba3198a 	.word	0x3ba3198a
 800d220:	413921fb 	.word	0x413921fb
 800d224:	6dc9c883 	.word	0x6dc9c883
 800d228:	3fe45f30 	.word	0x3fe45f30
 800d22c:	3fe00000 	.word	0x3fe00000
 800d230:	0800fae8 	.word	0x0800fae8
 800d234:	252049c1 	.word	0x252049c1
 800d238:	397b839a 	.word	0x397b839a
 800d23c:	7fefffff 	.word	0x7fefffff
 800d240:	fffffbea 	.word	0xfffffbea
 800d244:	41700000 	.word	0x41700000
 800d248:	0800fb68 	.word	0x0800fb68
 800d24c:	002c      	movs	r4, r5
 800d24e:	e7b4      	b.n	800d1ba <__ieee754_rem_pio2+0x332>

0800d250 <__ieee754_sqrt>:
 800d250:	4b54      	ldr	r3, [pc, #336]	; (800d3a4 <__ieee754_sqrt+0x154>)
 800d252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d254:	001e      	movs	r6, r3
 800d256:	0005      	movs	r5, r0
 800d258:	000c      	movs	r4, r1
 800d25a:	0002      	movs	r2, r0
 800d25c:	400e      	ands	r6, r1
 800d25e:	429e      	cmp	r6, r3
 800d260:	d10f      	bne.n	800d282 <__ieee754_sqrt+0x32>
 800d262:	0002      	movs	r2, r0
 800d264:	000b      	movs	r3, r1
 800d266:	f7f4 fe1b 	bl	8001ea0 <__aeabi_dmul>
 800d26a:	0002      	movs	r2, r0
 800d26c:	000b      	movs	r3, r1
 800d26e:	0028      	movs	r0, r5
 800d270:	0021      	movs	r1, r4
 800d272:	f7f3 fed1 	bl	8001018 <__aeabi_dadd>
 800d276:	0005      	movs	r5, r0
 800d278:	000c      	movs	r4, r1
 800d27a:	0028      	movs	r0, r5
 800d27c:	0021      	movs	r1, r4
 800d27e:	b003      	add	sp, #12
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d282:	2900      	cmp	r1, #0
 800d284:	dc0e      	bgt.n	800d2a4 <__ieee754_sqrt+0x54>
 800d286:	004b      	lsls	r3, r1, #1
 800d288:	085b      	lsrs	r3, r3, #1
 800d28a:	4303      	orrs	r3, r0
 800d28c:	d0f5      	beq.n	800d27a <__ieee754_sqrt+0x2a>
 800d28e:	2900      	cmp	r1, #0
 800d290:	d00a      	beq.n	800d2a8 <__ieee754_sqrt+0x58>
 800d292:	0002      	movs	r2, r0
 800d294:	000b      	movs	r3, r1
 800d296:	f7f5 f883 	bl	80023a0 <__aeabi_dsub>
 800d29a:	0002      	movs	r2, r0
 800d29c:	000b      	movs	r3, r1
 800d29e:	f7f4 f9cb 	bl	8001638 <__aeabi_ddiv>
 800d2a2:	e7e8      	b.n	800d276 <__ieee754_sqrt+0x26>
 800d2a4:	150b      	asrs	r3, r1, #20
 800d2a6:	d10f      	bne.n	800d2c8 <__ieee754_sqrt+0x78>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2900      	cmp	r1, #0
 800d2ac:	d06f      	beq.n	800d38e <__ieee754_sqrt+0x13e>
 800d2ae:	2480      	movs	r4, #128	; 0x80
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	0364      	lsls	r4, r4, #13
 800d2b4:	4221      	tst	r1, r4
 800d2b6:	d06e      	beq.n	800d396 <__ieee754_sqrt+0x146>
 800d2b8:	1e44      	subs	r4, r0, #1
 800d2ba:	1b1b      	subs	r3, r3, r4
 800d2bc:	2420      	movs	r4, #32
 800d2be:	0015      	movs	r5, r2
 800d2c0:	1a24      	subs	r4, r4, r0
 800d2c2:	40e5      	lsrs	r5, r4
 800d2c4:	4082      	lsls	r2, r0
 800d2c6:	4329      	orrs	r1, r5
 800d2c8:	4837      	ldr	r0, [pc, #220]	; (800d3a8 <__ieee754_sqrt+0x158>)
 800d2ca:	0309      	lsls	r1, r1, #12
 800d2cc:	1818      	adds	r0, r3, r0
 800d2ce:	2380      	movs	r3, #128	; 0x80
 800d2d0:	0b09      	lsrs	r1, r1, #12
 800d2d2:	035b      	lsls	r3, r3, #13
 800d2d4:	4319      	orrs	r1, r3
 800d2d6:	07c3      	lsls	r3, r0, #31
 800d2d8:	d503      	bpl.n	800d2e2 <__ieee754_sqrt+0x92>
 800d2da:	0fd3      	lsrs	r3, r2, #31
 800d2dc:	0049      	lsls	r1, r1, #1
 800d2de:	1859      	adds	r1, r3, r1
 800d2e0:	0052      	lsls	r2, r2, #1
 800d2e2:	2400      	movs	r4, #0
 800d2e4:	1043      	asrs	r3, r0, #1
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	0fd3      	lsrs	r3, r2, #31
 800d2ea:	185b      	adds	r3, r3, r1
 800d2ec:	2580      	movs	r5, #128	; 0x80
 800d2ee:	185b      	adds	r3, r3, r1
 800d2f0:	0020      	movs	r0, r4
 800d2f2:	2116      	movs	r1, #22
 800d2f4:	0052      	lsls	r2, r2, #1
 800d2f6:	03ad      	lsls	r5, r5, #14
 800d2f8:	1946      	adds	r6, r0, r5
 800d2fa:	429e      	cmp	r6, r3
 800d2fc:	dc02      	bgt.n	800d304 <__ieee754_sqrt+0xb4>
 800d2fe:	1970      	adds	r0, r6, r5
 800d300:	1b9b      	subs	r3, r3, r6
 800d302:	1964      	adds	r4, r4, r5
 800d304:	0fd6      	lsrs	r6, r2, #31
 800d306:	005b      	lsls	r3, r3, #1
 800d308:	3901      	subs	r1, #1
 800d30a:	18f3      	adds	r3, r6, r3
 800d30c:	0052      	lsls	r2, r2, #1
 800d30e:	086d      	lsrs	r5, r5, #1
 800d310:	2900      	cmp	r1, #0
 800d312:	d1f1      	bne.n	800d2f8 <__ieee754_sqrt+0xa8>
 800d314:	2520      	movs	r5, #32
 800d316:	2680      	movs	r6, #128	; 0x80
 800d318:	46ac      	mov	ip, r5
 800d31a:	9100      	str	r1, [sp, #0]
 800d31c:	0636      	lsls	r6, r6, #24
 800d31e:	9d00      	ldr	r5, [sp, #0]
 800d320:	1977      	adds	r7, r6, r5
 800d322:	4283      	cmp	r3, r0
 800d324:	dc02      	bgt.n	800d32c <__ieee754_sqrt+0xdc>
 800d326:	d112      	bne.n	800d34e <__ieee754_sqrt+0xfe>
 800d328:	4297      	cmp	r7, r2
 800d32a:	d810      	bhi.n	800d34e <__ieee754_sqrt+0xfe>
 800d32c:	19bd      	adds	r5, r7, r6
 800d32e:	9500      	str	r5, [sp, #0]
 800d330:	0005      	movs	r5, r0
 800d332:	2f00      	cmp	r7, #0
 800d334:	da03      	bge.n	800d33e <__ieee754_sqrt+0xee>
 800d336:	9d00      	ldr	r5, [sp, #0]
 800d338:	43ed      	mvns	r5, r5
 800d33a:	0fed      	lsrs	r5, r5, #31
 800d33c:	1945      	adds	r5, r0, r5
 800d33e:	1a1b      	subs	r3, r3, r0
 800d340:	42ba      	cmp	r2, r7
 800d342:	4180      	sbcs	r0, r0
 800d344:	4240      	negs	r0, r0
 800d346:	1a1b      	subs	r3, r3, r0
 800d348:	0028      	movs	r0, r5
 800d34a:	1bd2      	subs	r2, r2, r7
 800d34c:	1989      	adds	r1, r1, r6
 800d34e:	0fd5      	lsrs	r5, r2, #31
 800d350:	18ed      	adds	r5, r5, r3
 800d352:	18eb      	adds	r3, r5, r3
 800d354:	2501      	movs	r5, #1
 800d356:	426d      	negs	r5, r5
 800d358:	44ac      	add	ip, r5
 800d35a:	4665      	mov	r5, ip
 800d35c:	0052      	lsls	r2, r2, #1
 800d35e:	0876      	lsrs	r6, r6, #1
 800d360:	2d00      	cmp	r5, #0
 800d362:	d1dc      	bne.n	800d31e <__ieee754_sqrt+0xce>
 800d364:	4313      	orrs	r3, r2
 800d366:	d003      	beq.n	800d370 <__ieee754_sqrt+0x120>
 800d368:	1c4b      	adds	r3, r1, #1
 800d36a:	d117      	bne.n	800d39c <__ieee754_sqrt+0x14c>
 800d36c:	4661      	mov	r1, ip
 800d36e:	3401      	adds	r4, #1
 800d370:	4b0e      	ldr	r3, [pc, #56]	; (800d3ac <__ieee754_sqrt+0x15c>)
 800d372:	1060      	asrs	r0, r4, #1
 800d374:	18c0      	adds	r0, r0, r3
 800d376:	0849      	lsrs	r1, r1, #1
 800d378:	07e3      	lsls	r3, r4, #31
 800d37a:	d502      	bpl.n	800d382 <__ieee754_sqrt+0x132>
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	061b      	lsls	r3, r3, #24
 800d380:	4319      	orrs	r1, r3
 800d382:	9b01      	ldr	r3, [sp, #4]
 800d384:	000d      	movs	r5, r1
 800d386:	051c      	lsls	r4, r3, #20
 800d388:	1823      	adds	r3, r4, r0
 800d38a:	001c      	movs	r4, r3
 800d38c:	e775      	b.n	800d27a <__ieee754_sqrt+0x2a>
 800d38e:	0ad1      	lsrs	r1, r2, #11
 800d390:	3b15      	subs	r3, #21
 800d392:	0552      	lsls	r2, r2, #21
 800d394:	e789      	b.n	800d2aa <__ieee754_sqrt+0x5a>
 800d396:	0049      	lsls	r1, r1, #1
 800d398:	3001      	adds	r0, #1
 800d39a:	e78b      	b.n	800d2b4 <__ieee754_sqrt+0x64>
 800d39c:	2301      	movs	r3, #1
 800d39e:	3101      	adds	r1, #1
 800d3a0:	4399      	bics	r1, r3
 800d3a2:	e7e5      	b.n	800d370 <__ieee754_sqrt+0x120>
 800d3a4:	7ff00000 	.word	0x7ff00000
 800d3a8:	fffffc01 	.word	0xfffffc01
 800d3ac:	3fe00000 	.word	0x3fe00000

0800d3b0 <__kernel_cos>:
 800d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b2:	b08b      	sub	sp, #44	; 0x2c
 800d3b4:	9204      	str	r2, [sp, #16]
 800d3b6:	9305      	str	r3, [sp, #20]
 800d3b8:	4b58      	ldr	r3, [pc, #352]	; (800d51c <__kernel_cos+0x16c>)
 800d3ba:	004d      	lsls	r5, r1, #1
 800d3bc:	9001      	str	r0, [sp, #4]
 800d3be:	9100      	str	r1, [sp, #0]
 800d3c0:	086d      	lsrs	r5, r5, #1
 800d3c2:	429d      	cmp	r5, r3
 800d3c4:	dc06      	bgt.n	800d3d4 <__kernel_cos+0x24>
 800d3c6:	9801      	ldr	r0, [sp, #4]
 800d3c8:	9900      	ldr	r1, [sp, #0]
 800d3ca:	f7f5 fb1f 	bl	8002a0c <__aeabi_d2iz>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d100      	bne.n	800d3d4 <__kernel_cos+0x24>
 800d3d2:	e0a0      	b.n	800d516 <__kernel_cos+0x166>
 800d3d4:	9a01      	ldr	r2, [sp, #4]
 800d3d6:	9b00      	ldr	r3, [sp, #0]
 800d3d8:	9801      	ldr	r0, [sp, #4]
 800d3da:	9900      	ldr	r1, [sp, #0]
 800d3dc:	f7f4 fd60 	bl	8001ea0 <__aeabi_dmul>
 800d3e0:	0006      	movs	r6, r0
 800d3e2:	000f      	movs	r7, r1
 800d3e4:	4a4e      	ldr	r2, [pc, #312]	; (800d520 <__kernel_cos+0x170>)
 800d3e6:	4b4f      	ldr	r3, [pc, #316]	; (800d524 <__kernel_cos+0x174>)
 800d3e8:	f7f4 fd5a 	bl	8001ea0 <__aeabi_dmul>
 800d3ec:	4a4e      	ldr	r2, [pc, #312]	; (800d528 <__kernel_cos+0x178>)
 800d3ee:	4b4f      	ldr	r3, [pc, #316]	; (800d52c <__kernel_cos+0x17c>)
 800d3f0:	f7f3 fe12 	bl	8001018 <__aeabi_dadd>
 800d3f4:	0032      	movs	r2, r6
 800d3f6:	003b      	movs	r3, r7
 800d3f8:	f7f4 fd52 	bl	8001ea0 <__aeabi_dmul>
 800d3fc:	4a4c      	ldr	r2, [pc, #304]	; (800d530 <__kernel_cos+0x180>)
 800d3fe:	4b4d      	ldr	r3, [pc, #308]	; (800d534 <__kernel_cos+0x184>)
 800d400:	f7f4 ffce 	bl	80023a0 <__aeabi_dsub>
 800d404:	0032      	movs	r2, r6
 800d406:	003b      	movs	r3, r7
 800d408:	f7f4 fd4a 	bl	8001ea0 <__aeabi_dmul>
 800d40c:	4a4a      	ldr	r2, [pc, #296]	; (800d538 <__kernel_cos+0x188>)
 800d40e:	4b4b      	ldr	r3, [pc, #300]	; (800d53c <__kernel_cos+0x18c>)
 800d410:	f7f3 fe02 	bl	8001018 <__aeabi_dadd>
 800d414:	0032      	movs	r2, r6
 800d416:	003b      	movs	r3, r7
 800d418:	f7f4 fd42 	bl	8001ea0 <__aeabi_dmul>
 800d41c:	4a48      	ldr	r2, [pc, #288]	; (800d540 <__kernel_cos+0x190>)
 800d41e:	4b49      	ldr	r3, [pc, #292]	; (800d544 <__kernel_cos+0x194>)
 800d420:	f7f4 ffbe 	bl	80023a0 <__aeabi_dsub>
 800d424:	0032      	movs	r2, r6
 800d426:	003b      	movs	r3, r7
 800d428:	f7f4 fd3a 	bl	8001ea0 <__aeabi_dmul>
 800d42c:	4a46      	ldr	r2, [pc, #280]	; (800d548 <__kernel_cos+0x198>)
 800d42e:	4b47      	ldr	r3, [pc, #284]	; (800d54c <__kernel_cos+0x19c>)
 800d430:	f7f3 fdf2 	bl	8001018 <__aeabi_dadd>
 800d434:	003b      	movs	r3, r7
 800d436:	0032      	movs	r2, r6
 800d438:	f7f4 fd32 	bl	8001ea0 <__aeabi_dmul>
 800d43c:	4b44      	ldr	r3, [pc, #272]	; (800d550 <__kernel_cos+0x1a0>)
 800d43e:	9002      	str	r0, [sp, #8]
 800d440:	9103      	str	r1, [sp, #12]
 800d442:	429d      	cmp	r5, r3
 800d444:	dc29      	bgt.n	800d49a <__kernel_cos+0xea>
 800d446:	2200      	movs	r2, #0
 800d448:	4b42      	ldr	r3, [pc, #264]	; (800d554 <__kernel_cos+0x1a4>)
 800d44a:	0030      	movs	r0, r6
 800d44c:	0039      	movs	r1, r7
 800d44e:	f7f4 fd27 	bl	8001ea0 <__aeabi_dmul>
 800d452:	9a02      	ldr	r2, [sp, #8]
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	9006      	str	r0, [sp, #24]
 800d458:	9107      	str	r1, [sp, #28]
 800d45a:	0030      	movs	r0, r6
 800d45c:	0039      	movs	r1, r7
 800d45e:	f7f4 fd1f 	bl	8001ea0 <__aeabi_dmul>
 800d462:	9a04      	ldr	r2, [sp, #16]
 800d464:	9b05      	ldr	r3, [sp, #20]
 800d466:	0004      	movs	r4, r0
 800d468:	000d      	movs	r5, r1
 800d46a:	9801      	ldr	r0, [sp, #4]
 800d46c:	9900      	ldr	r1, [sp, #0]
 800d46e:	f7f4 fd17 	bl	8001ea0 <__aeabi_dmul>
 800d472:	0002      	movs	r2, r0
 800d474:	000b      	movs	r3, r1
 800d476:	0020      	movs	r0, r4
 800d478:	0029      	movs	r1, r5
 800d47a:	f7f4 ff91 	bl	80023a0 <__aeabi_dsub>
 800d47e:	0002      	movs	r2, r0
 800d480:	000b      	movs	r3, r1
 800d482:	9806      	ldr	r0, [sp, #24]
 800d484:	9907      	ldr	r1, [sp, #28]
 800d486:	f7f4 ff8b 	bl	80023a0 <__aeabi_dsub>
 800d48a:	0002      	movs	r2, r0
 800d48c:	2000      	movs	r0, #0
 800d48e:	000b      	movs	r3, r1
 800d490:	4931      	ldr	r1, [pc, #196]	; (800d558 <__kernel_cos+0x1a8>)
 800d492:	f7f4 ff85 	bl	80023a0 <__aeabi_dsub>
 800d496:	b00b      	add	sp, #44	; 0x2c
 800d498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d49a:	4b30      	ldr	r3, [pc, #192]	; (800d55c <__kernel_cos+0x1ac>)
 800d49c:	429d      	cmp	r5, r3
 800d49e:	dc37      	bgt.n	800d510 <__kernel_cos+0x160>
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	492f      	ldr	r1, [pc, #188]	; (800d560 <__kernel_cos+0x1b0>)
 800d4a4:	0014      	movs	r4, r2
 800d4a6:	186b      	adds	r3, r5, r1
 800d4a8:	001d      	movs	r5, r3
 800d4aa:	0022      	movs	r2, r4
 800d4ac:	002b      	movs	r3, r5
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	4929      	ldr	r1, [pc, #164]	; (800d558 <__kernel_cos+0x1a8>)
 800d4b2:	f7f4 ff75 	bl	80023a0 <__aeabi_dsub>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	9006      	str	r0, [sp, #24]
 800d4ba:	9107      	str	r1, [sp, #28]
 800d4bc:	4b25      	ldr	r3, [pc, #148]	; (800d554 <__kernel_cos+0x1a4>)
 800d4be:	0030      	movs	r0, r6
 800d4c0:	0039      	movs	r1, r7
 800d4c2:	f7f4 fced 	bl	8001ea0 <__aeabi_dmul>
 800d4c6:	0022      	movs	r2, r4
 800d4c8:	002b      	movs	r3, r5
 800d4ca:	f7f4 ff69 	bl	80023a0 <__aeabi_dsub>
 800d4ce:	9a02      	ldr	r2, [sp, #8]
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	9008      	str	r0, [sp, #32]
 800d4d4:	9109      	str	r1, [sp, #36]	; 0x24
 800d4d6:	0030      	movs	r0, r6
 800d4d8:	0039      	movs	r1, r7
 800d4da:	f7f4 fce1 	bl	8001ea0 <__aeabi_dmul>
 800d4de:	9a04      	ldr	r2, [sp, #16]
 800d4e0:	9b05      	ldr	r3, [sp, #20]
 800d4e2:	0004      	movs	r4, r0
 800d4e4:	000d      	movs	r5, r1
 800d4e6:	9801      	ldr	r0, [sp, #4]
 800d4e8:	9900      	ldr	r1, [sp, #0]
 800d4ea:	f7f4 fcd9 	bl	8001ea0 <__aeabi_dmul>
 800d4ee:	0002      	movs	r2, r0
 800d4f0:	000b      	movs	r3, r1
 800d4f2:	0020      	movs	r0, r4
 800d4f4:	0029      	movs	r1, r5
 800d4f6:	f7f4 ff53 	bl	80023a0 <__aeabi_dsub>
 800d4fa:	0002      	movs	r2, r0
 800d4fc:	000b      	movs	r3, r1
 800d4fe:	9808      	ldr	r0, [sp, #32]
 800d500:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d502:	f7f4 ff4d 	bl	80023a0 <__aeabi_dsub>
 800d506:	0002      	movs	r2, r0
 800d508:	000b      	movs	r3, r1
 800d50a:	9806      	ldr	r0, [sp, #24]
 800d50c:	9907      	ldr	r1, [sp, #28]
 800d50e:	e7c0      	b.n	800d492 <__kernel_cos+0xe2>
 800d510:	2400      	movs	r4, #0
 800d512:	4d14      	ldr	r5, [pc, #80]	; (800d564 <__kernel_cos+0x1b4>)
 800d514:	e7c9      	b.n	800d4aa <__kernel_cos+0xfa>
 800d516:	2000      	movs	r0, #0
 800d518:	490f      	ldr	r1, [pc, #60]	; (800d558 <__kernel_cos+0x1a8>)
 800d51a:	e7bc      	b.n	800d496 <__kernel_cos+0xe6>
 800d51c:	3e3fffff 	.word	0x3e3fffff
 800d520:	be8838d4 	.word	0xbe8838d4
 800d524:	bda8fae9 	.word	0xbda8fae9
 800d528:	bdb4b1c4 	.word	0xbdb4b1c4
 800d52c:	3e21ee9e 	.word	0x3e21ee9e
 800d530:	809c52ad 	.word	0x809c52ad
 800d534:	3e927e4f 	.word	0x3e927e4f
 800d538:	19cb1590 	.word	0x19cb1590
 800d53c:	3efa01a0 	.word	0x3efa01a0
 800d540:	16c15177 	.word	0x16c15177
 800d544:	3f56c16c 	.word	0x3f56c16c
 800d548:	5555554c 	.word	0x5555554c
 800d54c:	3fa55555 	.word	0x3fa55555
 800d550:	3fd33332 	.word	0x3fd33332
 800d554:	3fe00000 	.word	0x3fe00000
 800d558:	3ff00000 	.word	0x3ff00000
 800d55c:	3fe90000 	.word	0x3fe90000
 800d560:	ffe00000 	.word	0xffe00000
 800d564:	3fd20000 	.word	0x3fd20000

0800d568 <__kernel_rem_pio2>:
 800d568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56a:	0015      	movs	r5, r2
 800d56c:	4cd4      	ldr	r4, [pc, #848]	; (800d8c0 <__kernel_rem_pio2+0x358>)
 800d56e:	44a5      	add	sp, r4
 800d570:	930c      	str	r3, [sp, #48]	; 0x30
 800d572:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d574:	900d      	str	r0, [sp, #52]	; 0x34
 800d576:	009a      	lsls	r2, r3, #2
 800d578:	4bd2      	ldr	r3, [pc, #840]	; (800d8c4 <__kernel_rem_pio2+0x35c>)
 800d57a:	9106      	str	r1, [sp, #24]
 800d57c:	58d3      	ldr	r3, [r2, r3]
 800d57e:	1ee8      	subs	r0, r5, #3
 800d580:	9308      	str	r3, [sp, #32]
 800d582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d584:	2118      	movs	r1, #24
 800d586:	3b01      	subs	r3, #1
 800d588:	930a      	str	r3, [sp, #40]	; 0x28
 800d58a:	f7f2 fe6b 	bl	8000264 <__divsi3>
 800d58e:	43c3      	mvns	r3, r0
 800d590:	0004      	movs	r4, r0
 800d592:	17db      	asrs	r3, r3, #31
 800d594:	401c      	ands	r4, r3
 800d596:	2318      	movs	r3, #24
 800d598:	1c62      	adds	r2, r4, #1
 800d59a:	425b      	negs	r3, r3
 800d59c:	4353      	muls	r3, r2
 800d59e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5a0:	195b      	adds	r3, r3, r5
 800d5a2:	4694      	mov	ip, r2
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	9302      	str	r3, [sp, #8]
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	1aa7      	subs	r7, r4, r2
 800d5ac:	4463      	add	r3, ip
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d5b2:	00be      	lsls	r6, r7, #2
 800d5b4:	199e      	adds	r6, r3, r6
 800d5b6:	9b00      	ldr	r3, [sp, #0]
 800d5b8:	429d      	cmp	r5, r3
 800d5ba:	dd0b      	ble.n	800d5d4 <__kernel_rem_pio2+0x6c>
 800d5bc:	2500      	movs	r5, #0
 800d5be:	9b08      	ldr	r3, [sp, #32]
 800d5c0:	429d      	cmp	r5, r3
 800d5c2:	dc3c      	bgt.n	800d63e <__kernel_rem_pio2+0xd6>
 800d5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5c6:	2600      	movs	r6, #0
 800d5c8:	195f      	adds	r7, r3, r5
 800d5ca:	00fb      	lsls	r3, r7, #3
 800d5cc:	9304      	str	r3, [sp, #16]
 800d5ce:	2700      	movs	r7, #0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	e028      	b.n	800d626 <__kernel_rem_pio2+0xbe>
 800d5d4:	42ef      	cmn	r7, r5
 800d5d6:	d40a      	bmi.n	800d5ee <__kernel_rem_pio2+0x86>
 800d5d8:	00ab      	lsls	r3, r5, #2
 800d5da:	58f0      	ldr	r0, [r6, r3]
 800d5dc:	f7f5 fa4a 	bl	8002a74 <__aeabi_i2d>
 800d5e0:	00eb      	lsls	r3, r5, #3
 800d5e2:	aa26      	add	r2, sp, #152	; 0x98
 800d5e4:	18d3      	adds	r3, r2, r3
 800d5e6:	6018      	str	r0, [r3, #0]
 800d5e8:	6059      	str	r1, [r3, #4]
 800d5ea:	3501      	adds	r5, #1
 800d5ec:	e7e3      	b.n	800d5b6 <__kernel_rem_pio2+0x4e>
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	e7f5      	b.n	800d5e0 <__kernel_rem_pio2+0x78>
 800d5f4:	9b00      	ldr	r3, [sp, #0]
 800d5f6:	9a04      	ldr	r2, [sp, #16]
 800d5f8:	00db      	lsls	r3, r3, #3
 800d5fa:	1ad1      	subs	r1, r2, r3
 800d5fc:	3908      	subs	r1, #8
 800d5fe:	aa26      	add	r2, sp, #152	; 0x98
 800d600:	1851      	adds	r1, r2, r1
 800d602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d604:	6808      	ldr	r0, [r1, #0]
 800d606:	6849      	ldr	r1, [r1, #4]
 800d608:	18d3      	adds	r3, r2, r3
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	f7f4 fc47 	bl	8001ea0 <__aeabi_dmul>
 800d612:	000b      	movs	r3, r1
 800d614:	0002      	movs	r2, r0
 800d616:	0039      	movs	r1, r7
 800d618:	0030      	movs	r0, r6
 800d61a:	f7f3 fcfd 	bl	8001018 <__aeabi_dadd>
 800d61e:	0006      	movs	r6, r0
 800d620:	000f      	movs	r7, r1
 800d622:	9b00      	ldr	r3, [sp, #0]
 800d624:	3301      	adds	r3, #1
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	9b00      	ldr	r3, [sp, #0]
 800d62a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d62c:	4293      	cmp	r3, r2
 800d62e:	dde1      	ble.n	800d5f4 <__kernel_rem_pio2+0x8c>
 800d630:	00eb      	lsls	r3, r5, #3
 800d632:	aa76      	add	r2, sp, #472	; 0x1d8
 800d634:	18d3      	adds	r3, r2, r3
 800d636:	601e      	str	r6, [r3, #0]
 800d638:	605f      	str	r7, [r3, #4]
 800d63a:	3501      	adds	r5, #1
 800d63c:	e7bf      	b.n	800d5be <__kernel_rem_pio2+0x56>
 800d63e:	9b08      	ldr	r3, [sp, #32]
 800d640:	aa12      	add	r2, sp, #72	; 0x48
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	189b      	adds	r3, r3, r2
 800d646:	9310      	str	r3, [sp, #64]	; 0x40
 800d648:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d64a:	00a4      	lsls	r4, r4, #2
 800d64c:	191b      	adds	r3, r3, r4
 800d64e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	425b      	negs	r3, r3
 800d656:	930e      	str	r3, [sp, #56]	; 0x38
 800d658:	9b08      	ldr	r3, [sp, #32]
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	9b00      	ldr	r3, [sp, #0]
 800d65e:	aa76      	add	r2, sp, #472	; 0x1d8
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	18d3      	adds	r3, r2, r3
 800d664:	681e      	ldr	r6, [r3, #0]
 800d666:	685f      	ldr	r7, [r3, #4]
 800d668:	9b00      	ldr	r3, [sp, #0]
 800d66a:	a912      	add	r1, sp, #72	; 0x48
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	185b      	adds	r3, r3, r1
 800d670:	9c00      	ldr	r4, [sp, #0]
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	9211      	str	r2, [sp, #68]	; 0x44
 800d676:	2c00      	cmp	r4, #0
 800d678:	dc73      	bgt.n	800d762 <__kernel_rem_pio2+0x1fa>
 800d67a:	9a02      	ldr	r2, [sp, #8]
 800d67c:	0030      	movs	r0, r6
 800d67e:	0039      	movs	r1, r7
 800d680:	f000 fdaa 	bl	800e1d8 <scalbn>
 800d684:	23ff      	movs	r3, #255	; 0xff
 800d686:	2200      	movs	r2, #0
 800d688:	059b      	lsls	r3, r3, #22
 800d68a:	0004      	movs	r4, r0
 800d68c:	000d      	movs	r5, r1
 800d68e:	f7f4 fc07 	bl	8001ea0 <__aeabi_dmul>
 800d692:	f000 fd17 	bl	800e0c4 <floor>
 800d696:	2200      	movs	r2, #0
 800d698:	4b8b      	ldr	r3, [pc, #556]	; (800d8c8 <__kernel_rem_pio2+0x360>)
 800d69a:	f7f4 fc01 	bl	8001ea0 <__aeabi_dmul>
 800d69e:	0002      	movs	r2, r0
 800d6a0:	000b      	movs	r3, r1
 800d6a2:	0020      	movs	r0, r4
 800d6a4:	0029      	movs	r1, r5
 800d6a6:	f7f4 fe7b 	bl	80023a0 <__aeabi_dsub>
 800d6aa:	000d      	movs	r5, r1
 800d6ac:	0004      	movs	r4, r0
 800d6ae:	f7f5 f9ad 	bl	8002a0c <__aeabi_d2iz>
 800d6b2:	9007      	str	r0, [sp, #28]
 800d6b4:	f7f5 f9de 	bl	8002a74 <__aeabi_i2d>
 800d6b8:	000b      	movs	r3, r1
 800d6ba:	0002      	movs	r2, r0
 800d6bc:	0029      	movs	r1, r5
 800d6be:	0020      	movs	r0, r4
 800d6c0:	f7f4 fe6e 	bl	80023a0 <__aeabi_dsub>
 800d6c4:	9b02      	ldr	r3, [sp, #8]
 800d6c6:	0006      	movs	r6, r0
 800d6c8:	000f      	movs	r7, r1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	dd72      	ble.n	800d7b4 <__kernel_rem_pio2+0x24c>
 800d6ce:	2118      	movs	r1, #24
 800d6d0:	9b00      	ldr	r3, [sp, #0]
 800d6d2:	aa12      	add	r2, sp, #72	; 0x48
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	589a      	ldr	r2, [r3, r2]
 800d6da:	9802      	ldr	r0, [sp, #8]
 800d6dc:	9c07      	ldr	r4, [sp, #28]
 800d6de:	1a09      	subs	r1, r1, r0
 800d6e0:	0010      	movs	r0, r2
 800d6e2:	4108      	asrs	r0, r1
 800d6e4:	1824      	adds	r4, r4, r0
 800d6e6:	4088      	lsls	r0, r1
 800d6e8:	1a10      	subs	r0, r2, r0
 800d6ea:	aa12      	add	r2, sp, #72	; 0x48
 800d6ec:	5098      	str	r0, [r3, r2]
 800d6ee:	2317      	movs	r3, #23
 800d6f0:	9a02      	ldr	r2, [sp, #8]
 800d6f2:	9407      	str	r4, [sp, #28]
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	4118      	asrs	r0, r3
 800d6f8:	9004      	str	r0, [sp, #16]
 800d6fa:	9b04      	ldr	r3, [sp, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	dd6b      	ble.n	800d7d8 <__kernel_rem_pio2+0x270>
 800d700:	9b07      	ldr	r3, [sp, #28]
 800d702:	2200      	movs	r2, #0
 800d704:	3301      	adds	r3, #1
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	2301      	movs	r3, #1
 800d70a:	2580      	movs	r5, #128	; 0x80
 800d70c:	0014      	movs	r4, r2
 800d70e:	469c      	mov	ip, r3
 800d710:	046d      	lsls	r5, r5, #17
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	4293      	cmp	r3, r2
 800d716:	dd00      	ble.n	800d71a <__kernel_rem_pio2+0x1b2>
 800d718:	e0a3      	b.n	800d862 <__kernel_rem_pio2+0x2fa>
 800d71a:	9b02      	ldr	r3, [sp, #8]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	dd05      	ble.n	800d72c <__kernel_rem_pio2+0x1c4>
 800d720:	2b01      	cmp	r3, #1
 800d722:	d100      	bne.n	800d726 <__kernel_rem_pio2+0x1be>
 800d724:	e0b1      	b.n	800d88a <__kernel_rem_pio2+0x322>
 800d726:	2b02      	cmp	r3, #2
 800d728:	d100      	bne.n	800d72c <__kernel_rem_pio2+0x1c4>
 800d72a:	e0b9      	b.n	800d8a0 <__kernel_rem_pio2+0x338>
 800d72c:	9b04      	ldr	r3, [sp, #16]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d152      	bne.n	800d7d8 <__kernel_rem_pio2+0x270>
 800d732:	0032      	movs	r2, r6
 800d734:	003b      	movs	r3, r7
 800d736:	2000      	movs	r0, #0
 800d738:	4964      	ldr	r1, [pc, #400]	; (800d8cc <__kernel_rem_pio2+0x364>)
 800d73a:	f7f4 fe31 	bl	80023a0 <__aeabi_dsub>
 800d73e:	0006      	movs	r6, r0
 800d740:	000f      	movs	r7, r1
 800d742:	2c00      	cmp	r4, #0
 800d744:	d048      	beq.n	800d7d8 <__kernel_rem_pio2+0x270>
 800d746:	9a02      	ldr	r2, [sp, #8]
 800d748:	2000      	movs	r0, #0
 800d74a:	4960      	ldr	r1, [pc, #384]	; (800d8cc <__kernel_rem_pio2+0x364>)
 800d74c:	f000 fd44 	bl	800e1d8 <scalbn>
 800d750:	0002      	movs	r2, r0
 800d752:	000b      	movs	r3, r1
 800d754:	0030      	movs	r0, r6
 800d756:	0039      	movs	r1, r7
 800d758:	f7f4 fe22 	bl	80023a0 <__aeabi_dsub>
 800d75c:	0006      	movs	r6, r0
 800d75e:	000f      	movs	r7, r1
 800d760:	e03a      	b.n	800d7d8 <__kernel_rem_pio2+0x270>
 800d762:	2200      	movs	r2, #0
 800d764:	4b5a      	ldr	r3, [pc, #360]	; (800d8d0 <__kernel_rem_pio2+0x368>)
 800d766:	0030      	movs	r0, r6
 800d768:	0039      	movs	r1, r7
 800d76a:	f7f4 fb99 	bl	8001ea0 <__aeabi_dmul>
 800d76e:	f7f5 f94d 	bl	8002a0c <__aeabi_d2iz>
 800d772:	f7f5 f97f 	bl	8002a74 <__aeabi_i2d>
 800d776:	2200      	movs	r2, #0
 800d778:	4b56      	ldr	r3, [pc, #344]	; (800d8d4 <__kernel_rem_pio2+0x36c>)
 800d77a:	9004      	str	r0, [sp, #16]
 800d77c:	9105      	str	r1, [sp, #20]
 800d77e:	f7f4 fb8f 	bl	8001ea0 <__aeabi_dmul>
 800d782:	0002      	movs	r2, r0
 800d784:	000b      	movs	r3, r1
 800d786:	0030      	movs	r0, r6
 800d788:	0039      	movs	r1, r7
 800d78a:	f7f4 fe09 	bl	80023a0 <__aeabi_dsub>
 800d78e:	f7f5 f93d 	bl	8002a0c <__aeabi_d2iz>
 800d792:	00a5      	lsls	r5, r4, #2
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d798:	426d      	negs	r5, r5
 800d79a:	3c01      	subs	r4, #1
 800d79c:	5158      	str	r0, [r3, r5]
 800d79e:	00e3      	lsls	r3, r4, #3
 800d7a0:	18d3      	adds	r3, r2, r3
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	9804      	ldr	r0, [sp, #16]
 800d7a8:	9905      	ldr	r1, [sp, #20]
 800d7aa:	f7f3 fc35 	bl	8001018 <__aeabi_dadd>
 800d7ae:	0006      	movs	r6, r0
 800d7b0:	000f      	movs	r7, r1
 800d7b2:	e760      	b.n	800d676 <__kernel_rem_pio2+0x10e>
 800d7b4:	9b02      	ldr	r3, [sp, #8]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d107      	bne.n	800d7ca <__kernel_rem_pio2+0x262>
 800d7ba:	9b00      	ldr	r3, [sp, #0]
 800d7bc:	aa12      	add	r2, sp, #72	; 0x48
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	5898      	ldr	r0, [r3, r2]
 800d7c4:	15c3      	asrs	r3, r0, #23
 800d7c6:	9304      	str	r3, [sp, #16]
 800d7c8:	e797      	b.n	800d6fa <__kernel_rem_pio2+0x192>
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	4b42      	ldr	r3, [pc, #264]	; (800d8d8 <__kernel_rem_pio2+0x370>)
 800d7ce:	f7f2 fe69 	bl	80004a4 <__aeabi_dcmpge>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d142      	bne.n	800d85c <__kernel_rem_pio2+0x2f4>
 800d7d6:	9004      	str	r0, [sp, #16]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	0030      	movs	r0, r6
 800d7de:	0039      	movs	r1, r7
 800d7e0:	f7f2 fe3c 	bl	800045c <__aeabi_dcmpeq>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d100      	bne.n	800d7ea <__kernel_rem_pio2+0x282>
 800d7e8:	e0b4      	b.n	800d954 <__kernel_rem_pio2+0x3ec>
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	9b00      	ldr	r3, [sp, #0]
 800d7ee:	1e59      	subs	r1, r3, #1
 800d7f0:	9808      	ldr	r0, [sp, #32]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	4298      	cmp	r0, r3
 800d7f6:	dd5c      	ble.n	800d8b2 <__kernel_rem_pio2+0x34a>
 800d7f8:	2a00      	cmp	r2, #0
 800d7fa:	d000      	beq.n	800d7fe <__kernel_rem_pio2+0x296>
 800d7fc:	e084      	b.n	800d908 <__kernel_rem_pio2+0x3a0>
 800d7fe:	2301      	movs	r3, #1
 800d800:	009a      	lsls	r2, r3, #2
 800d802:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d804:	4252      	negs	r2, r2
 800d806:	588a      	ldr	r2, [r1, r2]
 800d808:	2a00      	cmp	r2, #0
 800d80a:	d057      	beq.n	800d8bc <__kernel_rem_pio2+0x354>
 800d80c:	9a00      	ldr	r2, [sp, #0]
 800d80e:	9900      	ldr	r1, [sp, #0]
 800d810:	1c57      	adds	r7, r2, #1
 800d812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d814:	18cb      	adds	r3, r1, r3
 800d816:	1854      	adds	r4, r2, r1
 800d818:	00e4      	lsls	r4, r4, #3
 800d81a:	9304      	str	r3, [sp, #16]
 800d81c:	9b04      	ldr	r3, [sp, #16]
 800d81e:	429f      	cmp	r7, r3
 800d820:	dd00      	ble.n	800d824 <__kernel_rem_pio2+0x2bc>
 800d822:	e71a      	b.n	800d65a <__kernel_rem_pio2+0xf2>
 800d824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d826:	ab26      	add	r3, sp, #152	; 0x98
 800d828:	191e      	adds	r6, r3, r4
 800d82a:	00bb      	lsls	r3, r7, #2
 800d82c:	58d0      	ldr	r0, [r2, r3]
 800d82e:	f7f5 f921 	bl	8002a74 <__aeabi_i2d>
 800d832:	2200      	movs	r2, #0
 800d834:	2300      	movs	r3, #0
 800d836:	2500      	movs	r5, #0
 800d838:	6030      	str	r0, [r6, #0]
 800d83a:	6071      	str	r1, [r6, #4]
 800d83c:	9200      	str	r2, [sp, #0]
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	429d      	cmp	r5, r3
 800d844:	dd4c      	ble.n	800d8e0 <__kernel_rem_pio2+0x378>
 800d846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d848:	aa76      	add	r2, sp, #472	; 0x1d8
 800d84a:	18e3      	adds	r3, r4, r3
 800d84c:	18d3      	adds	r3, r2, r3
 800d84e:	3701      	adds	r7, #1
 800d850:	9900      	ldr	r1, [sp, #0]
 800d852:	9a01      	ldr	r2, [sp, #4]
 800d854:	3408      	adds	r4, #8
 800d856:	6099      	str	r1, [r3, #8]
 800d858:	60da      	str	r2, [r3, #12]
 800d85a:	e7df      	b.n	800d81c <__kernel_rem_pio2+0x2b4>
 800d85c:	2302      	movs	r3, #2
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	e74e      	b.n	800d700 <__kernel_rem_pio2+0x198>
 800d862:	0091      	lsls	r1, r2, #2
 800d864:	ab12      	add	r3, sp, #72	; 0x48
 800d866:	58cb      	ldr	r3, [r1, r3]
 800d868:	2c00      	cmp	r4, #0
 800d86a:	d108      	bne.n	800d87e <__kernel_rem_pio2+0x316>
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d003      	beq.n	800d878 <__kernel_rem_pio2+0x310>
 800d870:	1aeb      	subs	r3, r5, r3
 800d872:	ac12      	add	r4, sp, #72	; 0x48
 800d874:	510b      	str	r3, [r1, r4]
 800d876:	4663      	mov	r3, ip
 800d878:	3201      	adds	r2, #1
 800d87a:	001c      	movs	r4, r3
 800d87c:	e749      	b.n	800d712 <__kernel_rem_pio2+0x1aa>
 800d87e:	4817      	ldr	r0, [pc, #92]	; (800d8dc <__kernel_rem_pio2+0x374>)
 800d880:	1ac3      	subs	r3, r0, r3
 800d882:	a812      	add	r0, sp, #72	; 0x48
 800d884:	500b      	str	r3, [r1, r0]
 800d886:	0023      	movs	r3, r4
 800d888:	e7f6      	b.n	800d878 <__kernel_rem_pio2+0x310>
 800d88a:	9b00      	ldr	r3, [sp, #0]
 800d88c:	aa12      	add	r2, sp, #72	; 0x48
 800d88e:	3b01      	subs	r3, #1
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	589a      	ldr	r2, [r3, r2]
 800d894:	9211      	str	r2, [sp, #68]	; 0x44
 800d896:	0252      	lsls	r2, r2, #9
 800d898:	0a52      	lsrs	r2, r2, #9
 800d89a:	a912      	add	r1, sp, #72	; 0x48
 800d89c:	505a      	str	r2, [r3, r1]
 800d89e:	e745      	b.n	800d72c <__kernel_rem_pio2+0x1c4>
 800d8a0:	9b00      	ldr	r3, [sp, #0]
 800d8a2:	aa12      	add	r2, sp, #72	; 0x48
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	589a      	ldr	r2, [r3, r2]
 800d8aa:	9211      	str	r2, [sp, #68]	; 0x44
 800d8ac:	0292      	lsls	r2, r2, #10
 800d8ae:	0a92      	lsrs	r2, r2, #10
 800d8b0:	e7f3      	b.n	800d89a <__kernel_rem_pio2+0x332>
 800d8b2:	0098      	lsls	r0, r3, #2
 800d8b4:	ac12      	add	r4, sp, #72	; 0x48
 800d8b6:	5900      	ldr	r0, [r0, r4]
 800d8b8:	4302      	orrs	r2, r0
 800d8ba:	e799      	b.n	800d7f0 <__kernel_rem_pio2+0x288>
 800d8bc:	3301      	adds	r3, #1
 800d8be:	e79f      	b.n	800d800 <__kernel_rem_pio2+0x298>
 800d8c0:	fffffd84 	.word	0xfffffd84
 800d8c4:	0800fcb0 	.word	0x0800fcb0
 800d8c8:	40200000 	.word	0x40200000
 800d8cc:	3ff00000 	.word	0x3ff00000
 800d8d0:	3e700000 	.word	0x3e700000
 800d8d4:	41700000 	.word	0x41700000
 800d8d8:	3fe00000 	.word	0x3fe00000
 800d8dc:	00ffffff 	.word	0x00ffffff
 800d8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8e2:	00eb      	lsls	r3, r5, #3
 800d8e4:	18d1      	adds	r1, r2, r3
 800d8e6:	1af3      	subs	r3, r6, r3
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	6808      	ldr	r0, [r1, #0]
 800d8ee:	6849      	ldr	r1, [r1, #4]
 800d8f0:	f7f4 fad6 	bl	8001ea0 <__aeabi_dmul>
 800d8f4:	0002      	movs	r2, r0
 800d8f6:	000b      	movs	r3, r1
 800d8f8:	9800      	ldr	r0, [sp, #0]
 800d8fa:	9901      	ldr	r1, [sp, #4]
 800d8fc:	f7f3 fb8c 	bl	8001018 <__aeabi_dadd>
 800d900:	3501      	adds	r5, #1
 800d902:	9000      	str	r0, [sp, #0]
 800d904:	9101      	str	r1, [sp, #4]
 800d906:	e79b      	b.n	800d840 <__kernel_rem_pio2+0x2d8>
 800d908:	9b02      	ldr	r3, [sp, #8]
 800d90a:	9100      	str	r1, [sp, #0]
 800d90c:	3b18      	subs	r3, #24
 800d90e:	9302      	str	r3, [sp, #8]
 800d910:	9b00      	ldr	r3, [sp, #0]
 800d912:	aa12      	add	r2, sp, #72	; 0x48
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	589b      	ldr	r3, [r3, r2]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d014      	beq.n	800d946 <__kernel_rem_pio2+0x3de>
 800d91c:	9a02      	ldr	r2, [sp, #8]
 800d91e:	2000      	movs	r0, #0
 800d920:	49c7      	ldr	r1, [pc, #796]	; (800dc40 <__kernel_rem_pio2+0x6d8>)
 800d922:	f000 fc59 	bl	800e1d8 <scalbn>
 800d926:	0006      	movs	r6, r0
 800d928:	000f      	movs	r7, r1
 800d92a:	9c00      	ldr	r4, [sp, #0]
 800d92c:	2c00      	cmp	r4, #0
 800d92e:	da4e      	bge.n	800d9ce <__kernel_rem_pio2+0x466>
 800d930:	2500      	movs	r5, #0
 800d932:	9b00      	ldr	r3, [sp, #0]
 800d934:	1b5b      	subs	r3, r3, r5
 800d936:	d500      	bpl.n	800d93a <__kernel_rem_pio2+0x3d2>
 800d938:	e083      	b.n	800da42 <__kernel_rem_pio2+0x4da>
 800d93a:	00db      	lsls	r3, r3, #3
 800d93c:	9302      	str	r3, [sp, #8]
 800d93e:	2600      	movs	r6, #0
 800d940:	2700      	movs	r7, #0
 800d942:	2400      	movs	r4, #0
 800d944:	e071      	b.n	800da2a <__kernel_rem_pio2+0x4c2>
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	3b01      	subs	r3, #1
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	9b02      	ldr	r3, [sp, #8]
 800d94e:	3b18      	subs	r3, #24
 800d950:	9302      	str	r3, [sp, #8]
 800d952:	e7dd      	b.n	800d910 <__kernel_rem_pio2+0x3a8>
 800d954:	9b02      	ldr	r3, [sp, #8]
 800d956:	0030      	movs	r0, r6
 800d958:	425a      	negs	r2, r3
 800d95a:	0039      	movs	r1, r7
 800d95c:	f000 fc3c 	bl	800e1d8 <scalbn>
 800d960:	2200      	movs	r2, #0
 800d962:	4bb8      	ldr	r3, [pc, #736]	; (800dc44 <__kernel_rem_pio2+0x6dc>)
 800d964:	0004      	movs	r4, r0
 800d966:	000d      	movs	r5, r1
 800d968:	f7f2 fd9c 	bl	80004a4 <__aeabi_dcmpge>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d025      	beq.n	800d9bc <__kernel_rem_pio2+0x454>
 800d970:	2200      	movs	r2, #0
 800d972:	4bb5      	ldr	r3, [pc, #724]	; (800dc48 <__kernel_rem_pio2+0x6e0>)
 800d974:	0020      	movs	r0, r4
 800d976:	0029      	movs	r1, r5
 800d978:	f7f4 fa92 	bl	8001ea0 <__aeabi_dmul>
 800d97c:	f7f5 f846 	bl	8002a0c <__aeabi_d2iz>
 800d980:	9b00      	ldr	r3, [sp, #0]
 800d982:	0006      	movs	r6, r0
 800d984:	009f      	lsls	r7, r3, #2
 800d986:	f7f5 f875 	bl	8002a74 <__aeabi_i2d>
 800d98a:	2200      	movs	r2, #0
 800d98c:	4bad      	ldr	r3, [pc, #692]	; (800dc44 <__kernel_rem_pio2+0x6dc>)
 800d98e:	f7f4 fa87 	bl	8001ea0 <__aeabi_dmul>
 800d992:	0002      	movs	r2, r0
 800d994:	000b      	movs	r3, r1
 800d996:	0020      	movs	r0, r4
 800d998:	0029      	movs	r1, r5
 800d99a:	f7f4 fd01 	bl	80023a0 <__aeabi_dsub>
 800d99e:	f7f5 f835 	bl	8002a0c <__aeabi_d2iz>
 800d9a2:	ab12      	add	r3, sp, #72	; 0x48
 800d9a4:	50f8      	str	r0, [r7, r3]
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	aa12      	add	r2, sp, #72	; 0x48
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	9b02      	ldr	r3, [sp, #8]
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	9302      	str	r3, [sp, #8]
 800d9b4:	9b00      	ldr	r3, [sp, #0]
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	509e      	str	r6, [r3, r2]
 800d9ba:	e7af      	b.n	800d91c <__kernel_rem_pio2+0x3b4>
 800d9bc:	9b00      	ldr	r3, [sp, #0]
 800d9be:	0020      	movs	r0, r4
 800d9c0:	0029      	movs	r1, r5
 800d9c2:	009e      	lsls	r6, r3, #2
 800d9c4:	f7f5 f822 	bl	8002a0c <__aeabi_d2iz>
 800d9c8:	ab12      	add	r3, sp, #72	; 0x48
 800d9ca:	50f0      	str	r0, [r6, r3]
 800d9cc:	e7a6      	b.n	800d91c <__kernel_rem_pio2+0x3b4>
 800d9ce:	00e5      	lsls	r5, r4, #3
 800d9d0:	ab76      	add	r3, sp, #472	; 0x1d8
 800d9d2:	aa12      	add	r2, sp, #72	; 0x48
 800d9d4:	195d      	adds	r5, r3, r5
 800d9d6:	00a3      	lsls	r3, r4, #2
 800d9d8:	5898      	ldr	r0, [r3, r2]
 800d9da:	f7f5 f84b 	bl	8002a74 <__aeabi_i2d>
 800d9de:	0032      	movs	r2, r6
 800d9e0:	003b      	movs	r3, r7
 800d9e2:	f7f4 fa5d 	bl	8001ea0 <__aeabi_dmul>
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	6028      	str	r0, [r5, #0]
 800d9ea:	6069      	str	r1, [r5, #4]
 800d9ec:	4b96      	ldr	r3, [pc, #600]	; (800dc48 <__kernel_rem_pio2+0x6e0>)
 800d9ee:	0030      	movs	r0, r6
 800d9f0:	0039      	movs	r1, r7
 800d9f2:	f7f4 fa55 	bl	8001ea0 <__aeabi_dmul>
 800d9f6:	3c01      	subs	r4, #1
 800d9f8:	0006      	movs	r6, r0
 800d9fa:	000f      	movs	r7, r1
 800d9fc:	e796      	b.n	800d92c <__kernel_rem_pio2+0x3c4>
 800d9fe:	9a02      	ldr	r2, [sp, #8]
 800da00:	00e3      	lsls	r3, r4, #3
 800da02:	1899      	adds	r1, r3, r2
 800da04:	aa76      	add	r2, sp, #472	; 0x1d8
 800da06:	1851      	adds	r1, r2, r1
 800da08:	4a90      	ldr	r2, [pc, #576]	; (800dc4c <__kernel_rem_pio2+0x6e4>)
 800da0a:	6808      	ldr	r0, [r1, #0]
 800da0c:	6849      	ldr	r1, [r1, #4]
 800da0e:	18d3      	adds	r3, r2, r3
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	f7f4 fa44 	bl	8001ea0 <__aeabi_dmul>
 800da18:	0002      	movs	r2, r0
 800da1a:	000b      	movs	r3, r1
 800da1c:	0030      	movs	r0, r6
 800da1e:	0039      	movs	r1, r7
 800da20:	f7f3 fafa 	bl	8001018 <__aeabi_dadd>
 800da24:	0006      	movs	r6, r0
 800da26:	000f      	movs	r7, r1
 800da28:	3401      	adds	r4, #1
 800da2a:	9b08      	ldr	r3, [sp, #32]
 800da2c:	429c      	cmp	r4, r3
 800da2e:	dc01      	bgt.n	800da34 <__kernel_rem_pio2+0x4cc>
 800da30:	42ac      	cmp	r4, r5
 800da32:	dde4      	ble.n	800d9fe <__kernel_rem_pio2+0x496>
 800da34:	00eb      	lsls	r3, r5, #3
 800da36:	aa4e      	add	r2, sp, #312	; 0x138
 800da38:	18d3      	adds	r3, r2, r3
 800da3a:	601e      	str	r6, [r3, #0]
 800da3c:	605f      	str	r7, [r3, #4]
 800da3e:	3501      	adds	r5, #1
 800da40:	e777      	b.n	800d932 <__kernel_rem_pio2+0x3ca>
 800da42:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800da44:	2b03      	cmp	r3, #3
 800da46:	d83d      	bhi.n	800dac4 <__kernel_rem_pio2+0x55c>
 800da48:	0018      	movs	r0, r3
 800da4a:	f7f2 fb63 	bl	8000114 <__gnu_thumb1_case_uqi>
 800da4e:	022b      	.short	0x022b
 800da50:	4302      	.short	0x4302
 800da52:	2600      	movs	r6, #0
 800da54:	0035      	movs	r5, r6
 800da56:	9c00      	ldr	r4, [sp, #0]
 800da58:	2c00      	cmp	r4, #0
 800da5a:	db00      	blt.n	800da5e <__kernel_rem_pio2+0x4f6>
 800da5c:	e073      	b.n	800db46 <__kernel_rem_pio2+0x5de>
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	0029      	movs	r1, r5
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <__kernel_rem_pio2+0x504>
 800da66:	2380      	movs	r3, #128	; 0x80
 800da68:	061b      	lsls	r3, r3, #24
 800da6a:	18e9      	adds	r1, r5, r3
 800da6c:	000b      	movs	r3, r1
 800da6e:	0032      	movs	r2, r6
 800da70:	9906      	ldr	r1, [sp, #24]
 800da72:	2401      	movs	r4, #1
 800da74:	600a      	str	r2, [r1, #0]
 800da76:	604b      	str	r3, [r1, #4]
 800da78:	984e      	ldr	r0, [sp, #312]	; 0x138
 800da7a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800da7c:	0032      	movs	r2, r6
 800da7e:	002b      	movs	r3, r5
 800da80:	f7f4 fc8e 	bl	80023a0 <__aeabi_dsub>
 800da84:	9b00      	ldr	r3, [sp, #0]
 800da86:	42a3      	cmp	r3, r4
 800da88:	db00      	blt.n	800da8c <__kernel_rem_pio2+0x524>
 800da8a:	e069      	b.n	800db60 <__kernel_rem_pio2+0x5f8>
 800da8c:	9b04      	ldr	r3, [sp, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <__kernel_rem_pio2+0x530>
 800da92:	2380      	movs	r3, #128	; 0x80
 800da94:	061b      	lsls	r3, r3, #24
 800da96:	18c9      	adds	r1, r1, r3
 800da98:	000b      	movs	r3, r1
 800da9a:	0002      	movs	r2, r0
 800da9c:	9906      	ldr	r1, [sp, #24]
 800da9e:	608a      	str	r2, [r1, #8]
 800daa0:	60cb      	str	r3, [r1, #12]
 800daa2:	e00f      	b.n	800dac4 <__kernel_rem_pio2+0x55c>
 800daa4:	2500      	movs	r5, #0
 800daa6:	002c      	movs	r4, r5
 800daa8:	9b00      	ldr	r3, [sp, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	da3b      	bge.n	800db26 <__kernel_rem_pio2+0x5be>
 800daae:	9b04      	ldr	r3, [sp, #16]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <__kernel_rem_pio2+0x552>
 800dab4:	2380      	movs	r3, #128	; 0x80
 800dab6:	061b      	lsls	r3, r3, #24
 800dab8:	18e4      	adds	r4, r4, r3
 800daba:	002a      	movs	r2, r5
 800dabc:	0023      	movs	r3, r4
 800dabe:	9906      	ldr	r1, [sp, #24]
 800dac0:	600a      	str	r2, [r1, #0]
 800dac2:	604b      	str	r3, [r1, #4]
 800dac4:	2007      	movs	r0, #7
 800dac6:	9b07      	ldr	r3, [sp, #28]
 800dac8:	4003      	ands	r3, r0
 800daca:	0018      	movs	r0, r3
 800dacc:	239f      	movs	r3, #159	; 0x9f
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	449d      	add	sp, r3
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad4:	9b00      	ldr	r3, [sp, #0]
 800dad6:	00dc      	lsls	r4, r3, #3
 800dad8:	ab4e      	add	r3, sp, #312	; 0x138
 800dada:	191c      	adds	r4, r3, r4
 800dadc:	0025      	movs	r5, r4
 800dade:	9b00      	ldr	r3, [sp, #0]
 800dae0:	9302      	str	r3, [sp, #8]
 800dae2:	9b02      	ldr	r3, [sp, #8]
 800dae4:	3d08      	subs	r5, #8
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dc43      	bgt.n	800db72 <__kernel_rem_pio2+0x60a>
 800daea:	9d00      	ldr	r5, [sp, #0]
 800daec:	3c08      	subs	r4, #8
 800daee:	2d01      	cmp	r5, #1
 800daf0:	dc5f      	bgt.n	800dbb2 <__kernel_rem_pio2+0x64a>
 800daf2:	2500      	movs	r5, #0
 800daf4:	002c      	movs	r4, r5
 800daf6:	9b00      	ldr	r3, [sp, #0]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	dd00      	ble.n	800dafe <__kernel_rem_pio2+0x596>
 800dafc:	e077      	b.n	800dbee <__kernel_rem_pio2+0x686>
 800dafe:	9b04      	ldr	r3, [sp, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d000      	beq.n	800db06 <__kernel_rem_pio2+0x59e>
 800db04:	e083      	b.n	800dc0e <__kernel_rem_pio2+0x6a6>
 800db06:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800db08:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800db0a:	9906      	ldr	r1, [sp, #24]
 800db0c:	600a      	str	r2, [r1, #0]
 800db0e:	604b      	str	r3, [r1, #4]
 800db10:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800db12:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800db14:	9200      	str	r2, [sp, #0]
 800db16:	9301      	str	r3, [sp, #4]
 800db18:	608a      	str	r2, [r1, #8]
 800db1a:	60cb      	str	r3, [r1, #12]
 800db1c:	002a      	movs	r2, r5
 800db1e:	0023      	movs	r3, r4
 800db20:	610a      	str	r2, [r1, #16]
 800db22:	614b      	str	r3, [r1, #20]
 800db24:	e7ce      	b.n	800dac4 <__kernel_rem_pio2+0x55c>
 800db26:	9b00      	ldr	r3, [sp, #0]
 800db28:	aa4e      	add	r2, sp, #312	; 0x138
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	18d3      	adds	r3, r2, r3
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	0028      	movs	r0, r5
 800db34:	0021      	movs	r1, r4
 800db36:	f7f3 fa6f 	bl	8001018 <__aeabi_dadd>
 800db3a:	9b00      	ldr	r3, [sp, #0]
 800db3c:	0005      	movs	r5, r0
 800db3e:	3b01      	subs	r3, #1
 800db40:	000c      	movs	r4, r1
 800db42:	9300      	str	r3, [sp, #0]
 800db44:	e7b0      	b.n	800daa8 <__kernel_rem_pio2+0x540>
 800db46:	00e3      	lsls	r3, r4, #3
 800db48:	aa4e      	add	r2, sp, #312	; 0x138
 800db4a:	18d3      	adds	r3, r2, r3
 800db4c:	0030      	movs	r0, r6
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	0029      	movs	r1, r5
 800db54:	f7f3 fa60 	bl	8001018 <__aeabi_dadd>
 800db58:	3c01      	subs	r4, #1
 800db5a:	0006      	movs	r6, r0
 800db5c:	000d      	movs	r5, r1
 800db5e:	e77b      	b.n	800da58 <__kernel_rem_pio2+0x4f0>
 800db60:	00e3      	lsls	r3, r4, #3
 800db62:	aa4e      	add	r2, sp, #312	; 0x138
 800db64:	18d3      	adds	r3, r2, r3
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	f7f3 fa55 	bl	8001018 <__aeabi_dadd>
 800db6e:	3401      	adds	r4, #1
 800db70:	e788      	b.n	800da84 <__kernel_rem_pio2+0x51c>
 800db72:	9b02      	ldr	r3, [sp, #8]
 800db74:	3b01      	subs	r3, #1
 800db76:	9302      	str	r3, [sp, #8]
 800db78:	682a      	ldr	r2, [r5, #0]
 800db7a:	686b      	ldr	r3, [r5, #4]
 800db7c:	9208      	str	r2, [sp, #32]
 800db7e:	9309      	str	r3, [sp, #36]	; 0x24
 800db80:	9808      	ldr	r0, [sp, #32]
 800db82:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db84:	68aa      	ldr	r2, [r5, #8]
 800db86:	68eb      	ldr	r3, [r5, #12]
 800db88:	920a      	str	r2, [sp, #40]	; 0x28
 800db8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db8c:	f7f3 fa44 	bl	8001018 <__aeabi_dadd>
 800db90:	0002      	movs	r2, r0
 800db92:	000b      	movs	r3, r1
 800db94:	0006      	movs	r6, r0
 800db96:	000f      	movs	r7, r1
 800db98:	9808      	ldr	r0, [sp, #32]
 800db9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db9c:	f7f4 fc00 	bl	80023a0 <__aeabi_dsub>
 800dba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dba4:	f7f3 fa38 	bl	8001018 <__aeabi_dadd>
 800dba8:	602e      	str	r6, [r5, #0]
 800dbaa:	606f      	str	r7, [r5, #4]
 800dbac:	60a8      	str	r0, [r5, #8]
 800dbae:	60e9      	str	r1, [r5, #12]
 800dbb0:	e797      	b.n	800dae2 <__kernel_rem_pio2+0x57a>
 800dbb2:	6826      	ldr	r6, [r4, #0]
 800dbb4:	6867      	ldr	r7, [r4, #4]
 800dbb6:	68a2      	ldr	r2, [r4, #8]
 800dbb8:	68e3      	ldr	r3, [r4, #12]
 800dbba:	0030      	movs	r0, r6
 800dbbc:	0039      	movs	r1, r7
 800dbbe:	9202      	str	r2, [sp, #8]
 800dbc0:	9303      	str	r3, [sp, #12]
 800dbc2:	f7f3 fa29 	bl	8001018 <__aeabi_dadd>
 800dbc6:	9008      	str	r0, [sp, #32]
 800dbc8:	9109      	str	r1, [sp, #36]	; 0x24
 800dbca:	0002      	movs	r2, r0
 800dbcc:	000b      	movs	r3, r1
 800dbce:	0030      	movs	r0, r6
 800dbd0:	0039      	movs	r1, r7
 800dbd2:	f7f4 fbe5 	bl	80023a0 <__aeabi_dsub>
 800dbd6:	9a02      	ldr	r2, [sp, #8]
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	f7f3 fa1d 	bl	8001018 <__aeabi_dadd>
 800dbde:	9a08      	ldr	r2, [sp, #32]
 800dbe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe2:	3d01      	subs	r5, #1
 800dbe4:	60a0      	str	r0, [r4, #8]
 800dbe6:	60e1      	str	r1, [r4, #12]
 800dbe8:	6022      	str	r2, [r4, #0]
 800dbea:	6063      	str	r3, [r4, #4]
 800dbec:	e77e      	b.n	800daec <__kernel_rem_pio2+0x584>
 800dbee:	9b00      	ldr	r3, [sp, #0]
 800dbf0:	aa4e      	add	r2, sp, #312	; 0x138
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	18d3      	adds	r3, r2, r3
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	0028      	movs	r0, r5
 800dbfc:	0021      	movs	r1, r4
 800dbfe:	f7f3 fa0b 	bl	8001018 <__aeabi_dadd>
 800dc02:	9b00      	ldr	r3, [sp, #0]
 800dc04:	0005      	movs	r5, r0
 800dc06:	3b01      	subs	r3, #1
 800dc08:	000c      	movs	r4, r1
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	e773      	b.n	800daf6 <__kernel_rem_pio2+0x58e>
 800dc0e:	9b06      	ldr	r3, [sp, #24]
 800dc10:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	2280      	movs	r2, #128	; 0x80
 800dc16:	0612      	lsls	r2, r2, #24
 800dc18:	4694      	mov	ip, r2
 800dc1a:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800dc1c:	9a06      	ldr	r2, [sp, #24]
 800dc1e:	4463      	add	r3, ip
 800dc20:	6053      	str	r3, [r2, #4]
 800dc22:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	0013      	movs	r3, r2
 800dc28:	9a00      	ldr	r2, [sp, #0]
 800dc2a:	609a      	str	r2, [r3, #8]
 800dc2c:	4662      	mov	r2, ip
 800dc2e:	9b51      	ldr	r3, [sp, #324]	; 0x144
 800dc30:	189b      	adds	r3, r3, r2
 800dc32:	9a06      	ldr	r2, [sp, #24]
 800dc34:	60d3      	str	r3, [r2, #12]
 800dc36:	4663      	mov	r3, ip
 800dc38:	18e4      	adds	r4, r4, r3
 800dc3a:	6115      	str	r5, [r2, #16]
 800dc3c:	6154      	str	r4, [r2, #20]
 800dc3e:	e741      	b.n	800dac4 <__kernel_rem_pio2+0x55c>
 800dc40:	3ff00000 	.word	0x3ff00000
 800dc44:	41700000 	.word	0x41700000
 800dc48:	3e700000 	.word	0x3e700000
 800dc4c:	0800fc70 	.word	0x0800fc70

0800dc50 <__kernel_sin>:
 800dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc52:	b089      	sub	sp, #36	; 0x24
 800dc54:	9202      	str	r2, [sp, #8]
 800dc56:	9303      	str	r3, [sp, #12]
 800dc58:	4a46      	ldr	r2, [pc, #280]	; (800dd74 <__kernel_sin+0x124>)
 800dc5a:	004b      	lsls	r3, r1, #1
 800dc5c:	0005      	movs	r5, r0
 800dc5e:	000c      	movs	r4, r1
 800dc60:	085b      	lsrs	r3, r3, #1
 800dc62:	4293      	cmp	r3, r2
 800dc64:	dc03      	bgt.n	800dc6e <__kernel_sin+0x1e>
 800dc66:	f7f4 fed1 	bl	8002a0c <__aeabi_d2iz>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d04c      	beq.n	800dd08 <__kernel_sin+0xb8>
 800dc6e:	002a      	movs	r2, r5
 800dc70:	0023      	movs	r3, r4
 800dc72:	0028      	movs	r0, r5
 800dc74:	0021      	movs	r1, r4
 800dc76:	f7f4 f913 	bl	8001ea0 <__aeabi_dmul>
 800dc7a:	0006      	movs	r6, r0
 800dc7c:	000f      	movs	r7, r1
 800dc7e:	0002      	movs	r2, r0
 800dc80:	000b      	movs	r3, r1
 800dc82:	0028      	movs	r0, r5
 800dc84:	0021      	movs	r1, r4
 800dc86:	f7f4 f90b 	bl	8001ea0 <__aeabi_dmul>
 800dc8a:	4a3b      	ldr	r2, [pc, #236]	; (800dd78 <__kernel_sin+0x128>)
 800dc8c:	9000      	str	r0, [sp, #0]
 800dc8e:	9101      	str	r1, [sp, #4]
 800dc90:	4b3a      	ldr	r3, [pc, #232]	; (800dd7c <__kernel_sin+0x12c>)
 800dc92:	0030      	movs	r0, r6
 800dc94:	0039      	movs	r1, r7
 800dc96:	f7f4 f903 	bl	8001ea0 <__aeabi_dmul>
 800dc9a:	4a39      	ldr	r2, [pc, #228]	; (800dd80 <__kernel_sin+0x130>)
 800dc9c:	4b39      	ldr	r3, [pc, #228]	; (800dd84 <__kernel_sin+0x134>)
 800dc9e:	f7f4 fb7f 	bl	80023a0 <__aeabi_dsub>
 800dca2:	0032      	movs	r2, r6
 800dca4:	003b      	movs	r3, r7
 800dca6:	f7f4 f8fb 	bl	8001ea0 <__aeabi_dmul>
 800dcaa:	4a37      	ldr	r2, [pc, #220]	; (800dd88 <__kernel_sin+0x138>)
 800dcac:	4b37      	ldr	r3, [pc, #220]	; (800dd8c <__kernel_sin+0x13c>)
 800dcae:	f7f3 f9b3 	bl	8001018 <__aeabi_dadd>
 800dcb2:	0032      	movs	r2, r6
 800dcb4:	003b      	movs	r3, r7
 800dcb6:	f7f4 f8f3 	bl	8001ea0 <__aeabi_dmul>
 800dcba:	4a35      	ldr	r2, [pc, #212]	; (800dd90 <__kernel_sin+0x140>)
 800dcbc:	4b35      	ldr	r3, [pc, #212]	; (800dd94 <__kernel_sin+0x144>)
 800dcbe:	f7f4 fb6f 	bl	80023a0 <__aeabi_dsub>
 800dcc2:	0032      	movs	r2, r6
 800dcc4:	003b      	movs	r3, r7
 800dcc6:	f7f4 f8eb 	bl	8001ea0 <__aeabi_dmul>
 800dcca:	4b33      	ldr	r3, [pc, #204]	; (800dd98 <__kernel_sin+0x148>)
 800dccc:	4a33      	ldr	r2, [pc, #204]	; (800dd9c <__kernel_sin+0x14c>)
 800dcce:	f7f3 f9a3 	bl	8001018 <__aeabi_dadd>
 800dcd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcd4:	9004      	str	r0, [sp, #16]
 800dcd6:	9105      	str	r1, [sp, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d119      	bne.n	800dd10 <__kernel_sin+0xc0>
 800dcdc:	0002      	movs	r2, r0
 800dcde:	000b      	movs	r3, r1
 800dce0:	0030      	movs	r0, r6
 800dce2:	0039      	movs	r1, r7
 800dce4:	f7f4 f8dc 	bl	8001ea0 <__aeabi_dmul>
 800dce8:	4a2d      	ldr	r2, [pc, #180]	; (800dda0 <__kernel_sin+0x150>)
 800dcea:	4b2e      	ldr	r3, [pc, #184]	; (800dda4 <__kernel_sin+0x154>)
 800dcec:	f7f4 fb58 	bl	80023a0 <__aeabi_dsub>
 800dcf0:	9a00      	ldr	r2, [sp, #0]
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	f7f4 f8d4 	bl	8001ea0 <__aeabi_dmul>
 800dcf8:	0002      	movs	r2, r0
 800dcfa:	000b      	movs	r3, r1
 800dcfc:	0028      	movs	r0, r5
 800dcfe:	0021      	movs	r1, r4
 800dd00:	f7f3 f98a 	bl	8001018 <__aeabi_dadd>
 800dd04:	0005      	movs	r5, r0
 800dd06:	000c      	movs	r4, r1
 800dd08:	0028      	movs	r0, r5
 800dd0a:	0021      	movs	r1, r4
 800dd0c:	b009      	add	sp, #36	; 0x24
 800dd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd10:	2200      	movs	r2, #0
 800dd12:	9802      	ldr	r0, [sp, #8]
 800dd14:	9903      	ldr	r1, [sp, #12]
 800dd16:	4b24      	ldr	r3, [pc, #144]	; (800dda8 <__kernel_sin+0x158>)
 800dd18:	f7f4 f8c2 	bl	8001ea0 <__aeabi_dmul>
 800dd1c:	9a04      	ldr	r2, [sp, #16]
 800dd1e:	9b05      	ldr	r3, [sp, #20]
 800dd20:	9006      	str	r0, [sp, #24]
 800dd22:	9107      	str	r1, [sp, #28]
 800dd24:	9800      	ldr	r0, [sp, #0]
 800dd26:	9901      	ldr	r1, [sp, #4]
 800dd28:	f7f4 f8ba 	bl	8001ea0 <__aeabi_dmul>
 800dd2c:	0002      	movs	r2, r0
 800dd2e:	000b      	movs	r3, r1
 800dd30:	9806      	ldr	r0, [sp, #24]
 800dd32:	9907      	ldr	r1, [sp, #28]
 800dd34:	f7f4 fb34 	bl	80023a0 <__aeabi_dsub>
 800dd38:	0032      	movs	r2, r6
 800dd3a:	003b      	movs	r3, r7
 800dd3c:	f7f4 f8b0 	bl	8001ea0 <__aeabi_dmul>
 800dd40:	9a02      	ldr	r2, [sp, #8]
 800dd42:	9b03      	ldr	r3, [sp, #12]
 800dd44:	f7f4 fb2c 	bl	80023a0 <__aeabi_dsub>
 800dd48:	4a15      	ldr	r2, [pc, #84]	; (800dda0 <__kernel_sin+0x150>)
 800dd4a:	0006      	movs	r6, r0
 800dd4c:	000f      	movs	r7, r1
 800dd4e:	9800      	ldr	r0, [sp, #0]
 800dd50:	9901      	ldr	r1, [sp, #4]
 800dd52:	4b14      	ldr	r3, [pc, #80]	; (800dda4 <__kernel_sin+0x154>)
 800dd54:	f7f4 f8a4 	bl	8001ea0 <__aeabi_dmul>
 800dd58:	0002      	movs	r2, r0
 800dd5a:	000b      	movs	r3, r1
 800dd5c:	0030      	movs	r0, r6
 800dd5e:	0039      	movs	r1, r7
 800dd60:	f7f3 f95a 	bl	8001018 <__aeabi_dadd>
 800dd64:	0002      	movs	r2, r0
 800dd66:	000b      	movs	r3, r1
 800dd68:	0028      	movs	r0, r5
 800dd6a:	0021      	movs	r1, r4
 800dd6c:	f7f4 fb18 	bl	80023a0 <__aeabi_dsub>
 800dd70:	e7c8      	b.n	800dd04 <__kernel_sin+0xb4>
 800dd72:	46c0      	nop			; (mov r8, r8)
 800dd74:	3e3fffff 	.word	0x3e3fffff
 800dd78:	5acfd57c 	.word	0x5acfd57c
 800dd7c:	3de5d93a 	.word	0x3de5d93a
 800dd80:	8a2b9ceb 	.word	0x8a2b9ceb
 800dd84:	3e5ae5e6 	.word	0x3e5ae5e6
 800dd88:	57b1fe7d 	.word	0x57b1fe7d
 800dd8c:	3ec71de3 	.word	0x3ec71de3
 800dd90:	19c161d5 	.word	0x19c161d5
 800dd94:	3f2a01a0 	.word	0x3f2a01a0
 800dd98:	3f811111 	.word	0x3f811111
 800dd9c:	1110f8a6 	.word	0x1110f8a6
 800dda0:	55555549 	.word	0x55555549
 800dda4:	3fc55555 	.word	0x3fc55555
 800dda8:	3fe00000 	.word	0x3fe00000

0800ddac <atan>:
 800ddac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddae:	4b9c      	ldr	r3, [pc, #624]	; (800e020 <atan+0x274>)
 800ddb0:	b085      	sub	sp, #20
 800ddb2:	004e      	lsls	r6, r1, #1
 800ddb4:	0004      	movs	r4, r0
 800ddb6:	000d      	movs	r5, r1
 800ddb8:	9103      	str	r1, [sp, #12]
 800ddba:	0876      	lsrs	r6, r6, #1
 800ddbc:	429e      	cmp	r6, r3
 800ddbe:	dd18      	ble.n	800ddf2 <atan+0x46>
 800ddc0:	4b98      	ldr	r3, [pc, #608]	; (800e024 <atan+0x278>)
 800ddc2:	429e      	cmp	r6, r3
 800ddc4:	dc02      	bgt.n	800ddcc <atan+0x20>
 800ddc6:	d10a      	bne.n	800ddde <atan+0x32>
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d008      	beq.n	800ddde <atan+0x32>
 800ddcc:	0022      	movs	r2, r4
 800ddce:	002b      	movs	r3, r5
 800ddd0:	0020      	movs	r0, r4
 800ddd2:	0029      	movs	r1, r5
 800ddd4:	f7f3 f920 	bl	8001018 <__aeabi_dadd>
 800ddd8:	0004      	movs	r4, r0
 800ddda:	000d      	movs	r5, r1
 800dddc:	e005      	b.n	800ddea <atan+0x3e>
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	4c91      	ldr	r4, [pc, #580]	; (800e028 <atan+0x27c>)
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	dd00      	ble.n	800dde8 <atan+0x3c>
 800dde6:	e118      	b.n	800e01a <atan+0x26e>
 800dde8:	4d90      	ldr	r5, [pc, #576]	; (800e02c <atan+0x280>)
 800ddea:	0020      	movs	r0, r4
 800ddec:	0029      	movs	r1, r5
 800ddee:	b005      	add	sp, #20
 800ddf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf2:	4b8f      	ldr	r3, [pc, #572]	; (800e030 <atan+0x284>)
 800ddf4:	429e      	cmp	r6, r3
 800ddf6:	dc0f      	bgt.n	800de18 <atan+0x6c>
 800ddf8:	4b8e      	ldr	r3, [pc, #568]	; (800e034 <atan+0x288>)
 800ddfa:	429e      	cmp	r6, r3
 800ddfc:	dc09      	bgt.n	800de12 <atan+0x66>
 800ddfe:	4a8e      	ldr	r2, [pc, #568]	; (800e038 <atan+0x28c>)
 800de00:	4b8e      	ldr	r3, [pc, #568]	; (800e03c <atan+0x290>)
 800de02:	f7f3 f909 	bl	8001018 <__aeabi_dadd>
 800de06:	2200      	movs	r2, #0
 800de08:	4b8d      	ldr	r3, [pc, #564]	; (800e040 <atan+0x294>)
 800de0a:	f7f2 fb41 	bl	8000490 <__aeabi_dcmpgt>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d1eb      	bne.n	800ddea <atan+0x3e>
 800de12:	2301      	movs	r3, #1
 800de14:	425b      	negs	r3, r3
 800de16:	e025      	b.n	800de64 <atan+0xb8>
 800de18:	f000 f950 	bl	800e0bc <fabs>
 800de1c:	4b89      	ldr	r3, [pc, #548]	; (800e044 <atan+0x298>)
 800de1e:	0004      	movs	r4, r0
 800de20:	000d      	movs	r5, r1
 800de22:	429e      	cmp	r6, r3
 800de24:	dd00      	ble.n	800de28 <atan+0x7c>
 800de26:	e0aa      	b.n	800df7e <atan+0x1d2>
 800de28:	4b87      	ldr	r3, [pc, #540]	; (800e048 <atan+0x29c>)
 800de2a:	429e      	cmp	r6, r3
 800de2c:	dd00      	ble.n	800de30 <atan+0x84>
 800de2e:	e090      	b.n	800df52 <atan+0x1a6>
 800de30:	0002      	movs	r2, r0
 800de32:	000b      	movs	r3, r1
 800de34:	f7f3 f8f0 	bl	8001018 <__aeabi_dadd>
 800de38:	2200      	movs	r2, #0
 800de3a:	4b81      	ldr	r3, [pc, #516]	; (800e040 <atan+0x294>)
 800de3c:	f7f4 fab0 	bl	80023a0 <__aeabi_dsub>
 800de40:	2380      	movs	r3, #128	; 0x80
 800de42:	0006      	movs	r6, r0
 800de44:	000f      	movs	r7, r1
 800de46:	2200      	movs	r2, #0
 800de48:	05db      	lsls	r3, r3, #23
 800de4a:	0020      	movs	r0, r4
 800de4c:	0029      	movs	r1, r5
 800de4e:	f7f3 f8e3 	bl	8001018 <__aeabi_dadd>
 800de52:	000b      	movs	r3, r1
 800de54:	0002      	movs	r2, r0
 800de56:	0039      	movs	r1, r7
 800de58:	0030      	movs	r0, r6
 800de5a:	f7f3 fbed 	bl	8001638 <__aeabi_ddiv>
 800de5e:	2300      	movs	r3, #0
 800de60:	0004      	movs	r4, r0
 800de62:	000d      	movs	r5, r1
 800de64:	9302      	str	r3, [sp, #8]
 800de66:	0022      	movs	r2, r4
 800de68:	002b      	movs	r3, r5
 800de6a:	0020      	movs	r0, r4
 800de6c:	0029      	movs	r1, r5
 800de6e:	f7f4 f817 	bl	8001ea0 <__aeabi_dmul>
 800de72:	0002      	movs	r2, r0
 800de74:	000b      	movs	r3, r1
 800de76:	9000      	str	r0, [sp, #0]
 800de78:	9101      	str	r1, [sp, #4]
 800de7a:	f7f4 f811 	bl	8001ea0 <__aeabi_dmul>
 800de7e:	0006      	movs	r6, r0
 800de80:	000f      	movs	r7, r1
 800de82:	4a72      	ldr	r2, [pc, #456]	; (800e04c <atan+0x2a0>)
 800de84:	4b72      	ldr	r3, [pc, #456]	; (800e050 <atan+0x2a4>)
 800de86:	f7f4 f80b 	bl	8001ea0 <__aeabi_dmul>
 800de8a:	4a72      	ldr	r2, [pc, #456]	; (800e054 <atan+0x2a8>)
 800de8c:	4b72      	ldr	r3, [pc, #456]	; (800e058 <atan+0x2ac>)
 800de8e:	f7f3 f8c3 	bl	8001018 <__aeabi_dadd>
 800de92:	0032      	movs	r2, r6
 800de94:	003b      	movs	r3, r7
 800de96:	f7f4 f803 	bl	8001ea0 <__aeabi_dmul>
 800de9a:	4a70      	ldr	r2, [pc, #448]	; (800e05c <atan+0x2b0>)
 800de9c:	4b70      	ldr	r3, [pc, #448]	; (800e060 <atan+0x2b4>)
 800de9e:	f7f3 f8bb 	bl	8001018 <__aeabi_dadd>
 800dea2:	0032      	movs	r2, r6
 800dea4:	003b      	movs	r3, r7
 800dea6:	f7f3 fffb 	bl	8001ea0 <__aeabi_dmul>
 800deaa:	4a6e      	ldr	r2, [pc, #440]	; (800e064 <atan+0x2b8>)
 800deac:	4b6e      	ldr	r3, [pc, #440]	; (800e068 <atan+0x2bc>)
 800deae:	f7f3 f8b3 	bl	8001018 <__aeabi_dadd>
 800deb2:	0032      	movs	r2, r6
 800deb4:	003b      	movs	r3, r7
 800deb6:	f7f3 fff3 	bl	8001ea0 <__aeabi_dmul>
 800deba:	4a6c      	ldr	r2, [pc, #432]	; (800e06c <atan+0x2c0>)
 800debc:	4b6c      	ldr	r3, [pc, #432]	; (800e070 <atan+0x2c4>)
 800debe:	f7f3 f8ab 	bl	8001018 <__aeabi_dadd>
 800dec2:	0032      	movs	r2, r6
 800dec4:	003b      	movs	r3, r7
 800dec6:	f7f3 ffeb 	bl	8001ea0 <__aeabi_dmul>
 800deca:	4a6a      	ldr	r2, [pc, #424]	; (800e074 <atan+0x2c8>)
 800decc:	4b6a      	ldr	r3, [pc, #424]	; (800e078 <atan+0x2cc>)
 800dece:	f7f3 f8a3 	bl	8001018 <__aeabi_dadd>
 800ded2:	9a00      	ldr	r2, [sp, #0]
 800ded4:	9b01      	ldr	r3, [sp, #4]
 800ded6:	f7f3 ffe3 	bl	8001ea0 <__aeabi_dmul>
 800deda:	4a68      	ldr	r2, [pc, #416]	; (800e07c <atan+0x2d0>)
 800dedc:	9000      	str	r0, [sp, #0]
 800dede:	9101      	str	r1, [sp, #4]
 800dee0:	4b67      	ldr	r3, [pc, #412]	; (800e080 <atan+0x2d4>)
 800dee2:	0030      	movs	r0, r6
 800dee4:	0039      	movs	r1, r7
 800dee6:	f7f3 ffdb 	bl	8001ea0 <__aeabi_dmul>
 800deea:	4a66      	ldr	r2, [pc, #408]	; (800e084 <atan+0x2d8>)
 800deec:	4b66      	ldr	r3, [pc, #408]	; (800e088 <atan+0x2dc>)
 800deee:	f7f4 fa57 	bl	80023a0 <__aeabi_dsub>
 800def2:	0032      	movs	r2, r6
 800def4:	003b      	movs	r3, r7
 800def6:	f7f3 ffd3 	bl	8001ea0 <__aeabi_dmul>
 800defa:	4a64      	ldr	r2, [pc, #400]	; (800e08c <atan+0x2e0>)
 800defc:	4b64      	ldr	r3, [pc, #400]	; (800e090 <atan+0x2e4>)
 800defe:	f7f4 fa4f 	bl	80023a0 <__aeabi_dsub>
 800df02:	0032      	movs	r2, r6
 800df04:	003b      	movs	r3, r7
 800df06:	f7f3 ffcb 	bl	8001ea0 <__aeabi_dmul>
 800df0a:	4a62      	ldr	r2, [pc, #392]	; (800e094 <atan+0x2e8>)
 800df0c:	4b62      	ldr	r3, [pc, #392]	; (800e098 <atan+0x2ec>)
 800df0e:	f7f4 fa47 	bl	80023a0 <__aeabi_dsub>
 800df12:	0032      	movs	r2, r6
 800df14:	003b      	movs	r3, r7
 800df16:	f7f3 ffc3 	bl	8001ea0 <__aeabi_dmul>
 800df1a:	4a60      	ldr	r2, [pc, #384]	; (800e09c <atan+0x2f0>)
 800df1c:	4b60      	ldr	r3, [pc, #384]	; (800e0a0 <atan+0x2f4>)
 800df1e:	f7f4 fa3f 	bl	80023a0 <__aeabi_dsub>
 800df22:	0032      	movs	r2, r6
 800df24:	003b      	movs	r3, r7
 800df26:	f7f3 ffbb 	bl	8001ea0 <__aeabi_dmul>
 800df2a:	000b      	movs	r3, r1
 800df2c:	9902      	ldr	r1, [sp, #8]
 800df2e:	0002      	movs	r2, r0
 800df30:	3101      	adds	r1, #1
 800df32:	d14b      	bne.n	800dfcc <atan+0x220>
 800df34:	9800      	ldr	r0, [sp, #0]
 800df36:	9901      	ldr	r1, [sp, #4]
 800df38:	f7f3 f86e 	bl	8001018 <__aeabi_dadd>
 800df3c:	0022      	movs	r2, r4
 800df3e:	002b      	movs	r3, r5
 800df40:	f7f3 ffae 	bl	8001ea0 <__aeabi_dmul>
 800df44:	0002      	movs	r2, r0
 800df46:	000b      	movs	r3, r1
 800df48:	0020      	movs	r0, r4
 800df4a:	0029      	movs	r1, r5
 800df4c:	f7f4 fa28 	bl	80023a0 <__aeabi_dsub>
 800df50:	e742      	b.n	800ddd8 <atan+0x2c>
 800df52:	2200      	movs	r2, #0
 800df54:	4b3a      	ldr	r3, [pc, #232]	; (800e040 <atan+0x294>)
 800df56:	f7f4 fa23 	bl	80023a0 <__aeabi_dsub>
 800df5a:	2200      	movs	r2, #0
 800df5c:	0006      	movs	r6, r0
 800df5e:	000f      	movs	r7, r1
 800df60:	4b37      	ldr	r3, [pc, #220]	; (800e040 <atan+0x294>)
 800df62:	0020      	movs	r0, r4
 800df64:	0029      	movs	r1, r5
 800df66:	f7f3 f857 	bl	8001018 <__aeabi_dadd>
 800df6a:	000b      	movs	r3, r1
 800df6c:	0002      	movs	r2, r0
 800df6e:	0039      	movs	r1, r7
 800df70:	0030      	movs	r0, r6
 800df72:	f7f3 fb61 	bl	8001638 <__aeabi_ddiv>
 800df76:	2301      	movs	r3, #1
 800df78:	0004      	movs	r4, r0
 800df7a:	000d      	movs	r5, r1
 800df7c:	e772      	b.n	800de64 <atan+0xb8>
 800df7e:	4b49      	ldr	r3, [pc, #292]	; (800e0a4 <atan+0x2f8>)
 800df80:	429e      	cmp	r6, r3
 800df82:	dc19      	bgt.n	800dfb8 <atan+0x20c>
 800df84:	2200      	movs	r2, #0
 800df86:	4b48      	ldr	r3, [pc, #288]	; (800e0a8 <atan+0x2fc>)
 800df88:	f7f4 fa0a 	bl	80023a0 <__aeabi_dsub>
 800df8c:	2200      	movs	r2, #0
 800df8e:	0006      	movs	r6, r0
 800df90:	000f      	movs	r7, r1
 800df92:	4b45      	ldr	r3, [pc, #276]	; (800e0a8 <atan+0x2fc>)
 800df94:	0020      	movs	r0, r4
 800df96:	0029      	movs	r1, r5
 800df98:	f7f3 ff82 	bl	8001ea0 <__aeabi_dmul>
 800df9c:	2200      	movs	r2, #0
 800df9e:	4b28      	ldr	r3, [pc, #160]	; (800e040 <atan+0x294>)
 800dfa0:	f7f3 f83a 	bl	8001018 <__aeabi_dadd>
 800dfa4:	000b      	movs	r3, r1
 800dfa6:	0002      	movs	r2, r0
 800dfa8:	0039      	movs	r1, r7
 800dfaa:	0030      	movs	r0, r6
 800dfac:	f7f3 fb44 	bl	8001638 <__aeabi_ddiv>
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	0004      	movs	r4, r0
 800dfb4:	000d      	movs	r5, r1
 800dfb6:	e755      	b.n	800de64 <atan+0xb8>
 800dfb8:	000b      	movs	r3, r1
 800dfba:	0002      	movs	r2, r0
 800dfbc:	493b      	ldr	r1, [pc, #236]	; (800e0ac <atan+0x300>)
 800dfbe:	2000      	movs	r0, #0
 800dfc0:	f7f3 fb3a 	bl	8001638 <__aeabi_ddiv>
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	0004      	movs	r4, r0
 800dfc8:	000d      	movs	r5, r1
 800dfca:	e74b      	b.n	800de64 <atan+0xb8>
 800dfcc:	9902      	ldr	r1, [sp, #8]
 800dfce:	4f38      	ldr	r7, [pc, #224]	; (800e0b0 <atan+0x304>)
 800dfd0:	00ce      	lsls	r6, r1, #3
 800dfd2:	9800      	ldr	r0, [sp, #0]
 800dfd4:	9901      	ldr	r1, [sp, #4]
 800dfd6:	f7f3 f81f 	bl	8001018 <__aeabi_dadd>
 800dfda:	0022      	movs	r2, r4
 800dfdc:	002b      	movs	r3, r5
 800dfde:	f7f3 ff5f 	bl	8001ea0 <__aeabi_dmul>
 800dfe2:	4b34      	ldr	r3, [pc, #208]	; (800e0b4 <atan+0x308>)
 800dfe4:	19bf      	adds	r7, r7, r6
 800dfe6:	199e      	adds	r6, r3, r6
 800dfe8:	6832      	ldr	r2, [r6, #0]
 800dfea:	6873      	ldr	r3, [r6, #4]
 800dfec:	f7f4 f9d8 	bl	80023a0 <__aeabi_dsub>
 800dff0:	0022      	movs	r2, r4
 800dff2:	002b      	movs	r3, r5
 800dff4:	f7f4 f9d4 	bl	80023a0 <__aeabi_dsub>
 800dff8:	000b      	movs	r3, r1
 800dffa:	0002      	movs	r2, r0
 800dffc:	6838      	ldr	r0, [r7, #0]
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	f7f4 f9ce 	bl	80023a0 <__aeabi_dsub>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	0004      	movs	r4, r0
 800e008:	000d      	movs	r5, r1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	db00      	blt.n	800e010 <atan+0x264>
 800e00e:	e6ec      	b.n	800ddea <atan+0x3e>
 800e010:	2180      	movs	r1, #128	; 0x80
 800e012:	0609      	lsls	r1, r1, #24
 800e014:	186b      	adds	r3, r5, r1
 800e016:	001d      	movs	r5, r3
 800e018:	e6e7      	b.n	800ddea <atan+0x3e>
 800e01a:	4d27      	ldr	r5, [pc, #156]	; (800e0b8 <atan+0x30c>)
 800e01c:	e6e5      	b.n	800ddea <atan+0x3e>
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	440fffff 	.word	0x440fffff
 800e024:	7ff00000 	.word	0x7ff00000
 800e028:	54442d18 	.word	0x54442d18
 800e02c:	bff921fb 	.word	0xbff921fb
 800e030:	3fdbffff 	.word	0x3fdbffff
 800e034:	3e1fffff 	.word	0x3e1fffff
 800e038:	8800759c 	.word	0x8800759c
 800e03c:	7e37e43c 	.word	0x7e37e43c
 800e040:	3ff00000 	.word	0x3ff00000
 800e044:	3ff2ffff 	.word	0x3ff2ffff
 800e048:	3fe5ffff 	.word	0x3fe5ffff
 800e04c:	e322da11 	.word	0xe322da11
 800e050:	3f90ad3a 	.word	0x3f90ad3a
 800e054:	24760deb 	.word	0x24760deb
 800e058:	3fa97b4b 	.word	0x3fa97b4b
 800e05c:	a0d03d51 	.word	0xa0d03d51
 800e060:	3fb10d66 	.word	0x3fb10d66
 800e064:	c54c206e 	.word	0xc54c206e
 800e068:	3fb745cd 	.word	0x3fb745cd
 800e06c:	920083ff 	.word	0x920083ff
 800e070:	3fc24924 	.word	0x3fc24924
 800e074:	5555550d 	.word	0x5555550d
 800e078:	3fd55555 	.word	0x3fd55555
 800e07c:	2c6a6c2f 	.word	0x2c6a6c2f
 800e080:	bfa2b444 	.word	0xbfa2b444
 800e084:	52defd9a 	.word	0x52defd9a
 800e088:	3fadde2d 	.word	0x3fadde2d
 800e08c:	af749a6d 	.word	0xaf749a6d
 800e090:	3fb3b0f2 	.word	0x3fb3b0f2
 800e094:	fe231671 	.word	0xfe231671
 800e098:	3fbc71c6 	.word	0x3fbc71c6
 800e09c:	9998ebc4 	.word	0x9998ebc4
 800e0a0:	3fc99999 	.word	0x3fc99999
 800e0a4:	40037fff 	.word	0x40037fff
 800e0a8:	3ff80000 	.word	0x3ff80000
 800e0ac:	bff00000 	.word	0xbff00000
 800e0b0:	0800fcc0 	.word	0x0800fcc0
 800e0b4:	0800fce0 	.word	0x0800fce0
 800e0b8:	3ff921fb 	.word	0x3ff921fb

0800e0bc <fabs>:
 800e0bc:	0049      	lsls	r1, r1, #1
 800e0be:	084b      	lsrs	r3, r1, #1
 800e0c0:	0019      	movs	r1, r3
 800e0c2:	4770      	bx	lr

0800e0c4 <floor>:
 800e0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0c6:	004b      	lsls	r3, r1, #1
 800e0c8:	4a39      	ldr	r2, [pc, #228]	; (800e1b0 <floor+0xec>)
 800e0ca:	0d5b      	lsrs	r3, r3, #21
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	189e      	adds	r6, r3, r2
 800e0d0:	9003      	str	r0, [sp, #12]
 800e0d2:	000c      	movs	r4, r1
 800e0d4:	0005      	movs	r5, r0
 800e0d6:	2e13      	cmp	r6, #19
 800e0d8:	dc34      	bgt.n	800e144 <floor+0x80>
 800e0da:	2e00      	cmp	r6, #0
 800e0dc:	da15      	bge.n	800e10a <floor+0x46>
 800e0de:	4a35      	ldr	r2, [pc, #212]	; (800e1b4 <floor+0xf0>)
 800e0e0:	4b35      	ldr	r3, [pc, #212]	; (800e1b8 <floor+0xf4>)
 800e0e2:	f7f2 ff99 	bl	8001018 <__aeabi_dadd>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f7f2 f9d1 	bl	8000490 <__aeabi_dcmpgt>
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d008      	beq.n	800e104 <floor+0x40>
 800e0f2:	2c00      	cmp	r4, #0
 800e0f4:	da59      	bge.n	800e1aa <floor+0xe6>
 800e0f6:	0063      	lsls	r3, r4, #1
 800e0f8:	085b      	lsrs	r3, r3, #1
 800e0fa:	432b      	orrs	r3, r5
 800e0fc:	2500      	movs	r5, #0
 800e0fe:	42ab      	cmp	r3, r5
 800e100:	d000      	beq.n	800e104 <floor+0x40>
 800e102:	4c2e      	ldr	r4, [pc, #184]	; (800e1bc <floor+0xf8>)
 800e104:	0028      	movs	r0, r5
 800e106:	0021      	movs	r1, r4
 800e108:	e026      	b.n	800e158 <floor+0x94>
 800e10a:	4f2d      	ldr	r7, [pc, #180]	; (800e1c0 <floor+0xfc>)
 800e10c:	4137      	asrs	r7, r6
 800e10e:	003b      	movs	r3, r7
 800e110:	400b      	ands	r3, r1
 800e112:	4303      	orrs	r3, r0
 800e114:	d020      	beq.n	800e158 <floor+0x94>
 800e116:	9000      	str	r0, [sp, #0]
 800e118:	9101      	str	r1, [sp, #4]
 800e11a:	4a26      	ldr	r2, [pc, #152]	; (800e1b4 <floor+0xf0>)
 800e11c:	4b26      	ldr	r3, [pc, #152]	; (800e1b8 <floor+0xf4>)
 800e11e:	9800      	ldr	r0, [sp, #0]
 800e120:	9901      	ldr	r1, [sp, #4]
 800e122:	f7f2 ff79 	bl	8001018 <__aeabi_dadd>
 800e126:	2200      	movs	r2, #0
 800e128:	2300      	movs	r3, #0
 800e12a:	f7f2 f9b1 	bl	8000490 <__aeabi_dcmpgt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0e8      	beq.n	800e104 <floor+0x40>
 800e132:	2c00      	cmp	r4, #0
 800e134:	da03      	bge.n	800e13e <floor+0x7a>
 800e136:	2380      	movs	r3, #128	; 0x80
 800e138:	035b      	lsls	r3, r3, #13
 800e13a:	4133      	asrs	r3, r6
 800e13c:	18e4      	adds	r4, r4, r3
 800e13e:	43bc      	bics	r4, r7
 800e140:	2500      	movs	r5, #0
 800e142:	e7df      	b.n	800e104 <floor+0x40>
 800e144:	2e33      	cmp	r6, #51	; 0x33
 800e146:	dd09      	ble.n	800e15c <floor+0x98>
 800e148:	2380      	movs	r3, #128	; 0x80
 800e14a:	00db      	lsls	r3, r3, #3
 800e14c:	429e      	cmp	r6, r3
 800e14e:	d103      	bne.n	800e158 <floor+0x94>
 800e150:	0002      	movs	r2, r0
 800e152:	000b      	movs	r3, r1
 800e154:	f7f2 ff60 	bl	8001018 <__aeabi_dadd>
 800e158:	b005      	add	sp, #20
 800e15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e15c:	2701      	movs	r7, #1
 800e15e:	4a19      	ldr	r2, [pc, #100]	; (800e1c4 <floor+0x100>)
 800e160:	427f      	negs	r7, r7
 800e162:	189b      	adds	r3, r3, r2
 800e164:	40df      	lsrs	r7, r3
 800e166:	4207      	tst	r7, r0
 800e168:	d0f6      	beq.n	800e158 <floor+0x94>
 800e16a:	9000      	str	r0, [sp, #0]
 800e16c:	9101      	str	r1, [sp, #4]
 800e16e:	4a11      	ldr	r2, [pc, #68]	; (800e1b4 <floor+0xf0>)
 800e170:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <floor+0xf4>)
 800e172:	9800      	ldr	r0, [sp, #0]
 800e174:	9901      	ldr	r1, [sp, #4]
 800e176:	f7f2 ff4f 	bl	8001018 <__aeabi_dadd>
 800e17a:	2200      	movs	r2, #0
 800e17c:	2300      	movs	r3, #0
 800e17e:	f7f2 f987 	bl	8000490 <__aeabi_dcmpgt>
 800e182:	2800      	cmp	r0, #0
 800e184:	d0be      	beq.n	800e104 <floor+0x40>
 800e186:	2c00      	cmp	r4, #0
 800e188:	da02      	bge.n	800e190 <floor+0xcc>
 800e18a:	2e14      	cmp	r6, #20
 800e18c:	d102      	bne.n	800e194 <floor+0xd0>
 800e18e:	3401      	adds	r4, #1
 800e190:	43bd      	bics	r5, r7
 800e192:	e7b7      	b.n	800e104 <floor+0x40>
 800e194:	2334      	movs	r3, #52	; 0x34
 800e196:	1b9e      	subs	r6, r3, r6
 800e198:	3b33      	subs	r3, #51	; 0x33
 800e19a:	40b3      	lsls	r3, r6
 800e19c:	18ed      	adds	r5, r5, r3
 800e19e:	9b03      	ldr	r3, [sp, #12]
 800e1a0:	429d      	cmp	r5, r3
 800e1a2:	419b      	sbcs	r3, r3
 800e1a4:	425b      	negs	r3, r3
 800e1a6:	18e4      	adds	r4, r4, r3
 800e1a8:	e7f2      	b.n	800e190 <floor+0xcc>
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	002c      	movs	r4, r5
 800e1ae:	e7a9      	b.n	800e104 <floor+0x40>
 800e1b0:	fffffc01 	.word	0xfffffc01
 800e1b4:	8800759c 	.word	0x8800759c
 800e1b8:	7e37e43c 	.word	0x7e37e43c
 800e1bc:	bff00000 	.word	0xbff00000
 800e1c0:	000fffff 	.word	0x000fffff
 800e1c4:	fffffbed 	.word	0xfffffbed

0800e1c8 <matherr>:
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	4770      	bx	lr

0800e1cc <nan>:
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	4901      	ldr	r1, [pc, #4]	; (800e1d4 <nan+0x8>)
 800e1d0:	4770      	bx	lr
 800e1d2:	46c0      	nop			; (mov r8, r8)
 800e1d4:	7ff80000 	.word	0x7ff80000

0800e1d8 <scalbn>:
 800e1d8:	004b      	lsls	r3, r1, #1
 800e1da:	b570      	push	{r4, r5, r6, lr}
 800e1dc:	0d5b      	lsrs	r3, r3, #21
 800e1de:	0014      	movs	r4, r2
 800e1e0:	000a      	movs	r2, r1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10e      	bne.n	800e204 <scalbn+0x2c>
 800e1e6:	004b      	lsls	r3, r1, #1
 800e1e8:	085b      	lsrs	r3, r3, #1
 800e1ea:	4303      	orrs	r3, r0
 800e1ec:	d011      	beq.n	800e212 <scalbn+0x3a>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4b20      	ldr	r3, [pc, #128]	; (800e274 <scalbn+0x9c>)
 800e1f2:	f7f3 fe55 	bl	8001ea0 <__aeabi_dmul>
 800e1f6:	4b20      	ldr	r3, [pc, #128]	; (800e278 <scalbn+0xa0>)
 800e1f8:	000a      	movs	r2, r1
 800e1fa:	429c      	cmp	r4, r3
 800e1fc:	da0a      	bge.n	800e214 <scalbn+0x3c>
 800e1fe:	4a1f      	ldr	r2, [pc, #124]	; (800e27c <scalbn+0xa4>)
 800e200:	4b1f      	ldr	r3, [pc, #124]	; (800e280 <scalbn+0xa8>)
 800e202:	e016      	b.n	800e232 <scalbn+0x5a>
 800e204:	4d1f      	ldr	r5, [pc, #124]	; (800e284 <scalbn+0xac>)
 800e206:	42ab      	cmp	r3, r5
 800e208:	d107      	bne.n	800e21a <scalbn+0x42>
 800e20a:	0002      	movs	r2, r0
 800e20c:	000b      	movs	r3, r1
 800e20e:	f7f2 ff03 	bl	8001018 <__aeabi_dadd>
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	004b      	lsls	r3, r1, #1
 800e216:	0d5b      	lsrs	r3, r3, #21
 800e218:	3b36      	subs	r3, #54	; 0x36
 800e21a:	4d1b      	ldr	r5, [pc, #108]	; (800e288 <scalbn+0xb0>)
 800e21c:	18e3      	adds	r3, r4, r3
 800e21e:	42ab      	cmp	r3, r5
 800e220:	dd0a      	ble.n	800e238 <scalbn+0x60>
 800e222:	0002      	movs	r2, r0
 800e224:	000b      	movs	r3, r1
 800e226:	4819      	ldr	r0, [pc, #100]	; (800e28c <scalbn+0xb4>)
 800e228:	4919      	ldr	r1, [pc, #100]	; (800e290 <scalbn+0xb8>)
 800e22a:	f000 f839 	bl	800e2a0 <copysign>
 800e22e:	4a17      	ldr	r2, [pc, #92]	; (800e28c <scalbn+0xb4>)
 800e230:	4b17      	ldr	r3, [pc, #92]	; (800e290 <scalbn+0xb8>)
 800e232:	f7f3 fe35 	bl	8001ea0 <__aeabi_dmul>
 800e236:	e7ec      	b.n	800e212 <scalbn+0x3a>
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dd05      	ble.n	800e248 <scalbn+0x70>
 800e23c:	4c15      	ldr	r4, [pc, #84]	; (800e294 <scalbn+0xbc>)
 800e23e:	051b      	lsls	r3, r3, #20
 800e240:	4022      	ands	r2, r4
 800e242:	431a      	orrs	r2, r3
 800e244:	0011      	movs	r1, r2
 800e246:	e7e4      	b.n	800e212 <scalbn+0x3a>
 800e248:	001d      	movs	r5, r3
 800e24a:	3535      	adds	r5, #53	; 0x35
 800e24c:	da09      	bge.n	800e262 <scalbn+0x8a>
 800e24e:	4b12      	ldr	r3, [pc, #72]	; (800e298 <scalbn+0xc0>)
 800e250:	0002      	movs	r2, r0
 800e252:	429c      	cmp	r4, r3
 800e254:	dce6      	bgt.n	800e224 <scalbn+0x4c>
 800e256:	000b      	movs	r3, r1
 800e258:	4808      	ldr	r0, [pc, #32]	; (800e27c <scalbn+0xa4>)
 800e25a:	4909      	ldr	r1, [pc, #36]	; (800e280 <scalbn+0xa8>)
 800e25c:	f000 f820 	bl	800e2a0 <copysign>
 800e260:	e7cd      	b.n	800e1fe <scalbn+0x26>
 800e262:	4c0c      	ldr	r4, [pc, #48]	; (800e294 <scalbn+0xbc>)
 800e264:	3336      	adds	r3, #54	; 0x36
 800e266:	4022      	ands	r2, r4
 800e268:	051b      	lsls	r3, r3, #20
 800e26a:	4313      	orrs	r3, r2
 800e26c:	0019      	movs	r1, r3
 800e26e:	2200      	movs	r2, #0
 800e270:	4b0a      	ldr	r3, [pc, #40]	; (800e29c <scalbn+0xc4>)
 800e272:	e7de      	b.n	800e232 <scalbn+0x5a>
 800e274:	43500000 	.word	0x43500000
 800e278:	ffff3cb0 	.word	0xffff3cb0
 800e27c:	c2f8f359 	.word	0xc2f8f359
 800e280:	01a56e1f 	.word	0x01a56e1f
 800e284:	000007ff 	.word	0x000007ff
 800e288:	000007fe 	.word	0x000007fe
 800e28c:	8800759c 	.word	0x8800759c
 800e290:	7e37e43c 	.word	0x7e37e43c
 800e294:	800fffff 	.word	0x800fffff
 800e298:	0000c350 	.word	0x0000c350
 800e29c:	3c900000 	.word	0x3c900000

0800e2a0 <copysign>:
 800e2a0:	b530      	push	{r4, r5, lr}
 800e2a2:	004a      	lsls	r2, r1, #1
 800e2a4:	0fdb      	lsrs	r3, r3, #31
 800e2a6:	07db      	lsls	r3, r3, #31
 800e2a8:	0852      	lsrs	r2, r2, #1
 800e2aa:	431a      	orrs	r2, r3
 800e2ac:	0011      	movs	r1, r2
 800e2ae:	bd30      	pop	{r4, r5, pc}

0800e2b0 <_init>:
 800e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b2:	46c0      	nop			; (mov r8, r8)
 800e2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2b6:	bc08      	pop	{r3}
 800e2b8:	469e      	mov	lr, r3
 800e2ba:	4770      	bx	lr

0800e2bc <_fini>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	46c0      	nop			; (mov r8, r8)
 800e2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2c2:	bc08      	pop	{r3}
 800e2c4:	469e      	mov	lr, r3
 800e2c6:	4770      	bx	lr
